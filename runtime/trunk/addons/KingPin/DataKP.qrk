QQRKSRC1
// Kingpin definition file for Quark

//$Header$
// ----------- REVISION HISTORY ------------
//$Log$
//Revision 1.7  2008/02/27 00:23:21  danielpharos
//Fix the contextual help files not being found anymore
//
//Revision 1.6  2005/10/15 01:00:25  cdunde
//To reinstate headers and history
//
//Revision 1.3  2002/04/07 12:45:31  decker_dk
//Purified texture-flags
//
//Revision 1.2  2001/03/20 21:57:21  decker_dk
//Added log-header / misc.
//
//Revision 1.1  2001/02/11 11:33:02  decker_dk
//Moved from addons directory
//
//Revision 1.3  2000/06/04 16:03:45  alexander
//added: origin and trigger poly includes
//changed: generate trigger poly for brush entities and origin/default bush pair for rot ents
//changed: improved enum property form for models (useful for the many prop entitities)
//changed: pack texture list
//
//Revision 1.2  2000/04/26 01:58:17  alexander
//cleanup of texture flag form and added some hint texts
//added color picker for _color specifics
//removed _light specific from lights
//assigned origin texture to default brushes of rotating entities
//
//
//template 2000-06-04
//

{
  QuArKProtected = "1"
  Description = "Base KingPin data"

  KingPin setup.qctx =
  {
    Game = "KingPin"
    HTML = "index.html"

    SFSkills = '256 512 1024 2048'
    TextureFlags:form =     // a form for setting flags on polyhedron faces

//Decker 2002-04-07: Say what? Does KingPin use the same liblist.gam file as Half-Life does? I think not.
//  CreateFiles: =
//  {
//    liblist.gam =
//    {
//      Data = "game "$22"tmpQuArK"$220D0A"gamedll "$22"..\main\gamex86.dll"$22
//       $0D0A".\main\gamex86.dll"$0D0A
//    }
//  }

    {
      Style = "5"
      Reset: =
      {
        Cap = "Reset to default"
        Typ = "B"
        Hint = "Reset all flags to the texture's default"
        Delete: =
        {
          Flags = ""      // this button deletes these Specifics
          Contents = ""
          Value = ""
        }
      }

      Sep:     ={Txt="" Typ="S"}  // separator

      Contents:={Txt="Brush" Cap="solid"          Typ="X1"         Hint=""}
      Contents:={Txt=""      Cap="window"         Typ="X2"         Hint="translucent (the opposite face of windows are not drawn)"}
      Contents:={Txt=""      Cap="aux"            Typ="X4"         Hint=""}
      Contents:={Txt=""      Cap="lava"           Typ="X8"         Hint="very damaging"}
      Contents:={Txt=""      Cap="slime"          Typ="X16"        Hint="mildly damaging"}
      Contents:={Txt=""      Cap="water"          Typ="X32"        Hint=""}
      Contents:={Txt=""      Cap="mist"           Typ="X64"        Hint="non-solid window (Player can walk through it)"}
      Contents:={Txt=""      Cap="fence"          Typ="X128"       Hint="used together with alpha for fences"}
      Contents:={Txt=""      Cap="playerclip"     Typ="X65536"     Hint="Stops Players from passing through"}
      Contents:={Txt=""      Cap="monsterclip"    Typ="X131072"    Hint="Stops monsters passing through"}
      Contents:={Txt=""      Cap="origin"         Typ="X16777216"  Hint="use as centrepoint, for rotating objects only"}
      Contents:={Txt=""      Cap="monster"        Typ="X33554432"  Hint=""}
      Contents:={Txt=""      Cap="corpse"         Typ="X67108864"  Hint=""}
      Contents:={Txt=""      Cap="detail"         Typ="X134217728" Hint="for small, detail brushes that VIS can ignore"}
      Contents:={Txt=""      Cap="translucent"    Typ="X268435456" Hint=""}
      Contents:={Txt=""      Cap="ladder"         Typ="X536870912" Hint="Player can climb up this"}

      Sep:     ={Txt="" Typ="S"}  // separator

      Contents:={Txt="Flowing" Cap="current_0"      Typ="X262144"    Hint="Flowing water pushes to 0 west"}
      Contents:={Txt=""        Cap="current_90"     Typ="X524288"    Hint="Flowing water pushes to 90 north"}
      Contents:={Txt=""        Cap="current_180"    Typ="X1048576"   Hint="Flowing water pushes to 180 east"}
      Contents:={Txt=""        Cap="current_270"    Typ="X2097152"   Hint="Flowing water pushes to 270 south"}
      Contents:={Txt=""        Cap="current_up"     Typ="X4194304"   Hint="Flowing water pushes Upwards"}
      Contents:={Txt=""        Cap="current_dn"     Typ="X8388608"   Hint="Flowing water pushes Down"}

      Sep:     ={Txt="" Typ="S"}  // separator

      Flags:   ={Txt="Face" Cap="light"          Typ="X1"         Hint="'value' is the light quantity"}
      Flags:   ={Txt=""     Cap="slick"          Typ="X2"         Hint="slidy surface"}
      Flags:   ={Txt=""     Cap="sky"            Typ="X4"         Hint="sky -can be used with 'light'"}
      Flags:   ={Txt=""     Cap="warping"        Typ="X8"         Hint="turbulent water warp (for 64x64 textures only)"}
      Flags:   ={Txt=""     Cap="trans33"        Typ="X16"        Hint="translucent, 33% (more see-through than 50%)"}
      Flags:   ={Txt=""     Cap="trans66"        Typ="X32"        Hint="translucent, 66% (less see-through than 50%)"}
      Flags:   ={Txt=""     Cap="flowing"        Typ="X64"        Hint="flow direction towards angle 0"}
      Flags:   ={Txt=""     Cap="nodraw"         Typ="X128"       Hint="for clip textures and trigger textures"}
      Flags:   ={Txt=""     Cap="hint"           Typ="X256"       Hint="tell QBSP3 to cut along this plane first"}
      Flags:   ={Txt=""     Cap="skip"           Typ="X512"       Hint="completely ignore, allowing non-closed brushes"}
      Flags:   ={Txt=""     Cap="specular"       Typ="X1024"      Hint=""}
      Flags:   ={Txt=""     Cap="diffuse"        Typ="X2048"      Hint=""}
      Flags:   ={Txt=""     Cap="alpha"          Typ="X4096"      Hint="used for textures with alpha channel (e.g. fences)"}
      Flags:   ={Txt=""     Cap="mirror"         Typ="X8192"      Hint=""}
      Flags:   ={Txt=""     Cap="wndw33"         Typ="X16384"     Hint=""}
      Flags:   ={Txt=""     Cap="wndw66"         Typ="X32768"     Hint=""}
      Flags:   ={Txt=""     Cap="water"          Typ="X524288"    Hint="sound property for footsteps in water"}
      Flags:   ={Txt=""     Cap="concrete"       Typ="X1048576"   Hint="sound property for footsteps on concrete floor, default anyway"}
      Flags:   ={Txt=""     Cap="fabric"         Typ="X2097152"   Hint="sound property for footsteps on fabric"}
      Flags:   ={Txt=""     Cap="gravel"         Typ="X4194304"   Hint="sound property for footsteps on gravel"}
      Flags:   ={Txt=""     Cap="metal"          Typ="X8388608"   Hint="sound property for footsteps on metal"}
      Flags:   ={Txt=""     Cap="metal lite"     Typ="X16777216"  Hint="sound property for footsteps on metal, lighter sound"}
      Flags:   ={Txt=""     Cap="tin"            Typ="X33554432"  Hint="sound property for footsteps on tin, e.g. tin roof"}
      Flags:   ={Txt=""     Cap="tile"           Typ="X67108864"  Hint="sound property for footsteps on stone tiles"}
      Flags:   ={Txt=""     Cap="wood"           Typ="X134217728" Hint="sound property for footsteps on wood"}
      Flags:   ={Txt=""     Cap="reflect fake"   Typ="X268435456" Hint=""}
      Flags:   ={Txt=""     Cap="reflect light"  Typ="X536870912" Hint=""}

      Sep:     ={Txt="" Typ="S"}  // separator

      Value:   ={Txt="Value" Typ="E" Hint="The meaning of this depends on the other flags"}
    }
  }
  NewFiles.qtx =
  {
    ToolBox = "New files..."
    Root = "KingPin file types.qtxfolder"
    KingPin file types.qtxfolder =
    {
      Texture Image.tga = { ;incl = "EmptyImage" }
    }
  }
  walltex:incl =
  {
    tex = "bricks/b_cp_v31"
  }
  floortex:incl =
  {
    tex = "floors/fl_pv_m"
  }
  ceiltex:incl =
  {
    tex = "common/0_sky1"
  }
  NewMap:incl =
  {
    Game = "KingPin"
    Root = "worldspawn:b"
    worldspawn:b =
    {
      Border walls:g =
      {
        East wall:p =
        {
          west:f =  { v = '256 0 272 256 -128 272 256 0 400'       walltex = ! }
          east:f =  { v = '272 0 272 272 128 272 272 0 400'        walltex = ! }
          south:f = { v = '432 -192 272 560 -192 272 432 -192 400' walltex = ! }
          north:f = { v = '432 192 272 304 192 272 432 192 400'    walltex = ! }
          down:f =  { v = '432 0 -96 560 0 -96 432 -128 -96'       walltex = ! }
          up:f =    { v = '432 0 96 560 0 96 432 128 96'           walltex = ! }
        }
        West wall:p =
        {
          west:f =  { v = '-272 0 272 -272 -128 272 -272 0 400'    walltex = ! }
          east:f =  { v = '-256 0 272 -256 128 272 -256 0 400'     walltex = ! }
          south:f = { v = '432 -192 272 560 -192 272 432 -192 400' walltex = ! }
          north:f = { v = '432 192 272 304 192 272 432 192 400'    walltex = ! }
          down:f =  { v = '432 0 -96 560 0 -96 432 -128 -96'       walltex = ! }
          up:f =    { v = '432 0 96 560 0 96 432 128 96'           walltex = ! }
        }
        North wall:p =
        {
          west:f =  { v = '-256 0 272 -256 -128 272 -256 0 400'    walltex = ! }
          east:f =  { v = '256 0 272 256 128 272 256 0 400'        walltex = ! }
          south:f = { v = '432 192 272 560 192 272 432 192 400'    walltex = ! }
          north:f = { v = '432 208 272 304 208 272 432 208 400'    walltex = ! }
          down:f =  { v = '432 0 -96 560 0 -96 432 -128 -96'       walltex = ! }
          up:f =    { v = '432 0 96 560 0 96 432 128 96'           walltex = ! }
        }
        South wall:p =
        {
          west:f =  { v = '-256 0 272 -256 -128 272 -256 0 400'    walltex = ! }
          east:f =  { v = '256 0 272 256 128 272 256 0 400'        walltex = ! }
          south:f = { v = '432 -208 272 560 -208 272 432 -208 400' walltex = ! }
          north:f = { v = '432 -192 272 304 -192 272 432 -192 400' walltex = ! }
          down:f =  { v = '432 0 -96 560 0 -96 432 -128 -96'       walltex = ! }
          up:f =    { v = '432 0 96 560 0 96 432 128 96'           walltex = ! }
        }
        Sky:p =
        {
          west:f =  { v = '-256 0 272 -256 -128 272 -256 0 400'    ceiltex = ! }
          east:f =  { v = '256 0 272 256 128 272 256 0 400'        ceiltex = ! }
          south:f = { v = '432 -192 272 560 -192 272 432 -192 400' ceiltex = ! }
          north:f = { v = '432 192 272 304 192 272 432 192 400'    ceiltex = ! }
          down:f =  { v = '432 0 96 560 0 96 432 -128 96'          ceiltex = ! }
          up:f =    { v = '432 0 112 560 0 112 432 128 112'        ceiltex = ! }
        }
        Floor:p =
        {
          west:f =  { v = '-256 0 272 -256 -128 272 -256 0 400'    floortex = ! }
          east:f =  { v = '256 0 272 256 128 272 256 0 400'        floortex = ! }
          south:f = { v = '432 -192 272 560 -192 272 432 -192 400' floortex = ! }
          north:f = { v = '432 192 272 304 192 272 432 192 400'    floortex = ! }
          down:f =  { v = '432 0 -112 560 0 -112 432 -128 -112'    floortex = ! }
          up:f =    { v = '432 0 -96 560 0 -96 432 128 -96'        floortex = ! }
        }
      }
      info_player_start:e =
      {
        origin = "-144 0 -72"
        angle = "360"
      }
      light:e =
      {
        light = "300"
        angle = "360"
        origin = "0 0 0"
        _color = "255 255 255"
      }
    }
  }
}
