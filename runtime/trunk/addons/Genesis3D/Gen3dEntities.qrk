QQRKSRC1
// Genesis3D entities file for Quark

//$Header$
// ----------- REVISION HISTORY ------------
//$Log$
//

{
  QuArKProtected = "1"
  Description = "Genesis3D Entities"

  Toolbox Folders.qtx =
  {
    Toolbox = "New map items..."
    Root = "Genesis3D Entities.qtxfolder"
    Genesis3D Entities.qtxfolder =
    {
      Doors & lifts.qtxfolder =
      {
        func_door:b =
        {
        angle = "360"
        ;desc = "Door"
        ;incl = "defpoly"
        }
        func_door_secret:b =
        {
        angle = "360"
        ;desc = "A door that is triggered to open"
        ;incl = "defpoly"
        }
        func_wall:b =
        {
        ;desc = "Just a solid wall if not inhibitted"
        ;incl = "defpoly"
        }
        func_button:b =
        {
        angle = "360"
        ;desc = "A button"
        ;incl = "defpoly"
        }
        func_train:b =
        {
        angle = "360"
        ;desc = "A platform (moves along a train)"
        ;incl = "defpoly"
        }
        func_plat:b =
        {
        ;desc = "A lift/elevator"
        ;incl = "defpoly"
        }
        func_bossgate:b =
        {
        ;desc = "This bmodel disappears when player has all the episode sigils"
        ;incl = "defpoly"
        }
        func_episodegate:b =
        {
        ;desc = "Appears if episode has been completed so we cant reenter it"
        ;incl = "defpoly"
        }
        func_illusionary:b =
        {
        ;desc = "Entity that looks solid but lets you walk right through it"
        ;incl = "defpoly"
        }
      }

      Triggers.qtxfolder =
      {
        trigger_teleport:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "Teleporter (all trigger_tags are trigger by walkover"
        ;incl = "defpoly"
        }
        trigger_changelevel:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "Changes to another level"
        ;incl = "defpoly"
        }
        trigger_counter:e =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "Counter"
        }
        trigger_setskill:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "Changes Skill level"
        ;incl = "defpoly"
        }
        trigger_once:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "Triggers action only once"
        ;incl = "defpoly"
        }
        trigger_multiple:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "trigger action (can be triggered more than once)"
        ;incl = "defpoly"
        }
        trigger_onlyregistered:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "Only triggers if game is registered (registered == 1)"
        ;incl = "defpoly"
        }
        trigger_secret:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "trigger action and award secret credit"
        ;incl = "defpoly"
        }
        trigger_monsterjump:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "walking monsters that touch this will jump"
        ;incl = "defpoly"
        }
        trigger_hurt:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "any object touching this will be hurt"
        ;incl = "defpoly"
        }
        trigger_push:b =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "pushes player in any direction (like a windtunnel)"
        ;incl = "defpoly"
        }
        trigger_relay:e =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "allow delayed/multiple actions from one trigger"
        }
      }

      Lights.qtxfolder =
      {
        light:e =
        {
        origin = "0 0 0"
            light = "200"
        ;desc = "A projected light (no visible light source)"
        }
        light_torch_small_walltorch:e =
        {
        origin = "0 0 0"
        ;desc = "Short wallTorch"
        }
        light_flame_large_yellow:e =
        {
        origin = "0 0 0"
        ;desc ="Large yellow flame ball"
        }
        light_flame_small_yellow:e =
        {
        origin = "0 0 0"
        ;desc = "Small yellow flame ball"
        }
        light_flame_small_white:e =
        {
        origin = "0 0 0"
        ;desc = "Small white flame ball"
        }
        light_fluoro:e =
        {
        origin = "0 0 0"
        ;desc = "light: makes steady fluoroscent humming"
        }
        light_fluorospark:e =
        {
        origin = "0 0 0"
        ;desc = "light: makes sparking, broken fluoroscent sound"
        }
        light_globe:e =
        {
        origin = "0 0 0"
        ;desc = "sphere globe light"
        }
      }

      Ambient sounds.qtxfolder =
      {
        ambient_drip:e =
        {
        origin = "0 0 0"
        ;desc = "Dripping sound"
        }
        ambient_drone:e =
        {
        origin = "0 0 0"
        ;desc = "engine/machinery sound"
        }
        ambient_comp_hum:e =
        {
        origin = "0 0 0"
        ;desc = "computer background sounds"
        }
        ambient_swamp1:e =
        {
        origin = "0 0 0"
        ;desc = "frogs croaking"
        }
        ambient_swamp2:e =
        {
        origin = "0 0 0"
        ;desc = "slightly different sounding frogs croaking"
        }
        ambient_flouro_buzz:e =
        {
        origin = "0 0 0"
        ;desc = "Buzzing sound"
        }
        ambient_light_buzz:e =
        {
        origin = "0 0 0"
        ;desc = "as above just with a lower volume"
        }
        ambient_suck_wind:e =
        {
        origin = "0 0 0"
        ;desc = "Wind sound"
        }
        ambient_thunder:e =
        {
        origin = "0 0 0"
        ;desc = "Thunder"
        }
      }

      Misc.qtxfolder =
      {
        air_bubbles:e =
        {
        origin = "0 0 0"
        ;desc = "Rising bubbles"
        }
        event_lightning:e =
        {
        origin = "0 0 0"
        ;desc = "Used to kill Chton: Shareware Boss"
        }
        info_intermission:e =
        {
        origin = "0 0 0"
        mangle = "0 0 0"
        ;desc = "Cameras position during intermissions"
        }
        info_null:e =
        {
        origin = "0 0 0"
        ;desc = "Used as a positional target for spotlights"
        }
        info_notnull:e =
        {
        origin = "0 0 0"
        ;desc = "Used as a positional target for Lightning"
        }
        info_teleport_destination:e =
        {
        origin = "0 0 0"
        ;desc = "gives coords for a teleport destination"
            targetname = "[auto]"
            angle = "360"
        }
        misc_fireball:e =
        {
        origin = "0 0 0"
        ;desc = "Small fireball (used with lava)"
        }
        misc_explobox:e =
        {
        origin = "0 0 0"
        ;desc = "Nuclear Container (Explodes upon being shoot, harms player)"
        }
        misc_explobox2:e =
        {
        origin = "0 0 0"
        ;desc = "small nuclear comtainer"
        }
        trap_spikeshooter:e =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "Shoots spikes (Nails)"
        }
        path_corner:e =
        {
        origin = "0 0 0"
        ;desc = "Used to define path for func_train platforms"
        }
        misc_teleporttrain:e =
        {
        origin = "0 0 0"
        ;desc = "Used for the final boss"
        }
        trap_shooter:e =
        {
        origin = "0 0 0"
        angle = "360"
        ;desc = "Continuously fires spikes"
        }
      }

      Items.qtxfolder =
        {
        item_health:e =
        {
        origin = "0 0 0"
        ;desc = "Medkit"
        }
        item_health:e =
        {
        origin = "0 0 0"
        ;desc = "Megahealth (100%)"
        }
        item_artifact_envirosuit:e =
        {
        origin = "0 0 0"
        ;desc = "Enviromental protection suit"
        }
        item_artifact_super_damage:e =
        {
        origin = "0 0 0"
        ;desc = "Quad Damage"
        }
        item_artifact_invulnerability:e =
        {
        origin = "0 0 0"
        ;desc = "Pentagram of protection"
        }
        item_artifact_invisibility:e =
        {
        origin = "0 0 0"
        ;desc = "Ring of shadows"
        }
        item_armor1:e =
        {
        origin = "0 0 0"
        ;desc = "Green Armor"
        }
        item_armor2:e =
        {
        origin = "0 0 0"
        ;desc = "Yellow Armor"
        }
        item_armorInv:e =
        {
        origin = "0 0 0"
        ;desc = "Red Armor"
        }
        item_key1:e =
        {
        origin = "0 0 0"
        ;desc = "Silver Key"
        }
        item_key2:e =
        {
        origin = "0 0 0"
        ;desc = "Gold Key"
        }
        item_sigil:e =
        {
        origin = "0 0 0"
        ;desc = "Any Rune"
        }
      }

      Weapons & Ammo.qtxfolder =
      {
        weapon_supershotgun:e =
        {
        origin = "0 0 0"
        }
        weapon_nailgun:e =
        {
        origin = "0 0 0"
        }
        weapon_supernailgun:e =
        {
        origin = "0 0 0"
        }
        weapon_grenadelauncher:e =
        {
        origin = "0 0 0"
        }
        weapon_rocketlauncher:e =
        {
        origin = "0 0 0"
        }
        weapon_lightning:e =
        {
        origin = "0 0 0"
        ;desc = "Thunderbolt Cannon"
        }
        item_shells:e =
        {
        origin = "0 0 0"
        ;desc = "ammo for both Shotgun & SuperShotgun"
        }
        item_spikes:e =
        {
        origin = "0 0 0"
        ;desc = "ammo for both Perforator & Super Perforator"
        }
        item_rockets:e =
        {
        origin = "0 0 0"
        ;desc = "ammo for both Grenade/Rocket Launcher"
        }
        item_cells:e =
        {
        origin = "0 0 0"
        ;desc = "ammo for Thunder Bolt"
        }
      }

      Monsters.qtxfolder =
      {
        monster_army:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Grunt"
        }
        monster_dog:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Attack Dog"
        }
        monster_ogre:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Ogre"
        }
        monster_knight:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Knight"
        }
        monster_zombie:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Zombie"
        }
        monster_wizard:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Scragg (Wizard)"
        }
        monster_demon1:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Fiend (Demon)"
        }
        monster_shambler:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Shambler"
        }
        monster_boss:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Chton (Shareware Boss)"
        }
        monster_enforcer:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Medium Guard"
        }
        monster_fish:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Killer Fish"
        }
        monster_hell_knight:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Medium Knight"
        }
        monster_oldone:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = ""
        }
        monster_shalrath:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = ""
        }
        monster_tarbaby:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = ""
        }
      }

      Player Starts.qtxfolder =
      {
        info_player_start:e =
          {
        origin = "0 0 0"
        angle = "0"
        ;desc = "This is where the Player Starts"
          }
        info_player_deathmatch:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "A deathmatch start (more than one allowed)"
        }
        info_player_coop:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "A coop player start (more than one allowed)"
        }
        info_player_start2:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Only used on the start map for return point"
        }
        testplayerstart:e =
        {
        origin = "0 0 0"
        angle = "0"
        ;desc = "Used to temporarly change the info_player_start"
        }
      }
    }
  }
  Entity forms.fctx =    // here are the forms used to edit the Specifics of entities in the map.
  {
    // Doors & lifts
      func_door:form =
      {
        Help = "If two doors touch, they are assumed to be connected and operate as a unit." $0D $0D "TOGGLE causes the door to wait in both the start and end for a trigger event." $0D $0D "START_OPEN causes the door to to move to its destination when spawned, and operate in reverse." $0D "It is used to temporarly or permanently close off an area when triggered." $0D $0D "Key doors allways have 'wait' set to '-1'."
        spawnflags:=
        {Txt="&"
        Typ="X1"
        Cap="Start Open"
        Hint="causes the door to move to its destination when spawned."
        }
        spawnflags: =
        {Txt="&"
        Typ="X4"
        Cap="Door Don't Link"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X8"
        Cap="Gold Key"
        Hint="You will need the Gold Key to open the door"
        }
        spawnflags: =
        {Txt="&"
        Typ="X16"
        Cap="Silver Key"
        Hint="You will need the Silver Key to open the door"
        }
        spawnflags: =
        {Txt="&"
        Typ="X32"
        Cap="Toggle"
        Hint="Causes the door to wait in both the start and end states for a trigger event"
        }
        targetname:=
        {Txt="&"
        Typ="E"
        Hint="if set, no touch field will be spawned and a remote button or trigger field activates the door."
        }
         message:=
         {Txt="&"
         Typ="E"
         Hint="Is printed when a door is touched, only if its a triggered door that hasn't been fired yet"
        }
        angle:=
        {Txt="&"
        Typ="E"
        Hint="Determines the opening direction"
        }
        health:=
        {Txt="&"
        Typ="E"
        Hint="If set, the door must be shot to open."
        }
        speed:=
        {Txt="&"
        Typ="E"
         Hint="Movement speed. (default 100)"
         }
        wait:=
        {Txt="&"
        Typ="E"
        Hint="How long the door waits before returning (3 Default, -1 never return)."
        }
        lip:=
        {Txt="&"
        Typ="E"
        Hint="Lip remaining after opening(8 Default)."
        }
        dmg:=
        {Txt="&"
        Typ="E"
        Hint="Damage to inflict on player when blocking the door (2 Default)."
        }
        sounds: =
        {Txt="&"
        Typ="C"
        Items="0) no sound" $0D "1) stone" $0D "2) base" $0D "3) stone metal" $0D "4) screechy metal"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4"
        Hint="Sounds it makes while moving"
        }
      }

      func_door_secret:form =
      {
        Help = "Basic secret door, Slides back, then to the side." $0D $0D "If a secret door has a targetname, it will only be opened by it button or trigger, not by damage"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Open once"
        Hint="The door will not close again when it has been opened"
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="1st left"
        Hint="1st move is left of arrow"
        }
        spawnflags: =
        {Txt="&"
        Typ="X4"
        Cap="1st down"
        Hint="1st move is down from arrow"
        }
        spawnflags: =
        {Txt="&"
        Typ="X8"
        Cap="No shot"
        Hint="Make's door only openable with trigger."
        }
        spawnflags: =
        {Txt="&"
        Typ="X16"
        Cap="Always shot"
        Hint="Even if targeted, its shootable"
        }
        targetname:=
        {Txt="&"
        Typ="E"
        Hint="if set, no touch field will be spawned and a remote button or trigger field activates the door."
        }
        angle:=
        {Txt="&"
        Typ="E"
        Hint="Determines the opening direction"
        }
        health:=
        {Txt="&"
        Typ="E"
        Hint="If set, the door must be shot to open."
        }
        speed:=
        {Txt="&"
        Typ="E"
        Hint="Movement speed. (default 100)"
         }
        wait:=
        {Txt="&"
        Typ="E"
        Hint="How long the door waits before returning (3 Default, -1 never return)."
        }
        lip:=
        {Txt="&"
        Typ="E"
        Hint="Lip remaining after opening(8 Default)."
        }
        dmg:=
         {Txt="&"
         Typ="E"
        Hint="Damage to inflict on player when blocking the door (2 Default)."
        }
        sounds: =
        {Txt="&"
        Typ="C"
        Items="1) medieval" $0D "2) metal" $0D "3) base"
        values= "1" $0D "2" $0D "3"
        }
      }

      func_wall:form =
      {
        Help = "This is just a solid wall if not inhibitted" $0D $0D "That can be made to appear in certain skills and modes" $0D $0D "And can be made to have switchable texture"
        targetname:=
        {Txt="&"
        Typ="E"
        hint="Used to trigger or kill a wall"
        }
      }

      func_button:form =
      {
        Help = "When a button is touched, it move some distance in the direction of it's angle, triggers all of its targets" $0D "waits some time then returns to it's original position where it can be triggered again."
        sounds: =
        {Txt="&"
        Typ="C"
        Items="0) steam metal" $0D "1) wooden clunk" $0D "2) metallic click" $0D "3) in-out"
        values= "0" $0D "1" $0D "2" $0D "3"
        }
        target: =
        {Txt="&"
        Typ="E"
        Hint="targetname of what should be triggered"
        }
        lip:=
        {Txt="&"
        Typ="E"
        Hint="How much the button will stick out when pressed(Default 4 pixels)"
        }
        speed:=
        {Txt="&"
        Typ="E"
        Hint="Speed of movement(Default 40)"
        }
        wait:=
        {Txt="&"
        Typ="E"
        Hint="How long before it can be pushed again (default 1 '-1 never return)"
        }
        health:=
        {Txt="&"
        Typ="E"
        Hint="If set to greater than zero must be shot to be triggered."
        }
      }

      func_train:form =
      {
        Help = "Trains are moving platforms that players can ride." $0D "The targets origin specifies the min point of the train at each corner." $0D "The train spawns at the first target it is positing at." $0D "if the train is the target of a button or trigger, it will not begin moving until triggered."
        sounds: =
        {Txt="&"
        Typ="C"
        Items="1) ratchet metal"
        values= "1"
        }
        target: =
        {Txt="&"
        Typ="E"
        Hint=""
        }
        targetname:=
        {Txt="&"
        Typ="E"
        Hint="Use if train is activated by trigger, note train will not start by player's presence"
        }
        speed:=
        {Txt="&"
        Typ="E"
        Hint="Default 100"
        }
        message:=
        {Txt="&"
        Typ="E"
        Hint="Message displayed when triggered"
        }
        dmg:=
        {Txt="&"
        Typ="E"
        Hint="Amount of damage inflicted when player gets in way of the train."
        }
      }

      func_plat:form =
      {
        Help = "Plats are always drawn in the extended position, so they will light correctly." $0D "if the plat is the target of a trigger or a button, it will start out disabled in the extended position until its triggered." $0D "when it will lower and become a normal plat." $0D $0D "If the 'height' key is set, that will determine the amount the plat moves, instead of being" $0D "implicitly determined by the models height."
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Plat low trigger"
        Hint=""
        }
        sounds: =
        {Txt="&"
        Typ="C"
        Items="1) base fast" $0D "2) chain slow"
        values= "1" $0D "2"
        }
        height: =
        {Txt="&"
        Typ="E"
        Hint="How high it will rise. (Note plat is drawn extended)"
        }
        speed:=
        {Txt="&"
        Typ="E"
        Hint="Default 100"
        }
      }

      func_bossgate:form =
      {
        Help = "This bmodel disappears when player has all of the episode sigils"
      }

      func_episodegate:form =
      {
        Help = "This bmodel will appear if the episode has already been completed, so players can't reenter it."
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="E1"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="E2"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X4"
        Cap="E3"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X8"
        Cap="E4"
        Hint=""
        }
      }

      func_illusionary:form =
      {
        Help = "A simple entity that looks solid but lets you walk through it"
      }

    //Triggers

      trigger_teleport:form =
      {
        Help = "Any object touching this will be transported to the corresponding info_teleport_destination entity. You must set" $0D "the 'target' field, and create an object with a 'targetname' field that matches" $0D $0D "If the 'trigger_teleport' has a targetname, it will only teleport entities when it has been fired."
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Player only"
        Hint="Only allows players to use teleport, not monsters"
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="Silent"
        Hint=""
        }
        target: =
        {Txt="&"
        Typ="E"
        Hint="The name of the info_teleport_destination the player should be teleported to."
        }
        targetname:=
        {Txt="&"
        Typ="E"
        Hint="Allows teleport to be triggered on"
        }
      }

      trigger_changelevel:form =
      {
        Help = "When the player touches this, he gets sent to the map listed in the 'map' variable. Unless the NO_INTERMISSION" $0D "flag is set, the view will go to the inf_intermission spotand display stats."
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="No intermission"
        Hint=""
        }
        map:=
        {Txt="&"
        Typ="E"
        Hint="What map to change to."
        }
      }

      trigger_counter:form =
      {
        Help = "Acts as an intermediary for an action that takes multiple inputs." $0D $0D "If nomessage is not set, it will print '1more..' etc when triggered and 'sequence complete' when finished." $0D $0D "After the counter has been triggered 'count' times (default 2), it will fire all of its targets and remove itself."
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="No message"
        Hint=""
        }
        targetname: =
        {Txt="&"
        Typ="E"
        Hint="The name of this entity ex. 'Count1'"
        }
        target: =
        {Txt="&"
        Typ="E"
        Hint="The name of the entity/ies thats this one should trigger ex. 'tcount1'"
        }
        count: =
        {Txt="&"
        Typ="E"
        Hint="How many buttons/triggers should be activated before this will activate"
        }
        sounds: =
        {Txt="&"
        Typ="C"
        Items="1) secret sound" $0D "2) Beep Beep"  $0D "3) Large Switch" $0D "4) No sound"
        values= "1" $0D "2"  $0D "3" $0D "4"
        }
      }

      trigger_setskill:form =
      {
        Help = "Sets skill level to the value of 'message'" $0D $0D "Only used on start map"
        message: =
        {Txt="&"
        Typ="E"
        Hint="Skill level"
        }
      }

      trigger_once:form =
      {
        Help = "Variable sized trigger. Triggers once, then removes itself." $0D "You must set the key 'target' to the name of another object in the level that has a matching name"
        spawnflags:=
        {Txt="&"
        Typ="X1"
        Cap="No touch"
        Hint="Makes trigger only triggerable by other triggers"
        }
        sounds: =
        {Txt="&"
        Typ="C"
        Items="1) secret" $0D "2) beep beep" $0D "3) large switch" $0D "4)"
        values= "1" $0D "2" $0D "3" $0D "4"
        }
        target: =
        {Txt="&"
        typ="E"
        Hint="The 'targetname' of another object"
        }
        targetname:=
        {Txt="&"
        Typ="E"
        Hint="If 'health' is set, the trigger must be killed to activate."
        }
        killtarget:=
        {Txt="&"
        Typ="E"
        Hint="Removes object with targetname"
        }
      }

      trigger_multiple:form =
      {
        Help = "Variable sized repeatble trigger. Must be targeted at one or more entities." $0D "NOTOUCH has been obsoleted by trigger_relay."
        spawnflags:=
        {Txt="&"
        Typ="X1"
        Cap="No touch"
        Hint=""
        }
        sounds:=
        {Txt="&"
        Typ="C"
        Items="1) secret" $0D "2) beep beep" $0D "3) large switch" $0D "4)No sound"
        values= "1" $0D "2" $0D "3" $0D "4"
        }
        target:=
        {Txt="&"
        Typ="E"
        Hint=""
        }
        delay:=
        {Txt="&"
        Typ="E"
        Hint="How long it should wait before firing after it has been activated"
        }
        wait:=
        {Txt="&"
        Typ="E"
        Hint="How long there should go before it can be activated again(Default 2)"
        }
        message:=
        {Txt="&"
        Typ="E"
        Hint="Text to display when activated"
        }
        health:=
        {Txt="&"
        Typ="E"
        Hint="If 'health' is set, the trigger must be killed to activate each time."
        }
      }

      trigger_onlyregistered:form =
      {
        Help = "Only fires if playing the registered version, otherwise prints the 'message'"
        sounds: =
        {Txt="&"
        Typ="C"
        Items=""
        values=""
        }
        target: =
        {Txt="&"
        Typ="E"
        Hint=""
        }
        message: =
        {Txt="&"
        Typ="E"
        Hint=""
        }
      }

      trigger_secret:form =
      {
        Help = "secret counter trigger"
        sounds: =
        {Txt="&"
        Typ="C"
        Items=""
        values=""
        }
        message: =
        {Txt="&"
        Typ="E"
        Hint=""
        }
      }

      trigger_monsterjump:form =
      {
        Help = "Walking monsters that touch this will jump in the direction of the trigger's angle"
        speed: =
        {Txt="&"
        Typ="E"
        Hint="The speed thrown forward (default 200)"
        }
        height: =
        {Txt="&"
        Typ="E"
        Hint="The speed thrown upwards."
        }
      }

      trigger_hurt:form =
      {
        Help = "Any object touching this will be hurt"
        dmg: =
        {Txt="&"
        Typ="E"
        Hint="Set 'dmg' to damage amount (Default 5)"
        }
      }

      trigger_push:form =
      {
        Help = "Pushes the Player:"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Push Once"
        Hint="Pushes once only"
        }
        angle:=
        {Txt="&"
        Typ="E"
        Hint="Direction of push"
        }
        speed:=
        {Txt="&"
        Typ="E"
        Hint="How much force, Note player can only oppose a force of 12"
        }
      }

      trigger_relay:form =
      {
        Help = "This fixed size trigger can't be touched, it can only be fired by other events."
        sounds: =
        {Txt="&"
        Typ="C"
        Items="1) secret" $0D "2) beep beep" $0D "3) large switch" $0D "4)No sound"
        values= "1" $0D "2" $0D "3" $0D "4"
        }
        target: =
        {Txt="&"
        Typ="E"
        Hint=""
        }
        delay: =
        {Txt="&"
        Typ="E"
        Hint="How long it should wait before targeting trigger is activated"
        }
        message: =
        {Txt="&"
        Typ="E"
        Hint="Text to display when activated"
        }
        killtarget:=
        {Txt="&"
        Typ="E"
        Hint="Removes target object"
        }
      }

     //Lights

      light:form =
      {
        help = "Non-displayed light" $0D "Default light value is 300" $0D "If targeted it will toggle between on or off" $0D "If 'target' and 'angle' is set, the light is projected" $0D "In the directionof the target as a cone of the size" $0D "set by angle"
        style: =
        {Txt="&"
        Typ="C"
        Items="0)normal (default)" $0D "1)flicker (first variety)" $0D "2) slow strong pulse" $0D "3)candle (first variety)" $0D "4)fast strobe" $0D "5)gentle pulse" $0D "6)flicker (second variety)" $0D "7)candle (second variety)" $0D "8)candle (third variety)" $0D "9)slow strobe" $0D "10)flourescent flicker" $0D "11)slow pulse, not fading to black"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10"    $0D "11"
        }
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Start Off"
        Hint="use a trigger to activate the light"
        }
        light: =
        {Txt="&"
        Typ="E"
        Hint="Light Value"
        }
        target:=
        {Txt="&"
        Typ="E"
        Hint="What light is pointed at"
        }
        angle:=
        {Txt="&"
        Typ="E"
        Hint="Angle of light beam"
        }
      }

      light_torch_small_walltorch:form =
      {
        Help = "Short WallTorch" $0D "Default light calue is 200"
        bbox='-10 -10 -20 10 10 20'
        mdl="progs/flame.mdl"
        style: =
        {Txt="&"
        Typ="C"
        Items="0)normal (default)" $0D "1)flicker (first variety)" $0D "2) slow strong pulse" $0D "3)candle (first variety)" $0D "4)fast strobe" $0D "5)gentle pulse" $0D "6)flicker (second variety)" $0D "7)candle (second variety)" $0D "8)candle (third variety)" $0D "9)slow strobe" $0D "10)flourescent flicker" $0D "11)slow pulse, not fading to black"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10"    $0D "11"
        }
        light: =
        {Txt="&"
        Hint="How much it should light up"
        }
      }

      light_flame_large_yellow:form =
      {
        Help = "Large yellow flame ball"
        bbox='-10 -10 -12 12 12 18'
        mdl="progs/flame2.mdl"
        style: =
        {Txt="&"
        Typ="C"
        Items="0)normal (default)" $0D "1)flicker (first variety)" $0D "2) slow strong pulse" $0D "3)candle (first variety)" $0D "4)fast strobe" $0D "5)gentle pulse" $0D "6)flicker (second variety)" $0D "7)candle (second variety)" $0D "8)candle (third variety)" $0D "9)slow strobe" $0D "10)flourescent flicker" $0D "11)slow pulse, not fading to black"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10"    $0D "11"
        }
        light: =
        {Txt="&"
       Typ="E"
        Hint="How much it should light up"
        }
      }

      light_flame_small_yellow:form =
      {
        Help = "Small yellow flame ball"
        bbox='-8 -8 -8 8 8 8'
        mdl="progs/flame2.mdl"
        style: =
        {Txt="&"
        Typ="C"
        Items="0)normal (default)" $0D "1)flicker (first variety)" $0D "2) slow strong pulse" $0D "3)candle (first variety)" $0D "4)fast strobe" $0D "5)gentle pulse" $0D "6)flicker (second variety)" $0D "7)candle (second variety)" $0D "8)candle (third variety)" $0D "9)slow strobe" $0D "10)flourescent flicker" $0D "11)slow pulse, not fading to black"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10"    $0D "11"
        }
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Start Off"
        Hint="if set, it must be triggered to light up"
        }
        light: =
        {Txt="&"
       Typ="E"
        Hint="How much it should light up"
        }
      }

      light_flame_small_white:form =
      {
        Help = "Small white flame ball"
        bbox='-10 -10 -40 10 10 40'
        mdl="progs/flame2.mdl"
        style: =
        {Txt="&"
        Typ="C"
        Items="0)normal (default)" $0D "1)flicker (first variety)" $0D "2) slow strong pulse" $0D "3)candle (first variety)" $0D "4)fast strobe" $0D "5)gentle pulse" $0D "6)flicker (second variety)" $0D "7)candle (second variety)" $0D "8)candle (third variety)" $0D "9)slow strobe" $0D "10)flourescent flicker" $0D "11)slow pulse, not fading to black"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10"    $0D "11"
        }
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Start Off"
        Hint="It must be triggered to light up"
        }
        light: =
        {Txt="&"
       Typ="E"
        Hint="How much it should light up"
        }
      }

      light_fluoro:form =
      {
        Help = "Non-Displayed light. Default light value is 300" $0D "If targeted, it will toggle between on or off" $0D "Makes steady fluorescent humming sound."
        bbox='-8 -8 -8 8 8 8'
        style: =
        {Txt="&"
        Typ="C"
        Items="0)normal (default)" $0D "1)flicker (first variety)" $0D "2) slow strong pulse" $0D "3)candle (first variety)" $0D "4)fast strobe" $0D "5)gentle pulse" $0D "6)flicker (second variety)" $0D "7)candle (second variety)" $0D "8)candle (third variety)" $0D "9)slow strobe" $0D "10)flourescent flicker" $0D "11)slow pulse, not fading to black"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10"    $0D "11"
        }
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Start Off"
        Hint="It must be trigger to light up"
        }
        light: =
        {Txt="&"
       Typ="E"
        Hint="How much it should light up"
        }
      }

      light_fluorospark:form =
      {
        Help = "Non-Displayed light. Default is light is 300" $0D "Makes sparking, broken fluorescent sound."
        bbox='-8 -8 -8 8 8 8'
        style: =
        {Txt="&"
        Typ="C"
        Items="0)normal (default)" $0D "1)flicker (first variety)" $0D "2) slow strong pulse" $0D "3)candle (first variety)" $0D "4)fast strobe" $0D "5)gentle pulse" $0D "6)flicker (second variety)" $0D "7)candle (second variety)" $0D "8)candle (third variety)" $0D "9)slow strobe" $0D "10)flourescent flicker" $0D "11)slow pulse, not fading to black"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10"    $0D "11"
        }
        light: =
        {Txt="&"
        Typ="E"
        Hint="How much it should light up"
        }
      }

      light_globe:form =
      {
        Help = "Sphere globe light. Default is 300"
        bbox='-8 -8 -8 8 8 8'
        mdl="progs/s_light.spr"
        style: =
        {Txt="&"
        Typ="C"
        Items="0)normal (default)" $0D "1)flicker (first variety)" $0D "2) slow strong pulse" $0D "3)candle (first variety)" $0D "4)fast strobe" $0D "5)gentle pulse" $0D "6)flicker (second variety)" $0D "7)candle (second variety)" $0D "8)candle (third variety)" $0D "9)slow strobe" $0D "10)flourescent flicker" $0D "11)slow pulse, not fading to black"
        values= "0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10"    $0D "11"
        }
        light: =
        {Txt="&"
        Typ="E"
        Hint="How much it should light up"
        }
      }

    // Ambient Sounds

      ambient_drip:form =
      {
        Help = "Dripping sound"
        bbox='-8 -8 -8 8 8 8'
      }

      ambient_drone:form =
      {
        Help = "Engine/Machinery sound"
        bbox='-8 -8 -8 8 8 8'
      }

      ambient_comp_hum:form =
      {
        Help = "Computer background sounds"
        bbox='-8 -8 -8 8 8 8'
      }

      ambient_swamp1:form =
      {
        Help = "Frogs Croaking"
        bbox='-8 -8 -8 8 8 8'
      }

      ambient_swamp2:form =
      {
        Help = "Slightly different soundin of Frogs Croaking"
        bbox='-8 -8 -8 8 8 8'
      }

      ambient_fluoro_buzz:form =
      {
        Help = ""
        bbox='-8 -8 -8 8 8 8'
      }

      ambient_light_buzz:form =
      {
        Help = ""
        bbox='-8 -8 -8 8 8 8'
      }

      ambient_suck_wind:form =
      {
        Help = ""
        bbox='-8 -8 -8 8 8 8'
      }

      ambient_thunder:form =
      {
        Help = ""
        bbox='-8 -8 -8 8 8 8'
      }

    //Misc

      air_bubbles:form =
      {
        Help = "Testing air bubbles."
        bbox='-8 -8 -8 8 8 8'
        mdl="progs/s_bubble.spr"
      }

      event_lightning:form =
      {
        Help = "Just for boss level"
        targetname: =
        {Txt="&"
          Hint=""
        }
      }

      info_intermission:form =
      {
        Help = "This is the camera point for the intermission." $0D "Use 'mangle' instead of angle, so you can set pitch or roll as well as yaw. 'pitch, roll, yaw'"
        mangle: =
        {Txt="&"
          Hint="Angles for the intermission"
        }
      }

      info_null:form =
      {
        Help = "Use for positional target for spotlights. etc."
      }

      info_notnull:form =
      {
        Help = "Use for positional target for 'event_lightning' entity."
      }

      info_teleport_destination:form =
      {
        Help = "This is the destination marker for a teleporter." $0D "It should have a 'targetname' field with the same value as a" $0D "teleporter's 'target' field"
        bbox='-8 -8 -8 8 8 32'
        targetname: =
        {Txt="&"
          Typ="E"
          Hint="name of a teleporters 'targetname'"
        }
      }

      misc_fireball:form =
      {
        Help = "This is the balls the jump up from the lava."
        speed: =
        {Txt="&"
         Typ="E"
         Hint="How high the Lava Balls should jump"
        }
      }

      misc_explobox:form =
      {
        Help = "Nuclear Container (explodes upon being shot, harms player)"
        bbox='0 0 0 32 32 64'
        mdl="maps/b_explob.bsp"
      }

      misc_explobox2:form =
      {
        Help = "Smaller exploding Box, (REGISTERED ONLY)"
        bbox='0 0 0 32 32 32'
        mdl="maps/b_exbox2.bsp"
      }

      trap_spikeshooter:form =
      {
        Help = "When triggered, fires a spike in the direcrtion set in QuakeEd." $0D "Laser is only for REGISTERED"
        bbox='-8 -8 -8 8 8 8'
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="superspike"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="laser"
        Hint=""
        }
        targetname: =
        {Txt="&"
        Hint=""
        }
        wait:=
        {Txt="&"
        Typ="E"
        Hint="Time between shots"
        }
      }

      path_corner:form =
      {
        Help = "Monsters/Train will continue to moving towards the next target corner"
        bbox='-8 -8 -8 8 8 8'
        target: =
        {Txt="&"
        Hint=""
        }
        targetname: =
        {Txt="&"
        Hint=""
        }
        wait:=
        {Txt="&"
        Typ="E"
        Hint="How long Monster or Train will wait when reaching corner(-1 means stop)"
        }
      }

      misc_teleporttrain:form =
      {
        Help = "This is used for the final Boss"
        bbox='-8 -8 -8 8 8 8'
      }

      trap_shooter:form =
      {
        Help = "Continuously fires spikes."
        bbox='-8 -8 -8 8 8 8'
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="superspike"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="laser"
        Hint=""
        }
        wait: =
        {Txt="&"
        Typ="E"
        Hint="Time between shots(Default 1)"
        }
        nextthink: =
        {Txt="&"
        Typ="E"
        Hint="Delay before firing first spike, sow multiple shooters can be stagered."
        }
      }

    //Items

      item_health:form =
      {
        Help = "Health box, normally gives 25 points." $0D "Rotten box heals 5-10 points" $0D "Megahealth will add 100 health, the rot you down" $0D "to your maximum health limmith, one point per second."
        bbox='0 0 0 32 32 56'
        mdl="maps/b_bh25.bsp"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="rotten"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="megahealth"
        Hint=""
        }
      }

      item_health:form =
      {
        Help = "Health box, normally gives 25 points." $0D "Rotten box heals 5-10 points" $0D "Megahealth will add 100 health, the rot you down" $0D "to your maximum health limmith, one point per second."
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="rotten"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="megahealth"
        Hint=""
        }
      }

      item_artifact_envirosuit:form =
      {
        Help = "Player takes no damage from water or slime for 30 seconds"
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/suit.mdl"
      }

      item_artifact_super_damage:form =
      {
        Help = "The next attack from the player will do x4 damage"
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/quaddama.mdl"
      }

      item_artifact_invulnerability:form =
      {
        Help = "Player is invulnerable for 30 seconds"
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/invulner.mdl"
      }

      item_artifact_invisibility:form =
      {
        Help = "Player is invisible for 30 seconds"
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/invisbl.mdl"
      }

      item_armor1:form =
      {
        Help = "This is the Green Armor"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/armor.mdl"
      }

      item_armor2:form =
      {
        Help = "This is the Yellow Armor"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/armor.mdl"
        mdlskin='1'
      }

      item_armorInv:form =
      {
        Help = "This is the Red Armor"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/armor.mdl"
        mdlskin='2'
      }

      item_key1:form =
      {
        Help = "SILVER KEY" $0D "in order for keys to work you must set your maps" $0D "worldtype to one of the following:" $0D "0) medieval" $0D "1) metal" $0D "3) base"
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/w_s_key.mdl"
      }

      item_key2:form =
      {
        Help = "GOLD KEY" $0D "In order for keys to work you must set your maps" $0D "worldtype to one of the following:" $0D "0) medieval" $0D "1) metal" $0D "3) base"
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/w_g_key.mdl"
      }

      item_sigil:form =
      {
        Help = "End of level sigil, pick up to end episode and return to jrstart."
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/end1.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="E1"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="E2"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X4"
        Cap="E3"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X8"
        Cap="E4"
        Hint=""
        }
      }

    //Weapons & ammo

      weapon_supershotgun:form =
      {
        Help = "Uses item_shells"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/g_shot.mdl"
      }

      weapon_nailgun:form =
      {
        Help = "Uses item_spikes"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/g_nail.mdl"
      }

      weapon_supernailgun:form =
      {
        Help = "Uses item_spikes"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/g_nail2.mdl"
      }

      weapon_grenadelauncher:form =
      {
        Help = "Uses item_rockets"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/g_rock.mdl"
      }

      weapon_rocketlauncher:form =
      {
        Help = "Uses item_rockets"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/g_rock2.mdl"
      }

      weapon_lightning:form =
      {
        Help = "Uses item_cells"
        bbox='-16 -16 0 16 16 32'
        mdl="progs/g_light.mdl"
      }

      item_shells:form =
      {
        Help = "Ammo for weapon_supershotgun"
        bbox='0 0 0 32 32 56'
        mdl="maps/b_shell0.bsp"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="big"
        Hint="Big Box of Shells"
        }
      }

      item_spikes:form =
      {
        Help = "Ammo for Nail & SuperNailGun"
        bbox='0 0 0 32 32 56'
        mdl="maps/b_nail0.bsp"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="big"
        Hint="Big Box of Spikes"
        }
      }

      item_rockets:form =
      {
        Help = "Ammo for Grenade & RocketLauncher"
        bbox='0 0 0 32 32 56'
        mdl="maps/b_rock0.bsp"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="big"
        Hint="Big Box of Rockets"
        }
      }

      item_cells:form =
      {
        Help = "Ammo for ThunderBolt"
        bbox='0 0 0 32 32 56'
        mdl="maps/b_batt0.bsp"
      }

     //Monsters

      monster_army:form =
      {
        Help = "This is the Grunt"
        bbox='-16 -16 -24 16 16 40'
        mdl="progs/soldier.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_dog:form =
      {
        Help = "This is the Attack Dog"
        bbox='-32 -32 -24 32 32 40'
        mdl="progs/dog.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_ogre:form =
      {
        help = "This is the ogre"
        bbox='-32 -32 -24 32 32 64'
        mdl="progs/ogre.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_knight:form =
      {
        Help = "This is the Knight"
        bbox='-16 -16 -24 16 16 40'
        mdl="progs/knight.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_zombie:form =
      {
        Help = "This is the Zombie" $0D "If crusified, stick the bounding box 12 pixels back into a wall to look right."
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/zombie.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Crucified"
        Hint=""
        }
        spawnflags: =
        {Txt="&"
        Typ="X2"
        Cap="ambush"
        Hint=""
        }
      }

      monster_wizard:form =
      {
        Help = "This is the Scragg"
        bbox='-16 -16 -24 16 16 40'
        mdl="progs/wizard.mdl"
        Spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_demon1:form =
      {
        Help = "This is the Fiend"
        bbox='-32 -32 -24 32 32 64'
        mdl="progs/demon.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_shambler:form =
      {
        Help = "This is the Shambler"
        bbox='-32 -32 -24 32 32 64'
        mdl="progs/shambler.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_boss:form =
      {
        Help = "Cthon (Boss of Shareware version)"
        bbox='-128 -128 -24 128 128 256'
        mdl="progs/boss.mdl"
        targetname: =
        {Txt="&"
        Hint=""
        }
      }

      monster_enforcer:form =
      {
        Help = "This is the Enforcer"
        bbox='-16 -16 -24 16 16 40'
        mdl="progs/enforcer.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_fish:form =
      {
        Help = "This is a killer fish"
        bbox='-16 -16 -24 16 16 24'
        mdl="progs/fish.mdl"
        spawbflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_hell_knight:form =
      {
        Help = "This a stonger knight"
        bbox='-16 -16 -24 16 16 40'
        mdl="progs/hknight.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_oldone:form =
      {
        Help = " ??? "
        bbox='-16 -16 -24 16 16 32'
        mdl="progs/oldone.mdl"
      }

      monster_shalrath:form =
      {
        Help = " ??? "
        bbox='-32 -32 -24 32 32 48'
        mdl="progs/shalrath.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

      monster_tarbaby:form =
      {
        Help = " ??? "
        bbox='-16 -16 -24 16 16 24'
        mdl="progs/tarbaby.mdl"
        spawnflags: =
        {Txt="&"
        Typ="X1"
        Cap="Ambush"
        Hint=""
        }
      }

    //Player Starts

      info_player_start:form =
      {
        Help = "The normal player start for a level"
        //HTML = "q1\playerstarts.html#info_player_start"
        bbox='-16 -16 -24 16 16 24'
        mdl="progs/player.mdl"
      }

      info_player_deathmatch:form =
      {
        Help = "Potential spawning positions for deathmatch games."
        bbox='-16 -16 -24 16 16 24'
        mdl="progs/player.mdl"
        mdlopacity='0.5'   // half transparent
      }

      info_player_coop:form =
      {
        Help = "Potentioal spawning positions for CoOp games"
        bbox='-16 -16 -24 16 16 24'
        mdl="progs/player.mdl"
      }

      info_player_start2:form =
      {
        Help = "Only used on start map for the return point from an episode"
        bbox='-16 -16 -24 16 16 24'
        mdl="progs/player.mdl"
      }

      testplayerstart:form =
      {
        Help = "Used to temporarly change the 'info_player_start'"
        bbox='-16 -16 -24 16 16 24'
        mdl="progs/player.mdl"
      }
  }
}


