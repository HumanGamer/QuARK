QQRKSRC1
// This file has been written by QuArK QuArK 6.4 alpha
// It's the text version of file: converted.qrk

{
  QuArKProtected = "1"
  Description = "HL2 CS Entities"

  Toolbox Folders.qtx =
  {
    Toolbox = "New map items..."
    Root = "HL2 CS Entities.qtxfolder"
    HL2 CS Entities.qtxfolder =
    {
      ;desc = "HL2 CS Entities"
      info_* entities.qtxfolder =
      {
        info_npc_spawn_destination:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "NPC Spawn Destination. (Consult npc_template_maker help for"
           " more info)"
          ReuseDelay = "1"
        }
        info_ladder_dismount:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to handle endpoints for multiple ladders that are"
           " too close to each other."
        }
        info_projecteddecal:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that projects a decal onto the world (or props). "
           "If the decal has no target name, it will immediately apply itself "
           "when the level is loaded. If it has a name specified, it won't app"
           "ly until it receives the 'Activate' input."
          Distance = "64"
        }
        info_no_dynamic_shadow:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Use this entity to mark surfaces that shouldn't receive dyn"
           "amic shadows."
        }
        info_player_start:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "This entity indicates the position and facing direction at "
           "which the player will spawn. Any number of info_player_start entit"
           "ies may be placed in a map for when working in cordoned-off portio"
           "ns of the map. When multiple info_player_start entities are presen"
           "t in a map, set the 'Master' spawnflag on one of them to indicate "
           "which one should be used when running the entire map."
        }
        info_overlay:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that places an overlay on the world."
          RenderOrder = "0"
          StartU = "0.0"
          EndU = "1.0"
          StartV = "0.0"
          EndV = "1.0"
        }
        info_intermission:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that defines an intermission spot where dead play"
           "ers will float until they respawn."
        }
        info_landmark:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that acts as a landmark for transitions to anothe"
           "r level. There should be a corresponding info_landmark entity in t"
           "he next map. Entities will be transitioned to the next level relat"
           "ive to the info_landmark entities."
        }
        info_null:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that's immediately removed on spawning. Useful as"
           " a spotlight target."
        }
        info_target:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that does nothing. Very useful as a positioning e"
           "ntity for other entities to refer to (i.e. the endpoint of an env_"
           "beam)"
        }
        info_lighting:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that can be used to change the lighting origin of"
           " a prop_static. Set the prop_static's Lighting Origin to point at "
           "this entity to make the prop_static light as if it was at the info"
           "_lighting's origin. Good for prop_static entities that are embedde"
           "d in world geometry (like rocks/windows/etc)."
        }
        info_teleport_destination:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that does nothing itself, but is used to specify "
           "the destination for a trigger_teleport entity."
        }
        info_node:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A navigation node for ground moving NPCs. Navigation nodes "
           "are baked into the nodegraph so that NPCs can move to them. Ground"
           " nodes fall to the ground when they spawn."
        }
        info_node_hint:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A navigation node for ground moving NPCs that includes some"
           " context information for NPCs that are interested in it. The hint "
           "might indicate a window that could be looked out of, or an item of"
           " interest that could be commented on. Many hint nodes are NPC-spec"
           "ific, so it's helpful to use naming conventions like 'Crow: Fly to"
           " point' in the hint choices list. The angles of a hint node indica"
           "te what direction the NPC should face to perform the hint behavior"
           ".\n\nIt's important to understand the distinction between scripts,"
           " such as scripted_sequence and scripted_schedule, and info_hint en"
           "tities. Scripts summon NPCs to specific cue points to play their p"
           "arts, while hints provide context information to the AI that they "
           "use to perform their behaviors. Hints require code support in the "
           "NPC, while scripts are generic and may require only animations to "
           "play. Use a hint if the behavior is driven by the AI, use a script"
           " if the behavior is driven by the map."
        }
        info_node_air:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A navigation node for flying NPCs. Air navigation nodes are"
           " baked into the nodegraph so that NPCs can move to them. Air nodes"
           " do not fall to the ground when they spawn."
          nodeheight = "0"
        }
        info_node_air_hint:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A navigation node for flying NPCs that includes some contex"
           "t information for NPCs that are interested in it. The hint might i"
           "ndicate a window that could be looked into, or an item of interest"
           " that could be commented on. Many hint nodes are NPC-specific, so "
           "it's helpful to use naming conventions like 'Crow: Fly to point' i"
           "n the hint choices list. The angles of a hint node indicate what d"
           "irection the NPC should face to perform the hint behavior."
          nodeheight = "0"
        }
        info_hint:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A hint that is not used for navigation. They don't go into "
           "the nodegraph, nor do they fall to the ground. Use these to provid"
           "e some spatial context for NPCs, such as 'look here if you can't f"
           "ind the player' or 'throw rocks at this spot'."
        }
        info_node_link:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A dynamic connection between two navigation nodes. You spec"
           "ify the node IDs of the start and end nodes, and then you can use "
           "entity I/O to turn on and off the connection. This could be used t"
           "o create or destroy a connection in the nodegraph because of some "
           "event in your map (a bridge being created/destroyed, etc)."
          initialstate = "1"
        }
        info_node_link_controller:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that controls all connections between nodes that "
           "intersect the controller's volume. This allows for mass enabling/d"
           "isabling of all node connections through a volume."
          mins = "-8 -32 -36"
          maxs = "8 32 36"
          initialstate = "1"
        }
        info_node_climb:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A climb-node for AI navigation. Only usable by NPCs that ca"
           "n climb."
        }
      }
      npc_* entities.qtxfolder =
      {
        npc_template_maker:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates NPCs. The NPCs it creates are clones"
           " of a template NPC. NPCs are spawned around this maker's origin, o"
           "r at specified destination points."
          Radius = "256"
          CriterionVisibility = "2"
          CriterionDistance = "2"
        }
      }
      other entities.qtxfolder =
      {
        worldspawn:b =
        {
          ;desc = "This is the world entity. Each map can only contain one, an"
           "d it's automatically created for you."
        }
        cycler:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to display a model for testing purposes. Sho"
           "oting it with cycle through the model's animations."
          skin = "0"
          sequence = "0"
        }
        gibshooter:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that shoots out gibs. Style of body part depends "
           "on language type."
        }
        infodecal:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that places a decal on the world. If the decal ha"
           "s no target name, it will immediately apply itself when the level "
           "is loaded. If it has a name specified, it won't apply until it rec"
           "eives the 'Activate' input."
          LowPriority = "0"
        }
        light:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An invisible lightsource."
          _distance = "0"
        }
      }
      ambient_* entities.qtxfolder =
      {
        ambient_generic:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Universal ambient sound. Use it to play and control a singl"
           "e sound."
          health = "10"
          preset = "0"
          volstart = "0"
          fadein = "0"
          fadeout = "0"
          pitch = "100"
          pitchstart = "100"
          spinup = "0"
          spindown = "0"
          lfotype = "0"
          lforate = "0"
          lfomodpitch = "0"
          lfomodvol = "0"
          cspinup = "0"
          radius = "1250"
          spawnflags = "48"
        }
      }
      func_* entities.qtxfolder =
      {
        func_lod:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Brush-built model that fades out over a specified distance."
           " Useful for creating world detail that doesn't need to be drawn fa"
           "r away, for performance reasons."
          DisappearDist = "2000"
          Solid = "0"
        }
        func_ladder:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Ladder"
        }
        func_useableladder:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A Half-Life 2 ladder. Handles player auto mount/unmount. Se"
           "e also 'func_ladderendpoint', used to specify the two endpoints of"
           " a ladder, and 'info_ladder_dismount', used to specify ladder auto"
           "-dismount points."
          StartDisabled = "0"
        }
        func_ladderendpoint:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to specify the endpoints of a ladder. To be "
           "valid, a full sized player hull traced between the start and end p"
           "oints must not be obstructed at level activation time. The angle d"
           "etermines in which direction the player leaves the ladder if the p"
           "layer presses the +jump button."
        }
        func_areaportalwindow:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "An entity that can be used to optimize the visibility in a "
           "map. If you seal off an area with them, then when the viewer moves"
           " a certain distance away from them, they will go opaque and the pa"
           "rts inside the area will not be drawn. The 'target' bmodel should "
           "enclose the func_areaportal window so no parts of it are culled by"
           " the window. If you use the optional foreground bmodel, then it sh"
           "ould enclose the 'target' bmodel."
          FadeStartDist = "128"
          FadeDist = "512"
          TranslucencyLimit = "0.2"
        }
        func_wall:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Legacy support. Use func_brush instead."
        }
        func_clip_vphysics:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "A brush entity that's considered solid to vphysics."
        }
        func_brush:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "An brush built entity with various features."
          Solidity = "0"
          solidbsp = "0"
        }
        func_movelinear:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "A brush entity that moves linearly along a given distance, "
           "in a given direction."
          movedir = "0 0 0"
          startposition = "0"
          speed = "100"
          movedistance = "100"
          blockdamage = "0"
        }
        func_water_analog:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "A water brush entity that moves linearly along a given dist"
           "ance, in a given direction"
          movedir = "0 0 0"
          startposition = "0"
          speed = "100"
          movedistance = "100"
          WaveHeight = "3.0"
        }
        func_rotating:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "A rotating brush entity."
          maxspeed = "100"
          fanfriction = "20"
          volume = "10"
          spawnflags = "512"
          dmg = "0"
          solidbsp = "0"
        }
        func_platrot:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "A brush entity that moves vertically, and can rotate while "
           "doing so."
          spawnflags = "1"
          speed = "50"
          height = "0"
          rotation = "0"
        }
      }
      env_* entities.qtxfolder =
      {
        env_zoom:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that can be used to control the player's FOV. Use"
           "ful for scenes where the player's view is being controlled, or pla"
           "yer usable binoculars / telescopes, etc."
          Rate = "1.0"
          FOV = "75"
        }
        env_screenoverlay:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that can display and control a set of screen over"
           "lays, to be displayed over the player's view. Useful for view effe"
           "cts like drunkenness, or teleporter afterimages, etc."
          OverlayTime1 = "1.0"
          OverlayTime2 = "1.0"
          OverlayTime3 = "1.0"
          OverlayTime4 = "1.0"
          OverlayTime5 = "1.0"
          OverlayTime6 = "1.0"
          OverlayTime7 = "1.0"
          OverlayTime8 = "1.0"
          OverlayTime9 = "1.0"
          OverlayTime10 = "1.0"
        }
        env_texturetoggle:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that allows you to change the textures on other b"
           "rush-built entities."
        }
        env_splash:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates a splash effect at it's origin. If t"
           "he 'find water surface' spawnflag is set, it will instead trace do"
           "wn below itself to find the water surface on which to create splas"
           "hes."
          scale = "8.0"
          spawnflags = "2"
        }
        env_particlelight:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that can be used to light the smoke particles emi"
           "tted by env_smokestack entities. Currently does not light any othe"
           "r particles."
          Color = "255 0 0"
          Intensity = "5000"
          directional = "0"
        }
        env_sun:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to control & draw a sun effect in the sky."
          use_angles = "0"
          pitch = "0"
          rendercolor = "100 80 80"
          size = "16"
        }
        env_lightglow:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that puts an additive glow in the world, mostly u"
           "sed over light sources."
          rendercolor = "255 255 255"
          VerticalGlowSize = "30"
          HorizontalGlowSize = "30"
          MinDist = "500"
          MaxDist = "2000"
          OuterMaxDist = "0"
          GlowProxySize = "2.0"
        }
        env_smokestack:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that spits out a constant stream of smoke. See pa"
           "rticlezoo.vmf for sample usage. You can place up to two env_partic"
           "lelight entities near the smoke stack to add ambient light to its "
           "particles."
          InitialState = "0"
          BaseSpread = "20"
          SpreadSpeed = "15"
          Speed = "30"
          StartSize = "20"
          EndSize = "30"
          Rate = "20"
          JetLength = "180"
          WindAngle = "0"
          WindSpeed = "0"
          SmokeMaterial = "particle/SmokeStack.vmt"
          twist = "0"
          rendercolor = "255 255 255"
          renderamt = "255"
        }
        env_fade:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that controls screen fades."
          duration = "2"
          holdtime = "0"
          renderamt = "255"
          rendercolor = "0 0 0"
        }
        env_player_surface_trigger:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that monitors the material of the surface the pla"
           "yer is standing on, and fires outputs whenever it changes to/from "
           "a specific material."
          gamematerial = "0"
        }
        env_beam:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates a visible beam between two points. T"
           "he points can be attached to entities to make the beam move around"
           "."
          renderamt = "100"
          rendercolor = "255 255 255"
          Radius = "256"
          life = "1"
          BoltWidth = "2"
          NoiseAmplitude = "0"
          texture = "sprites/laserbeam.spr"
          TextureScroll = "35"
          framerate = "0"
          framestart = "0"
          StrikeTime = "1"
          damage = "0"
          TouchType = "0"
        }
        env_beverage:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "HL1 Legacy: Beverage Dispenser."
          health = "10"
          beveragetype = "0"
        }
        env_embers:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "An entity used to create a volume in which to spawn fire em"
           "bers."
          particletype = "0"
          density = "50"
          lifetime = "4"
          speed = "32"
          rendercolor = "255 255 255"
        }
        env_funnel:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "HL1 Legacy: Large Portal Funnel"
        }
        env_blood:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to spawn blood effects."
          spraydir = "0 0 0"
          color = "0"
          amount = "100"
        }
        env_bubbles:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "An entity used to create a volume in which to spawn bubbles"
           "."
          density = "2"
          frequency = "2"
          current = "0"
        }
        env_explosion:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates an explosion at it's origin."
          iMagnitude = "100"
          iRadiusOverride = "0"
          fireballsprite = "sprites/zerogxplode.spr"
          rendermode = "5"
        }
        env_smoketrail:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates a smoke trail."
          opacity = "0.75"
          spawnrate = "20"
          lifetime = "5.0"
          startcolor = "192 192 192"
          endcolor = "160 160 160"
          emittime = "0"
          minspeed = "10"
          maxspeed = "20"
          mindirectedspeed = "0"
          maxdirectedspeed = "0"
          startsize = "15"
          endsize = "50"
          spawnradius = "15"
          firesprite = "sprites/firetrail.spr"
          smokesprite = "sprites/whitepuff.spr"
        }
        env_global:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to control a global game state."
          initialstate = "0"
        }
        env_physexplosion:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates an explosion at it's origin. If the "
           "no-damage spawnflag is set, the explosion won't be visible, but wi"
           "ll apply force to any physics objects within it's radius."
          magnitude = "100"
          radius = "0"
          spawnflags = "1"
        }
        env_physimpact:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that will cause a physics impact on another entit"
           "y."
          angles = "0 0 0"
          magnitude = "100"
          distance = "0"
        }
        env_fire:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that handles a single flame at it's origin. The f"
           "lame causes heat 'damage' to other env_fire entities around it, an"
           "d will eventually ignite non-flaming env_fire entities nearby, cau"
           "sing the fire to spread."
          health = "30"
          firesize = "64"
          fireattack = "4"
          firetype = "0"
          ignitionpoint = "32"
          damagescale = "1.0"
        }
        env_firesource:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that provides heat to all nearby env_fire entitie"
           "s. Cannot be extinguished."
          fireradius = "128"
          firedamage = "10"
        }
        env_firesensor:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that detects changes in heat nearby."
          spawnflags = "1"
          fireradius = "128"
          heatlevel = "32"
          heattime = "0"
        }
        env_entity_igniter:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that catches a target entity on fire. If the enti"
           "ty is an animating model, it will have sprite flames attached to i"
           "ts skeleton. Otherwise the entity will emit particle flame puffs."
          lifetime = "10"
        }
        env_fog_controller:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that controls the fog and view distance in the ma"
           "p."
          fogenable = "0"
          fogblend = "0"
          use_angles = "0"
          fogcolor = "255 255 255"
          fogcolor2 = "255 255 255"
          fogdir = "1 0 0"
          fogstart = "500.0"
          fogend = "2000.0"
          farz = "-1"
        }
        env_steam:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to create a jet of steam."
          InitialState = "0"
          type = "0"
          SpreadSpeed = "15"
          Speed = "120"
          StartSize = "10"
          EndSize = "25"
          Rate = "26"
          rendercolor = "255 255 255"
          JetLength = "80"
          renderamt = "255"
        }
        env_laser:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates a laser beam between itself and a gi"
           "ven target."
          renderamt = "100"
          rendercolor = "255 255 255"
          width = "2"
          NoiseAmplitude = "0"
          texture = "sprites/laserbeam.spr"
          TextureScroll = "35"
          framestart = "0"
          damage = "100"
          dissolvetype = "None"
        }
        env_message:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that draws a text message on player's HUDs."
          messagevolume = "10"
          messageattenuation = "0"
        }
        env_hudhint:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to control the display of HUD hints. HUD hints ar"
           "e used to show the player what key is bound to a particular comman"
           "d."
        }
        env_shake:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to control screen shake on players."
          amplitude = "4"
          radius = "500"
          duration = "1"
          frequency = "2.5"
        }
        env_shooter:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that shoots models, or sprites, out of it's origi"
           "n."
          shootsounds = "-1"
          simulation = "0"
          skin = "0"
        }
        env_rotorshooter:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates gibs when it's within the influence "
           "of a helicopter's rotor wash."
          shootsounds = "-1"
          simulation = "0"
          skin = "0"
          rotortime = "1"
          rotortimevariance = "0.3"
        }
        env_soundscape_proxy:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that acts like a soundscape but gets all of its s"
           "ound parameters from another env_soundscape entity."
          radius = "128"
        }
        env_soundscape:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to control sound in an area. The active soundscap"
           "e at any time is the last one that had line-of-sight to the player"
           ", and was within the radius."
          radius = "128"
          soundscape = "Nothing"
        }
        env_soundscape_triggerable:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that works like env_soundscape except that it wor"
           "ks in conjunction with trigger_soundscape to determine when a play"
           "er hears it."
        }
        env_spark:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to create sparks at it's origin."
          MaxDelay = "0"
          Magnitude = "1"
          TrailLength = "1"
        }
        env_sprite:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that controls the drawing of a sprite in the worl"
           "d."
          framerate = "10.0"
          model = "sprites/glow01.spr"
          GlowProxySize = "2.0"
        }
        env_wind:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to control wind in the map. Unfinished."
          minwind = "20"
          maxwind = "50"
          mingust = "100"
          maxgust = "250"
          mingustdelay = "10"
          maxgustdelay = "20"
          gustdirchange = "20"
        }
      }
      game_* entities.qtxfolder =
      {
        game_ragdoll_manager:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to control the number of ragdolls in the world, f"
           "or performance reasons."
          MaxRagdollCount = "-1"
        }
        game_weapon_manager:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to limit the number of a particular weapon t"
           "ype in the world. Useful in places where NPCs are spawning rapidly"
           ", dying, and dropping weapons."
          maxpieces = "0"
        }
        game_end:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that ends a multiplayer game."
        }
        game_player_equip:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that gives equipment to the player who activates "
           "it. To use, add new keys to this entity, where each key is the cla"
           "ssname of a weapon/item, and the corresponding value is the number"
           " of those weapons/items to give to the player who uses this entity"
           ". If the 'Use Only' spawnflag isn't set, then players can just tou"
           "ch this entity to get the equipment."
        }
        game_player_team:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that changes the team of the player who activates"
           " it."
        }
        game_score:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that awards/deducts points from the player who ac"
           "tivates it."
          points = "1"
        }
        game_text:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that displays text on player's screens."
          x = "-1"
          y = "-1"
          effect = "0"
          color = "100 100 100"
          color2 = "240 110 0"
          fadein = "1.5"
          fadeout = "0.5"
          holdtime = "1.2"
          fxtime = "0.25"
          channel = "1"
        }
        game_ui:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to override player input when the player's l"
           "ooking at it."
          spawnflags = "480"
          FieldOfView = "-1.0"
        }
        game_zone_player:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "An entity used to count the number of players within a zone"
           "."
        }
      }
      vgui_* entities.qtxfolder =
      {
        vgui_screen:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "A VGUI screen. Useful for in-world monitors."
        }
      }
      sky_* entities.qtxfolder =
      {
        sky_camera:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to control the 3D Skybox. It's origin is use"
           "d to determine the 3D Skybox's position relative to the map. Place"
           " this entity, in the 3D Skybox, at the point where the origin of t"
           "he map should be."
          scale = "16"
          fogenable = "0"
          fogblend = "0"
          use_angles = "0"
          fogcolor = "255 255 255"
          fogcolor2 = "255 255 255"
          fogdir = "1 0 0"
          fogstart = "500.0"
          fogend = "2000.0"
        }
      }
      point_* entities.qtxfolder =
      {
        point_enable_motion_fixup:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity used to move a motion-disabled prop when it enabl"
           "es motion. Parent this entity to the prop, and when the prop has i"
           "t's motion enabled, it will immediately teleport to the origin of "
           "this entity."
        }
        point_message:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that displays a text message in the world, at it'"
           "s origin."
          radius = "128"
          developeronly = "0"
        }
        point_spotlight:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to draw a spotlight. Will draw a beam when the pl"
           "ayer views it side on, and a halo when it's facing towards the pla"
           "yer. Unless the 'No Dynamic Light' spawnflag is checked, it will a"
           "lso create a dynamic light wherever the end of the spotlight rests"
           "."
          spawnflags = "1"
          spotlightlength = "500"
          spotlightwidth = "50"
          rendercolor = "255 255 255"
        }
        point_tesla:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that creates tesla lightning arcs around it's ori"
           "gin."
          m_SoundName = "DoSpark"
          texture = "sprites/physbeam.vmt"
          m_Color = "255 255 255"
          m_flRadius = "200"
          beamcount_min = "6"
          beamcount_max = "8"
          thick_min = "4"
          thick_max = "5"
          lifetime_min = "0.3"
          lifetime_max = "0.3"
          interval_min = "0.5"
          interval_max = "2"
        }
        point_clientcommand:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that issues commands to the client console, as if"
           " it was typed in by the player (if activator is a player, or the l"
           "ocal player in single player)."
        }
        point_servercommand:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that issues commands to the server console."
        }
      }
      phys_* entities.qtxfolder =
      {
        phys_ragdollmagnet:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity that acts like a magnet for ragdolls. Useful for "
           "crafting exaggerated ragdoll behavior (i.e. guys falling over rail"
           "s on death). If the Bar Magnet spawnflag is set, the magnet works "
           "like it was a cylindrical magnet i.e. it attracts ragdolls to the "
           "nearest point on a line."
          radius = "512"
          force = "5000"
        }
      }
      light_* entities.qtxfolder =
      {
        light_environment:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Sets the color and angle of the light from the sun and sky."
          pitch = "0"
          _light = "255 255 255 200"
          _ambient = "255 255 255 20"
        }
        light_spot:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Spotlight."
          _inner_cone = "30"
          _cone = "45"
          _exponent = "1"
          _distance = "0"
          pitch = "-90"
        }
        light_dynamic:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An invisible lightsource that changes in some way over time"
           "."
          _light = "255 255 255 200"
          brightness = "0"
          _inner_cone = "30"
          _cone = "45"
          pitch = "-90"
          distance = "120"
          spotlight_radius = "80"
          style = "0"
        }
      }
      shadow_* entities.qtxfolder =
      {
        shadow_control:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "An entity to control the shadows in the map."
          angles = "80 30 0"
          color = "128 128 128"
          distance = "75"
        }
      }
    }
  }
  Entity Forms.fctx =
  {
    t_Angles:incl =
    {
      angles: =
      {
        txt = "&"
        hint = "Pitch Yaw Roll (Y Z X)"
      }
    }
    t_Origin:incl =
    {
      origin: =
      {
        txt = "&"
        hint = "Origin (X Y Z)"
      }
    }
    t_Studiomodel:incl =
    {
      model: =
      {
        txt = "&"
        hint = "World Model"
      }
      skin: =
      {
        txt = "&"
        hint = "Skin"
      }
      disableshadows: =
      {
        txt = "&"
        hint = "Disable Shadows"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      lightingoriginhack: =
      {
        txt = "&"
        hint = "Lighting Origin Hack"
      }
      Skin: =
      {
        txt = "&"
        hint = "Changes the model skin to the specified number."
      }
      SetLightingOriginHack: =
      {
        txt = "&"
        hint = "Sets the info_lighting_relative for the studiomodel. Use a nul"
         "l string to deactivate the use of specific lighting origins."
      }
      DisableShadow: =
      {
        txt = "&"
        hint = "Turn shadow off."
      }
      EnableShadow: =
      {
        txt = "&"
        hint = "Turn shadow on."
      }
      OnIgnite: =
      {
        txt = "&"
        hint = "Fired when this object catches fire."
      }
    }
    t_BasePlat:incl =
    {
      Toggle: =
      {
        txt = "&"
        hint = "Toggles the platform's state."
      }
      GoUp: =
      {
        txt = "&"
        hint = "Tells the platform to go up."
      }
      GoDown: =
      {
        txt = "&"
        hint = "Tells the platform to go down."
      }
    }
    t_Targetname:incl =
    {
      targetname: =
      {
        txt = "&"
        hint = "Name"
      }
      Kill: =
      {
        txt = "&"
        hint = "Removes this entity from the world."
      }
      KillHierarchy: =
      {
        txt = "&"
        hint = "Removes this entity and all its children from the world."
      }
      AddOutput: =
      {
        txt = "&"
        hint = "Adds an entity I/O connection to this entity. Format: <output "
         "name> <targetname>:<inputname>:<parameter>:<delay>:<max times to fir"
         "e (-1 == infinite)>. Very dangerous, use with care."
      }
      FireUser1: =
      {
        txt = "&"
        hint = "Causes this entity's OnUser1 output to be fired."
      }
      FireUser2: =
      {
        txt = "&"
        hint = "Causes this entity's OnUser2 output to be fired."
      }
      FireUser3: =
      {
        txt = "&"
        hint = "Causes this entity's OnUser3 output to be fired."
      }
      FireUser4: =
      {
        txt = "&"
        hint = "Causes this entity's OnUser4 output to be fired."
      }
      OnUser1: =
      {
        txt = "&"
        hint = "Fired in response to FireUser1 input."
      }
      OnUser2: =
      {
        txt = "&"
        hint = "Fired in response to FireUser2 input."
      }
      OnUser3: =
      {
        txt = "&"
        hint = "Fired in response to FireUser3 input."
      }
      OnUser4: =
      {
        txt = "&"
        hint = "Fired in response to FireUser4 input."
      }
    }
    t_Parentname:incl =
    {
      parentname: =
      {
        txt = "&"
        hint = "Parent"
      }
      SetParent: =
      {
        txt = "&"
        hint = "Changes the entity's parent in the movement hierarchy."
      }
      SetParentAttachment: =
      {
        txt = "&"
        hint = "Change this entity to attach to a specific attachment point on"
         " it's parent. Entities must be parented before being sent this input"
         ". The parameter passed in should be the name of the attachment."
      }
      ClearParent: =
      {
        txt = "&"
        hint = "Removes this entity from the the movement hierarchy, leaving i"
         "t free to move independently."
      }
    }
    t_BaseBrush:incl =
    {
      SetTextureIndex: =
      {
        txt = "&"
        hint = "Used by HL1Port. Sets the brush texture index. Use a material_"
         "modify_control entity instead."
      }
      IncrementTextureIndex: =
      {
        txt = "&"
        hint = "Used by HL1Port. Increments the brush texture index. Use a mat"
         "erial_modify_control entity instead."
      }
    }
    t_EnableDisable:incl =
    {
      StartDisabled: =
      {
        txt = "&"
        hint = "Start Disabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Enable: =
      {
        txt = "&"
        hint = "Enable this entity."
      }
      Disable: =
      {
        txt = "&"
        hint = "Disable this entity."
      }
    }
    t_RenderFxChoices:incl =
    {
      renderfx: =
      {
        txt = "&"
        hint = "Render FX"
        typ = "C"
        items = "Normal"$0D"Slow Pulse"$0D"Fast Pulse"$0D"Slow Wide Pulse"$0D"F"
         "ast Wide Pulse"$0D"Slow Strobe"$0D"Fast Strobe"$0D"Faster Strobe"$0D
         "Slow Flicker"$0D"Fast Flicker"$0D"Slow Fade Away"$0D"Fast Fade Away"$0D
         "Slow Become Solid"$0D"Fast Become Solid"$0D"Constant Glow"$0D"Distor"
         "t"$0D"Hologram (Distort + fade)"$0D"Cull By Distance (TEST)"$0D"Spot"
         "light FX"$0D"Fade Near"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"$0D
         "5"$0D"6"$0D"7"$0D"8"$0D"14"$0D"15"$0D"16"$0D"23"$0D"24"$0D"26"
      }
    }
    t_Shadow:incl =
    {
      disableshadows: =
      {
        txt = "&"
        hint = "Disable shadows"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      DisableShadow: =
      {
        txt = "&"
        hint = "Turn shadow off."
      }
      EnableShadow: =
      {
        txt = "&"
        hint = "Turn shadow on."
      }
    }
    t_RenderFields:incl =
    {
      t_RenderFxChoices = "!"
      rendermode: =
      {
        txt = "&"
        hint = "Render Mode"
        typ = "C"
        items = "Normal"$0D"Color"$0D"Texture"$0D"Glow"$0D"Solid"$0D"Additive"$0D
         "Additive Fractional Frame"$0D"World Space Glow"$0D"Dont Render"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"7"$0D"9"$0D"10"
      }
      renderamt: =
      {
        txt = "&"
        hint = "FX Amount (0 - 255)"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "FX Color (R G B)"
      }
      disablereceiveshadows: =
      {
        txt = "&"
        hint = "Disable Receiving Shadows"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
    }
    t_DXLevelChoice:incl =
    {
      mindxlevel: =
      {
        txt = "&"
        hint = "Minimum DX Level"
        typ = "C"
        items = "default (lowest)"$0D"dx7"
        values = "0"$0D"70"
      }
      maxdxlevel: =
      {
        txt = "&"
        hint = "Maximum DX Level"
        typ = "C"
        items = "default (highest)"$0D"dx6"
        values = "0"$0D"60"
      }
    }
    t_Inputfilter:incl =
    {
      InputFilter: =
      {
        txt = "&"
        hint = "Input Filter"
        typ = "C"
        items = "Allow all inputs"$0D"Ignore Touch/Untouch"$0D"Ignore Use"$0D"I"
         "gnore All"
        values = "0"$0D"8"$0D"16"$0D"32"
      }
    }
    t_Global:incl =
    {
      globalname: =
      {
        txt = "&"
        hint = "Global Entity Name"
      }
    }
    t_DamageFilter:incl =
    {
      damagefilter: =
      {
        txt = "&"
        hint = "Damage Filter"
      }
      SetDamageFilter: =
      {
        txt = "&"
        hint = "Sets the entity to use as damage filter. Pass in an empty stri"
         "ng to clear the damage filter."
      }
    }
    t_ResponseContext:incl =
    {
      AddContext: =
      {
        txt = "&"
        hint = "Adds a context to this entity's list of response contexts. The"
         " format should be 'key:value'."
      }
      RemoveContext: =
      {
        txt = "&"
        hint = "Remove a context from this entity's list of response contexts."
         " The name should match the 'key' of a previously added context."
      }
      ClearContext: =
      {
        txt = "&"
        hint = "Removes all contexts in this entity's list of response context"
         "s."
      }
      ResponseContext: =
      {
        txt = "&"
        hint = "Response Contexts"
      }
    }
    t_Breakable:incl =
    {
      t_Targetname = "!"
      t_DamageFilter = "!"
      t_Shadow = "!"
      ExplodeDamage: =
      {
        txt = "&"
        hint = "Explosion Damage"
      }
      ExplodeRadius: =
      {
        txt = "&"
        hint = "Explosion Radius"
      }
      PerformanceMode: =
      {
        txt = "&"
        hint = "Performance Mode"
        typ = "C"
        items = "Normal"$0D"Limit Gibs"$0D"Full Gibs on All Platforms"
        values = "0"$0D"1"$0D"2"
      }
      Break: =
      {
        txt = "&"
        hint = "Breaks the breakable."
      }
      SetHealth: =
      {
        txt = "&"
        hint = "Sets a new value for the breakable's health. If the breakable'"
         "s health reaches zero it will break."
      }
      AddHealth: =
      {
        txt = "&"
        hint = "Adds health to the breakable. If the breakable's health reache"
         "s zero it will break."
      }
      RemoveHealth: =
      {
        txt = "&"
        hint = "Removes health from the breakable. If the breakable's health r"
         "eaches zero it will break."
      }
      EnablePhyscannonPickup: =
      {
        txt = "&"
        hint = "Makes the breakable able to picked up by the physcannon."
      }
      DisablePhyscannonPickup: =
      {
        txt = "&"
        hint = "Makes the breakable not able to picked up by the physcannon."
      }
      OnBreak: =
      {
        txt = "&"
        hint = "Fired when this breakable breaks."
      }
      OnHealthChanged: =
      {
        txt = "&"
        hint = "Fired when the health of this breakable changes, passing the n"
         "ew value of health as a percentage of max health, from [0..1]."
      }
      OnPhysCannonDetach: =
      {
        txt = "&"
        hint = "Fired when the physcannon has ripped this breakable off of the"
         " wall. Only fired if ACT_PHYSCANNON_DETACH is defined in the model t"
         "his breakable is using."
      }
    }
    t_BreakableBrush:incl =
    {
      t_Breakable = "!"
      t_Parentname = "!"
      t_Global = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Only Break on Trigger"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Break on Touch"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Break on Pressure"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Break immediately on Physics"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1024"
        cap = "Don't take physics damage"
      }
      propdata: =
      {
        txt = "&"
        hint = "Prop Data"
        typ = "C"
        items = "None"$0D"Wooden.Tiny"$0D"Wooden.Small"$0D"Wooden.Medium"$0D"W"
         "ooden.Large"$0D"Wooden.Huge"$0D"Metal.Small"$0D"Metal.Medium"$0D"Met"
         "al.Large"$0D"Cardboard.Small"$0D"Cardboard.Medium"$0D"Cardboard.Larg"
         "e"$0D"Stone.Small"$0D"Stone.Medium"$0D"Stone.Large"$0D"Stone.Huge"$0D
         "Glass.Small"$0D"Plastic.Small"$0D"Plastic.Medium"$0D"Plastic.Large"$0D
         "Pottery.Small"$0D"Pottery.Medium"$0D"Pottery.Large"$0D"Pottery.Huge"$0D
         "Glass.Window"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"1"
         "0"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D
         "20"$0D"21"$0D"22"$0D"23"$0D"24"
      }
      health: =
      {
        txt = "&"
        hint = "Strength"
      }
      material: =
      {
        txt = "&"
        hint = "Material Type"
        typ = "C"
        items = "Glass"$0D"Wood"$0D"Metal"$0D"Flesh"$0D"CinderBlock"$0D"Ceilin"
         "g Tile"$0D"Computer"$0D"Unbreakable Glass"$0D"Rocks"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"
      }
      explosion: =
      {
        txt = "&"
        hint = "Gibs Direction"
        typ = "C"
        items = "Random"$0D"Relative to Attack"$0D"Use Precise Gib Dir"
        values = "0"$0D"1"$0D"2"
      }
      gibdir: =
      {
        txt = "&"
        hint = "Precise Gib Direction"
      }
      nodamageforces: =
      {
        txt = "&"
        hint = "Damaging it Doesn't Push It"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      EnableDamageForces: =
      {
        txt = "&"
        hint = "Damaging the entity applies physics forces to it."
      }
      DisableDamageForces: =
      {
        txt = "&"
        hint = "Damaging the entity does *not* apply physics forces to it."
      }
      gibmodel: =
      {
        txt = "&"
        hint = "Gib Model"
      }
      spawnobject: =
      {
        txt = "&"
        hint = "Spawn On Break"
        typ = "C"
        items = "item_battery"$0D"item_healthkit"$0D"item_ammo_pistol"$0D"item"
         "_ammo_pistol_large"$0D"item_ammo_smg1"$0D"item_ammo_smg1_large"$0D"i"
         "tem_ammo_ar2"$0D"item_ammo_ar2_large"$0D"item_box_buckshot"$0D"item_"
         "flare_round"$0D"item_box_flare_rounds"$0D"item_ml_grenade"$0D"item_s"
         "mg1_grenade"$0D"item_box_sniper_rounds"$0D"unused1"$0D"weapon_stunst"
         "ick"$0D"weapon_ar1"$0D"weapon_ar2"$0D"unused2"$0D"weapon_ml"$0D"weap"
         "on_smg1"$0D"weapon_smg2"$0D"weapon_slam"$0D"weapon_shotgun"$0D"weapo"
         "n_molotov"$0D"item_dynamic_resupply"
        values = "1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D
         "11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D"20"$0D
         "21"$0D"22"$0D"23"$0D"24"$0D"25"$0D"26"
      }
      explodemagnitude: =
      {
        txt = "&"
        hint = "Explode Magnitude"
      }
      pressuredelay: =
      {
        txt = "&"
        hint = "Pressure Delay"
      }
    }
    t_BreakableProp:incl =
    {
      t_Breakable = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Break on Touch"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Break on Pressure"
      }
      pressuredelay: =
      {
        txt = "&"
        hint = "Pressure Delay"
      }
    }
    t_BaseNPC:incl =
    {
      t_Targetname = "!"
      t_Angles = "!"
      t_RenderFields = "!"
      t_DamageFilter = "!"
      t_ResponseContext = "!"
      t_Shadow = "!"
      target: =
      {
        txt = "&"
        hint = "Target Path Corner"
      }
      squadname: =
      {
        txt = "&"
        hint = "Squad Name"
      }
      hintgroup: =
      {
        txt = "&"
        hint = "Hint Group"
      }
      hintlimiting: =
      {
        txt = "&"
        hint = "Hint Limit Nav"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Wait Till Seen"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Gag (No IDLE sounds until angry)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Fall to ground (unchecked means *teleport* to ground)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Drop Healthkit"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Efficient - Don't acquire enemies or avoid obstacles"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Wait For Script"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Long Visibility/Shoot"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Fade Corpse"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1024"
        cap = "Think outside PVS"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2048"
        cap = "Template NPC (used by npc_maker, will not spawn)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "Do Alternate collision for this NPC (player avoidance)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8192"
        cap = "Don't drop weapons"
      }
      sleepstate: =
      {
        txt = "&"
        hint = "Sleep State"
        typ = "C"
        items = "None"$0D"Waiting for threat"$0D"Waiting for PVS"$0D"Waiting f"
         "or input"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
      wakeradius: =
      {
        txt = "&"
        hint = "Wake Radius"
      }
      wakesquad: =
      {
        txt = "&"
        hint = "Wake Squad"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      lightingoriginhack: =
      {
        txt = "&"
        hint = "Lighting Origin Hack"
      }
      SetLightingOriginHack: =
      {
        txt = "&"
        hint = "Sets the info_lighting_relative for the studiomodel. Use a nul"
         "l string to deactivate the use of specific lighting origins."
      }
      physdamagescale: =
      {
        txt = "&"
        hint = "Physics Impact Damage Scale"
      }
      OnDamaged: =
      {
        txt = "&"
        hint = "Fired when this NPC takes damage."
      }
      OnDeath: =
      {
        txt = "&"
        hint = "Fired when this NPC is killed."
      }
      OnHalfHealth: =
      {
        txt = "&"
        hint = "Fired when this NPC reaches half of its maximum health."
      }
      OnHearWorld: =
      {
        txt = "&"
        hint = "Fired when this NPC hears a sound (other than combat or the pl"
         "ayer)."
      }
      OnHearPlayer: =
      {
        txt = "&"
        hint = "Fired when this NPC hears the player."
      }
      OnHearCombat: =
      {
        txt = "&"
        hint = "Fired when this NPC hears combat sounds."
      }
      OnFoundEnemy: =
      {
        txt = "&"
        hint = "Fired when this NPC establishes line of sight to it's enemy (o"
         "utputs entity)."
      }
      OnLostEnemyLOS: =
      {
        txt = "&"
        hint = "Fired when this NPC loses line of sight to it's enemy."
      }
      OnLostEnemy: =
      {
        txt = "&"
        hint = "Fired when this NPC loses it's enemy. Usually due to the enemy"
         " being killed/removed, or because this NPC has selected a newer, mor"
         "e dangerous enemy."
      }
      OnFoundPlayer: =
      {
        txt = "&"
        hint = "Fired when this NPC establishes line of sight to it's enemy, a"
         "nd that enemy is a player (outputs player entity)."
      }
      OnLostPlayerLOS: =
      {
        txt = "&"
        hint = "Fired when this NPC loses line of sight to it's enemy, and tha"
         "t enemy is a player."
      }
      OnLostPlayer: =
      {
        txt = "&"
        hint = "Fired when this NPC loses it's enemy, and that enemy was a pla"
         "yer. Usually due to the enemy being killed/removed, or because this "
         "NPC has selected a newer, more dangerous enemy."
      }
      OnDamagedByPlayer: =
      {
        txt = "&"
        hint = "Fired when this NPC is hurt by a player."
      }
      OnDamagedByPlayerSquad: =
      {
        txt = "&"
        hint = "Fired when this NPC is hurt by a player OR by one of the playe"
         "r's squadmates."
      }
      OnDenyCommanderUse: =
      {
        txt = "&"
        hint = "Fired when this NPC has refused to join the player's squad."
      }
      OnWake: =
      {
        txt = "&"
        hint = "Fired when this NPC comes out of a sleep state."
      }
      SetRelationship: =
      {
        txt = "&"
        hint = "Changes this entity's relationship with another entity or clas"
         "s. Format: <entityname/classname> <D_HT/D_FR/D_LI/D_NU> <priority>"
      }
      SetHealth: =
      {
        txt = "&"
        hint = "Set this NPC's health."
      }
      SetBodyGroup: =
      {
        txt = "&"
        hint = "HACK: Sets this NPC's body group (from 0 - n). You'd better kn"
         "ow what you are doing!"
      }
      physdamagescale: =
      {
        txt = "&"
        hint = "Sets the value that scales damage energy when this character i"
         "s hit by a physics object. NOTE: 0 means this feature is disabled fo"
         "r backwards compatibility."
      }
      Ignite: =
      {
        txt = "&"
        hint = "Ignite, burst into flames"
      }
      Break: =
      {
        txt = "&"
        hint = "Break, smash into pieces"
      }
      StartScripting: =
      {
        txt = "&"
        hint = "Enter scripting state. In this state, NPCs ignore a variety of"
         " stimulus that would make them break out of their scripts: They igno"
         "re danger sounds, ignore +USE, don't idle speak or respond to other "
         "NPC's idle speech, and so on."
      }
      StopScripting: =
      {
        txt = "&"
        hint = "Exit scripting state."
      }
      Assault: =
      {
        txt = "&"
        hint = "Start an assault. Parameter passed in should be the name of th"
         "e rally point."
      }
      SetSquad: =
      {
        txt = "&"
        hint = "Set the name of this NPC's squad. It will be removed from any "
         "existing squad automatically. Leaving the parameter blank will remov"
         "e the NPC from any existing squad."
      }
      Wake: =
      {
        txt = "&"
        hint = "Wakes up the NPC if it is sleeping."
      }
      ForgetEntity: =
      {
        txt = "&"
        hint = "Clears out the NPC's knowledge of a named entity."
      }
      GagEnable: =
      {
        txt = "&"
        hint = "Turn on the NPC Gag flag."
      }
      GagDisable: =
      {
        txt = "&"
        hint = "Turn off the NPC Gag flag."
      }
      IgnoreDangerSounds: =
      {
        txt = "&"
        hint = "Ignore danger sounds for the specified number of seconds."
      }
    }
    info_npc_spawn_destination:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      ReuseDelay: =
      {
        txt = "&"
        hint = "Reuse Delay"
      }
      RenameNPC: =
      {
        txt = "&"
        hint = "New NPC Name"
      }
      OnSpawnNPC: =
      {
        txt = "&"
        hint = "Fired when an NPC spawns at this destination."
      }
    }
    t_BaseNPCMaker:incl =
    {
      t_Targetname = "!"
      t_Angles = "!"
      t_EnableDisable = "!"
      StartDisabled: =
      {
        txt = "&"
        hint = "Start Disabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Fade Corpse"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Infinite Children"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Do Not Drop"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Don't Spawn While Visible"
      }
      MaxNPCCount: =
      {
        txt = "&"
        hint = "Num. of NPCs"
      }
      SpawnFrequency: =
      {
        txt = "&"
        hint = "Frequency"
      }
      MaxLiveChildren: =
      {
        txt = "&"
        hint = "Max Live NPCs"
      }
      OnSpawnNPC: =
      {
        txt = "&"
        hint = "Fired when an NPC is spawned. The activator is the NPC, and th"
         "e string is the name of the NPC."
      }
      OnAllSpawned: =
      {
        txt = "&"
        hint = "Fired when the spawned is exhausted (all children have been sp"
         "awned)."
      }
      OnAllSpawnedDead: =
      {
        txt = "&"
        hint = "Fired when the spawner is exhausted (all children have been sp"
         "awned) and all spawned children have died."
      }
      Spawn: =
      {
        txt = "&"
        hint = "Spawns an NPC."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggles the spawner enabled/disabled state."
      }
      Enable: =
      {
        txt = "&"
        hint = "Enables the spawner."
      }
      Disable: =
      {
        txt = "&"
        hint = "Disables the spawner."
      }
      AddMaxChildren: =
      {
        txt = "&"
        hint = "Adds to the number of NPCs that can spawn before the spawner i"
         "s exhausted. If an exhausted spawner is given some children to spawn"
         ", it still wont begin spawning until it is re-enabled with the Enabl"
         "e input."
      }
      SetMaxChildren: =
      {
        txt = "&"
        hint = "Sets the number of NPCs that can spawn before the spawner is e"
         "xhausted. If an exhausted spawner is given some children to spawn, i"
         "t still wont begin spawning until it is re-enabled with the Enable i"
         "nput."
      }
      SetMaxLiveChildren: =
      {
        txt = "&"
        hint = "Sets the maximum number of NPCs that can be alive at any one t"
         "ime from this spawner."
      }
      SetSpawnFrequency: =
      {
        txt = "&"
        hint = "Sets how often (in seconds) a new NPC will be spawned."
      }
    }
    npc_template_maker:form =
    {
      t_BaseNPCMaker = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Always use radius spawn"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Don't preload template models"
      }
      TemplateName: =
      {
        txt = "&"
        hint = "Name of template NPC"
      }
      Radius: =
      {
        txt = "&"
        hint = "Radius"
      }
      DestinationGroup: =
      {
        txt = "&"
        hint = "Name of Destination Group"
      }
      CriterionVisibility: =
      {
        txt = "&"
        hint = "Dest. Criterion: Visible to player?"
        typ = "C"
        items = "Yes"$0D"No"$0D"Don't Care"
        values = "0"$0D"1"$0D"2"
      }
      CriterionDistance: =
      {
        txt = "&"
        hint = "Dest. Criterion: Distance to player?"
        typ = "C"
        items = "Nearest"$0D"Farthest"$0D"Don't Care"
        values = "0"$0D"1"$0D"2"
      }
      SpawnNPCInRadius: =
      {
        txt = "&"
        hint = "Spawn an NPC somewhere within the maker's radius."
      }
      SpawnNPCInLine: =
      {
        txt = "&"
        hint = "Spawn an NPC somewhere within a line behind the maker."
      }
      ChangeDestinationGroup: =
      {
        txt = "&"
        hint = "Switch to a different set of Destination entities."
      }
    }
    t_BaseHelicopter:incl =
    {
      t_BaseNPC = "!"
      InitialSpeed: =
      {
        txt = "&"
        hint = "Initial Speed"
      }
      target: =
      {
        txt = "&"
        hint = "Target path_track"
      }
      MoveTopSpeed: =
      {
        txt = "&"
        hint = "The helicopter will immediately move at top speed toward its c"
         "urrent goal, or in its current orientation if it's on top of its goa"
         "l."
      }
      ChangePathCorner: =
      {
        txt = "&"
        hint = "Tell the helicopter to move to a path corner on a new path."
      }
      SelfDestruct: =
      {
        txt = "&"
        hint = "Self Destruct."
      }
      Activate: =
      {
        txt = "&"
        hint = "Activate. Use to wake up a helicopter that spawned with the 'A"
         "wait Input' spawnflag on."
      }
      SetTrack: =
      {
        txt = "&"
        hint = "Set a track for the helicopter to adhere to. The helicopter wi"
         "ll do nothing if he's on the same path, and will move to the closest"
         " point on the specified track if he's on a different path."
      }
      FlyToSpecificTrackViaPath: =
      {
        txt = "&"
        hint = "The helicopter will first fly to the closest point on the path"
         " if he's on a different path. Then he'll fly along the path to the s"
         "pecified track point."
      }
      StartPatrol: =
      {
        txt = "&"
        hint = "Start patrolling back and forth along the current track."
      }
      StopPatrol: =
      {
        txt = "&"
        hint = "Stop patrolling back and forth along the track. This will caus"
         "e the helicopter to come to rest at the track which he's currently f"
         "lying toward."
      }
      ChooseFarthestPathPoint: =
      {
        txt = "&"
        hint = "When tracking an enemy, choose the point on the path furthest "
         "from the enemy, but still in firing range."
      }
      ChooseNearestPathPoint: =
      {
        txt = "&"
        hint = "When tracking an enemy, choose the point on the path nearest f"
         "rom the enemy."
      }
      StartBreakableMovement: =
      {
        txt = "&"
        hint = "The helicopter is now allowed to disobey direct commands to go"
         " to particular points if he senses an enemy. He will move to the clo"
         "sest point (or farthest point, if ChooseFarthestPathPoint is used), "
         "on the path if he senses an enemy."
      }
      StopBreakableMovement: =
      {
        txt = "&"
        hint = "The helicopter can not disobey direct commands. He will contin"
         "ue to fly along his patrol path or to his specified target even if h"
         "e senses an enemy."
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "No Rotorwash"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Await Input"
      }
    }
    t_PlayerClass:incl =
    {
    }
    t_Light:incl =
    {
      _light: =
      {
        txt = "&"
        hint = "Brightness"
      }
      style: =
      {
        txt = "&"
        hint = "Appearance"
        typ = "C"
        items = "Normal"$0D"Fluorescent flicker"$0D"Slow, strong pulse"$0D"Slo"
         "w pulse, noblack"$0D"Gentle pulse"$0D"Flicker A"$0D"Flicker B"$0D"Ca"
         "ndle A"$0D"Candle B"$0D"Candle C"$0D"Fast strobe"$0D"Slow strobe"
        values = "0"$0D"10"$0D"2"$0D"11"$0D"5"$0D"1"$0D"6"$0D"3"$0D"7"$0D"8"$0D
         "4"$0D"9"
      }
      pattern: =
      {
        txt = "&"
        hint = "Custom Appearance"
      }
      _constant_attn: =
      {
        txt = "&"
        hint = "Constant"
      }
      _linear_attn: =
      {
        txt = "&"
        hint = "Linear"
      }
      _quadratic_attn: =
      {
        txt = "&"
        hint = "Quadratic"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turn the light on."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "The the light off."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggle the light's current state."
      }
      SetPattern: =
      {
        txt = "&"
        hint = "Set a custom pattern of light brightness for this light. Patte"
         "rn format is a string of characters, where 'a' is total darkness, 'z"
         "' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dar"
         "k to light."
      }
      FadeToPattern: =
      {
        txt = "&"
        hint = "Fades from first value in old pattern, to first value in the n"
         "ew given pattern. Pattern format is a string of characters, where 'a"
         "' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a "
         "steppy fade in from dark to light."
      }
    }
    t_Node:incl =
    {
      nodeid: =
      {
        txt = "&"
        hint = "Node ID"
      }
    }
    t_HintNode:incl =
    {
      t_Node = "!"
      hinttype: =
      {
        txt = "&"
        hint = "Hint"
        typ = "C"
        items = "None"$0D"World: Window"$0D"World: Act Busy Hint"$0D"World: Vi"
         "sually Interesting"$0D"World: Visually Interesting (Don't aim at)"$0D
         "World: Inhibit Combine Mines within 15 feet"$0D"Crouch Cover Medium"$0D
         "Crouch Cover Low"$0D"Waste Scanner Spawn"$0D"Entrance / Exit Pinch"$0D
         "Enemy Disadvantage Point"$0D"Health Kit"$0D"Urban: Shelter"$0D"Antli"
         "on: Burrow Point"$0D"Antlion: Thumper Flee Point"$0D"Headcrab: Burro"
         "w Point"$0D"Roller: Patrol Point"$0D"Roller: Cleanup Spot"$0D"Crow: "
         "Fly to point"$0D"Crow: Perch point"$0D"TF2 Bug: Patrol point"$0D"Fol"
         "lower: Wait point"$0D"Override jump permission"$0D"Player squad tran"
         "sition point"$0D"NPC exit point"$0D"Strider node"$0D"HL1 World: Mach"
         "inery"$0D"HL1 World: Blinking Light"$0D"HL1 World: Human Blood"$0D"H"
         "L1 World: Alien Blood"$0D"CS Hostage: Escape Point"
        values = "0"$0D"2"$0D"12"$0D"13"$0D"14"$0D"15"$0D"100"$0D"101"$0D"102"$0D
         "103"$0D"105"$0D"106"$0D"204"$0D"400"$0D"401"$0D"450"$0D"500"$0D"501"$0D
         "700"$0D"701"$0D"800"$0D"900"$0D"901"$0D"902"$0D"903"$0D"904"$0D"1000"
         $0D"1001"$0D"1002"$0D"1003"$0D"1100"
      }
      hintactivity: =
      {
        txt = "&"
        hint = "Hint Activity"
      }
      nodeFOV: =
      {
        txt = "&"
        hint = "Node FOV"
        typ = "C"
        items = "180 Degrees"$0D"360 Degrees"
        values = "180"$0D"360"
      }
      StartHintDisabled: =
      {
        txt = "&"
        hint = "Start Hint Disabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Group: =
      {
        txt = "&"
        hint = "Hint Group"
      }
      TargetNode: =
      {
        txt = "&"
        hint = "Target node"
      }
      IgnoreFacing: =
      {
        txt = "&"
        hint = "Ignore Facing"
        typ = "C"
        items = "No"$0D"Yes"$0D"Default"
        values = "0"$0D"1"$0D"2"
      }
      MinimumState: =
      {
        txt = "&"
        hint = "Minimum State"
        typ = "C"
        items = "Idle"$0D"Alert"$0D"Combat"
        values = "1"$0D"2"$0D"3"
      }
      MaximumState: =
      {
        txt = "&"
        hint = "Maximum State"
        typ = "C"
        items = "Idle"$0D"Alert"$0D"Combat"
        values = "1"$0D"2"$0D"3"
      }
      EnableHint: =
      {
        txt = "&"
        hint = "Enable hint."
      }
      DisableHint: =
      {
        txt = "&"
        hint = "Disable hint."
      }
    }
    t_TriggerOnce:incl =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Origin = "!"
      t_EnableDisable = "!"
      t_Global = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Clients"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "NPCs"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Pushables"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Physics Objects"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Only player ally NPCs"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Only clients in vehicles"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Everything"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Only clients *not* in vehicles"
      }
      filtername: =
      {
        txt = "&"
        hint = "Filter Name"
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggles this trigger between enabled and disabled states."
      }
      OnStartTouch: =
      {
        txt = "&"
        hint = "Fired when an entity starts touching this trigger. The touchin"
         "g entity must pass this trigger's filters to cause this output to fi"
         "re."
      }
    }
    t_Trigger:incl =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Origin = "!"
      t_EnableDisable = "!"
      t_TriggerOnce = "!"
      OnEndTouch: =
      {
        txt = "&"
        hint = "Fired when an entity stops touching this trigger. Only entitie"
         "s that passed this trigger's filters will cause this output to fire."
      }
      OnEndTouchAll: =
      {
        txt = "&"
        hint = "Fires when an entity stops touching this trigger, and no other"
         " entities are touching it. Only entities that passed this trigger's "
         "filters are considered."
      }
    }
    t_worldbase:incl =
    {
      message: =
      {
        txt = "&"
        hint = "Map Description / Title"
      }
      skyname: =
      {
        txt = "&"
        hint = "SkyBox Texture Name"
      }
      chaptertitle: =
      {
        txt = "&"
        hint = "Chapter Title Message"
      }
      startdark: =
      {
        txt = "&"
        hint = "Level Fade In"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      gametitle: =
      {
        txt = "&"
        hint = "Display Game Title"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      newunit: =
      {
        txt = "&"
        hint = "New Level Unit"
        typ = "C"
        items = "No, keep current"$0D"Yes, clear previous levels"
        values = "0"$0D"1"
      }
      maxoccludeearea: =
      {
        txt = "&"
        hint = "Max occludee area"
      }
      minoccluderarea: =
      {
        txt = "&"
        hint = "Min occluder area"
      }
      maxpropscreenwidth: =
      {
        txt = "&"
        hint = "Start Fade Pixels"
      }
      minpropscreenwidth: =
      {
        txt = "&"
        hint = "End Fade Pixels"
      }
    }
    worldspawn:form =
    {
      t_Targetname = "!"
      t_worldbase = "!"
      t_ResponseContext = "!"
    }
    ambient_generic:form =
    {
      t_Targetname = "!"
      message: =
      {
        txt = "&"
        hint = "Sound Name"
      }
      health: =
      {
        txt = "&"
        hint = "Volume"
      }
      preset: =
      {
        txt = "&"
        hint = "Dynamic Presets"
        typ = "C"
        items = "None"$0D"Huge Machine"$0D"Big Machine"$0D"Machine"$0D"Slow Fa"
         "de in"$0D"Fade in"$0D"Quick Fade in"$0D"Slow Pulse"$0D"Pulse"$0D"Qui"
         "ck pulse"$0D"Slow Oscillator"$0D"Oscillator"$0D"Quick Oscillator"$0D
         "Grunge pitch"$0D"Very low pitch"$0D"Low pitch"$0D"High pitch"$0D"Ver"
         "y high pitch"$0D"Screaming pitch"$0D"Oscillate spinup/down"$0D"Pulse"
         " spinup/down"$0D"Random pitch"$0D"Random pitch fast"$0D"Incremental "
         "Spinup"$0D"Alien"$0D"Bizzare"$0D"Planet X"$0D"Haunted"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"1"
         "0"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D
         "20"$0D"21"$0D"22"$0D"23"$0D"24"$0D"25"$0D"26"$0D"27"
      }
      volstart: =
      {
        txt = "&"
        hint = "Start Volume"
      }
      fadein: =
      {
        txt = "&"
        hint = "Fade in time (0-100)"
      }
      fadeout: =
      {
        txt = "&"
        hint = "Fade out time (0-100)"
      }
      pitch: =
      {
        txt = "&"
        hint = "Pitch"
      }
      pitchstart: =
      {
        txt = "&"
        hint = "Start Pitch"
      }
      spinup: =
      {
        txt = "&"
        hint = "Spin up time (0-100)"
      }
      spindown: =
      {
        txt = "&"
        hint = "Spin down time (0-100)"
      }
      lfotype: =
      {
        txt = "&"
        hint = "LFO type 0)off 1)sqr 2)tri 3)rnd"
      }
      lforate: =
      {
        txt = "&"
        hint = "LFO rate (0-1000)"
      }
      lfomodpitch: =
      {
        txt = "&"
        hint = "LFO mod pitch (0-100)"
      }
      lfomodvol: =
      {
        txt = "&"
        hint = "LFO mod vol (0-100)"
      }
      cspinup: =
      {
        txt = "&"
        hint = "Incremental Spinup Count"
      }
      radius: =
      {
        txt = "&"
        hint = "Max Audible Distance"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Play everywhere"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Start Silent"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Is NOT Looped"
      }
      SourceEntityName: =
      {
        txt = "&"
        hint = "SourceEntityName"
      }
      Pitch: =
      {
        txt = "&"
        hint = "Sets the sound pitch, expressed as a range from 1 to 255, wher"
         "e 100 is the sound's default pitch."
      }
      PlaySound: =
      {
        txt = "&"
        hint = "Starts the sound."
      }
      StopSound: =
      {
        txt = "&"
        hint = "Stops the sound if it is playing."
      }
      ToggleSound: =
      {
        txt = "&"
        hint = "Toggles the sound between playing and stopping."
      }
      Volume: =
      {
        txt = "&"
        hint = "Sets the sound volume, expressed as a range from 0 to 10, wher"
         "e 10 is the loudest."
      }
    }
    func_lod:form =
    {
      t_Targetname = "!"
      DisappearDist: =
      {
        txt = "&"
        hint = "Disappear Distance"
      }
      Solid: =
      {
        txt = "&"
        hint = "Solid"
        typ = "C"
        items = "Solid"$0D"Nonsolid"
        values = "0"$0D"1"
      }
    }
    env_zoom:form =
    {
      t_Targetname = "!"
      Rate: =
      {
        txt = "&"
        hint = "Seconds to reach target"
      }
      FOV: =
      {
        txt = "&"
        hint = "Target FOV"
      }
      Zoom: =
      {
        txt = "&"
        hint = "Start controlling the player's FOV."
      }
      UnZoom: =
      {
        txt = "&"
        hint = "Stop controlling the player's FOV."
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Allow Suit Zoom"
      }
    }
    env_screenoverlay:form =
    {
      t_Targetname = "!"
      OverlayName1: =
      {
        txt = "&"
        hint = "Overlay Name 1"
      }
      OverlayTime1: =
      {
        txt = "&"
        hint = "Overlay Duration 1"
      }
      OverlayName2: =
      {
        txt = "&"
        hint = "Overlay Name 2"
      }
      OverlayTime2: =
      {
        txt = "&"
        hint = "Overlay Duration 2"
      }
      OverlayName3: =
      {
        txt = "&"
        hint = "Overlay Name 3"
      }
      OverlayTime3: =
      {
        txt = "&"
        hint = "Overlay Duration 3"
      }
      OverlayName4: =
      {
        txt = "&"
        hint = "Overlay Name 4"
      }
      OverlayTime4: =
      {
        txt = "&"
        hint = "Overlay Duration 4"
      }
      OverlayName5: =
      {
        txt = "&"
        hint = "Overlay Name 5"
      }
      OverlayTime5: =
      {
        txt = "&"
        hint = "Overlay Duration 5"
      }
      OverlayName6: =
      {
        txt = "&"
        hint = "Overlay Name 6"
      }
      OverlayTime6: =
      {
        txt = "&"
        hint = "Overlay Duration 6"
      }
      OverlayName7: =
      {
        txt = "&"
        hint = "Overlay Name 7"
      }
      OverlayTime7: =
      {
        txt = "&"
        hint = "Overlay Duration 7"
      }
      OverlayName8: =
      {
        txt = "&"
        hint = "Overlay Name 8"
      }
      OverlayTime8: =
      {
        txt = "&"
        hint = "Overlay Duration 8"
      }
      OverlayName9: =
      {
        txt = "&"
        hint = "Overlay Name 9"
      }
      OverlayTime9: =
      {
        txt = "&"
        hint = "Overlay Duration 9"
      }
      OverlayName10: =
      {
        txt = "&"
        hint = "Overlay Name 10"
      }
      OverlayTime10: =
      {
        txt = "&"
        hint = "Overlay Duration 10"
      }
      StartOverlays: =
      {
        txt = "&"
        hint = "Start displaying the first overlay."
      }
      StopOverlays: =
      {
        txt = "&"
        hint = "Stop displaying any overlays."
      }
      SwitchOverlay: =
      {
        txt = "&"
        hint = "Switch to displaying a specific overlay. Pass in the desired o"
         "verlay number in the parameter."
      }
    }
    env_texturetoggle:form =
    {
      t_Targetname = "!"
      target: =
      {
        txt = "&"
        hint = "Target Brush(es)."
      }
      IncrementTextureIndex: =
      {
        txt = "&"
        hint = "Increments target brush's current texture frame by one."
      }
      SetTextureIndex: =
      {
        txt = "&"
        hint = "Sets target brush's texture frame to the specified index."
      }
    }
    env_splash:form =
    {
      t_Targetname = "!"
      t_Angles = "!"
      scale: =
      {
        txt = "&"
        hint = "Scale of the splash"
      }
      Splash: =
      {
        txt = "&"
        hint = "Create a splash effect."
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Automatically find water surface (place entity above water)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Diminish with depth (diminished completely in 10 feet of water)"
      }
    }
    env_particlelight:form =
    {
      t_Parentname = "!"
      Color: =
      {
        txt = "&"
        hint = "Color"
      }
      Intensity: =
      {
        txt = "&"
        hint = "Intensity"
      }
      directional: =
      {
        txt = "&"
        hint = "Directional"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      PSName: =
      {
        txt = "&"
        hint = "Particle System Entity"
      }
    }
    env_sun:form =
    {
      t_Angles = "!"
      target: =
      {
        txt = "&"
        hint = "Viewer entity"
      }
      use_angles: =
      {
        txt = "&"
        hint = "UseAngles"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      pitch: =
      {
        txt = "&"
        hint = "Pitch"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Sun Color (R G B)"
      }
      size: =
      {
        txt = "&"
        hint = "Size"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Enable sun rendering."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Disable sun rendering."
      }
      SetColor: =
      {
        txt = "&"
        hint = "Change the sun's color."
      }
    }
    game_ragdoll_manager:form =
    {
      t_Targetname = "!"
      MaxRagdollCount: =
      {
        txt = "&"
        hint = "Max Ragdoll Count"
      }
      SetMaxRagdollCount: =
      {
        txt = "&"
        hint = "Set the Max Ragdoll Count."
      }
    }
    env_lightglow:form =
    {
      t_Targetname = "!"
      t_Angles = "!"
      rendercolor: =
      {
        txt = "&"
        hint = "Color (R G B)"
      }
      VerticalGlowSize: =
      {
        txt = "&"
        hint = "Vertical Size"
      }
      HorizontalGlowSize: =
      {
        txt = "&"
        hint = "Horizontal Size"
      }
      MinDist: =
      {
        txt = "&"
        hint = "Minimum Distance"
      }
      MaxDist: =
      {
        txt = "&"
        hint = "Maximum Distance"
      }
      OuterMaxDist: =
      {
        txt = "&"
        hint = "Outer Maximum Distance"
      }
      GlowProxySize: =
      {
        txt = "&"
        hint = "Glow Proxy Geometry Size"
      }
      Color: =
      {
        txt = "&"
        hint = "Change the render color of the glow."
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Visible only from front"
      }
    }
    env_smokestack:form =
    {
      t_Parentname = "!"
      t_Angles = "!"
      targetname: =
      {
        txt = "&"
        hint = "Name"
      }
      InitialState: =
      {
        txt = "&"
        hint = "Initial State"
        typ = "C"
        items = "Off"$0D"On"
        values = "0"$0D"1"
      }
      BaseSpread: =
      {
        txt = "&"
        hint = "Spread at the base"
      }
      SpreadSpeed: =
      {
        txt = "&"
        hint = "Spread Speed"
      }
      Speed: =
      {
        txt = "&"
        hint = "Speed"
      }
      StartSize: =
      {
        txt = "&"
        hint = "Particle start size"
      }
      EndSize: =
      {
        txt = "&"
        hint = "Particle end size"
      }
      Rate: =
      {
        txt = "&"
        hint = "Emission rate"
      }
      JetLength: =
      {
        txt = "&"
        hint = "Length of smoke trail"
      }
      WindAngle: =
      {
        txt = "&"
        hint = "Wind X/Y Angle"
      }
      WindSpeed: =
      {
        txt = "&"
        hint = "Wind Speed"
      }
      SmokeMaterial: =
      {
        txt = "&"
        hint = "Particle material"
      }
      twist: =
      {
        txt = "&"
        hint = "Twist"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Base Color (R G B)"
      }
      renderamt: =
      {
        txt = "&"
        hint = "Translucency"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turn on the smokestack."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turn off the smokestack."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggles the smokestack between on and off state."
      }
      JetLength: =
      {
        txt = "&"
        hint = "Set the length of the smoke trail."
      }
      Rate: =
      {
        txt = "&"
        hint = "Set the rate at which to emit smoke particles (particles per s"
         "econd)."
      }
      Speed: =
      {
        txt = "&"
        hint = "Set the speed at which the smoke particles move after they're "
         "spawned."
      }
      SpreadSpeed: =
      {
        txt = "&"
        hint = "Set the amount of random spread in the velocity of the smoke p"
         "articles after they're spawned."
      }
    }
    env_fade:form =
    {
      t_Targetname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Fade From"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Modulate"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Stay Out"
      }
      duration: =
      {
        txt = "&"
        hint = "Duration (seconds)"
      }
      holdtime: =
      {
        txt = "&"
        hint = "Hold Fade (seconds)"
      }
      renderamt: =
      {
        txt = "&"
        hint = "Fade Alpha"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Fade Color (R G B)"
      }
      Fade: =
      {
        txt = "&"
        hint = "Start the screen fade."
      }
      OnBeginFade: =
      {
        txt = "&"
        hint = "Fired when the fade has begun."
      }
    }
    env_player_surface_trigger:form =
    {
      t_Targetname = "!"
      gamematerial: =
      {
        txt = "&"
        hint = "Game Material to Watch"
        typ = "C"
        items = "None (player's in the air)"$0D"Concrete"$0D"Metal"$0D"Dirt"$0D
         "Vent"$0D"Grate"$0D"Tile"$0D"Slosh"$0D"Wood"$0D"Computer"$0D"Glass"$0D
         "Flesh"$0D"Clip"$0D"Foliage"$0D"Sand"
        values = "0"$0D"67"$0D"77"$0D"68"$0D"86"$0D"71"$0D"84"$0D"83"$0D"87"$0D
         "80"$0D"89"$0D"70"$0D"73"$0D"79"$0D"78"
      }
      Enable: =
      {
        txt = "&"
        hint = "Start watching the player's surface."
      }
      Disable: =
      {
        txt = "&"
        hint = "Stop watching the player's surface."
      }
      OnSurfaceChangedToTarget: =
      {
        txt = "&"
        hint = "Fired when the player moves onto the specified game material."
      }
      OnSurfaceChangedFromTarget: =
      {
        txt = "&"
        hint = "Fired when the player moves off the specified game material."
      }
    }
    func_ladder:form =
    {
    }
    func_useableladder:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Fake Ladder"
      }
      point0: =
      {
        txt = "&"
        hint = "Start"
      }
      point1: =
      {
        txt = "&"
        hint = "End"
      }
      StartDisabled: =
      {
        txt = "&"
        hint = "Start Disabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Enable: =
      {
        txt = "&"
        hint = "Enable this ladder."
      }
      Disable: =
      {
        txt = "&"
        hint = "Disable this ladder."
      }
      OnPlayerGotOnLadder: =
      {
        txt = "&"
        hint = "Fired whenever a player gets on this ladder."
      }
      OnPlayerGotOffLadder: =
      {
        txt = "&"
        hint = "Fired whenever a player gets off this ladder."
      }
    }
    func_ladderendpoint:form =
    {
      bbox = '-16 -16 0 16 16 72'
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      target: =
      {
        txt = "&"
        hint = "Other"
      }
    }
    info_ladder_dismount:form =
    {
      bbox = '-16 -16 0 16 16 4'
      t_Parentname = "!"
      target: =
      {
        txt = "&"
        hint = "LadderName"
      }
    }
    func_areaportalwindow:form =
    {
      t_Targetname = "!"
      target: =
      {
        txt = "&"
        hint = "Rendered Window"
      }
      FadeStartDist: =
      {
        txt = "&"
        hint = "Fade Start Distance"
      }
      FadeDist: =
      {
        txt = "&"
        hint = "Fade End Distance"
      }
      TranslucencyLimit: =
      {
        txt = "&"
        hint = "Translucency limit"
      }
      BackgroundBModel: =
      {
        txt = "&"
        hint = "Foreground bmodel"
      }
    }
    func_wall:form =
    {
      t_Targetname = "!"
      t_RenderFields = "!"
      t_Global = "!"
      t_Shadow = "!"
      _minlight: =
      {
        txt = "&"
        hint = "Minimum Light Level"
      }
    }
    func_clip_vphysics:form =
    {
      t_Targetname = "!"
      filtername: =
      {
        txt = "&"
        hint = "Filter Name"
      }
    }
    func_brush:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Origin = "!"
      t_RenderFields = "!"
      t_Global = "!"
      t_Inputfilter = "!"
      t_EnableDisable = "!"
      t_Shadow = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Ignore player +USE"
      }
      _minlight: =
      {
        txt = "&"
        hint = "Minimum Light Level"
      }
      Solidity: =
      {
        txt = "&"
        hint = "Solidity"
        typ = "C"
        items = "Toggle"$0D"Never Solid"$0D"Always Solid"
        values = "0"$0D"1"$0D"2"
      }
      excludednpc: =
      {
        txt = "&"
        hint = "NPC class excluded from collisions"
      }
      solidbsp: =
      {
        txt = "&"
        hint = "Solid BSP"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
    }
    t_vgui_screen_base:incl =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      panelname: =
      {
        txt = "&"
        hint = "Panel Name"
      }
      overlaymaterial: =
      {
        txt = "&"
        hint = "Overlay Material"
      }
      width: =
      {
        txt = "&"
        hint = "Panel Width in World"
      }
      height: =
      {
        txt = "&"
        hint = "Panel Height in World"
      }
      SetActive: =
      {
        txt = "&"
        hint = "Make the vgui screen visible."
      }
      SetInactive: =
      {
        txt = "&"
        hint = "Make the vgui screen invisible."
      }
    }
    vgui_screen:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_vgui_screen_base = "!"
    }
    cycler:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      t_RenderFxChoices = "!"
      t_RenderFields = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Not Solid"
      }
      model: =
      {
        txt = "&"
        hint = "Model"
      }
      skin: =
      {
        txt = "&"
        hint = "Skin"
      }
      sequence: =
      {
        txt = "&"
        hint = "Sequence"
      }
      SetSequence: =
      {
        txt = "&"
        hint = "Sets the cycler's sequence."
      }
      Alpha: =
      {
        txt = "&"
        hint = "Sets the cycler's alpha value."
      }
    }
    t_gibshooterbase:incl =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      angles: =
      {
        txt = "&"
        hint = "Gib Direction (Pitch Yaw Roll)"
      }
      m_iGibs: =
      {
        txt = "&"
        hint = "Number of Gibs"
      }
      delay: =
      {
        txt = "&"
        hint = "Delay between shots"
      }
      gibangles: =
      {
        txt = "&"
        hint = "Gib Angles (Pitch Yaw Roll)"
      }
      m_flVelocity: =
      {
        txt = "&"
        hint = "Gib Velocity"
      }
      m_flVariance: =
      {
        txt = "&"
        hint = "Course Variance"
      }
      m_flGibLife: =
      {
        txt = "&"
        hint = "Gib Life"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Repeatable"
      }
      Shoot: =
      {
        txt = "&"
        hint = "Force the gibshooter to create and shoot a gib."
      }
    }
    env_beam:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = "!"
      t_Parentname = "!"
      t_RenderFxChoices = "!"
      renderamt: =
      {
        txt = "&"
        hint = "Brightness (1 - 255)"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Beam Color (R G B)"
      }
      Radius: =
      {
        txt = "&"
        hint = "Radius"
      }
      life: =
      {
        txt = "&"
        hint = "Life (seconds 0 = infinite)"
      }
      BoltWidth: =
      {
        txt = "&"
        hint = "Width of beam"
      }
      NoiseAmplitude: =
      {
        txt = "&"
        hint = "Amount of noise (0-255)"
      }
      texture: =
      {
        txt = "&"
        hint = "Sprite Name"
      }
      TextureScroll: =
      {
        txt = "&"
        hint = "Texture Scroll Rate (0-100)"
      }
      framerate: =
      {
        txt = "&"
        hint = "Frames per 10 seconds"
      }
      framestart: =
      {
        txt = "&"
        hint = "Starting Frame"
      }
      StrikeTime: =
      {
        txt = "&"
        hint = "Strike again time (secs)"
      }
      damage: =
      {
        txt = "&"
        hint = "Damage / second"
      }
      LightningStart: =
      {
        txt = "&"
        hint = "Start Entity"
      }
      LightningEnd: =
      {
        txt = "&"
        hint = "Ending Entity"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start On"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Toggle"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Random Strike"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Ring"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "StartSparks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "EndSparks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Decal End"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Shade Start"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Shade End"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Taper Out"
      }
      TouchType: =
      {
        txt = "&"
        hint = "Touch Type (tripwire)"
        typ = "C"
        items = "Not a tripwire"$0D"Player Only"$0D"NPC Only"$0D"Player or NPC"
         $0D"Player or NPC or Physprop"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"
      }
      filtername: =
      {
        txt = "&"
        hint = "Filter Name"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turns the beam on."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turns the beam off."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggles the beam between on and off."
      }
      StrikeOnce: =
      {
        txt = "&"
        hint = "Causes the beam to strike once. It will stay on for its set Li"
         "fe and then turn off (it will never turn off if Life is set to zero)"
         "."
      }
      Alpha: =
      {
        txt = "&"
        hint = "Sets the beam's alpha (0 - 255)."
      }
      Color: =
      {
        txt = "&"
        hint = "Sets the beam's render color (R G B)."
      }
      Amplitude: =
      {
        txt = "&"
        hint = "Set the amplitude of beam noise (0 - 255)."
      }
      ScrollSpeed: =
      {
        txt = "&"
        hint = "Set the scroll speed in units per second (0 - 100)."
      }
      Width: =
      {
        txt = "&"
        hint = "Set the width of the beam, in pixels."
      }
      OnTouchedByEntity: =
      {
        txt = "&"
        hint = "Fired when an entity touches the beam. Only fired if the entit"
         "y passes the 'Touch Type' choice."
      }
    }
    env_beverage:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = "!"
      t_Parentname = "!"
      health: =
      {
        txt = "&"
        hint = "Capacity"
      }
      beveragetype: =
      {
        txt = "&"
        hint = "Beverage Type"
        typ = "C"
        items = "Coca-Cola"$0D"Sprite"$0D"Diet Coke"$0D"Orange"$0D"Surge"$0D"M"
         "oxie"$0D"Random"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"
      }
      Activate: =
      {
        txt = "&"
        hint = "Enable this dispenser."
      }
    }
    env_embers:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      particletype: =
      {
        txt = "&"
        hint = "Ember type"
        typ = "C"
        items = "Normal"$0D"Smooth Fade"$0D"Pulled"
        values = "0"$0D"1"$0D"2"
      }
      density: =
      {
        txt = "&"
        hint = "Density (particles per second)"
      }
      lifetime: =
      {
        txt = "&"
        hint = "Particle Lifetime (seconds)"
      }
      speed: =
      {
        txt = "&"
        hint = "Particle Speed (units per second)"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Ember Color (R G B)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start On"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Toggle"
      }
    }
    env_funnel:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      t_Targetname = "!"
      t_Parentname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Reverse"
      }
    }
    env_blood:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      t_Targetname = "!"
      t_Parentname = "!"
      spraydir: =
      {
        txt = "&"
        hint = "Spray Direction (Pitch Yaw Roll)"
      }
      color: =
      {
        txt = "&"
        hint = "Blood Color"
        typ = "C"
        items = "Red (Human)"$0D"Yellow (Alien)"
        values = "0"$0D"1"
      }
      amount: =
      {
        txt = "&"
        hint = "Amount of blood (damage to simulate)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Random Direction"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Blood Stream"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "On Player"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Spray decals"
      }
      EmitBlood: =
      {
        txt = "&"
        hint = "Triggers the blood effect."
      }
    }
    env_bubbles:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      density: =
      {
        txt = "&"
        hint = "Bubble density"
      }
      frequency: =
      {
        txt = "&"
        hint = "Bubble frequency"
      }
      current: =
      {
        txt = "&"
        hint = "Speed of Current"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start Off"
      }
      Activate: =
      {
        txt = "&"
        hint = "Activates the bubbles."
      }
      Deactivate: =
      {
        txt = "&"
        hint = "Deactivates the bubbles."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggles the bubbles on and off."
      }
      SetDensity: =
      {
        txt = "&"
        hint = "Sets the bubble density."
      }
      SetFrequency: =
      {
        txt = "&"
        hint = "Sets bubble emission rate in bubbles per second."
      }
      SetCurrent: =
      {
        txt = "&"
        hint = "Sets current speed in inches per second."
      }
    }
    env_explosion:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      iMagnitude: =
      {
        txt = "&"
        hint = "Magnitude"
      }
      iRadiusOverride: =
      {
        txt = "&"
        hint = "Radius Override"
      }
      fireballsprite: =
      {
        txt = "&"
        hint = "Fireball Sprite"
      }
      rendermode: =
      {
        txt = "&"
        hint = "Render Mode"
        typ = "C"
        items = "Normal"$0D"Solid"$0D"Additive"
        values = "0"$0D"4"$0D"5"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "No Damage"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Repeatable"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "No Fireball"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "No Smoke"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "No Decal"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "No Sparks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "No Sound"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Random Orientation"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "No Fireball Smoke"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "No particles"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1024"
        cap = "No DLights"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2048"
        cap = "Don't clamp Min"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "Don't clamp Max"
      }
      Explode: =
      {
        txt = "&"
        hint = "Triggers the explosion."
      }
    }
    env_smoketrail:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      t_Parentname = "!"
      opacity: =
      {
        txt = "&"
        hint = "Sprite Opacity"
      }
      spawnrate: =
      {
        txt = "&"
        hint = "Spawn Rate"
      }
      lifetime: =
      {
        txt = "&"
        hint = "Particle Life Time"
      }
      startcolor: =
      {
        txt = "&"
        hint = "Start Color"
      }
      endcolor: =
      {
        txt = "&"
        hint = "End Color"
      }
      emittime: =
      {
        txt = "&"
        hint = "Emitter Life Time"
      }
      minspeed: =
      {
        txt = "&"
        hint = "Minimum Random Speed"
      }
      maxspeed: =
      {
        txt = "&"
        hint = "Maximum Random Speed"
      }
      mindirectedspeed: =
      {
        txt = "&"
        hint = "Minimum Directed Speed"
      }
      maxdirectedspeed: =
      {
        txt = "&"
        hint = "Maximum Directed Speed"
      }
      startsize: =
      {
        txt = "&"
        hint = "Starting particle size"
      }
      endsize: =
      {
        txt = "&"
        hint = "Ending particle size"
      }
      spawnradius: =
      {
        txt = "&"
        hint = "Spawn radius"
      }
      firesprite: =
      {
        txt = "&"
        hint = "Fire Sprite"
      }
      smokesprite: =
      {
        txt = "&"
        hint = "Smoke Puff"
      }
    }
    env_global:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      globalstate: =
      {
        txt = "&"
        hint = "Global State to Set"
        typ = "C"
        items = "Gordon pre-criminal"$0D"Antlions are player allies"$0D"Player"
         " in APC is disguised as combine"$0D"Suit sprint function not yet ena"
         "bled"$0D"Super phys gun is enabled"$0D"Friendly encounter sequence ("
         "lower weapons, etc.)"$0D"Citizens are *not* player allies (cannot be"
         " commanded)"$0D"Gordon is invulnerable"$0D"Don't spawn seagulls on t"
         "he jeep"
        values = "gordon_precriminal"$0D"antlion_allied"$0D"player_stealth"$0D
         "suit_no_sprint"$0D"super_phys_gun"$0D"friendly_encounter"$0D"citizen"
         "s_passive"$0D"gordon_invulnerable"$0D"no_seagulls_on_jeep"
      }
      initialstate: =
      {
        txt = "&"
        hint = "Initial State"
        typ = "C"
        items = "Off"$0D"On"$0D"Dead"
        values = "0"$0D"1"$0D"2"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Set Initial State"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Set state of global to ON."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Set state of global to OFF."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggles state of global between ON and OFF."
      }
      Remove: =
      {
        txt = "&"
        hint = "Set state of global to DEAD."
      }
    }
    env_physexplosion:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      magnitude: =
      {
        txt = "&"
        hint = "Magnitude"
      }
      radius: =
      {
        txt = "&"
        hint = "Clamp Radius (0 = auto)"
      }
      targetentityname: =
      {
        txt = "&"
        hint = "Limit to Entity"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "No Damage - Only Force"
      }
      Explode: =
      {
        txt = "&"
        hint = "Trigger the explosion."
      }
    }
    env_physimpact:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      angles: =
      {
        txt = "&"
        hint = "Pitch Yaw Roll (Y Z X)"
      }
      magnitude: =
      {
        txt = "&"
        hint = "Magnitude"
      }
      distance: =
      {
        txt = "&"
        hint = "Distance"
      }
      directionentityname: =
      {
        txt = "&"
        hint = "Point to Entity"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "No fall-off"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Infinite Length"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Ignore Mass"
      }
      Impact: =
      {
        txt = "&"
        hint = "Trigger the impact"
      }
    }
    env_fire:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_EnableDisable = "!"
      health: =
      {
        txt = "&"
        hint = "Duration"
      }
      firesize: =
      {
        txt = "&"
        hint = "Size"
      }
      fireattack: =
      {
        txt = "&"
        hint = "Attack"
      }
      firetype: =
      {
        txt = "&"
        hint = "Type"
        typ = "C"
        items = "Natural"$0D"Plasma"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Infinite Duration"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Smokeless"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Start On"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Start Full"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Don't drop"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "No glow"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Delete when out"
      }
      ignitionpoint: =
      {
        txt = "&"
        hint = "Ignition Point"
      }
      damagescale: =
      {
        txt = "&"
        hint = "Damage Scale"
      }
      StartFire: =
      {
        txt = "&"
        hint = "Start the fire."
      }
      Extinguish: =
      {
        txt = "&"
        hint = "Puts out the fire permanently in the number of seconds specifi"
         "ed."
      }
      ExtinguishTemporary: =
      {
        txt = "&"
        hint = "Puts out the fire temporarily in the number of seconds specifi"
         "ed."
      }
      OnIgnited: =
      {
        txt = "&"
        hint = "Fires when the fire is first ignited."
      }
      OnExtinguished: =
      {
        txt = "&"
        hint = "Fires when the fire is fully extinguished."
      }
    }
    env_firesource:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start On"
      }
      fireradius: =
      {
        txt = "&"
        hint = "Radius"
      }
      firedamage: =
      {
        txt = "&"
        hint = "Intensity / Damage"
      }
      Enable: =
      {
        txt = "&"
        hint = "Enable fire source."
      }
      Disable: =
      {
        txt = "&"
        hint = "Disable fire source."
      }
    }
    env_firesensor:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = "!"
      t_Parentname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start On"
      }
      fireradius: =
      {
        txt = "&"
        hint = "Radius"
      }
      heatlevel: =
      {
        txt = "&"
        hint = "Heat level"
      }
      heattime: =
      {
        txt = "&"
        hint = "Time at level"
      }
      Enable: =
      {
        txt = "&"
        hint = "Enable fire sensor."
      }
      Disable: =
      {
        txt = "&"
        hint = "Disable fire sensor."
      }
      OnHeatLevelStart: =
      {
        txt = "&"
        hint = "Fires when the heat level has been sustained for the specified"
         " length of time."
      }
      OnHeatLevelEnd: =
      {
        txt = "&"
        hint = "Fires when the heat level drops below the target level."
      }
    }
    env_entity_igniter:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = "!"
      target: =
      {
        txt = "&"
        hint = "Entity to ignite"
      }
      lifetime: =
      {
        txt = "&"
        hint = "Lifetime in seconds"
      }
      Ignite: =
      {
        txt = "&"
        hint = "Ignite the target entity."
      }
    }
    env_fog_controller:form =
    {
      t_Targetname = "!"
      t_DXLevelChoice = "!"
      t_Angles = "!"
      SetStartDist: =
      {
        txt = "&"
        hint = "Set the fog start distance."
      }
      SetEndDist: =
      {
        txt = "&"
        hint = "Set the fog end distance."
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turn the fog on."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turn the fog off."
      }
      SetColor: =
      {
        txt = "&"
        hint = "Set the primary fog color."
      }
      SetColorSecondary: =
      {
        txt = "&"
        hint = "Set the secondary fog color."
      }
      SetFarZ: =
      {
        txt = "&"
        hint = "Set the far clip plane distance."
      }
      SetAngles: =
      {
        txt = "&"
        hint = "Set the angles to use for the secondary fog direction."
      }
      fogenable: =
      {
        txt = "&"
        hint = "Fog Enable"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      fogblend: =
      {
        txt = "&"
        hint = "Fog Blend"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      use_angles: =
      {
        txt = "&"
        hint = "Use Angles for Fog Dir"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      fogcolor: =
      {
        txt = "&"
        hint = "Primary Fog Color"
      }
      fogcolor2: =
      {
        txt = "&"
        hint = "Secondary Fog Color"
      }
      fogdir: =
      {
        txt = "&"
        hint = "Primary Fog Direction"
      }
      fogstart: =
      {
        txt = "&"
        hint = "Fog Start"
      }
      fogend: =
      {
        txt = "&"
        hint = "Fog End"
      }
      farz: =
      {
        txt = "&"
        hint = "Far Z Clip Plane"
      }
    }
    env_steam:form =
    {
      t_Parentname = "!"
      t_Angles = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Emissive"
      }
      targetname: =
      {
        txt = "&"
        hint = "Name"
      }
      InitialState: =
      {
        txt = "&"
        hint = "Initial State"
        typ = "C"
        items = "Off"$0D"On"
        values = "0"$0D"1"
      }
      type: =
      {
        txt = "&"
        hint = "Particle Type"
        typ = "C"
        items = "Normal"$0D"Heat Wave"
        values = "0"$0D"1"
      }
      SpreadSpeed: =
      {
        txt = "&"
        hint = "Spread Speed"
      }
      Speed: =
      {
        txt = "&"
        hint = "Speed"
      }
      StartSize: =
      {
        txt = "&"
        hint = "Particle start size"
      }
      EndSize: =
      {
        txt = "&"
        hint = "Particle end size"
      }
      Rate: =
      {
        txt = "&"
        hint = "Emission rate"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Color (R G B)"
      }
      JetLength: =
      {
        txt = "&"
        hint = "Length of steam jet"
      }
      renderamt: =
      {
        txt = "&"
        hint = "Translucency"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turns the steam jet on."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turns the steam jet off."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggles the steam jet between on and off."
      }
      JetLength: =
      {
        txt = "&"
        hint = "Sets the length of steam jet."
      }
      Rate: =
      {
        txt = "&"
        hint = "Sets the particle emission rate in particles per second."
      }
      Speed: =
      {
        txt = "&"
        hint = "Sets the default speed of the particles in units per second."
      }
      SpreadSpeed: =
      {
        txt = "&"
        hint = "Sets the spread speed in units per second."
      }
    }
    env_laser:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = "!"
      t_Parentname = "!"
      t_RenderFxChoices = "!"
      LaserTarget: =
      {
        txt = "&"
        hint = "Target of Laser"
      }
      renderamt: =
      {
        txt = "&"
        hint = "Brightness (1 - 255)"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Beam Color (R G B)"
      }
      width: =
      {
        txt = "&"
        hint = "Width of Beam"
      }
      NoiseAmplitude: =
      {
        txt = "&"
        hint = "Amount of noise (0-255)"
      }
      texture: =
      {
        txt = "&"
        hint = "Sprite Name"
      }
      EndSprite: =
      {
        txt = "&"
        hint = "End Sprite"
      }
      TextureScroll: =
      {
        txt = "&"
        hint = "Texture Scroll Rate (0-100)"
      }
      framestart: =
      {
        txt = "&"
        hint = "Starting Frame"
      }
      damage: =
      {
        txt = "&"
        hint = "Damage / second"
      }
      dissolvetype: =
      {
        txt = "&"
        hint = "Dissolve Type"
        typ = "C"
        items = "None"$0D"Energy"$0D"Heavy electrical"$0D"Light electrical"
        values = "-1"$0D"0"$0D"1"$0D"2"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start On"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "StartSparks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "EndSparks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Decal End"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turns the laser on."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turns the laser off."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggles the laser between on and off."
      }
    }
    env_message:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      message: =
      {
        txt = "&"
        hint = "Message Text"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Play Once"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "All Clients"
      }
      messagesound: =
      {
        txt = "&"
        hint = "Sound Effect"
      }
      messagevolume: =
      {
        txt = "&"
        hint = "Volume 0-10"
      }
      messageattenuation: =
      {
        txt = "&"
        hint = "Sound Radius"
        typ = "C"
        items = "Small Radius"$0D"Medium Radius"$0D"Large  Radius"$0D"Play Eve"
         "rywhere"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
      ShowMessage: =
      {
        txt = "&"
        hint = "Shows the message and plays the sound."
      }
      OnShowMessage: =
      {
        txt = "&"
        hint = "Fired when the message is activated."
      }
    }
    env_hudhint:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      message: =
      {
        txt = "&"
        hint = "Hint Text (localized)"
      }
      ShowHudHint: =
      {
        txt = "&"
        hint = "Shows the hint message."
      }
    }
    env_shake:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "GlobalShake"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "In Air"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Physics"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Ropes"
      }
      amplitude: =
      {
        txt = "&"
        hint = "Amplitude (0-16)"
      }
      radius: =
      {
        txt = "&"
        hint = "Effect Radius"
      }
      duration: =
      {
        txt = "&"
        hint = "Duration (seconds)"
      }
      frequency: =
      {
        txt = "&"
        hint = "Frequency"
      }
      Amplitude: =
      {
        txt = "&"
        hint = "Set the amplitude (0-16)"
      }
      Frequency: =
      {
        txt = "&"
        hint = "Set the frequence. Should be a value between 0 and 255, where "
         "0.1 = jerk, and 255.0 = rumble."
      }
      StartShake: =
      {
        txt = "&"
        hint = "Start the shake."
      }
      StopShake: =
      {
        txt = "&"
        hint = "Stop the shake."
      }
    }
    gibshooter:form =
    {
      t_gibshooterbase = "!"
    }
    env_shooter:form =
    {
      t_gibshooterbase = "!"
      t_RenderFields = "!"
      shootmodel: =
      {
        txt = "&"
        hint = "Model"
      }
      shootsounds: =
      {
        txt = "&"
        hint = "Material Sound"
        typ = "C"
        items = "None"$0D"Glass"$0D"Wood"$0D"Metal"$0D"Flesh"$0D"Concrete"
        values = "-1"$0D"0"$0D"1"$0D"2"$0D"3"$0D"4"
      }
      simulation: =
      {
        txt = "&"
        hint = "Simulate"
        typ = "C"
        items = "Point"$0D"Physics"$0D"Ragdoll"
        values = "0"$0D"1"$0D"2"
      }
      skin: =
      {
        txt = "&"
        hint = "Gib Skin"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "On fire"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "strict remove after lifetime"
      }
    }
    env_rotorshooter:form =
    {
      t_gibshooterbase = "!"
      t_RenderFields = "!"
      shootmodel: =
      {
        txt = "&"
        hint = "Model"
      }
      shootsounds: =
      {
        txt = "&"
        hint = "Material Sound"
        typ = "C"
        items = "None"$0D"Glass"$0D"Wood"$0D"Metal"$0D"Flesh"$0D"Concrete"
        values = "-1"$0D"0"$0D"1"$0D"2"$0D"3"$0D"4"
      }
      simulation: =
      {
        txt = "&"
        hint = "Simulate"
        typ = "C"
        items = "Point"$0D"Physics"$0D"Ragdoll"
        values = "0"$0D"1"$0D"2"
      }
      skin: =
      {
        txt = "&"
        hint = "Gib Skin"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "On fire"
      }
      rotortime: =
      {
        txt = "&"
        hint = "Time Under Rotor"
      }
      rotortimevariance: =
      {
        txt = "&"
        hint = "Time variance"
      }
    }
    env_soundscape_proxy:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      MainSoundscapeName: =
      {
        txt = "&"
        hint = "Soundscape Entity"
      }
      radius: =
      {
        txt = "&"
        hint = "Radius"
      }
    }
    env_soundscape:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_EnableDisable = "!"
      radius: =
      {
        txt = "&"
        hint = "Radius"
      }
      soundscape: =
      {
        txt = "&"
        hint = "Soundscape"
        typ = "C"
        items = "Nothing"$0D"Automatic"$0D"Automatic (dialog)"$0D"Indoor"$0D"O"
         "utdoor"
        values = "Nothing"$0D"Automatic"$0D"Automatic_Dialog"$0D"GenericIndoor"
         $0D"GenericOutdoor"
      }
      position0: =
      {
        txt = "&"
        hint = "Sound Position 0"
      }
      position1: =
      {
        txt = "&"
        hint = "Sound Position 1"
      }
      position2: =
      {
        txt = "&"
        hint = "Sound Position 2"
      }
      position3: =
      {
        txt = "&"
        hint = "Sound Position 3"
      }
      position4: =
      {
        txt = "&"
        hint = "Sound Position 4"
      }
      position5: =
      {
        txt = "&"
        hint = "Sound Position 5"
      }
      position6: =
      {
        txt = "&"
        hint = "Sound Position 6"
      }
      position7: =
      {
        txt = "&"
        hint = "Sound Position 7"
      }
      Enable: =
      {
        txt = "&"
        hint = "Enable the soundscape."
      }
      Disabled: =
      {
        txt = "&"
        hint = "Disable the soundscape."
      }
      ToggleEnabled: =
      {
        txt = "&"
        hint = "Toggle the soundscape enabled state."
      }
      OnPlay: =
      {
        txt = "&"
        hint = "Fired when this soundscape becomes the active one."
      }
    }
    env_soundscape_triggerable:form =
    {
      t_env_soundscape = "!"
    }
    env_spark:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      MaxDelay: =
      {
        txt = "&"
        hint = "Max Delay"
      }
      Magnitude: =
      {
        txt = "&"
        hint = "Magnitude"
        typ = "C"
        items = "Small"$0D"Medium"$0D"Large"$0D"Huge"
        values = "1"$0D"2"$0D"5"$0D"8"
      }
      TrailLength: =
      {
        txt = "&"
        hint = "Spark Trail Length"
        typ = "C"
        items = "Short"$0D"Medium"$0D"Long"
        values = "1"$0D"2"$0D"3"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Start ON"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Glow"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Silent"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Directional"
      }
      StartSpark: =
      {
        txt = "&"
        hint = "Start the spark effect."
      }
      StopSpark: =
      {
        txt = "&"
        hint = "Stop the spark effect."
      }
      ToggleSpark: =
      {
        txt = "&"
        hint = "Toggle the on/off state of the spark effect."
      }
      SparkOnce: =
      {
        txt = "&"
        hint = "Spark once."
      }
    }
    env_sprite:form =
    {
      bbox = '-2 -2 -2 2 2 2'
      t_Targetname = "!"
      t_Parentname = "!"
      t_RenderFields = "!"
      t_DXLevelChoice = "!"
      framerate: =
      {
        txt = "&"
        hint = "Framerate"
      }
      model: =
      {
        txt = "&"
        hint = "Sprite Name"
      }
      scale: =
      {
        txt = "&"
        hint = "Scale"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start on"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Play Once"
      }
      GlowProxySize: =
      {
        txt = "&"
        hint = "Size of Glow Proxy Geometry."
      }
      Alpha: =
      {
        txt = "&"
        hint = "Set the sprite's alpha (0 - 255)."
      }
      Color: =
      {
        txt = "&"
        hint = "Set the sprite's color (R G B)."
      }
      SetScale: =
      {
        txt = "&"
        hint = "Set the sprite's scale (0 - 8.0)."
      }
      HideSprite: =
      {
        txt = "&"
        hint = "Hide the sprite. Won't be drawn until the 'ShowSprite' input i"
         "s received."
      }
      ShowSprite: =
      {
        txt = "&"
        hint = "Show the sprite."
      }
      ToggleSprite: =
      {
        txt = "&"
        hint = "Toggle the sprite between hidden and shown."
      }
    }
    env_wind:form =
    {
      t_Targetname = "!"
      gustsound: =
      {
        txt = "&"
        hint = "Gust Sound Filename"
      }
      minwind: =
      {
        txt = "&"
        hint = "Min normal speed"
      }
      maxwind: =
      {
        txt = "&"
        hint = "Max normal speed"
      }
      mingust: =
      {
        txt = "&"
        hint = "Min gust speed"
      }
      maxgust: =
      {
        txt = "&"
        hint = "Max gust speed"
      }
      mingustdelay: =
      {
        txt = "&"
        hint = "Min gust delay"
      }
      maxgustdelay: =
      {
        txt = "&"
        hint = "Max gust delay"
      }
      gustdirchange: =
      {
        txt = "&"
        hint = "Max gust dir change (degrees)"
      }
    }
    sky_camera:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      t_Angles = "!"
      scale: =
      {
        txt = "&"
        hint = "3D Skybox scale"
      }
      fogenable: =
      {
        txt = "&"
        hint = "Fog Enable"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      fogblend: =
      {
        txt = "&"
        hint = "Fog Blend"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      use_angles: =
      {
        txt = "&"
        hint = "Use Angles for Fog Dir"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      fogcolor: =
      {
        txt = "&"
        hint = "Primary Fog Color"
      }
      fogcolor2: =
      {
        txt = "&"
        hint = "Secondary Fog Color"
      }
      fogdir: =
      {
        txt = "&"
        hint = "Primary Fog Dir"
      }
      fogstart: =
      {
        txt = "&"
        hint = "Fog Start"
      }
      fogend: =
      {
        txt = "&"
        hint = "Fog End"
      }
    }
    t_BaseSpeaker:incl =
    {
      t_Targetname = "!"
      t_ResponseContext = "!"
      delaymin: =
      {
        txt = "&"
        hint = "Min Delay Between Announcements"
      }
      delaymax: =
      {
        txt = "&"
        hint = "Max Delay Between Announcements"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start Silent"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Play Everywhere"
      }
      rulescript: =
      {
        txt = "&"
        hint = "Context rule script"
      }
      concept: =
      {
        txt = "&"
        hint = "Concept name"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turn on the random announcements."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turn off the random announcements."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggle the random announcements off and on."
      }
    }
    game_weapon_manager:form =
    {
      t_Targetname = "!"
      weaponname: =
      {
        txt = "&"
        hint = "Weapon Classname"
      }
      maxpieces: =
      {
        txt = "&"
        hint = "Max Allowed in Level"
      }
    }
    game_end:form =
    {
      t_Targetname = "!"
      master: =
      {
        txt = "&"
        hint = "Master (Obsolete)"
      }
      EndGame: =
      {
        txt = "&"
        hint = "End the multiplayer game."
      }
    }
    game_player_equip:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Use Only"
      }
      master: =
      {
        txt = "&"
        hint = "Team Master (Obsolete)"
      }
    }
    game_player_team:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Remove On fire"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Kill Player"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Gib Player"
      }
      target: =
      {
        txt = "&"
        hint = "game_team_master to use"
      }
      master: =
      {
        txt = "&"
        hint = "Master (Obsolete)"
      }
    }
    game_score:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Allow Negative"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Team Points"
      }
      points: =
      {
        txt = "&"
        hint = "Points to add (+/-)"
      }
      master: =
      {
        txt = "&"
        hint = "Master (Obsolete)"
      }
    }
    game_text:form =
    {
      t_Targetname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "All Players"
      }
      message: =
      {
        txt = "&"
        hint = "Message Text"
      }
      x: =
      {
        txt = "&"
        hint = "X (0 - 1.0 = left to right) (-1 centers)"
      }
      y: =
      {
        txt = "&"
        hint = "Y (0 - 1.0 = top to bottom) (-1 centers)"
      }
      effect: =
      {
        txt = "&"
        hint = "Text Effect"
        typ = "C"
        items = "Fade In/Out"$0D"Credits"$0D"Scan Out"
        values = "0"$0D"1"$0D"2"
      }
      color: =
      {
        txt = "&"
        hint = "Color1"
      }
      color2: =
      {
        txt = "&"
        hint = "Color2"
      }
      fadein: =
      {
        txt = "&"
        hint = "Fade in Time (or character scan time)"
      }
      fadeout: =
      {
        txt = "&"
        hint = "Fade Out Time"
      }
      holdtime: =
      {
        txt = "&"
        hint = "Hold Time"
      }
      fxtime: =
      {
        txt = "&"
        hint = "Scan time (scan effect only)"
      }
      channel: =
      {
        txt = "&"
        hint = "Text Channel"
        typ = "C"
        items = "Channel 1"$0D"Channel 2"$0D"Channel 3"$0D"Channel 4"
        values = "1"$0D"2"$0D"3"$0D"4"
      }
      master: =
      {
        txt = "&"
        hint = "Master"
      }
      Display: =
      {
        txt = "&"
        hint = "Display the message text."
      }
    }
    point_enable_motion_fixup:form =
    {
      bbox = '-2 -2 -2 2 2 2'
      t_Parentname = "!"
      t_Angles = "!"
    }
    point_message:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      t_Parentname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start Disabled"
      }
      message: =
      {
        txt = "&"
        hint = "Entity Message"
      }
      radius: =
      {
        txt = "&"
        hint = "Show message radius"
      }
      developeronly: =
      {
        txt = "&"
        hint = "Developer Only?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Enable: =
      {
        txt = "&"
        hint = "Start displaying the message text, if the player is within the"
         " message radius."
      }
      Disable: =
      {
        txt = "&"
        hint = "Stop displaying the message text."
      }
    }
    point_spotlight:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start On"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "No Dynamic Light"
      }
      spotlightlength: =
      {
        txt = "&"
        hint = "Spotlight Length"
      }
      spotlightwidth: =
      {
        txt = "&"
        hint = "Spotlight Width"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Color (R G B)"
      }
      LightOn: =
      {
        txt = "&"
        hint = "Turn the spotlight on."
      }
      LightOff: =
      {
        txt = "&"
        hint = "Turn the spotlight off"
      }
    }
    point_tesla:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      m_SourceEntityName: =
      {
        txt = "&"
        hint = "Source Entity"
      }
      m_SoundName: =
      {
        txt = "&"
        hint = "Sound Name"
      }
      texture: =
      {
        txt = "&"
        hint = "Sprite Name"
      }
      m_Color: =
      {
        txt = "&"
        hint = "Color"
      }
      m_flRadius: =
      {
        txt = "&"
        hint = "Radius"
      }
      beamcount_min: =
      {
        txt = "&"
        hint = "Min # of Beams"
      }
      beamcount_max: =
      {
        txt = "&"
        hint = "Max # of Beams"
      }
      thick_min: =
      {
        txt = "&"
        hint = "Min Beam Width"
      }
      thick_max: =
      {
        txt = "&"
        hint = "Max Beam Width"
      }
      lifetime_min: =
      {
        txt = "&"
        hint = "Min Time Visible"
      }
      lifetime_max: =
      {
        txt = "&"
        hint = "Max Time Visible"
      }
      interval_min: =
      {
        txt = "&"
        hint = "Min Time Between Arcs"
      }
      interval_max: =
      {
        txt = "&"
        hint = "Max Time Between Arcs"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turn emitter on."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turn emitter off."
      }
      DoSpark: =
      {
        txt = "&"
        hint = "Force a single arc."
      }
    }
    point_clientcommand:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      Command: =
      {
        txt = "&"
        hint = "Command to execute."
      }
    }
    point_servercommand:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      Command: =
      {
        txt = "&"
        hint = "Command to execute."
      }
    }
    game_ui:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Freeze Player"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Hide Weapon"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "+Use Deactivates"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Jump Deactivates"
      }
      FieldOfView: =
      {
        txt = "&"
        hint = "FieldOfView"
      }
      Deactivate: =
      {
        txt = "&"
        hint = "Return Player Control."
      }
      Activate: =
      {
        txt = "&"
        hint = "Take Player Control."
      }
      PlayerOn: =
      {
        txt = "&"
        hint = "Fired whenever this entity starts controlling the player's inp"
         "ut."
      }
      PlayerOff: =
      {
        txt = "&"
        hint = "Fired whenever this entity stops controlling the player's inpu"
         "t."
      }
      PressedMoveLeft: =
      {
        txt = "&"
        hint = "Fired whenever the player presses the moveleft key."
      }
      PressedMoveRight: =
      {
        txt = "&"
        hint = "Fired whenever the player presses the moveright key."
      }
      PressedForward: =
      {
        txt = "&"
        hint = "Fired whenever the player presses the forward key."
      }
      PressedBack: =
      {
        txt = "&"
        hint = "Fired whenever the player presses the backward key."
      }
      PressedAttack: =
      {
        txt = "&"
        hint = "Fired whenever the player presses the attack key."
      }
      PressedAttack2: =
      {
        txt = "&"
        hint = "Fired whenever the player presses the secondary attack key."
      }
      XAxis: =
      {
        txt = "&"
        hint = "An output that fires whenever the X axis of the player's input"
         " changes. i.e. -1 when the player has moveleft key down, 1 when the "
         "player has moveright key down, and 0 if neither."
      }
      YAxis: =
      {
        txt = "&"
        hint = "An output that fires whenever the Y axis of the player's input"
         " changes. i.e. -1 when the player has backward key down, 1 when the "
         "player has forward key down, and 0 if neither."
      }
      AttackAxis: =
      {
        txt = "&"
        hint = "An output that fires whenever the state of the player's attack"
         " key changes. i.e. 1 when the player has the attack key down, 0 othe"
         "rwise."
      }
      Attack2Axis: =
      {
        txt = "&"
        hint = "An output that fires whenever the state of the player's second"
         "ary attack key changes. i.e. 1 when the player has the secondary att"
         "ack key down, 0 otherwise."
      }
    }
    game_zone_player:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      CountPlayersInZone: =
      {
        txt = "&"
        hint = "Count the number of players in the zone, and fire the correspo"
         "nding outputs."
      }
      OnPlayerInZone: =
      {
        txt = "&"
        hint = "Fired whenever a count finds a player inside the zone, with th"
         "e player as the activator."
      }
      OnPlayerOutZone: =
      {
        txt = "&"
        hint = "Fired whenever a count finds a player outside the zone, with t"
         "he player as the activator."
      }
      PlayersInCount: =
      {
        txt = "&"
        hint = "Fired after a count, and contains the number of players found "
         "inside the zone."
      }
      PlayersOutCount: =
      {
        txt = "&"
        hint = "Fired after a count, and contains the number of players found "
         "outside the zone."
      }
    }
    infodecal:form =
    {
      t_Targetname = "!"
      texture: =
      {
        txt = "&"
      }
      LowPriority: =
      {
        txt = "&"
        hint = "Low Priority (can be replaced)"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Activate: =
      {
        txt = "&"
        hint = "Force the decal to apply itself to the world."
      }
    }
    info_projecteddecal:form =
    {
      t_Angles = "!"
      t_Targetname = "!"
      texture: =
      {
        txt = "&"
      }
      Distance: =
      {
        txt = "&"
        hint = "Distance"
      }
      Activate: =
      {
        txt = "&"
        hint = "Force the decal to apply itself to the world."
      }
    }
    info_no_dynamic_shadow:form =
    {
      sides: =
      {
        txt = "&"
        hint = "Brush faces"
      }
    }
    info_player_start:form =
    {
      t_PlayerClass = "!"
      t_Angles = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Master (Has priority if multiple info_player_starts exist)"
      }
    }
    info_overlay:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      material: =
      {
        txt = "&"
        hint = "Material"
      }
      sides: =
      {
        txt = "&"
        hint = "Brush faces"
      }
      RenderOrder: =
      {
        txt = "&"
        hint = "Render Order"
      }
      StartU: =
      {
        txt = "&"
        hint = "U Start"
      }
      EndU: =
      {
        txt = "&"
        hint = "U End"
      }
      StartV: =
      {
        txt = "&"
        hint = "V Start"
      }
      EndV: =
      {
        txt = "&"
        hint = "V End"
      }
      BasisOrigin: =
      {
        txt = "&"
        hint = "Overlay Basis Origin(Read-Only)"
      }
      BasisU: =
      {
        txt = "&"
        hint = "Overlay Basis U(Read-Only)"
      }
      BasisV: =
      {
        txt = "&"
        hint = "Overlay Basis V(Read-Only)"
      }
      BasisNormal: =
      {
        txt = "&"
        hint = "Overlay Basis Normal(Read-Only)"
      }
      uv0: =
      {
        txt = "&"
        hint = "Overlay Point 1(Read-Only)"
      }
      uv1: =
      {
        txt = "&"
        hint = "Overlay Point 2(Read-Only)"
      }
      uv2: =
      {
        txt = "&"
        hint = "Overlay Point 3(Read-Only)"
      }
      uv3: =
      {
        txt = "&"
        hint = "Overlay Point 4(Read-Only)"
      }
    }
    info_intermission:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      target: =
      {
        txt = "&"
        hint = "Entity to look at"
      }
    }
    info_landmark:form =
    {
      t_Targetname = "!"
    }
    info_null:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
    }
    info_target:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      DispatchEffect: =
      {
        txt = "&"
        hint = "Dispatch an effect from this point. Unfinished."
      }
    }
    phys_ragdollmagnet:form =
    {
      t_Targetname = "!"
      t_EnableDisable = "!"
      t_Parentname = "!"
      t_Angles = "!"
      axis: =
      {
        txt = "&"
        hint = "Bar Magnet Axis"
      }
      radius: =
      {
        txt = "&"
        hint = "Effective Radius"
      }
      force: =
      {
        txt = "&"
        hint = "Force"
      }
      target: =
      {
        txt = "&"
        hint = "Entity to affect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Bar Magnet (use axis helper)"
      }
    }
    info_lighting:form =
    {
      t_Targetname = "!"
    }
    info_teleport_destination:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      t_PlayerClass = "!"
    }
    info_node:form =
    {
      t_Targetname = "!"
      t_Node = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Force human permission"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Force small_centered permission"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Force wide_human permission"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Force tiny permissiont"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Force wide_short permission"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Force medium permission"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Force tiny_centered permission"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Force large permission"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Force large_centered permission"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Keep editor position"
      }
    }
    info_node_hint:form =
    {
      t_Targetname = "!"
      t_Angles = "!"
      t_HintNode = "!"
      OnNPCStartedUsing: =
      {
        txt = "&"
        hint = "Fired when an NPC has reached this node and started using it. "
         "Passes along the NPC."
      }
      OnNPCStoppedUsing: =
      {
        txt = "&"
        hint = "Fired when an NPC has stopped using this node. Passes along th"
         "e NPC."
      }
    }
    info_node_air:form =
    {
      t_Targetname = "!"
      t_Node = "!"
      nodeheight: =
      {
        txt = "&"
        hint = "NodeHeight"
      }
    }
    info_node_air_hint:form =
    {
      t_Angles = "!"
      t_Targetname = "!"
      t_HintNode = "!"
      nodeheight: =
      {
        txt = "&"
        hint = "NodeHeight"
      }
    }
    info_hint:form =
    {
      t_Targetname = "!"
      t_Angles = "!"
      t_HintNode = "!"
    }
    info_node_link:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = "!"
      StartNode: =
      {
        txt = "&"
        hint = "Start node ID"
      }
      EndNode: =
      {
        txt = "&"
        hint = "End node ID"
      }
      initialstate: =
      {
        txt = "&"
        hint = "Initial State"
        typ = "C"
        items = "Off"$0D"On"
        values = "0"$0D"1"
      }
      AllowUse: =
      {
        txt = "&"
        hint = "Allow Pass When Off"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Force human connect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Force small_centered connect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Force wide_human connect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Force tiny connect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Force wide_short connect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Force medium connect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Force tiny_centered connect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Force large connect"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Force large_centered connect"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turn the link on."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turn the link off."
      }
    }
    info_node_link_controller:form =
    {
      t_Targetname = "!"
      mins: =
      {
        txt = "&"
        hint = "Mins"
      }
      maxs: =
      {
        txt = "&"
        hint = "Maxs"
      }
      initialstate: =
      {
        txt = "&"
        hint = "Initial State"
        typ = "C"
        items = "Off"$0D"On"
        values = "0"$0D"1"
      }
      AllowUse: =
      {
        txt = "&"
        hint = "Allow Pass When Off"
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turn the link on."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turn the link off."
      }
    }
    info_node_climb:form =
    {
      t_Targetname = "!"
      t_Angles = "!"
      t_HintNode = "!"
    }
    light:form =
    {
      t_Targetname = "!"
      t_Light = "!"
      target: =
      {
        txt = "&"
        hint = "Entity To Point At"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Initially dark"
      }
      _distance: =
      {
        txt = "&"
        hint = "Maximum Distance"
      }
    }
    light_environment:form =
    {
      t_Angles = "!"
      pitch: =
      {
        txt = "&"
        hint = "Pitch"
      }
      _light: =
      {
        txt = "&"
        hint = "Brightness"
      }
      _ambient: =
      {
        txt = "&"
        hint = "Ambient"
      }
    }
    light_spot:form =
    {
      t_Targetname = "!"
      t_Angles = "!"
      t_Light = "!"
      target: =
      {
        txt = "&"
        hint = "Entity to point at"
      }
      _inner_cone: =
      {
        txt = "&"
        hint = "Inner (bright) angle"
      }
      _cone: =
      {
        txt = "&"
        hint = "Outer (fading) angle"
      }
      _exponent: =
      {
        txt = "&"
        hint = "Focus"
      }
      _distance: =
      {
        txt = "&"
        hint = "Maximum distance"
      }
      pitch: =
      {
        txt = "&"
        hint = "Pitch"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Initially dark"
      }
    }
    light_dynamic:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = "!"
      t_Parentname = "!"
      t_Angles = "!"
      target: =
      {
        txt = "&"
        hint = "Entity to point at"
      }
      _light: =
      {
        txt = "&"
        hint = "Light color"
      }
      brightness: =
      {
        txt = "&"
        hint = "Light brightness"
      }
      _inner_cone: =
      {
        txt = "&"
        hint = "Inner (bright) angle"
      }
      _cone: =
      {
        txt = "&"
        hint = "Outer (fading) angle"
      }
      pitch: =
      {
        txt = "&"
        hint = "Pitch"
      }
      distance: =
      {
        txt = "&"
        hint = "Maximum distance"
      }
      spotlight_radius: =
      {
        txt = "&"
        hint = "Spotlight end radius"
      }
      style: =
      {
        txt = "&"
        hint = "Appearance"
        typ = "C"
        items = "Normal"$0D"Fluorescent flicker"$0D"Slow, strong pulse"$0D"Slo"
         "w pulse, noblack"$0D"Gentle pulse"$0D"Flicker A"$0D"Flicker B"$0D"Ca"
         "ndle A"$0D"Candle B"$0D"Candle C"$0D"Fast strobe"$0D"Slow strobe"
        values = "0"$0D"10"$0D"2"$0D"11"$0D"5"$0D"1"$0D"6"$0D"3"$0D"7"$0D"8"$0D
         "4"$0D"9"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "No world light"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "No model light"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Add Displacement Alpha"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Subtract Displacement Alpha"
      }
      Color: =
      {
        txt = "&"
        hint = "Set the light's render color (R G B)."
      }
      brightness: =
      {
        txt = "&"
        hint = "Set the light brightness."
      }
      distance: =
      {
        txt = "&"
        hint = "Set the maximum light distance."
      }
      _inner_cone: =
      {
        txt = "&"
        hint = "Set the inner (bright) angle."
      }
      _cone: =
      {
        txt = "&"
        hint = "Set the outer (fading) angle."
      }
      spotlight_radius: =
      {
        txt = "&"
        hint = "Set the radius of the spotlight at the end point."
      }
      style: =
      {
        txt = "&"
        hint = "Change the lightstyle (see Appearance field for possible value"
         "s)."
      }
      TurnOn: =
      {
        txt = "&"
        hint = "Turn the light off."
      }
      TurnOff: =
      {
        txt = "&"
        hint = "Turn the light on."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggle the light on/off."
      }
    }
    shadow_control:form =
    {
      t_Targetname = "!"
      angles: =
      {
        txt = "&"
        hint = "Pitch Yaw Roll (Y Z X)"
      }
      color: =
      {
        txt = "&"
        hint = "Shadow Color"
      }
      distance: =
      {
        txt = "&"
        hint = "Maximum Distance"
      }
      color: =
      {
        txt = "&"
        hint = "Set the shadow color."
      }
      direction: =
      {
        txt = "&"
        hint = "Set the shadow direction."
      }
      SetDistance: =
      {
        txt = "&"
        hint = "Set the maximum shadow cast distance."
      }
      SetAngles: =
      {
        txt = "&"
        hint = "Set the shadow direction."
      }
    }
    t_KeyFrame:incl =
    {
      NextKey: =
      {
        txt = "&"
        hint = "Next KeyFrame"
      }
      MoveSpeed: =
      {
        txt = "&"
        hint = "Speed (units per second)"
      }
    }
    t_Mover:incl =
    {
      PositionInterpolator: =
      {
        txt = "&"
        hint = "Position Interpolator"
        typ = "C"
        items = "Linear"$0D"Catmull-Rom Spline"
        values = "0"$0D"1"
      }
    }
    func_movelinear:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Origin = "!"
      movedir: =
      {
        txt = "&"
        hint = "Move Direction (Pitch Yaw Roll)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Not Solid"
      }
      startposition: =
      {
        txt = "&"
        hint = "Start Position"
      }
      speed: =
      {
        txt = "&"
        hint = "Speed"
      }
      movedistance: =
      {
        txt = "&"
        hint = "Move Distance"
      }
      blockdamage: =
      {
        txt = "&"
        hint = "Block Damage"
      }
      startsound: =
      {
        txt = "&"
        hint = "Sound played when the brush starts moving."
      }
      stopsound: =
      {
        txt = "&"
        hint = "Sound played when the brush stops moving."
      }
      Open: =
      {
        txt = "&"
        hint = "Move the brush to the end position (starting position + (move "
         "direction * move distance))."
      }
      Close: =
      {
        txt = "&"
        hint = "Move the brush to the starting position."
      }
      SetPosition: =
      {
        txt = "&"
        hint = "Move the brush to a specific position between 0.0 and 1.0, whe"
         "re 0 is the starting position and 1 is the starting position + (move"
         " direction * move distance)."
      }
      OnFullyOpen: =
      {
        txt = "&"
        hint = "Fired when the brush reaches the end position (starting positi"
         "on + (move direction * move distance))."
      }
      OnFullyClosed: =
      {
        txt = "&"
        hint = "Fired when the brush reaches the starting position."
      }
    }
    func_water_analog:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Origin = "!"
      movedir: =
      {
        txt = "&"
        hint = "Move Direction (Pitch Yaw Roll)"
      }
      startposition: =
      {
        txt = "&"
        hint = "Start Position"
      }
      speed: =
      {
        txt = "&"
        hint = "Speed"
      }
      movedistance: =
      {
        txt = "&"
        hint = "Move Distance"
      }
      startsound: =
      {
        txt = "&"
        hint = "Sound played when the water brush starts moving."
      }
      stopsound: =
      {
        txt = "&"
        hint = "Sound played when the water brush stops moving."
      }
      WaveHeight: =
      {
        txt = "&"
        hint = "Wave Height"
      }
      Open: =
      {
        txt = "&"
        hint = "Move the water brush to the end position (starting position + "
         "(move direction * move distance))."
      }
      Close: =
      {
        txt = "&"
        hint = "Move the water brush to the starting position."
      }
      SetPosition: =
      {
        txt = "&"
        hint = "Move the water brush to a specific position between 0.0 and 1."
         "0, where 0 is the starting position and 1 is the starting position +"
         " (move direction * move distance)."
      }
      OnFullyOpen: =
      {
        txt = "&"
        hint = "Fired when the water brush reaches the end position (starting "
         "position + (move direction * move distance))."
      }
      OnFullyClosed: =
      {
        txt = "&"
        hint = "Fired when the water brush reaches the starting position."
      }
    }
    func_rotating:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Origin = "!"
      t_Angles = "!"
      t_RenderFields = "!"
      t_Shadow = "!"
      maxspeed: =
      {
        txt = "&"
        hint = "Max Rotation Speed"
      }
      fanfriction: =
      {
        txt = "&"
        hint = "Friction (0 - 100%)"
      }
      message: =
      {
        txt = "&"
        hint = "Rotating sound WAV"
      }
      volume: =
      {
        txt = "&"
        hint = "Volume (10 = loudest)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start ON"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Reverse Direction"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "X Axis"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Y Axis"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Acc/Dcc"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Fan Pain"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Not Solid"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Small Sound Radius"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Medium Sound Radius"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Large Sound Radius"
      }
      _minlight: =
      {
        txt = "&"
        hint = "Minimum Light Level"
      }
      dmg: =
      {
        txt = "&"
        hint = "Blocking Damage"
      }
      solidbsp: =
      {
        txt = "&"
        hint = "Solid Type"
        typ = "C"
        items = "VPhysics"$0D"BSP"
        values = "0"$0D"1"
      }
      SetSpeed: =
      {
        txt = "&"
        hint = "Set the speed as a ratio of the specified Max Rotation Speed, "
         "where 0 is stopped and 1 is the Max Rotation Speed.."
      }
      Start: =
      {
        txt = "&"
        hint = "Start the rotator rotating."
      }
      Stop: =
      {
        txt = "&"
        hint = "Stop the rotator from rotating."
      }
      StopAtStartPos: =
      {
        txt = "&"
        hint = "Stop the rotator from rotating when it gets around to the star"
         "t position again (on it's rotation axis)."
      }
      StartForward: =
      {
        txt = "&"
        hint = "Start the rotator rotating forward."
      }
      StartBackward: =
      {
        txt = "&"
        hint = "Start the rotator rotating backward."
      }
      Toggle: =
      {
        txt = "&"
        hint = "Toggle the rotator between rotating and not rotating."
      }
      Reverse: =
      {
        txt = "&"
        hint = "Reverse the direction of rotation of the rotator."
      }
    }
    func_platrot:form =
    {
      t_Targetname = "!"
      t_Parentname = "!"
      t_Origin = "!"
      t_Angles = "!"
      t_RenderFields = "!"
      t_BasePlat = "!"
      t_Shadow = "!"
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Toggle"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "X Axis"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Y Axis"
      }
      noise1: =
      {
        txt = "&"
        hint = "Movement Sound"
      }
      noise2: =
      {
        txt = "&"
        hint = "Stop Sound"
      }
      speed: =
      {
        txt = "&"
        hint = "Speed of Rotation"
      }
      height: =
      {
        txt = "&"
        hint = "Travel Altitude"
      }
      rotation: =
      {
        txt = "&"
        hint = "Spin amount"
      }
      _minlight: =
      {
        txt = "&"
        hint = "Minimum Light Level"
      }
    }
  }
}
