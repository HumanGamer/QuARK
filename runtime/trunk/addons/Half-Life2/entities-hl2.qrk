QQRKSRC1
// This file has been written by QuArK 6.6
// It's the text version of file: halflife2.fgd

{
  Description = "HL2 Entities"
  Toolbox Folders.qtx =
  {
    Toolbox = "New map items..."
    Root = "HL2 Entities.qtxfolder"
    HL2 Entities.qtxfolder =
    {

// ai entities

      ai_* entities.qtxfolder =
      {
        ai_ally_manager:e =
        {
          origin = "0 0 0"
          ;desc = "AI Ally Manager"
          maxallies = "5"
          maxmedics = "1"
        }
        ai_battle_line:e =
        {
          origin = "0 0 0"
          ;desc = "Battle line"
          Active = "0"
          Strict = "1"
        }
        ai_changehintgroup:e =
        {
          origin = "0 0 0"
          ;desc = "Change Hint Group"
          SearchType = "0"
          Radius = "0.0"
          hintlimiting = "0"
        }
        ai_changetarget:e =
        {
          origin = "0 0 0"
          ;desc = "Change Target"
        }
        ai_citizen_response_system:e =
        {
          origin = "0 0 0"
          ;desc = "If placed in the level, will manage citizens responses to p"
           "layer's actions."
        }
        ai_goal_actbusy:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Act Busy"
          seeentitytimeout = "1"
          sightmethod = "0"
          type = "0"
          allowteleport = "0"
        }
        ai_goal_actbusy_queue:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Act Busy Queue"
          mustreachfront = "0"
        }
        ai_goal_assault:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Assault"
          SearchType = "0"
          StartActive = "0"
          AssaultCue = "1"
          RallySelectMethod = "0"
        }
        ai_goal_follow:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Follow"
        }
        ai_goal_injured_follow:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Injured Follow"
        }
        ai_goal_lead:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Lead"
          SearchType = "0"
        }
        ai_goal_lead_weapon:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Lead (Weapon). A version of the ai_goal_lead entity"
           " that requires the player to have the specified weapon before the "
           "Actor(s) will lead the player to their target."
          WeaponName = "weapon_bugbait"
          SearchType = "0"
        }
        ai_goal_operator:e =
        {
          origin = "0 0 0"
          ;desc = "Indicates items in the world that some NPCs may operate upo"
           "n"
          state = "0"
          moveto = "1"
        }
        ai_goal_police:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Police"
          policeradius = "512"
        }
        ai_goal_standoff:e =
        {
          origin = "0 0 0"
          ;desc = "AI Goal Standoff"
          SearchType = "0"
          StartActive = "0"
          HintGroupChangeReaction = "1"
          Aggressiveness = "2"
          PlayerBattleline = "1"
          StayAtCover = "0"
          AbandonIfEnemyHides = "0"
        }
        ai_npc_eventresponsesystem:e =
        {
          origin = "0 0 0"
          ;desc = "An entity that allows you to generate events for nearby fri"
           "endly NPCs to respond to."
        }
        ai_relationship:e =
        {
          origin = "0 0 0"
          ;desc = "AI Relationship - Sets relationships between groups of NPCs"
           " in the AI."
          disposition = "3"
          radius = "0"
          rank = "0"
          StartActive = "0"
          Reciprocal = "0"
        }
        ai_script_conditions:e =
        {
          origin = "0 0 0"
          ;desc = "AI Script Conditions"
          StartDisabled = "1"
          MinimumState = "1"
          MaximumState = "3"
          ScriptStatus = "2"
          RequiredTime = "0"
          MinTimeout = "0"
          MaxTimeout = "0"
          ActorSeePlayer = "2"
          PlayerActorProximity = "0"
          PlayerActorFOV = "360"
          PlayerActorFOVTrueCone = "0"
          PlayerActorLOS = "2"
          ActorSeeTarget = "2"
          ActorTargetProximity = "0"
          PlayerTargetProximity = "0"
          PlayerTargetFOV = "360"
          PlayerTargetFOVTrueCone = "0"
          PlayerTargetLOS = "2"
          PlayerBlockingActor = "2"
          ActorInPVS = "2"
          ActorInVehicle = "2"
          PlayerInVehicle = "2"
        }
        ai_sound:e =
        {
          origin = "0 0 0"
          ;desc = "This entity makes sounds or smells that can be sensed by NP"
           "Cs, butnot by the player. This can be used to cause reactions in n"
           "earby NPCs.\n\nSound Types\n  Combat: Will cause most NPCs to beco"
           "me alert\n  World: Will cause most NPCs to become alert\n  Danger:"
           " Will cause most NPCs to move away from the position of the sound\"
           "n  Bullet Impact: \n  Carcass: \n  Meat: \n  Garbage: \n  Thumper:"
           " causes antlions to run away briefly\n  Readiness: (Low, Medium, H"
           "igh) Causes player companions that can hear this sound to change r"
           "eadiness\n"
          volume = "120"
          duration = "0.5"
          soundtype = "0"
          soundcontext = "0"
        }
      }

// assault entities

      assault_* entities.qtxfolder =
      {
        assault_assaultpoint:e =
        {
          origin = "0 0 0"
          ;desc = "(Assault) assault point"
          assaulttimeout = "3.0"
          clearoncontact = "0"
          allowdiversion = "0"
          allowdiversionradius = "0"
          nevertimeout = "0"
          strict = "0"
          forcecrouch = "0"
          urgent = "0"
          assaulttolerance = "36"
        }
        assault_rallypoint:e =
        {
          origin = "0 0 0"
          ;desc = "(Assault) rally point"
          assaultdelay = "0"
          priority = "1"
          forcecrouch = "0"
          urgent = "0"
        }
      }

// env entities

      env_* entities.qtxfolder =
      {
        env_alyxemp:e =
        {
          origin = "0 0 0"
          ;desc = "Special effect for the Alyx's EMP device."
          Type = "0"
        }
        env_ar2explosion:e =
        {
          origin = "0 0 0"
          ;desc = "AR2 explosion visual effect. Big, volume-filling brown clou"
           "d. Does not cause damage or emit sound."
          material = "particle/particle_noisesphere"
        }
        env_citadel_energy_core:e =
        {
          origin = "0 0 0"
          ;desc = "Special effect for the energy cores in citadel."
          scale = "1"
        }
        env_entity_dissolver:e =
        {
          origin = "0 0 0"
          ;desc = "Entity Dissolver"
          magnitude = "250"
          dissolvetype = "Energy"
        }
        env_flare:e =
        {
          origin = "0 0 0"
          ;desc = "Flare"
          scale = "1"
          duration = "30"
        }
        env_global:e =
        {
          origin = "0 0 0"
          ;desc = "An entity to control a game-specific global states."
        }
        env_gunfire:e =
        {
          origin = "0 0 0"
          ;desc = "Gunfire Effect"
          minburstsize = "2"
          maxburstsize = "7"
          minburstdelay = "2"
          maxburstdelay = "5"
          rateoffire = "10"
          spread = "5"
          bias = "1"
          collisions = "0"
          shootsound = "Weapon_AR2.NPC_Single"
          tracertype = "AR2TRACER"
        }
        env_headcrabcanister:e =
        {
          origin = "0 0 0"
          ;desc = "Headcrab canister"
          HeadcrabType = "0"
          HeadcrabCount = "6"
          FlightSpeed = "3000"
          FlightTime = "5"
          StartingHeight = "0"
          MinSkyboxRefireTime = "0"
          MaxSkyboxRefireTime = "0"
          SkyboxCannisterCount = "1"
          Damage = "150"
          DamageRadius = "750"
          SmokeLifetime = "30"
        }
        env_muzzleflash:e =
        {
          origin = "0 0 0"
          ;desc = "Muzzle Flash"
          scale = "1"
        }
        env_rotorwash:e =
        {
          origin = "0 0 0"
          ;desc = "Rotorwash Effect"
        }
        env_speaker:e =
        {
          origin = "0 0 0"
          ;desc = "Announcement Speaker"
        }
        env_sporeexplosion:e =
        {
          origin = "0 0 0"
          ;desc = "Bugbait Spore Effect"
          spawnrate = "25"
        }
        env_starfield:e =
        {
          origin = "0 0 0"
          ;desc = "Starfield effect"
        }
        env_terrainmorph:e =
        {
          origin = "0 0 0"
          ;desc = "Morphs terrain by pulling vertices along a normal.\n\nPlace"
           " this entity the desired distance from a terrain surface and set A"
           "NGLES to the normal along which you want to pull the surface's ver"
           "tices. If you set the INSTANT spawnflag, the morph will take place"
           " instantly instead of over time.\n"
          startradius = "500"
          goalradius = "100"
          duration = "3"
          fraction = "1"
        }
      }

// func entities

      func_* entities.qtxfolder =
      {
        func_bulletshield:b =
        {
          t_detailpoly=!
          ;desc = "A shield that stops only bullets."
        }
        func_combine_ball_spawner:b =
        {
          t_nodrawpoly=!
          ;desc = "Spawns Combine balls."
        }
        func_healthcharger:b =
        {
          t_detailpoly=!
          ;desc = "Wall health recharger"
        }
        func_lookdoor:b =
        {
          t_detailpoly=!
          ;desc = "A door that moves either when looked by a targeted object o"
           "r when a target object comes near the door.  Behavior can be eithe"
           "r based on viewing direction or proximity alone, or on a combinati"
           "on of both.  If inverted the doors behavior will be the opposite."
          ProximityDistance = "0.0"
          ProximityOffset = "0.0"
          FieldOfView = "0.0"
        }
        func_monitor:b =
        {
          t_nodrawpoly=!
          ;desc = "A monitor that renders the view from a given point_camera e"
           "ntity."
        }
        func_recharge:b =
        {
          t_detailpoly=!
          ;desc = "Battery recharger"
        }
        func_tank:b =
        {
          t_detailpoly=!
          ;desc = "Brush Gun Turret"
        }
        func_tank_combine_cannon:b =
        {
          t_detailpoly=!
          ;desc = "Combine sentry cannon"
        }
        func_tankairboatgun:b =
        {
          t_detailpoly=!
          ;desc = "Airboat Gun Turret"
        }
        func_tankapcrocket:b =
        {
          t_detailpoly=!
          ;desc = "APC Rocket Turret"
          rocketspeed = "800"
          burstcount = "10"
        }
        func_tanklaser:b =
        {
          t_detailpoly=!
          ;desc = "Brush Laser Turret"
        }
        func_tankmortar:b =
        {
          t_detailpoly=!
          ;desc = "Brush Mortar Turret"
          iMagnitude = "100"
          firedelay = "2"
          warningtime = "1"
          firevariance = "0"
        }
        func_tankphyscannister:b =
        {
          t_detailpoly=!
          ;desc = "PhysCannister Turret"
        }
        func_tankpulselaser:b =
        {
          t_detailpoly=!
          ;desc = "Brush Pulse Laser"
          PulseSpeed = "1000"
          PulseColor = "255 0 0"
          PulseWidth = "20"
          PulseLife = "2"
          PulseLag = "0.05"
        }
        func_tankrocket:b =
        {
          t_detailpoly=!
          ;desc = "Brush Rocket Turret"
          rocketspeed = "800"
        }
        func_vehicleclip:b =
        {
          t_triggerpoly=!
          ;desc = "Vehicle Clip"
        }
      }

// info entities

      info_* entities.qtxfolder =
      {
        info_apc_missile_hint:b =
        {
          t_nodrawpoly=!
          ;desc = "Something that helps APC missiles guide. If the missile can"
           " hit the associated target entitybetween the time it takes the cur"
           "rent enemy to enter + leave the hint, then the missile will guide "
           "to the entity."
        }
        info_darknessmode_lightsource:e =
        {
          origin = "0 0 0"
          LightRadius = "256.0"
        }
        info_radar_target:e =
        {
          origin = "0 0 0"
          ;desc = "Jalopy Radar Beacon"
          radius = "6000"
          type = "0"
          mode = "0"
        }
        info_snipertarget:e =
        {
          origin = "0 0 0"
          ;desc = "Sniper Target"
          speed = "2"
        }
        info_target_gunshipcrash:e =
        {
          origin = "0 0 0"
          ;desc = "Gunship Crash Target"
        }
        info_target_helicopter_crash:e =
        {
          origin = "0 0 0"
          ;desc = "Helicopter Crash Target"
        }
        info_target_vehicle_transition:e =
        {
          origin = "0 0 0"
          ;desc = "Vehicle Transition Point"
        }
        info_teleporter_countdown:e =
        {
          origin = "0 0 0"
          ;desc = "Countdown timer for the teleporter. The status of the telep"
           "orter will appear on vgui_screen entities whose panel is 'teleport"
           "_countdown_screen'."
        }
      }

// item entities

      item_* entities.qtxfolder =
      {
        item_ammo_357:e =
        {
          origin = "0 0 0"
          ;desc = "Box of 357 ammo"
        }
        item_ammo_357_large:e =
        {
          origin = "0 0 0"
          ;desc = "Large Box of 357 ammo"
        }
        item_ammo_ar2:e =
        {
          origin = "0 0 0"
          ;desc = "Box of AR2 ammo"
        }
        item_ammo_ar2_altfire:e =
        {
          origin = "0 0 0"
          ;desc = "AR2 Alt-fire Round"
        }
        item_ammo_ar2_large:e =
        {
          origin = "0 0 0"
          ;desc = "Large Box of AR2 ammo"
        }
        item_ammo_crate:e =
        {
          origin = "0 0 0"
          ;desc = "Ammo Crate"
          AmmoType = "0"
        }
        item_ammo_crossbow:e =
        {
          origin = "0 0 0"
          ;desc = "Box of Crossbow ammo"
        }
        item_ammo_pistol:e =
        {
          origin = "0 0 0"
          ;desc = "Box of Pistol ammo"
        }
        item_ammo_pistol_large:e =
        {
          origin = "0 0 0"
          ;desc = "Large Box of Pistol ammo"
        }
        item_ammo_smg1:e =
        {
          origin = "0 0 0"
          ;desc = "Box of SMG1 ammo"
        }
        item_ammo_smg1_grenade:e =
        {
          origin = "0 0 0"
          ;desc = "SMG1 Grenade"
        }
        item_ammo_smg1_large:e =
        {
          origin = "0 0 0"
          ;desc = "Large Box of SMG1 ammo"
        }
        item_battery:e =
        {
          origin = "0 0 0"
          ;desc = "HEV battery"
        }
        item_box_buckshot:e =
        {
          origin = "0 0 0"
          ;desc = "Box Buckshot"
        }
        item_dynamic_resupply:e =
        {
          origin = "0 0 0"
          ;desc = "A dynamic item. When the player enters the PVS of this enti"
           "ty, it will determine the item most needed by the player, spawn on"
           "e of those items, and remove itself. To determine which item the p"
           "layer most needs, it calculates which of the Desired Health/Armor/"
           "Ammo ratios the player is farthest from.\n\nIf the player is above"
           " all the desired levels, then no item will be spawned, unless this"
           " item_dynamic_resupply was created by an item_item_crate. In that "
           "case, a random piece of ammo used by a weapon, that the player has"
           ", will be spawned. If the 'Fallback to Health Vial' spawnflag is s"
           "et, a health vial will be spawned instead of the ammo.\n\nBy defau"
           "lt, the item_dynamic_resupply uses the values inside the Master re"
           "supply, instead of using it's own values. This makes it easy to tw"
           "eak the desired loadout of many resupplies. The BecomeMaster input"
           " allows you to switch Masters dynamically as the level progresses."
          spawnflags = "1"
          DesiredHealth = "1"
          DesiredArmor = "0.3"
          DesiredAmmoPistol = "0.5"
          DesiredAmmoSMG1 = "0.5"
          DesiredAmmoSMG1_Grenade = "0.1"
          DesiredAmmoAR2 = "0.4"
          DesiredAmmoBuckshot = "0.5"
          DesiredAmmoRPG_Round = "0"
          DesiredAmmoGrenade = "0.1"
          DesiredAmmo357 = "0"
          DesiredAmmoCrossbow = "0"
          DesiredAmmoAR2_AltFire = "0"
        }
        item_healthcharger:e =
        {
          origin = "0 0 0"
          ;desc = "Health Charger"
        }
        item_healthkit:e =
        {
          origin = "0 0 0"
          ;desc = "Small Health Kit"
        }
        item_healthvial:e =
        {
          origin = "0 0 0"
          ;desc = "Personal Health Kit"
        }
        item_item_crate:e =
        {
          origin = "0 0 0"
          ;desc = "Item Crate"
          CrateType = "0"
          CrateAppearance = "0"
          ItemClass = "item_dynamic_resupply"
          ItemCount = "1"
        }
        item_rpg_round:e =
        {
          origin = "0 0 0"
          ;desc = "RPG Round"
        }
        item_suit:e =
        {
          origin = "0 0 0"
          ;desc = "HEV Suit"
        }
        item_suitcharger:e =
        {
          origin = "0 0 0"
          ;desc = "Battery recharger"
        }
      }

// logic entities

      logic_* entities.qtxfolder =
      {
        logic_achievement:e =
        {
          origin = "0 0 0"
          ;desc = "Sends an achievement system related event from the map to t"
           "he achievement system."
          AchievementEvent = "0"
        }
        logic_choreographed_scene:e =
        {
          origin = "0 0 0"
          ;desc = "Manages a choreographed scene of one or more actors."
          busyactor = "1"
          onplayerdeath = "0"
        }
        logic_scene_list_manager:e =
        {
          origin = "0 0 0"
          ;desc = "Manages a list of logic_choreographed_scene entities. Store"
           " choreo scenes in them in order that they will be played by other "
           "inputs. Whenever a scene plays, the manager will remove all scenes"
           " before that one in the list. The name of another logic_scene_list"
           "_manager can be entered in a slot instead of an invididual scene, "
           "which will cause all scenes in that manager to be removed when a l"
           "ater scene in this list is played."
        }
      }

// npc entities

      npc_* entities.qtxfolder =
      {
        npc_advisor:e =
        {
          origin = "0 0 0"
          ;desc = "An adorable sluglike alien with benevolent psychic powers."
          model = "models/advisor.mdl"
        }
        npc_alyx:e =
        {
          origin = "0 0 0"
          ;desc = "Alyx"
          model = "models/alyx.mdl"
          additionalequipment = "weapon_alyxgun"
          DontPickupWeapons = "1"
          ShouldHaveEMP = "1"
        }
        npc_antlion:e =
        {
          origin = "0 0 0"
          ;desc = "Antlions will run away from ai_sound, type: Thumper."
          startburrowed = "No"
          radius = "256"
          eludedist = "1024"
          ignorebugbait = "No"
          unburroweffects = "No"
        }
        npc_antlion_grub:e =
        {
          origin = "0 0 0"
          ;desc = "Antlion grub"
        }
        npc_antlion_template_maker:e =
        {
          origin = "0 0 0"
          ;desc = "Antlion Template Maker"
          spawnradius = "512"
          vehicledistance = "1"
          workerspawnrate = "0"
          ignorebugbait = "0"
          pool_start = "0"
          pool_max = "0"
          pool_regen_amount = "0"
          pool_regen_time = "0"
          createspores = "0"
        }
        npc_antlionguard:e =
        {
          origin = "0 0 0"
          ;desc = "Antlion Guard"
          startburrowed = "No"
          allowbark = "No"
          cavernbreed = "No"
          incavern = "No"
        }
        npc_apcdriver:e =
        {
          origin = "0 0 0"
          ;desc = "NPC used to drive an APC vehicle."
          drivermaxspeed = "1"
          driverminspeed = "0"
        }
        npc_barnacle:e =
        {
          origin = "0 0 0"
          ;desc = "Barnacle"
          RestDist = "16"
        }
        npc_barney:e =
        {
          origin = "0 0 0"
          ;desc = "Barney"
          additionalequipment = "weapon_pistol"
        }
        npc_blob:e =
        {
          origin = "0 0 0"
          ;desc = "Blob"
        }
        npc_breen:e =
        {
          origin = "0 0 0"
          ;desc = "Dr Breen"
          model = "models/breen.mdl"
        }
        npc_bullseye:e =
        {
          origin = "0 0 0"
          ;desc = "Bullseye"
          health = "35"
          minangle = "360"
          mindist = "0"
          autoaimradius = "0"
        }
        npc_citizen:e =
        {
          origin = "0 0 0"
          ;desc = "Citizen"
          spawnflags = "262144"
          additionalequipment = "0"
          ammosupply = "SMG1"
          ammoamount = "1"
          citizentype = "Default"
          expressiontype = "Random"
          model = "models/humans/group01/male_01.mdl"
          notifynavfailblocked = "0"
          neverleaveplayersquad = "0"
        }
        npc_clawscanner:e =
        {
          origin = "0 0 0"
          ;desc = "Claw Scanner"
          spotlightlength = "500"
          spotlightwidth = "50"
          spotlightdisabled = "0"
          ShouldInspect = "1"
          OnlyInspectPlayers = "0"
          NeverInspectPlayers = "0"
        }
        npc_combine_camera:e =
        {
          origin = "0 0 0"
          ;desc = "Combine security camera"
          spawnflags = "32"
          innerradius = "300"
          outerradius = "450"
          minhealthdmg = "0"
        }
        npc_combine_cannon:e =
        {
          origin = "0 0 0"
          ;desc = "Combine Cannon"
          sightdist = "1024"
        }
        npc_combine_s:e =
        {
          origin = "0 0 0"
          ;desc = "Combine Soldier"
          model = "models/combine_soldier.mdl"
          tacticalvariant = "0"
          usemarch = "0"
        }
        npc_combinedropship:e =
        {
          origin = "0 0 0"
          ;desc = "Combine Dropship"
          GunRange = "2048"
          Invulnerable = "0"
          CrateType = "2"
        }
        npc_combinegunship:e =
        {
          origin = "0 0 0"
          ;desc = "Combine Gunship"
        }
        npc_crabsynth:e =
        {
          origin = "0 0 0"
          ;desc = "Crab Synth"
        }
        npc_cranedriver:e =
        {
          origin = "0 0 0"
          ;desc = "NPC used to drive cranes."
          releasepause = "0"
        }
        npc_crow:e =
        {
          origin = "0 0 0"
          ;desc = "Crow"
          deaf = "0"
        }
        npc_cscanner:e =
        {
          origin = "0 0 0"
          ;desc = "City Scanner"
          spotlightlength = "500"
          spotlightwidth = "50"
          spotlightdisabled = "0"
          ShouldInspect = "1"
          OnlyInspectPlayers = "0"
          NeverInspectPlayers = "0"
        }
        npc_dog:e =
        {
          origin = "0 0 0"
          ;desc = "d0g"
        }
        npc_eli:e =
        {
          origin = "0 0 0"
          ;desc = "Eli Vance"
          model = "models/eli.mdl"
        }
        npc_enemyfinder:e =
        {
          origin = "0 0 0"
          ;desc = "EnemyFinder"
          spawnflags = "65536"
          FieldOfView = "0.2"
          MinSearchDist = "0"
          MaxSearchDist = "2048"
          freepass_timetotrigger = "0"
          freepass_duration = "0"
          freepass_movetolerance = "120"
          freepass_refillrate = "0.5"
          freepass_peektime = "0"
          StartOn = "1"
        }
        npc_enemyfinder_combinecannon:e =
        {
          origin = "0 0 0"
          ;desc = "EnemyFinder Specifically for use with func_tank_combine_can"
           "non"
          spawnflags = "65536"
          FieldOfView = "0.2"
          MinSearchDist = "0"
          MaxSearchDist = "2048"
          freepass_timetotrigger = "0"
          freepass_duration = "0"
          freepass_movetolerance = "120"
          freepass_refillrate = "0.5"
          freepass_peektime = "0"
          StartOn = "1"
        }
        npc_fastzombie:e =
        {
          origin = "0 0 0"
          ;desc = "Fast Zombie"
        }
        npc_fastzombie_torso:e =
        {
          origin = "0 0 0"
          ;desc = "Fast Zombie Torso"
        }
        npc_fisherman:e =
        {
          origin = "0 0 0"
          ;desc = "Fisherman"
        }
        npc_gman:e =
        {
          origin = "0 0 0"
          ;desc = "The G-Man"
        }
        npc_grenade_frag:e =
        {
          origin = "0 0 0"
          ;desc = "Hand Grenade"
        }
        npc_headcrab:e =
        {
          origin = "0 0 0"
          ;desc = "Headcrab"
        }
        npc_headcrab_black:e =
        {
          origin = "0 0 0"
          ;desc = "Black Headcrab"
        }
        npc_headcrab_fast:e =
        {
          origin = "0 0 0"
          ;desc = "Fast Headcrab"
        }
        npc_heli_avoidbox:b =
        {
          ;incl = "defpoly"
          ;desc = "Helicopter avoidance box"
        }
        npc_heli_avoidsphere:e =
        {
          origin = "0 0 0"
          ;desc = "Helicopter avoidance sphere"
          radius = "128"
        }
        npc_heli_nobomb:b =
        {
          ;incl = "defpoly"
          ;desc = "Helicopter bombing suppressor"
        }
        npc_helicopter:e =
        {
          origin = "0 0 0"
          ;desc = "Helicopter"
          InitialSpeed = "0"
          GracePeriod = "2.0"
          PatrolSpeed = "0"
          noncombat = "No"
        }
        npc_hunter:e =
        {
          origin = "0 0 0"
          ;desc = "A smaller, faster, strider that can pursue the player into "
           "buildings."
        }
        npc_hunter_maker:e =
        {
          origin = "0 0 0"
          ;desc = "An entity that creates hunters. The NPCs it creates are clo"
           "nes of a template NPC."
        }
        npc_ichthyosaur:e =
        {
          origin = "0 0 0"
          ;desc = "Ichthyosaur. Not fully functional"
        }
        npc_kleiner:e =
        {
          origin = "0 0 0"
          ;desc = "Kleiner"
          model = "models/kleiner.mdl"
        }
        npc_launcher:e =
        {
          origin = "0 0 0"
          ;desc = "Launcher"
          spawnflags = "65536"
          StartOn = "0"
          MissileModel = "models/Weapons/wscanner_grenade.mdl"
          LaunchSound = "npc/waste_scanner/grenade_fire.wav"
          FlySound = "ambient/objects/machine2.wav"
          SmokeTrail = "1"
          LaunchSmoke = "1"
          LaunchDelay = "8"
          LaunchSpeed = "200"
          HomingSpeed = "0"
          HomingStrength = "10"
          HomingDelay = "0"
          HomingRampUp = "0.5"
          HomingDuration = "5"
          HomingRampDown = "1.0"
          Gravity = "1.0"
          MinRange = "100"
          MaxRange = "2048"
          SpinMagnitude = "0"
          SpinSpeed = "0"
          Damage = "50"
          DamageRadius = "200"
        }
        npc_magnusson:e =
        {
          origin = "0 0 0"
          ;desc = "Magnusson"
          model = "models/magnusson.mdl"
        }
        npc_maker:e =
        {
          origin = "0 0 0"
          ;desc = "NPC Maker"
          additionalequipment = "0"
        }
        npc_manhack:e =
        {
          origin = "0 0 0"
          ;desc = "Manhack"
          ignoreclipbrushes = "0"
        }
        npc_metropolice:e =
        {
          origin = "0 0 0"
          ;desc = "MetroPolice"
          additionalequipment = "weapon_pistol"
          manhacks = "0"
          weapondrawn = "0"
        }
        npc_missiledefense:e =
        {
          origin = "0 0 0"
          ;desc = "Missile Defense"
        }
        npc_monk:e =
        {
          origin = "0 0 0"
          ;desc = "Monk"
          additionalequipment = "weapon_annabelle"
          HasGun = "1"
        }
        npc_mortarsynth:e =
        {
          origin = "0 0 0"
          ;desc = "Mortar Synth"
        }
        npc_mossman:e =
        {
          origin = "0 0 0"
          ;desc = "Dr Mossman"
        }
        npc_pigeon:e =
        {
          origin = "0 0 0"
          ;desc = "Pigeon"
          deaf = "0"
        }
        npc_poisonzombie:e =
        {
          origin = "0 0 0"
          ;desc = "A bloated, disgusting, fluid-spurting zombie created by a p"
           "oison headcrab."
          crabcount = "3"
        }
        npc_rollermine:e =
        {
          origin = "0 0 0"
          ;desc = "Roller Mine"
          startburied = "No"
          uniformsightdist = "0"
        }
        npc_seagull:e =
        {
          origin = "0 0 0"
          ;desc = "Seagull"
          deaf = "0"
        }
        npc_sniper:e =
        {
          origin = "0 0 0"
          ;desc = "Sniper"
          radius = "0"
          misses = "0"
          beambrightness = "100"
          shootZombiesInChest = "0"
          shielddistance = "64"
          shieldradius = "48"
          PaintInterval = "1"
          PaintIntervalVariance = "0.75"
        }
        npc_spotlight:e =
        {
          origin = "0 0 0"
          ;desc = "Spotlight"
          spawnflags = "196608"
          health = "100"
          YawRange = "90"
          PitchMin = "35"
          PitchMax = "50"
          IdleSpeed = "2"
          AlertSpeed = "5"
          spotlightlength = "500"
          spotlightwidth = "50"
          rendercolor = "255 255 255"
        }
        npc_stalker:e =
        {
          origin = "0 0 0"
          ;desc = "Stalker"
          BeamPower = "Low"
        }
        npc_strider:e =
        {
          origin = "0 0 0"
          ;desc = "Strider"
          model = "models/combine_strider.mdl"
          disablephysics = "0"
        }
        npc_turret_ceiling:e =
        {
          origin = "0 0 0"
          ;desc = "Combine Ceiling Turret"
          spawnflags = "32"
          minhealthdmg = "0"
        }
        npc_turret_floor:e =
        {
          origin = "0 0 0"
          ;desc = "Combine Floor Turret"
          SkinNumber = "0"
        }
        npc_turret_ground:e =
        {
          origin = "0 0 0"
          ;desc = "Combine ground turret"
        }
        npc_vehicledriver:e =
        {
          origin = "0 0 0"
          ;desc = "NPC used to drive a target vehicle."
          drivermaxspeed = "1"
          driverminspeed = "0"
        }
        npc_vortigaunt:e =
        {
          origin = "0 0 0"
          ;desc = "Vortigaunt"
          model = "models/vortigaunt.mdl"
          ArmorRechargeEnabled = "1"
          HealthRegenerateEnabled = "0"
        }
        npc_zombie:e =
        {
          origin = "0 0 0"
          ;desc = "Zombie"
        }
        npc_zombie_torso:e =
        {
          origin = "0 0 0"
          ;desc = "Zombie Torso"
        }
        npc_zombine:e =
        {
          origin = "0 0 0"
          ;desc = "Combine Soldier Zombie"
        }
      }

// player entities

      player_* entities.qtxfolder =
      {
        player_loadsaved:e =
        {
          origin = "0 0 0"
          ;desc = "Load Auto-Saved game"
          duration = "2"
          holdtime = "0"
          renderamt = "255"
          rendercolor = "0 0 0"
          loadtime = "0"
        }
        player_speedmod:e =
        {
          origin = "0 0 0"
          ;desc = "Speeds up or slows down player velocity over time (slow mo/"
           "fast forward)"
        }
        player_weaponstrip:e =
        {
          origin = "0 0 0"
          ;desc = "Strips player's weapons"
        }
      }

// point entities

      point_* entities.qtxfolder =
      {
        point_antlion_repellant:e =
        {
          origin = "0 0 0"
          ;desc = "Antlion Repellant"
          repelradius = "512"
        }
        point_apc_controller:e =
        {
          origin = "0 0 0"
          ;desc = "APC Controller"
          yawrate = "30"
          yawtolerance = "15"
          pitchrate = "0"
          pitchtolerance = "20"
          minRange = "0"
          maxRange = "0"
        }
        point_bugbait:e =
        {
          origin = "0 0 0"
          ;desc = "Bugbait sensor point"
          Enabled = "1"
          radius = "512"
        }
        point_camera:e =
        {
          origin = "0 0 0"
          ;desc = "Camera"
          FOV = "90"
          UseScreenAspectRatio = "0"
          fogEnable = "0"
          fogColor = "0 0 0"
          fogStart = "2048"
          fogEnd = "4096"
          fogMaxDensity = "1"
        }
        point_combine_ball_launcher:e =
        {
          origin = "0 0 0"
          ;desc = "Launches Combine balls."
          launchconenoise = "0.0"
          maxballbounces = "8"
        }
        point_flesh_effect_target:e =
        {
          origin = "0 0 0"
          ;desc = "Flesh Effect Target"
          radius = "8"
        }
        point_push:e =
        {
          origin = "0 0 0"
          ;desc = "Point Push"
          spawnflags = "24"
          enabled = "1"
          magnitude = "100"
          radius = "128"
          inner_radius = "0"
        }
      }

// prop entities

      prop_* entities.qtxfolder =
      {
        prop_combine_ball:e =
        {
          origin = "0 0 0"
          ;desc = "A prop that physically simulates as a single rigid body. It"
           " can be constrained to other physics objects using hinges or other"
           " constraints. It can also be configured to break when it takes eno"
           "ugh damage."
        }
        prop_coreball:e =
        {
          origin = "0 0 0"
          ;desc = "Core Ball"
        }
        prop_scalable:e =
        {
          origin = "0 0 0"
          ;desc = "Scalable Prop"
        }
        prop_thumper:e =
        {
          origin = "0 0 0"
          ;desc = "Thumper"
          model = "models/props_combine/CombineThumper002.mdl"
          dustscale = "Small Thumper"
          EffectRadius = "1000"
        }
        prop_vehicle:e =
        {
          origin = "0 0 0"
          ;desc = "Studiomodel vehicle that can be driven via inputs."
        }
        prop_vehicle_airboat:e =
        {
          origin = "0 0 0"
          ;desc = "Driveable studiomodel airboat."
          model = "models/airboat.mdl"
          vehiclescript = "scripts/vehicles/airboat.txt"
          EnableGun = "0"
        }
        prop_vehicle_apc:e =
        {
          origin = "0 0 0"
          ;desc = "APC with mounted guns, can only be driven by a vehicle driv"
           "er or a npc_apcdriver."
        }
        prop_vehicle_cannon:e =
        {
          origin = "0 0 0"
          ;desc = "Driveable studiomodel cannon."
        }
        prop_vehicle_choreo_generic:e =
        {
          origin = "0 0 0"
          ;desc = "Generic Choreo vehicle used for magical events."
          model = "models/vehicles/prisoner_pod.mdl"
          vehiclescript = "scripts/vehicles/choreo_vehicle.txt"
          ignoremoveparent = "0"
          ignoreplayer = "0"
        }
        prop_vehicle_crane:e =
        {
          origin = "0 0 0"
          ;desc = "Driveable studiomodel crane."
        }
        prop_vehicle_driveable:e =
        {
          origin = "0 0 0"
          ;desc = "Generic driveable studiomodel vehicle."
        }
        prop_vehicle_jeep:e =
        {
          origin = "0 0 0"
          ;desc = "Driveable studiomodel jeep."
          CargoVisible = "0"
        }
        prop_vehicle_prisoner_pod:e =
        {
          origin = "0 0 0"
          ;desc = "Combine prisoner pod that the player can ride in."
          model = "models/vehicles/prisoner_pod.mdl"
          vehiclescript = "scripts/vehicles/prisoner_pod.txt"
        }
      }

// script entities

    script_* entities.qtxfolder =
    {
      script_* entities.qtxfolder =
      {
        script_intro:e =
        {
          origin = "0 0 0"
          ;desc = "Script: Custom entity used to handle the intro sequence."
          alternatefovchange = "0"
        }
        script_tauremoval:e =
        {
          origin = "0 0 0"
          ;desc = "Script: Custom entity used to handle the tau removal sequen"
           "ce in coast. (unused)"
        }
      }
    }

// scripted entities

      scripted_* entities.qtxfolder =
      {
        scripted_sentence:e =
        {
          origin = "0 0 0"
          ;desc = "Scripted Sentence"
          spawnflags = "21"
          delay = "0"
          radius = "512"
          refire = "3"
          volume = "10"
          attenuation = "0"
        }
        scripted_sequence:e =
        {
          origin = "0 0 0"
          ;desc = "Grabs an NPC and makes them play a specified set of animati"
           "ons. The NPC can be told to move to the scripted sequence position"
           " or can be told to play the script wherever they currently are. Mu"
           "ltiple scripted sequences of the same name will frame-synchronize "
           "in the action animation once all the actors have moved to position"
           ". This allows tight interaction between actors (one actor grabbing"
           " another, hitting them, etc.) The flow is as follows:\n\n1) Move t"
           "o position using the specified movement animation. If 'Move to Pos"
           "ition' is set to NONE, skip to step 2.\n2) If forced to wait for a"
           "nother actor to move to position, play the pre-action idle animati"
           "on, otherwise skip to step 3. If there is no pre-action idle speci"
           "fied, ACT_IDLE is used.\n3) Fire the OnBeginSequence output.\n4) P"
           "lay the action animation. If no action animation is specified, ski"
           "p to step 5.\n5) Play the post-action idle animation. If none is s"
           "pecified, skip to step 6. If the 'Loop in Post Idle' spawnflag is "
           "set, keep playing the post-action idle until the script is cancell"
           "ed. If no post-action idle animation is specified, ACT_IDLE is use"
           "d.\n6) Fire the OnEndSequence output.\n7) If a next script to play"
           " is specified, hand the NPC to the next script and repeat this pro"
           "cess for that script.\n\nThe MoveToPosition input runs steps 1 and"
           " 2, then waits while playing the pre-action idle animation until t"
           "he BeginSequence input is received.\n\nIf the sequence has motion "
           "extraction in it, set the 'Don't Teleport NPC On End' spawnflag."
          onplayerdeath = "0"
        }
        scripted_target:e =
        {
          origin = "0 0 0"
          ;desc = "Scripted Target"
          StartDisabled = "1"
          m_flRadius = "0"
          MoveSpeed = "5"
          PauseDuration = "0"
          EffectDuration = "2"
        }
      }

// trigger entities

      trigger_* entities.qtxfolder =
      {
        trigger_physics_trap:b =
        {
          t_triggerpoly=!
          ;desc = "A volumetric trigger that disintegrates enemies"
          dissolvetype = "Energy"
        }
        trigger_rpgfire:b =
        {
          t_triggerpoly=!
          ;desc = "A volumetric trigger that triggers whenever an RPG is fired"
           " within it."
        }
        trigger_vphysics_motion:b =
        {
          t_triggerpoly=!
          ;desc = "A volumetric trigger that affects the motion of vphysics ob"
           "jects that touch it."
          StartDisabled = "0"
          SetGravityScale = "1.0"
          SetAdditionalAirDensity = "0"
          SetVelocityLimit = "0.0"
          SetVelocityLimitDelta = "0.0"
          SetVelocityScale = "1.0"
          SetAngVelocityLimit = "0.0"
          SetAngVelocityScale = "1.0"
          SetLinearForce = "0.0"
          SetLinearForceAngles = "0 0 0"
          ParticleTrailLifetime = "4"
          ParticleTrailStartSize = "2"
          ParticleTrailEndSize = "3"
        }
        trigger_waterydeath:b =
        {
          t_triggerpoly=!
          ;desc = "A trigger volume that spawns leeches around entities inside"
           " it, and does damage to them until they die. Used to prevent playe"
           "rs entering deep water."
        }
        trigger_weapon_dissolve:b =
        {
          t_triggerpoly=!
          ;desc = "A volumetric trigger that dissolves all weapons within it"
        }
        trigger_weapon_strip:b =
        {
          t_triggerpoly=!
          ;desc = "A volumetric trigger that strips combat characters of all w"
           "eapons"
          KillWeapons = "No"
        }
      }

// weapon entities

      weapon_* entities.qtxfolder =
      {
        weapon_357:e =
        {
          origin = "0 0 0"
          ;desc = "357"
        }
        weapon_alyxgun:e =
        {
          origin = "0 0 0"
          ;desc = "Alyx Gun"
        }
        weapon_annabelle:e =
        {
          origin = "0 0 0"
          ;desc = "Annabelle (Grigori)"
        }
        weapon_ar2:e =
        {
          origin = "0 0 0"
          ;desc = "Assault Rifle 2"
        }
        weapon_brickbat:e =
        {
          origin = "0 0 0"
          ;desc = "Brickbat"
          BrickbatType = "Rock"
        }
        weapon_bugbait:e =
        {
          origin = "0 0 0"
          ;desc = "Bug bait"
        }
        weapon_crossbow:e =
        {
          origin = "0 0 0"
          ;desc = "Crossbow"
        }
        weapon_crowbar:e =
        {
          origin = "0 0 0"
          ;desc = "Crowbar"
        }
        weapon_frag:e =
        {
          origin = "0 0 0"
          ;desc = "Frag Grenade"
        }
        weapon_physcannon:e =
        {
          origin = "0 0 0"
          ;desc = "Physics Cannon"
        }
        weapon_pistol:e =
        {
          origin = "0 0 0"
          ;desc = "Pistol"
        }
        weapon_rpg:e =
        {
          origin = "0 0 0"
          ;desc = "Missile Launcher"
        }
        weapon_shotgun:e =
        {
          origin = "0 0 0"
          ;desc = "Shotgun"
        }
        weapon_smg1:e =
        {
          origin = "0 0 0"
          ;desc = "SMG1"
        }
        weapon_striderbuster:e =
        {
          origin = "0 0 0"
          ;desc = "Strider Buster"
          dud = "0"
        }
        weapon_stunstick:e =
        {
          origin = "0 0 0"
          ;desc = "StunStick"
        }
      }

// other entities

      other entities.qtxfolder =
      {
        aiscripted_schedule:e =
        {
          origin = "0 0 0"
          ;desc = "Issues a command to an NPC without taking the NPC out of it"
           "s AI. This does not seize control of the NPC as a scripted_sequenc"
           "e does"
          m_flRadius = "0"
          graball = "0"
          spawnflags = "4"
          forcestate = "0"
          schedule = "1"
          interruptability = "0"
        }
        combine_mine:e =
        {
          origin = "0 0 0"
          ;desc = "Combine Land Mine"
          bounce = "1"
          LockSilently = "1"
          StartDisarmed = "0"
          Modification = "0"
        }
        cycler_actor:e =
        {
          origin = "0 0 0"
          ;desc = "Actor Cycler"
        }
        filter_combineball_type:e =
        {
          origin = "0 0 0"
          ;desc = "A filter that filters by combine ball type."
          balltype = "1"
        }
        generic_actor:e =
        {
          origin = "0 0 0"
          ;desc = "Generic Actor NPC"
          hull_name = "Human"
        }
        grenade_helicopter:e =
        {
          origin = "0 0 0"
          ;desc = "Helicopter bomb"
        }
        monster_generic:e =
        {
          origin = "0 0 0"
          ;desc = "Generic Script NPC"
          body = "0"
        }
        test_sidelist:e =
        {
          origin = "0 0 0"
          ;desc = "Test entity for Ken!"
        }
        vehicle_viewcontroller:e =
        {
          origin = "0 0 0"
          ;desc = "Vehicle hack to control player view"
        }
      }
    }
  }
  Entity Forms.fctx =
  {
    t_TalkNPC:incl =
    {
      t_BaseNPC = !
      UseSentence: =
      {
        txt = "&"
        hint = "Use Sentence"
      }
      UnUseSentence: =
      {
        txt = "&"
        hint = "Un-Use Sentence"
      }
      DontUseSpeechSemaphore: =
      {
        txt = "&"
        hint = "Don't Use Speech Semaphore"
        typ = "C"
        items = "No (Use speech semaphore)"$0D"Yes (Don't use speech semaphore"
         ")"
        values = "0"$0D"1"
      }
      input#SpeakResponseConcept: =
      {
        txt = "&"
        hint = "Speak the specified response concept."
      }
    }
    t_PlayerCompanion:incl =
    {
      t_BaseNPC = !
      input#OutsideTransition: =
      {
        txt = "&"
        hint = "Use this input to teleport the NPC to a hintnode with the Play"
         "er Squad Transition Point hint type."
      }
      input#EnableAlwaysTransition: =
      {
        txt = "&"
        hint = "Enable the 'always transition' behavior"
      }
      input#DisableAlwaysTransition: =
      {
        txt = "&"
        hint = "Disable the 'always transition' behavior"
      }
      input#EnableSpeakWhileScripting: =
      {
        txt = "&"
        hint = "Allow this NPC to speak responses while in a scripted sequence"
         " or while StartScripting is active."
      }
      input#DisableSpeakWhileScripting: =
      {
        txt = "&"
        hint = "Cancels this NPC's ability to speak responses while in a scrip"
         "ted sequence or while StartScripting is active if it was previously "
         "enabled by EnableSpeakWhileScripting."
      }
      AlwaysTransition: =
      {
        txt = "&"
        hint = "Always transition"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      DontPickupWeapons: =
      {
        txt = "&"
        hint = "Prevent picking up weapons?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      GameEndAlly: =
      {
        txt = "&"
        hint = "Is this a vital ally?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#MakeGameEndAlly: =
      {
        txt = "&"
        hint = "Make this NPC a game end ally."
      }
      input#MakeRegularAlly: =
      {
        txt = "&"
        hint = "Make this NPC a regular ally."
      }
      input#EnableWeaponPickup: =
      {
        txt = "&"
        hint = "Enable Weapon Pickup"
      }
      input#DisableWeaponPickup: =
      {
        txt = "&"
        hint = "Disable Weapon Pickup"
      }
      input#GiveWeapon: =
      {
        txt = "&"
        hint = "Gives the NPC a weapon of the specified entity name."
      }
      input#SetReadinessPanic: =
      {
        txt = "&"
        hint = "Set readiness to panic state (Special)"
      }
      input#SetReadinessLow: =
      {
        txt = "&"
        hint = "Set readiness to calmest state (Bored)"
      }
      input#SetReadinessMedium: =
      {
        txt = "&"
        hint = "Set readiness to moderate (Alert)"
      }
      input#SetReadinessHigh: =
      {
        txt = "&"
        hint = "Set readiness to highest. (Combat imminent)"
      }
      input#LockReadiness: =
      {
        txt = "&"
        hint = "Lock readiness at current setting for x seconds -1 = forever, "
         "0 = unlock now"
      }
      input#ClearAllOutputs: =
      {
        txt = "&"
        hint = "Obliterate every output that this NPC has."
      }
      output#OnWeaponPickup: =
      {
        txt = "&"
        hint = "Fires when this NPC picks a weapon off the ground or a gun rac"
         "k."
      }
    }
    t_RappelNPC:incl =
    {
      t_BaseNPC = !
      waitingtorappel: =
      {
        txt = "&"
        hint = "Waiting to Rappel?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#BeginRappel: =
      {
        txt = "&"
        hint = "BeginRappel"
      }
      output#OnRappelTouchdown: =
      {
        txt = "&"
        hint = "Fires when done rappeling"
      }
    }
    t_AlyxInteractable:incl =
    {
      output#OnAlyxStartedInteraction: =
      {
        txt = "&"
        hint = "Fired when Alyx begins to interact with this entity."
      }
      output#OnAlyxFinishedInteraction: =
      {
        txt = "&"
        hint = "Fired when Alyx has finished interacting with this entity."
      }
      input#InteractivePowerDown: =
      {
        txt = "&"
        hint = "Shutdown this target."
      }
    }
    t_CombineBallSpawners:incl =
    {
      t_Targetname = !
      t_Origin = !
      t_Angles = !
      t_Global = !
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "Start inactive"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8192"
        cap = "Combine power supply"
      }
      ballcount: =
      {
        txt = "&"
        hint = "Ball count"
      }
      minspeed: =
      {
        txt = "&"
        hint = "Min ball speed"
      }
      maxspeed: =
      {
        txt = "&"
        hint = "Max ball speed"
      }
      ballradius: =
      {
        txt = "&"
        hint = "Ball radius"
      }
      balltype: =
      {
        txt = "&"
        hint = "Ball Type"
        typ = "C"
        items = "Combine Energy Ball 1"$0D"Combine Energy Ball 2"$0D"Combine E"
         "nergy Ball 3"
        values = "0"$0D"1"$0D"2"
      }
      ballrespawntime: =
      {
        txt = "&"
        hint = "Ball Respawn Time"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable spawning of combine balls"
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable spawning of combine balls"
      }
      output#OnBallGrabbed: =
      {
        txt = "&"
        hint = "Fired when a combine ball is grabbed from the field by a mega "
         "physcannon"
      }
      output#OnBallReinserted: =
      {
        txt = "&"
        hint = "Fired when a combine ball is reinserted into the field (only g"
         "ets triggered when Combine Power supply is checked)"
      }
      output#OnBallHitTopSide: =
      {
        txt = "&"
        hint = "Fired when a combine ball in hits the top side of the field (o"
         "nly gets triggered when Combine Power supply is checked)"
      }
      output#OnBallHitBottomSide: =
      {
        txt = "&"
        hint = "Fired when a combine ball in hits the bottom side of the field"
         " (only gets triggered when Combine Power supply is checked)"
      }
      output#OnLastBallGrabbed: =
      {
        txt = "&"
        hint = "Fired when the last combine ball is grabbed from the field by "
         "a mega physcannon"
      }
      output#OnFirstBallReinserted: =
      {
        txt = "&"
        hint = "Fired when the first combine ball is reinserted into the field"
         " (only gets triggered when Combine Power supply is checked)"
      }
    }
    prop_combine_ball:form =
    {
      t_BasePropPhysics = !
      input#Explode: =
      {
        txt = "&"
        hint = "Explode"
      }
    }
    trigger_physics_trap:form =
    {
      t_Trigger = !
      t_Angles = !
      dissolvetype: =
      {
        txt = "&"
        hint = "Dissolve Type"
        typ = "C"
        items = "Energy"$0D"Heavy electrical"$0D"Light electrical"
        values = "0"$0D"1"$0D"2"
      }
    }
    trigger_weapon_dissolve:form =
    {
      t_Trigger = !
      emittername: =
      {
        txt = "&"
        hint = "Emitter Name"
      }
      output#OnDissolveWeapon: =
      {
        txt = "&"
        hint = "Fires when one weapon is starting to dissolve in the trigger v"
         "olume."
      }
      output#OnChargingPhyscannon: =
      {
        txt = "&"
        hint = "Fires when the trigger begins to charge the physcannon."
      }
      input#StopSound: =
      {
        txt = "&"
        hint = "Stops all sounds."
      }
    }
    trigger_weapon_strip:form =
    {
      t_Trigger = !
      KillWeapons: =
      {
        txt = "&"
        hint = "Kill Weapons"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
    }
    func_combine_ball_spawner:form =
    {
      t_CombineBallSpawners = !
      output#OnBallReinserted: =
      {
        txt = "&"
        hint = "Fired when a combine ball is reinserted into the field (only g"
         "ets triggered when Combine Power supply is checked)"
      }
      output#OnLastBallGrabbed: =
      {
        txt = "&"
        hint = "Fired when the last combine ball is grabbed from the field by "
         "a mega physcannon"
      }
    }
    point_combine_ball_launcher:form =
    {
      t_CombineBallSpawners = !
      launchconenoise: =
      {
        txt = "&"
        hint = "Noise to launch direction"
      }
      bullseyename: =
      {
        txt = "&"
        hint = "Name of bullseye"
      }
      maxballbounces: =
      {
        txt = "&"
        hint = "Max number of bounces"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Attach Bullseye"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Balls should collide against player"
      }
      input#LaunchBall: =
      {
        txt = "&"
        hint = "Launch a ball from the spawner."
      }
    }
    npc_blob:form =
    {
      t_BaseNPC = !
      input#FormPathShape: =
      {
        txt = "&"
        hint = "Tells the group to go distribute themselves along a shape defi"
         "ned by path corner entities"
      }
      input#SetRadius: =
      {
        txt = "&"
        hint = "Force the group to change the radius (density)"
      }
    }
    npc_grenade_frag:form =
    {
      t_BaseNPC = !
      input#SetTimer: =
      {
        txt = "&"
        hint = "This input makes the grenade live, and specifies how many seco"
         "nds before it explodes."
      }
    }
    npc_combine_cannon:form =
    {
      t_BaseNPC = !
      sightdist: =
      {
        txt = "&"
        hint = "Sight radius"
      }
    }
    npc_combine_camera:form =
    {
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Always Become Angry On New Enemy"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Ignore Enemies (Scripted Targets Only)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Start Inactive"
      }
      innerradius: =
      {
        txt = "&"
        hint = "Inner radius"
      }
      outerradius: =
      {
        txt = "&"
        hint = "Outer radius"
      }
      minhealthdmg: =
      {
        txt = "&"
        hint = "Min req'd damage for hurting camera"
      }
      defaulttarget: =
      {
        txt = "&"
        hint = "Default target"
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disables the camera. If open, the camera closes."
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enables the camera. If closed, the camera opens."
      }
      input#Toggle: =
      {
        txt = "&"
        hint = "Toggle - If open, close. If closed, open."
      }
      input#SetDefaultTargetEntity: =
      {
        txt = "&"
        hint = "Sets the entity for the camera to track when it has nothing be"
         "tter to track, by name."
      }
      input#SetTargetEntity: =
      {
        txt = "&"
        hint = "Sets the entity for the camera to track now, by name."
      }
      input#SetAngry: =
      {
        txt = "&"
        hint = "Causes the camera to become angry as if it has seen something "
         "upsetting."
      }
      input#SetIdle: =
      {
        txt = "&"
        hint = "Causes the camera to calm down if it is angry."
      }
      output#OnFoundPlayer: =
      {
        txt = "&"
        hint = "Fired when the player is spotted within the inner radius"
      }
      output#OnFoundEnemy: =
      {
        txt = "&"
        hint = "Fired when a non-player enemy is spotted within the inner radi"
         "us."
      }
    }
    t_npc_turret_ground:incl =
    {
      t_BaseNPC = !
      t_Parentname = !
      t_AlyxInteractable = !
      input#Enable: =
      {
        txt = "&"
        hint = "Turn turret on."
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Turn turret off."
      }
      output#OnAreaClear: =
      {
        txt = "&"
        hint = "Fires when the turret can't find any more enemies (7 second de"
         "lay)"
      }
    }
    npc_turret_ground:form =
    {
      t_npc_turret_ground = "!"
    }
    npc_turret_ceiling:form =
    {
      t_Targetname = !
      t_Angles = !
      t_Studiomodel = !
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Autostart"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Start Inactive"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Never Retire"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Out of Ammo"
      }
      minhealthdmg: =
      {
        txt = "&"
        hint = "Min req'd damage for hurting turret"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "If closed, open."
      }
      input#Disable: =
      {
        txt = "&"
        hint = "If open, close."
      }
      input#Toggle: =
      {
        txt = "&"
        hint = "Toggle - If open, close. If closed, open."
      }
      output#OnDeploy: =
      {
        txt = "&"
        hint = "Turret is becoming active and dangerous."
      }
      output#OnRetire: =
      {
        txt = "&"
        hint = "Turret is becoming inactive and harmless."
      }
      output#OnTipped: =
      {
        txt = "&"
        hint = "Turret has been tipped over and is inactive."
      }
    }
    t_npc_turret_floor:incl =
    {
      t_Targetname = !
      t_Angles = !
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Autostart"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Start Inactive"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Fast Retire"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Out of Ammo"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Citizen modified (Friendly)"
      }
      SkinNumber: =
      {
        txt = "&"
        hint = "Skin Number"
      }
      input#Toggle: =
      {
        txt = "&"
        hint = "Toggle - If open, close. If closed, open."
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable the turret."
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable the turret."
      }
      input#DepleteAmmo: =
      {
        txt = "&"
        hint = "Depletes all the ammo from a turret, causing it to dry-fire."
      }
      input#RestoreAmmo: =
      {
        txt = "&"
        hint = "Restores ammo to a turret, allowing it to fire live rounds aga"
         "in."
      }
      input#SelfDestruct: =
      {
        txt = "&"
        hint = "Causes the turret to warn and then explode."
      }
      output#OnDeploy: =
      {
        txt = "&"
        hint = "Turret is becoming active and dangerous."
      }
      output#OnRetire: =
      {
        txt = "&"
        hint = "Turret is becoming inactive and harmless."
      }
      output#OnTipped: =
      {
        txt = "&"
        hint = "Turret has been tipped over and is inactive."
      }
      output#OnPhysGunPickup: =
      {
        txt = "&"
        hint = "Picked up with physgun"
      }
      output#OnPhysGunDrop: =
      {
        txt = "&"
        hint = "Released by physgun"
      }
    }
    npc_turret_floor:form =
    {
      t_npc_turret_floor = "!"
    }
    t_VehicleDriverNPC:incl =
    {
      t_BaseNPC = !
      vehicle: =
      {
        txt = "&"
        hint = "Vehicle to drive"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Start Inactive"
      }
      input#StartFiring: =
      {
        txt = "&"
        hint = "Tell the driver to attack nearby enemies with the vehicle's we"
         "aponry (if any)"
      }
      input#StopFiring: =
      {
        txt = "&"
        hint = "Tell the driver to stop attacking nearby enemies with the vehi"
         "cle's weaponry."
      }
      input#GotoPathCorner: =
      {
        txt = "&"
        hint = "Tell the driver to go to a specific path corner and continue f"
         "rom there."
      }
    }
    npc_vehicledriver:form =
    {
      t_VehicleDriverNPC = !
      drivermaxspeed: =
      {
        txt = "&"
        hint = "Maxspeed (percentage of vehicle's maxspeed)."
      }
      driverminspeed: =
      {
        txt = "&"
        hint = "MinSpeed (percentage of vehicle's maxspeed)."
      }
      input#SetDriversMaxSpeed: =
      {
        txt = "&"
        hint = "Set the Maxspeed (percentage of vehicle's maxspeed)."
      }
      input#SetDriversMinSpeed: =
      {
        txt = "&"
        hint = "Set the Minspeed (percentage of vehicle's maxspeed)."
      }
      input#StartForward: =
      {
        txt = "&"
        hint = "Tell the driver to start driving."
      }
      input#Stop: =
      {
        txt = "&"
        hint = "Tell the driver to stop driving."
      }
    }
    npc_cranedriver:form =
    {
      t_VehicleDriverNPC = !
      releasepause: =
      {
        txt = "&"
        hint = "Pause time before dropping a ForceDrop specified object."
      }
      input#ForcePickup: =
      {
        txt = "&"
        hint = "Force the driver to pickup the specified entity (by targetname"
         ")"
      }
      input#ForceDrop: =
      {
        txt = "&"
        hint = "Force the driver to drop the currently held object at the spec"
         "ified entity's location."
      }
      output#OnPickedUpObject: =
      {
        txt = "&"
        hint = "Fired when the ForcePickup specified object has been picked up"
         "."
      }
      output#OnDroppedObject: =
      {
        txt = "&"
        hint = "Fired when the ForceDrop specified object has been dropped."
      }
      output#OnPausingBeforeDrop: =
      {
        txt = "&"
        hint = "Fired at the start of the pause before dropping the ForceDrop "
         "specified object."
      }
    }
    npc_apcdriver:form =
    {
      t_VehicleDriverNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "No Rocket Attacks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "No Gun Attacks"
      }
      drivermaxspeed: =
      {
        txt = "&"
        hint = "Maxspeed (percentage of vehicle's maxspeed)."
      }
      driverminspeed: =
      {
        txt = "&"
        hint = "MinSpeed (percentage of vehicle's maxspeed)."
      }
      input#SetDriversMaxSpeed: =
      {
        txt = "&"
        hint = "Set the Maxspeed (percentage of vehicle's maxspeed)."
      }
      input#SetDriversMinSpeed: =
      {
        txt = "&"
        hint = "Set the Minspeed (percentage of vehicle's maxspeed)."
      }
      input#StartForward: =
      {
        txt = "&"
        hint = "Tell the driver to start driving."
      }
      input#Stop: =
      {
        txt = "&"
        hint = "Tell the driver to stop driving."
      }
      input#DisableFiring: =
      {
        txt = "&"
        hint = "Disables firing from happening"
      }
      input#EnableFiring: =
      {
        txt = "&"
        hint = "Enables firing to start. Firing is enabled by default"
      }
    }
    npc_rollermine:form =
    {
      t_BaseNPC = !
      t_AlyxInteractable = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Friendly"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Use prop_physics collision rules"
      }
      startburied: =
      {
        txt = "&"
        hint = "Start Buried"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      uniformsightdist: =
      {
        txt = "&"
        hint = "Sight Distance"
        typ = "C"
        items = "Ignore distant targets not in a vehicle (default)."$0D"Equal "
         "visibility for all targets."
        values = "0"$0D"1"
      }
      input#TurnOn: =
      {
        txt = "&"
        hint = "Restore this rollermine to normal functionality."
      }
      input#TurnOff: =
      {
        txt = "&"
        hint = "Make this rollermine completely inert. Does not run AI and NPC"
         "s will ignore it."
      }
      output#OnPhysGunPickup: =
      {
        txt = "&"
        hint = "Picked up with physgun"
      }
      output#OnPhysGunDrop: =
      {
        txt = "&"
        hint = "Released by physgun"
      }
    }
    npc_missiledefense:form =
    {
      t_BaseNPC = !
    }
    npc_missiledefense:form =
    {
      t_BaseNPC = !
    }
    npc_sniper:form =
    {
      t_BaseNPC = !
      radius: =
      {
        txt = "&"
        hint = "Patience Radius"
      }
      misses: =
      {
        txt = "&"
        hint = "Initial Misses"
      }
      beambrightness: =
      {
        txt = "&"
        hint = "Beam Brightness (0 to 255)"
      }
      shootZombiesInChest: =
      {
        txt = "&"
        hint = "Shoot zombies in chest"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      shielddistance: =
      {
        txt = "&"
        hint = "Bullet shield distance"
      }
      shieldradius: =
      {
        txt = "&"
        hint = "Bullet shield radius"
      }
      PaintInterval: =
      {
        txt = "&"
        hint = "Paint interval"
      }
      PaintIntervalVariance: =
      {
        txt = "&"
        hint = "Paint interval variance"
      }
      input#EnableSniper: =
      {
        txt = "&"
        hint = "Enable Shooting"
      }
      input#DisableSniper: =
      {
        txt = "&"
        hint = "Disable Shooting"
      }
      input#SetDecoyRadius: =
      {
        txt = "&"
        hint = "Set Decoy Radius"
      }
      input#SweepTarget: =
      {
        txt = "&"
        hint = "Sweep a Target"
      }
      input#SweepTargetHighestPriority: =
      {
        txt = "&"
        hint = "Drop everything and sweep this target!"
      }
      input#SweepGroupRandomly: =
      {
        txt = "&"
        hint = "Randomly Sweep a Group"
      }
      input#StopSweeping: =
      {
        txt = "&"
        hint = "Stop any target sweeping operation started by entity I/O"
      }
      input#ProtectTarget: =
      {
        txt = "&"
        hint = "Protect the specified enemy. The sniper will attempt to shoot "
         "the enemy nearest the protect target at all times."
      }
      input#SetPaintInterval: =
      {
        txt = "&"
        hint = "Set PaintInterval field."
      }
      input#SetPaintIntervalVariance: =
      {
        txt = "&"
        hint = "Set PaintIntervalVariance field."
      }
      output#OnShotFired: =
      {
        txt = "&"
        hint = "Fires when sniper fires a shot"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Hidden"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Laser Viewcone"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "No Corpse"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "Start Disabled"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1048576"
        cap = "Faster shooting (Episodic)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2097152"
        cap = "No sweep away from target (Episodic)"
      }
    }
    info_radar_target:form =
    {
      t_Targetname = !
      t_Parentname = !
      t_EnableDisable = !
      radius: =
      {
        txt = "&"
        hint = "Effective Radius"
      }
      type: =
      {
        txt = "&"
        hint = "Type of target"
        typ = "C"
        items = "Generic Citizen Beacon"$0D"Magnussen RDU Beacon"$0D"Dog"$0D"A"
         "lly Installation"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
      mode: =
      {
        txt = "&"
        hint = "Mode"
        typ = "C"
        items = "Default"$0D"Sticky - once detected, ignore effective radius."
        values = "0"$0D"1"
      }
    }
    info_target_vehicle_transition:form =
    {
      t_Targetname = !
      t_Angles = !
      t_EnableDisable = !
    }
    info_snipertarget:form =
    {
      t_Targetname = !
      t_Parentname = !
      speed: =
      {
        txt = "&"
        hint = "Sweep to speed"
      }
      groupname: =
      {
        txt = "&"
        hint = "Group Name"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Shoot Me"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "No Interruptions"
      }
      //spawnflags: =
      //{
      //  txt = "&"
      //  typ = "X4"
      //  cap = "Snap Shot"
      //}
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Resume if Interrupted"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Snap to me"
      }
    }
    prop_thumper:form =
    {
      t_Targetname = !
      t_Angles = !
      t_modelselect = !
      dustscale: =
      {
        txt = "&"
        hint = "Dust Scale"
        typ = "C"
        items = "Small Thumper"$0D"Large Thumper"
        values = "128"$0D"256"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable Thumper"
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable Thumper"
      }
      output#OnThumped: =
      {
        txt = "&"
        hint = "Fires when thumper impacts the ground."
      }
      EffectRadius: =
      {
        txt = "&"
        hint = "Effect Radius"
      }
    }
    npc_antlion:form =
    {
      t_BaseNPC = !
      startburrowed: =
      {
        txt = "&"
        hint = "Start Burrowed"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Burrow when eluded"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Use Ground Checks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Worker Type"
      }
      radius: =
      {
        txt = "&"
        hint = "Alert Radius"
      }
      eludedist: =
      {
        txt = "&"
        hint = "Distance until eluded"
      }
      ignorebugbait: =
      {
        txt = "&"
        hint = "Ignore Bugbait"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      unburroweffects: =
      {
        txt = "&"
        hint = "Suppress unburrow effects"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#Unburrow: =
      {
        txt = "&"
        hint = "Unburrow from the ground"
      }
      input#Burrow: =
      {
        txt = "&"
        hint = "Burrow into the ground"
      }
      input#BurrowAway: =
      {
        txt = "&"
        hint = "Burrow into the ground and remove the antlion"
      }
      input#FightToPosition: =
      {
        txt = "&"
        hint = "Fight to position"
      }
      input#EnableJump: =
      {
        txt = "&"
        hint = "Allow non-navigational jumping"
      }
      input#DisableJump: =
      {
        txt = "&"
        hint = "Disallow non-navigational jumping"
      }
      input#IgnoreBugbait: =
      {
        txt = "&"
        hint = "Ignore bugbait"
      }
      input#HearBugbait: =
      {
        txt = "&"
        hint = "Hear bugbait"
      }
      output#OnReachedFightGoal: =
      {
        txt = "&"
        hint = "Fires when the antlion reaches his specified fight-to location"
      }
      output#OnUnBurrowed: =
      {
        txt = "&"
        hint = "Fires when the antlion unburrows"
      }
    }
    npc_antlionguard:form =
    {
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Create server-side ragdoll on death"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Use inside footsteps"
      }
      startburrowed: =
      {
        txt = "&"
        hint = "Start Burrowed"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      allowbark: =
      {
        txt = "&"
        hint = "Allow Bark"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      cavernbreed: =
      {
        txt = "&"
        hint = "Cavern Guard Model and Texture"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      incavern: =
      {
        txt = "&"
        hint = "Use inside-Cavern Behavior"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      shovetargets: =
      {
        txt = "&"
        hint = "Shove Targets"
      }
      input#Unburrow: =
      {
        txt = "&"
        hint = "Unburrow from the ground"
      }
      input#SetShoveTarget: =
      {
        txt = "&"
        hint = "Sets a shove target to attack"
      }
      input#SetChargeTarget: =
      {
        txt = "&"
        hint = "Sets a charge target to attack.  Parameters are the name of th"
         "e entity to start at and the name of the entity to charge towards, s"
         "eparated by a space (i.e. start target)"
      }
      input#ClearChargeTarget: =
      {
        txt = "&"
        hint = "Clear the charge target"
      }
      input#SetCoverFromAttack: =
      {
        txt = "&"
        hint = "Sets whether or not the creature will protect itself from atta"
         "cks"
      }
      input#Ragdoll: =
      {
        txt = "&"
        hint = "Causes the antlion guard to die, regardless of health"
      }
      input#EnableBark: =
      {
        txt = "&"
        hint = "Allow the antlion guard to try and summon antlions"
      }
      input#DisableBark: =
      {
        txt = "&"
        hint = "Stop the antlion guard from trying to summon antlions"
      }
      input#InvestigateHint: =
      {
        txt = "&"
        hint = "Sniff around at a hint group until told otherwise"
      }
      input#StopInvestigating: =
      {
        txt = "&"
        hint = "Stop trying to sniff out the player"
      }
      input#EnablePreferPhysicsAttack: =
      {
        txt = "&"
        hint = "Prefer to use physics attacks if at all possible, even when in"
         "side a cavern."
      }
      input#DisablePreferPhysicsAttack: =
      {
        txt = "&"
        hint = "Do not prefer to use physics attacks if at all possible, even "
         "when inside a cavern."
      }
      output#OnSeeHiddenPlayer: =
      {
        txt = "&"
        hint = "Fires when the current enemy is seen while trying to hide"
      }
      output#OnSmellHiddenPlayer: =
      {
        txt = "&"
        hint = "Fires when the current enemy is smelled while trying to hide"
      }
      output#OnSummon: =
      {
        txt = "&"
        hint = "Antlion guard is attempting to summon antlions"
      }
    }
    npc_crow:form =
    {
      t_BaseNPC = !
      input#FlyAway: =
      {
        txt = "&"
        hint = "Forces the crow to fly to the nearest crow flyto hint node."
      }
      deaf: =
      {
        txt = "&"
        hint = "Deaf?"
        typ = "C"
        items = "No."$0D"Yes. Ignore sounds."
        values = "0"$0D"1"
      }
    }
    npc_seagull:form =
    {
      t_BaseNPC = !
      input#FlyAway: =
      {
        txt = "&"
        hint = "Forces the seagull to fly to the nearest crow flyto hint node."
      }
      deaf: =
      {
        txt = "&"
        hint = "Deaf?"
        typ = "C"
        items = "No."$0D"Yes. Ignore sounds."
        values = "0"$0D"1"
      }
    }
    npc_pigeon:form =
    {
      t_BaseNPC = !
      input#FlyAway: =
      {
        txt = "&"
        hint = "Forces the pigeon to fly to the nearest crow flyto hint node."
      }
      deaf: =
      {
        txt = "&"
        hint = "Deaf?"
        typ = "C"
        items = "No."$0D"Yes. Ignore sounds."
        values = "0"$0D"1"
      }
    }
    npc_ichthyosaur:form =
    {
      t_BaseNPC = !
    }
    t_BaseHeadcrab:incl =
    {
      t_BaseNPC = !
      startburrowed: =
      {
        txt = "&"
        hint = "Start burrowed"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Start hidden"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Start hanging from ceiling"
      }
      input#StartHangingFromCeiling: =
      {
        txt = "&"
        hint = "Start hanging from ceiling."
      }
      input#DropFromCeiling: =
      {
        txt = "&"
        hint = "Drop if hanging from ceiling."
      }
    }
    npc_headcrab:form =
    {
      t_BaseHeadcrab = !
      t_Parentname = !
    }
    npc_headcrab_fast:form =
    {
      t_BaseHeadcrab = !
    }
    npc_headcrab_black:form =
    {
      t_BaseHeadcrab = !
    }
    npc_stalker:form =
    {
      t_BaseNPC = !
      BeamPower: =
      {
        txt = "&"
        hint = "Beam Power"
        typ = "C"
        items = "Low"$0D"Medium"$0D"High"
        values = "0"$0D"1"$0D"2"
      }
    }
    npc_bullseye:form =
    {
      t_Parentname = !
      t_BaseNPC = !
      health: =
      {
        txt = "&"
        hint = "Health"
      }
      minangle: =
      {
        txt = "&"
        hint = "Minimum Angle"
      }
      mindist: =
      {
        txt = "&"
        hint = "Minimum Distance"
      }
      autoaimradius: =
      {
        txt = "&"
        hint = "Autoaim Radius"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Not Solid"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Take No Damage"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Enemy Damage Only"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "Bleed"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1048576"
        cap = "Perfect Accuracy"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2097152"
        cap = "Collide against physics objects (Creates VPhysics Shadow)"
      }
      output#OnTargeted: =
      {
        txt = "&"
        hint = "Fires when targeted"
      }
      output#OnReleased: =
      {
        txt = "&"
        hint = "Fires when no longer targeted"
      }
    }
    npc_enemyfinder:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      t_Parentname = !
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Check Visibility"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "APC Visibility checks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Short memory"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "Can be an enemy"
      }
      FieldOfView: =
      {
        txt = "&"
        hint = "FieldOfView"
      }
      MinSearchDist: =
      {
        txt = "&"
        hint = "Min Search Dist"
      }
      MaxSearchDist: =
      {
        txt = "&"
        hint = "Max Search Dist"
      }
      freepass_timetotrigger: =
      {
        txt = "&"
        hint = "Player pass issue time"
      }
      freepass_duration: =
      {
        txt = "&"
        hint = "Player pass duration"
      }
      freepass_movetolerance: =
      {
        txt = "&"
        hint = "Player pass move tolerance"
      }
      freepass_refillrate: =
      {
        txt = "&"
        hint = "Player pass refill rate"
      }
      freepass_peektime: =
      {
        txt = "&"
        hint = "Player pass peek time"
      }
      StartOn: =
      {
        txt = "&"
        hint = "Start On"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#TurnOn: =
      {
        txt = "&"
        hint = "Turn on: Look for enemies"
      }
      input#TurnOff: =
      {
        txt = "&"
        hint = "Turn off: Stop looking for enemies"
      }
      output#OnLostEnemies: =
      {
        txt = "&"
        hint = "Fires when the enemy finder has no enemies."
      }
      output#OnAcquireEnemies: =
      {
        txt = "&"
        hint = "Fires when the enemy finder acquires enemies."
      }
    }
    npc_enemyfinder_combinecannon:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      t_Parentname = !
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Check Visibility"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "APC Visibility checks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Short memory"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "Can be an enemy"
      }
      FieldOfView: =
      {
        txt = "&"
        hint = "FieldOfView"
      }
      MinSearchDist: =
      {
        txt = "&"
        hint = "Min Search Dist"
      }
      MaxSearchDist: =
      {
        txt = "&"
        hint = "Max Search Dist"
      }
      SnapToEnt: =
      {
        txt = "&"
        hint = "Name of entity to snap to"
      }
      freepass_timetotrigger: =
      {
        txt = "&"
        hint = "Player pass issue time"
      }
      freepass_duration: =
      {
        txt = "&"
        hint = "Player pass duration"
      }
      freepass_movetolerance: =
      {
        txt = "&"
        hint = "Player pass move tolerance"
      }
      freepass_refillrate: =
      {
        txt = "&"
        hint = "Player pass refill rate"
      }
      freepass_peektime: =
      {
        txt = "&"
        hint = "Player pass peek time"
      }
      StartOn: =
      {
        txt = "&"
        hint = "Start On"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#TurnOn: =
      {
        txt = "&"
        hint = "Turn on: Look for enemies"
      }
      input#TurnOff: =
      {
        txt = "&"
        hint = "Turn off: Stop looking for enemies"
      }
      input#SetWideFOVForSeconds: =
      {
        txt = "&"
        hint = "Gives this enemyfinder a 180 degree viewcone for the number of"
         " seconds specified in the parameter override"
      }
      output#OnLostEnemies: =
      {
        txt = "&"
        hint = "Fires when the enemy finder has no enemies."
      }
      output#OnAcquireEnemies: =
      {
        txt = "&"
        hint = "Fires when the enemy finder acquires enemies."
      }
    }
    npc_citizen:form =
    {
      t_BaseNPC = !
      t_Parentname = !
      t_TalkNPC = !
      t_PlayerCompanion = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Follow player on spawn"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Medic"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Random Head"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "Ammo Resupplier"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1048576"
        cap = "Not Commandable"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2097152"
        cap = "Don't use Speech Semaphore - OBSOLETE"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4194304"
        cap = "Random male head"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8388608"
        cap = "Random female head"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16777216"
        cap = "Use RenderBox in ActBusies"
      }
      additionalequipment: =
      {
        txt = "&"
        hint = "Weapons"
        typ = "C"
        items = "SMG1"$0D"AR2"$0D"Stun Stick"$0D"Crow Bar"$0D"Shotgun"$0D"Beer"
         " Bottle"$0D"Beer Bottle2"$0D"RPG"$0D"Nothing"
        values = "weapon_smg1"$0D"weapon_ar2"$0D"weapon_stunstick"$0D"weapon_c"
         "rowbar"$0D"weapon_shotgun"$0D"weapon_beerbottle"$0D"weapon_beerbottl"
         "e2"$0D"weapon_rpg"$0D"0"
      }
      ammosupply: =
      {
        txt = "&"
        hint = "Ammo to Resupply (if spawnflag set)"
        typ = "C"
        items = "Pistol"$0D"SMG1"$0D"SMG1 Grenade"$0D"AR2"$0D"Shotgun"$0D"RPG"$0D
         "Grenade"$0D"Crossbow Bolt"
        values = "Pistol"$0D"SMG1"$0D"SMG1_Grenade"$0D"AR2"$0D"Buckshot"$0D"RP"
         "G_Round"$0D"Grenade"$0D"XBowBolt"
      }
      ammoamount: =
      {
        txt = "&"
        hint = "Amount of ammo to give"
      }
      citizentype: =
      {
        txt = "&"
        hint = "Type"
        typ = "C"
        items = "Default"$0D"Downtrodden"$0D"Refugee"$0D"Rebel"$0D"Unique"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"
      }
      expressiontype: =
      {
        txt = "&"
        hint = "Expression Type"
        typ = "C"
        items = "Random"$0D"Scared"$0D"Normal"$0D"Angry"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
      model: =
      {
        txt = "&"
        hint = "Model"
        typ = "C"
        items = "Male 1"$0D"Male 2"$0D"Male 3"$0D"Male 4"$0D"Male 5"$0D"Male 6"
         $0D"Male 7"$0D"Male 8"$0D"Male 9"$0D"Female 1"$0D"Female 2"$0D"Female"
         " 3"$0D"Female 4"$0D"Female 5"$0D"Female 6"$0D"Cheaple Male 1"$0D"Ode"
         "ssa. DO NOT USE."
        values = "models/humans/group01/male_01.mdl"$0D"models/humans/group01/"
         "male_02.mdl"$0D"models/humans/group01/male_03.mdl"$0D"models/humans/"
         "group01/male_04.mdl"$0D"models/humans/group01/male_05.mdl"$0D"models"
         "/humans/group01/male_06.mdl"$0D"models/humans/group01/male_07.mdl"$0D
         "models/humans/group01/male_08.mdl"$0D"models/humans/group01/male_09."
         "mdl"$0D"models/humans/group01/female_01.mdl"$0D"models/humans/group0"
         "1/female_02.mdl"$0D"models/humans/group01/female_03.mdl"$0D"models/h"
         "umans/group01/female_04.mdl"$0D"models/humans/group01/female_06.mdl"$0D
         "models/humans/group01/female_07.mdl"$0D"models/humans/male_cheaple.m"
         "dl"$0D"models/odessa.mdl"
      }
      ExpressionOverride: =
      {
        txt = "&"
        hint = "Facial expression override"
      }
      notifynavfailblocked: =
      {
        txt = "&"
        hint = "Fire output when Nav is blocked?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      neverleaveplayersquad: =
      {
        txt = "&"
        hint = "Permanent squad member?"
        typ = "C"
        items = "No. This is default behavior."$0D"Yes, stay in squad until de"
         "ath."
        values = "0"$0D"1"
      }
      denycommandconcept: =
      {
        txt = "&"
        hint = "Deny command speech concept"
      }
      input#RemoveFromPlayerSquad: =
      {
        txt = "&"
        hint = "Remove from player squad, instantly."
      }
      input#SetExpressionOverride: =
      {
        txt = "&"
        hint = "Set facial expression override"
      }
      input#StartPatrolling: =
      {
        txt = "&"
        hint = "Patrol whenever I'm idle or alert."
      }
      input#StopPatrolling: =
      {
        txt = "&"
        hint = "Stop patrolling when I'm idle or alert."
      }
      input#SetCommandable: =
      {
        txt = "&"
        hint = "Make a previously uncommandable citizen commandable"
      }
      input#SetMedicOn: =
      {
        txt = "&"
        hint = "Set the medic flag on. Will not change the model or skin of th"
         "e citizen."
      }
      input#SetMedicOff: =
      {
        txt = "&"
        hint = "Set the medic flag off. Will not change the model or skin of t"
         "he citizen."
      }
      input#SetAmmoResupplierOn: =
      {
        txt = "&"
        hint = "Set the ammo-resupplier flag on. Will not change the model or "
         "skin of the citizen."
      }
      input#SetAmmoResupplierOff: =
      {
        txt = "&"
        hint = "Set the ammo-resupplier flag off. Will not change the model or"
         " skin of the citizen."
      }
      output#OnJoinedPlayerSquad: =
      {
        txt = "&"
        hint = "Fires when joins player squad"
      }
      output#OnLeftPlayerSquad: =
      {
        txt = "&"
        hint = "Fires when leaves player squad"
      }
      output#OnFollowOrder: =
      {
        txt = "&"
        hint = "Fires when ordered to follow player"
      }
      output#OnStationOrder: =
      {
        txt = "&"
        hint = "Fires when ordered to a location by player"
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fires when a player +USEs the citizen"
      }
      output#OnNavFailBlocked: =
      {
        txt = "&"
        hint = "Fires when this Citizen's movement fails because he/she is blo"
         "cked."
      }
    }
    npc_fisherman:form =
    {
      t_BaseNPC = !
      ExpressionOverride: =
      {
        txt = "&"
        hint = "Facial expression override"
      }
      input#SetExpressionOverride: =
      {
        txt = "&"
        hint = "Set facial expression override"
      }
    }
    npc_barney:form =
    {
      t_TalkNPC = !
      t_BaseNPC = !
      t_PlayerCompanion = !
      additionalequipment: =
      {
        txt = "&"
        hint = "Weapons"
        typ = "C"
        items = "Pistol"$0D"SMG1"$0D"Stun Stick"$0D"Shotgun"$0D"AR2"$0D"Nothin"
         "g"
        values = "weapon_pistol"$0D"weapon_smg1"$0D"weapon_stunstick"$0D"weapo"
         "n_shotgun"$0D"weapon_ar2"$0D"0"
      }
      ExpressionOverride: =
      {
        txt = "&"
        hint = "Facial expression override"
      }
      input#SetExpressionOverride: =
      {
        txt = "&"
        hint = "Set facial expression override"
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fires when a player +USEs Barney"
      }
    }
    t_BaseCombine:incl =
    {
      t_BaseNPC = !
      t_RappelNPC = !
      additionalequipment: =
      {
        txt = "&"
        hint = "Weapons"
        typ = "C"
        items = "AR2"$0D"Shotgun"$0D"SMG1"$0D"Stun Stick"$0D"Nothing"
        values = "weapon_ar2"$0D"weapon_shotgun"$0D"weapon_smg1"$0D"weapon_stu"
         "nstick"$0D"0"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Start LookOff"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Don't drop grenades"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Don't drop ar2 alt fire (elite only) "
      }
      NumGrenades: =
      {
        txt = "&"
        hint = "Number of Grenades"
        typ = "C"
        items = "None"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"Unlimited"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"999999"
      }
      input#LookOn: =
      {
        txt = "&"
        hint = "Look normally"
      }
      input#LookOff: =
      {
        txt = "&"
        hint = "Don't look for myself, use other squad member's eyes"
      }
      input#StartPatrolling: =
      {
        txt = "&"
        hint = "Patrol whenever I'm idle or alert."
      }
      input#StopPatrolling: =
      {
        txt = "&"
        hint = "Stop patrolling when I'm idle or alert."
      }
      input#ThrowGrenadeAtTarget: =
      {
        txt = "&"
        hint = "Throw a grenade at the specified target."
      }
    }
    npc_combine_s:form =
    {
      t_BaseCombine = !
      input#Assault: =
      {
        txt = "&"
        hint = "Start an assault. Parameter passed in should be the name of th"
         "e rally point."
      }
      model: =
      {
        txt = "&"
        hint = "Model"
        typ = "C"
        items = "Regular Soldier"$0D"Nova Prospekt Soldier"$0D"Elite Soldier"
        values = "models/combine_soldier.mdl"$0D"models/combine_soldier_prison"
         "guard.mdl"$0D"models/combine_super_soldier.mdl"
      }
      tacticalvariant: =
      {
        txt = "&"
        hint = "Tactical Variant"
        typ = "C"
        items = "Normal Tactics"$0D"Pressure the enemy (Keep advancing)"$0D"Pr"
         "essure until within 30ft, then normal"
        values = "0"$0D"1"$0D"2"
      }
      usemarch: =
      {
        txt = "&"
        hint = "Walk Easy"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"2"
      }
    }
    npc_launcher:form =
    {
      t_Parentname = !
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Check LOS"
      }
      StartOn: =
      {
        txt = "&"
        hint = "Start On"
        typ = "C"
        items = "Off"$0D"On"
        values = "0"$0D"1"
      }
      MissileModel: =
      {
        txt = "&"
        hint = "Missile Model"
        typ = "B"
        Cap = "models..."
        form = "t_models_hl2_form:form"
      }
      LaunchSound: =
      {
        txt = "&"
        hint = "Launch Sound"
      }
      FlySound: =
      {
        txt = "&"
        hint = "Fly Sound"
      }
      SmokeTrail: =
      {
        txt = "&"
        hint = "Smoke Trail"
        typ = "C"
        items = "Off"$0D"On"$0D"On Homing"
        values = "0"$0D"1"$0D"2"
      }
      LaunchSmoke: =
      {
        txt = "&"
        hint = "Launch Smoke"
        typ = "C"
        items = "Off"$0D"On"
        values = "0"$0D"1"
      }
      LaunchDelay: =
      {
        txt = "&"
        hint = "Launch Delay"
      }
      LaunchSpeed: =
      {
        txt = "&"
        hint = "Launch Speed"
      }
      PathCornerName: =
      {
        txt = "&"
        hint = "Path Corner Name"
      }
      HomingSpeed: =
      {
        txt = "&"
        hint = "Homing Speed"
      }
      HomingStrength: =
      {
        txt = "&"
        hint = "Homing Strength"
      }
      HomingDelay: =
      {
        txt = "&"
        hint = "Homing Delay"
      }
      HomingRampUp: =
      {
        txt = "&"
        hint = "Homing Ramp Up"
      }
      HomingDuration: =
      {
        txt = "&"
        hint = "Homing Duration"
      }
      HomingRampDown: =
      {
        txt = "&"
        hint = "Homing Ramp Down"
      }
      Gravity: =
      {
        txt = "&"
        hint = "Gravity"
      }
      MinRange: =
      {
        txt = "&"
        hint = "Min Range"
      }
      MaxRange: =
      {
        txt = "&"
        hint = "Max Range"
      }
      SpinMagnitude: =
      {
        txt = "&"
        hint = "Spin Magnitude"
      }
      SpinSpeed: =
      {
        txt = "&"
        hint = "Spin Speed"
      }
      Damage: =
      {
        txt = "&"
        hint = "Damage"
      }
      DamageRadius: =
      {
        txt = "&"
        hint = "DamageRadius"
      }
      output#OnLaunch: =
      {
        txt = "&"
        hint = "Fires when missile is launched"
      }
      input#TurnOn: =
      {
        txt = "&"
        hint = "Turn on Launcher"
      }
      input#TurnOff: =
      {
        txt = "&"
        hint = "Turn off Launcher"
      }
      input#LOSCheckOn: =
      {
        txt = "&"
        hint = "Start checking line of sight before firing"
      }
      input#LOSCheckOff: =
      {
        txt = "&"
        hint = "Stop checking line of sight before firing"
      }
      input#SetEnemyEntity: =
      {
        txt = "&"
        hint = "Set entity I should attack. Ignores visibility. (output from o"
         "ther entity only)"
      }
      input#ClearEnemyEntity: =
      {
        txt = "&"
        hint = "Clear set enemy enemy"
      }
      input#FireOnce: =
      {
        txt = "&"
        hint = "Fire Once (if have enemy)"
      }
    }
    npc_hunter:form =
    {
      t_BaseNPC = !
      FollowTarget: =
      {
        txt = "&"
        hint = "Strider to Follow"
      }
      input#FollowStrider: =
      {
        txt = "&"
        hint = "Sets the name of the strider that this hunter should follow."
      }
      input#SetMinigunTime: =
      {
        txt = "&"
        hint = "Time to shoot at any set minigun target."
      }
      input#SetMinigunTarget: =
      {
        txt = "&"
        hint = "Hunter will shoot minigun at the named target."
      }
      input#DisableShooting: =
      {
        txt = "&"
        hint = "Forces the hunter to be melee-only."
      }
      input#EnableShooting: =
      {
        txt = "&"
        hint = "Allows the hunter to use range attacks or melee attacks."
      }
      input#DisableSquadShootDelay: =
      {
        txt = "&"
        hint = "Disables the delay between range attacks for squads of hunters"
         ", allowing them to shoot as frequently as they wish."
      }
      input#EnableSquadShootDelay: =
      {
        txt = "&"
        hint = "Enables the delay between range attacks for squads of hunters."
      }
      input#EnableUnplantedShooting: =
      {
        txt = "&"
        hint = "Used mainly for scripted attacks against bullseyes. Enables th"
         "e hunter to shoot without having to plant first."
      }
      input#DisableUnplantedShooting: =
      {
        txt = "&"
        hint = "Returns the hunter to normal after a call to EnableUnplantedSh"
         "ooting."
      }
      input#DoPhysicsBlast: =
      {
        txt = "&"
        hint = "Hunter will instantly do the defensive physics blast."
      }
      input#Crouch: =
      {
        txt = "&"
        hint = "Crouch down."
      }
      input#Stand: =
      {
        txt = "&"
        hint = "Stand up from crouch."
      }
      input#DisableCrouchWalk: =
      {
        txt = "&"
        hint = "UNUSED: Prevents the hunter from crouch walking."
      }
      input#EnableCrouchWalk: =
      {
        txt = "&"
        hint = "UNUSED: Allows the hunter to crouch walk."
      }
      input#UseSiegeTargets: =
      {
        txt = "&"
        hint = "Pass in the name of info_targets to shoot at when I can't shoo"
         "t at the player."
      }
    }
    npc_advisor:form =
    {
      t_BaseNPC = !
      model: =
      {
        txt = "&"
        hint = "World model"
        typ = "B"
        Cap = "models..."
        form = "t_models_hl2_form:form"
      }
      levitationarea: =
      {
        txt = "&"
        hint = "Levitation Area"
      }
      levitategoal_bottom: =
      {
        txt = "&"
        hint = "Levitation Goal Bottom"
      }
      levitategoal_top: =
      {
        txt = "&"
        hint = "Levitation Goal Top"
      }
      staging_ent_names: =
      {
        txt = "&"
        hint = "Staging Position Names"
      }
      priority_grab_name: =
      {
        txt = "&"
        hint = "Priority Name For Grabbing"
      }
      output#OnPickingThrowable: =
      {
        txt = "&"
        hint = "Fires just before I pick something to hurl"
      }
      output#OnThrowWarn: =
      {
        txt = "&"
        hint = "Fires when I trigger the warning green glow before tossing"
      }
      output#OnThrow: =
      {
        txt = "&"
        hint = "Fires just after I throw something"
      }
      output#OnHealthIsNow: =
      {
        txt = "&"
        hint = "When I am damaged, my hitpoints thereafter"
      }
      input#SetThrowRate: =
      {
        txt = "&"
        hint = "Advisor will throw an object once per this many seconds (plus "
         "a little more)"
      }
      input#WrenchImmediate: =
      {
        txt = "&"
        hint = "Advisor will immediately start levitating all objects with thi"
         "s name"
      }
      input#SetStagingNum: =
      {
        txt = "&"
        hint = "Advisor will stage this many objects at once, then barrage the"
         " player."
      }
      input#PinPlayer: =
      {
        txt = "&"
        hint = "Advisor will wrench the player to this point in the air. Use a"
         " null param to let go."
      }
      input#BeamOn: =
      {
        txt = "&"
        hint = "Start a psychic-TK effect beam from the advisor to the specifi"
         "ed object. You must remember to turn it off later."
      }
      input#BeamOff: =
      {
        txt = "&"
        hint = "Turn off a psychic-TK effect beam from the advisor to the spec"
         "ified object."
      }
      input#ELightOn: =
      {
        txt = "&"
        hint = "Turn on an entity light at my location. Please remember to tur"
         "n this off."
      }
      input#ELightOff: =
      {
        txt = "&"
        hint = "Turn off my entity light."
      }
      input#DoNothing: =
      {
        txt = "&"
      }
    }
    env_sporeexplosion:form =
    {
      t_Targetname = !
      t_Parentname = !
      t_EnableDisable = !
      spawnrate: =
      {
        txt = "&"
        hint = "Spawn Rate (as percentage)"
      }
    }
    env_gunfire:form =
    {
      t_Targetname = !
      t_Parentname = !
      t_Targetname = !
      t_EnableDisable = !
      target: =
      {
        txt = "&"
        hint = "Target"
      }
      minburstsize: =
      {
        txt = "&"
        hint = "Min Burst Size"
      }
      maxburstsize: =
      {
        txt = "&"
        hint = "Max Burst Size"
      }
      minburstdelay: =
      {
        txt = "&"
        hint = "Min Delay Between Bursts"
      }
      maxburstdelay: =
      {
        txt = "&"
        hint = "Max Delay Between Bursts"
      }
      rateoffire: =
      {
        txt = "&"
        hint = "Rate of fire"
      }
      spread: =
      {
        txt = "&"
        hint = "Bullet spread"
        typ = "C"
        items = "1 Degree"$0D"5 Degrees"$0D"10 Degrees"$0D"15 Degrees"
        values = "1"$0D"5"$0D"10"$0D"15"
      }
      bias: =
      {
        txt = "&"
        hint = "Bullet distribution should be..."
        typ = "C"
        items = "Evenly distributed"$0D"Biased towards the outside"
        values = "1"$0D"-1"
      }
      collisions: =
      {
        txt = "&"
        hint = "Collision detection"
        typ = "C"
        items = "None. Cheap for performance."$0D"Normal collision detection."
        values = "0"$0D"1"
      }
      shootsound: =
      {
        txt = "&"
        hint = "Shoot Sound"
        typ = "C"
        items = "AR2"$0D"SMG1"
        values = "Weapon_AR2.NPC_Single"$0D"Weapon_SMG1.NPC_Single"
      }
      tracertype: =
      {
        txt = "&"
        hint = "Tracer"
        typ = "C"
        items = "Default"$0D"AR2"
        values = "Tracer"$0D"AR2TRACER"
      }
    }
    env_headcrabcanister:form =
    {
      t_Parentname = !
      t_Angles = !
      t_Targetname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "No Impact Sound"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "No Launch Sound"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "Start Impacted"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8192"
        cap = "Land at initial position"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16384"
        cap = "Wait for input to open"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32768"
        cap = "Wait for input to spawn headcrabs"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "No smoke"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "No shake"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Remove on impact"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "No impact effects"
      }
      HeadcrabType: =
      {
        txt = "&"
        hint = "Which headcrab to spawn?"
        typ = "C"
        items = "Normal headcrabs"$0D"Fast Headcrabs"$0D"Poison Headcrabs"
        values = "0"$0D"1"$0D"2"
      }
      HeadcrabCount: =
      {
        txt = "&"
        hint = "Headcrab count"
      }
      FlightSpeed: =
      {
        txt = "&"
        hint = "Flight Speed"
      }
      FlightTime: =
      {
        txt = "&"
        hint = "Flight Time"
      }
      StartingHeight: =
      {
        txt = "&"
        hint = "Starting Height"
      }
      MinSkyboxRefireTime: =
      {
        txt = "&"
        hint = "Min Refire Time"
      }
      MaxSkyboxRefireTime: =
      {
        txt = "&"
        hint = "Max Refire Time"
      }
      SkyboxCannisterCount: =
      {
        txt = "&"
        hint = "Cannister count"
      }
      Damage: =
      {
        txt = "&"
        hint = "Impact damage"
      }
      DamageRadius: =
      {
        txt = "&"
        hint = "Impact damage radius"
      }
      SmokeLifetime: =
      {
        txt = "&"
        hint = "Smoke Duration"
      }
      LaunchPositionName: =
      {
        txt = "&"
        hint = "Launch Position Name"
      }
      input#FireCanister: =
      {
        txt = "&"
        hint = "Fire the canister"
      }
      input#OpenCanister: =
      {
        txt = "&"
        hint = "Opens the canister (must be called after the OnImpacted output"
         " is fired)"
      }
      input#SpawnHeadcrabs: =
      {
        txt = "&"
        hint = "Spawns headcrabs (must be called after the OnImpacted output i"
         "s fired and after OpenCanister is triggered, if the Wait for Input t"
         "o open spawnflag is checked.)"
      }
      input#StopSmoke: =
      {
        txt = "&"
        hint = "Stops the smoke if it's on"
      }
      output#OnLaunched: =
      {
        txt = "&"
        hint = "Fired when the canister is launched"
      }
      output#OnImpacted: =
      {
        txt = "&"
        hint = "Fires when canister hits the ground"
      }
      output#OnOpened: =
      {
        txt = "&"
        hint = "Fires when canister has finished opening"
      }
    }
    npc_vortigaunt:form =
    {
      t_BaseNPC = !
      t_TalkNPC = !
      t_modelselect = !
      ArmorRechargeEnabled: =
      {
        txt = "&"
        hint = "Allow Armor Recharging"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      HealthRegenerateEnabled: =
      {
        txt = "&"
        hint = "Regenerate Health"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#EnableArmorRecharge: =
      {
        txt = "&"
        hint = "Allow armor recharging on players"
      }
      input#DisableArmorRecharge: =
      {
        txt = "&"
        hint = "Do not allow armor recharging on players"
      }
      input#ExtractBugbait: =
      {
        txt = "&"
        hint = "Causes the vortigaunt to extract bugbait from the named target"
         " passed in."
      }
      input#ChargeTarget: =
      {
        txt = "&"
        hint = "Force the vortigaunt to charge the named target."
      }
      input#EnableHealthRegeneration: =
      {
        txt = "&"
        hint = "Allow the vortigaunt to start regenerating his health over tim"
         "e, like vital allies."
      }
      input#DisableHealthRegeneration: =
      {
        txt = "&"
        hint = "Stop the vortigaunt from regenerating his health. (Default beh"
         "avior)"
      }
      input#TurnBlue: =
      {
        txt = "&"
        hint = "If true, turn blue. If false, turn green. (Episodic)."
      }
      input#TurnBlack: =
      {
        txt = "&"
        hint = "If true, turn black. If false, be seen. (Episodic)."
      }
      input#BeginCarryNPC: =
      {
        txt = "&"
        hint = "Begin to override our animations for 'carrying' an NPC. (Episo"
         "dic)"
      }
      input#EndCarryNPC: =
      {
        txt = "&"
        hint = "Stop overriding our animations for 'carrying' an NPC. (Episodi"
         "c)"
      }
      output#OnFinishedExtractingBugbait: =
      {
        txt = "&"
        hint = "Fires when the vortigaunt's finished extracting bugbait from a"
         " target."
      }
      output#OnFinishedExtractingTauCannon: =
      {
        txt = "&"
        hint = "Fires when the vortigaunt's finished extracting the tau cannon"
         " from the jeep."
      }
      output#OnFinishedChargingTarget: =
      {
        txt = "&"
        hint = "Fires when the vortigaunt has finished charging a target."
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fires when a player +USEs the vortigaunt."
      }
    }
    npc_spotlight:form =
    {
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Start Track On"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Start Light On"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "No Dynamic Light"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "Never Move"
      }
      health: =
      {
        txt = "&"
        hint = "Health"
      }
      YawRange: =
      {
        txt = "&"
        hint = "YawRange"
      }
      PitchMin: =
      {
        txt = "&"
        hint = "PitchMin"
      }
      PitchMax: =
      {
        txt = "&"
        hint = "PitchMax"
      }
      IdleSpeed: =
      {
        txt = "&"
        hint = "IdleSpeed"
      }
      AlertSpeed: =
      {
        txt = "&"
        hint = "AlertSpeed"
      }
      spotlightlength: =
      {
        txt = "&"
        hint = "SpotlightLength"
      }
      spotlightwidth: =
      {
        txt = "&"
        hint = "SpotlightWidth"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Color (R G B)"
      }
      input#LightOn: =
      {
        txt = "&"
        hint = "LightOn"
      }
      input#LightOff: =
      {
        txt = "&"
        hint = "LightOff"
      }
      input#TrackOn: =
      {
        txt = "&"
        hint = "TrackOn"
      }
      input#TrackOff: =
      {
        txt = "&"
        hint = "TrackOff"
      }
      output#OnAlert: =
      {
        txt = "&"
        hint = "Fires when the spotlight alerted by sound"
      }
      output#DetectedEnemy: =
      {
        txt = "&"
        hint = "Outputs enemy entity when spotlight finds and starts tracking "
         "enemy"
      }
      output#LostEnemy: =
      {
        txt = "&"
        hint = "Outputs enemy entity when spotlight loses enemy that it's trac"
         "king, if enemy still exists"
      }
      output#SquadDetectedEnemy: =
      {
        txt = "&"
        hint = "Outputs enemy entity when squad finds and starts tracking enem"
         "y"
      }
      output#SquadLostEnemy: =
      {
        txt = "&"
        hint = "Outputs enemy entity when squad loses enemy that it's tracking"
         ", if entity still exists"
      }
      output#LightPosition: =
      {
        txt = "&"
        hint = "Position of the end of the spotlight beam"
      }
    }
    npc_strider:form =
    {
      t_BaseNPC = !
      t_modelselect = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Can Stomp Player"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Minimal damage taken from NPCs (1 point per missile)"
      }
      input#SetMinigunTime: =
      {
        txt = "&"
        hint = "Time to shoot at any set minigun target"
      }
      input#SetMinigunTarget: =
      {
        txt = "&"
        hint = "Strider will shoot minigun at this"
      }
      input#DisableMinigun: =
      {
        txt = "&"
        hint = "Disables the minigun until further notice by the EnableMinigun"
         " input."
      }
      input#EnableMinigun: =
      {
        txt = "&"
        hint = "Enables the minigun if it was disabled by the DisableMinigun i"
         "nput."
      }
      input#SetCannonTarget: =
      {
        txt = "&"
        hint = "Strider will shoot cannon at this"
      }
      input#FlickRagdoll: =
      {
        txt = "&"
        hint = "Strider will flick anyone he's skewered"
      }
      input#StartPatrol: =
      {
        txt = "&"
        hint = "Start patrolling back and forth along the current track."
      }
      input#StopPatrol: =
      {
        txt = "&"
        hint = "Stop patrolling back and forth along the track. This will caus"
         "e the helicopter to come to rest at the track which he's currently f"
         "lying toward."
      }
      input#ChooseFarthestPathPoint: =
      {
        txt = "&"
        hint = "When tracking an enemy, choose the point on the path furthest "
         "from the enemy, but still in firing range"
      }
      input#ChooseNearestPathPoint: =
      {
        txt = "&"
        hint = "When tracking an enemy, choose the point on the path nearest f"
         "rom the enemy"
      }
      input#Crouch: =
      {
        txt = "&"
        hint = "Crouch down"
      }
      input#CrouchInstantly: =
      {
        txt = "&"
        hint = "Crouch instantly. This makes the Strider pop to a crouch. Do n"
         "ot do this where players can observe."
      }
      input#Stand: =
      {
        txt = "&"
        hint = "Stand up from crouch"
      }
      input#DisableCrouchWalk: =
      {
        txt = "&"
      }
      input#DisableCrouchWalk: =
      {
        txt = "&"
      }
      EnableCrouchWalk: =
      {
        txt = "&"
      }
      EnableCrouchWalk: =
      {
        txt = "&"
      }
      SetTargetPath: =
      {
        txt = "&"
        hint = "Set a path for the strider to patrol. The strider will first m"
         "ove to the closest point on the path"
      }
      input#ClearTargetPath: =
      {
        txt = "&"
        hint = "Clear the strider patrol path"
      }
      input#EnableAggressiveBehavior: =
      {
        txt = "&"
        hint = "Use aggressive behavior. Fire faster, more frequently"
      }
      input#DisableAggressiveBehavior: =
      {
        txt = "&"
        hint = "Stop using aggressive behavior. (Revert to normal)"
      }
      input#StopShootingMinigunForSeconds: =
      {
        txt = "&"
        hint = "Stop shooting the minigun for a period of time (specify second"
         "s as parameter)"
      }
      input#DisableCrouch: =
      {
        txt = "&"
        hint = "Prevent the Strider from crouching"
      }
      input#DisableMoveToLOS: =
      {
        txt = "&"
        hint = "Prevent the Strider from seeking Line of Sight to target. (Hol"
         "d position)"
      }
      input#DisableCollisionWith: =
      {
        txt = "&"
        hint = "Disable collision with a given object."
      }
      input#EnableCollisionWith: =
      {
        txt = "&"
        hint = "Reenable collision with a given object."
      }
      input#ScaleGroundSpeed: =
      {
        txt = "&"
        hint = "Scale the movement speed of the strider"
      }
      disablephysics: =
      {
        txt = "&"
        hint = "Disable physics (reduce CPU)"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
    }
    npc_barnacle:form =
    {
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Cheap death"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Ambush Mode"
      }
      RestDist: =
      {
        txt = "&"
        hint = "Rest Distance"
      }
      input#DropTongue: =
      {
        txt = "&"
        hint = "Drop tongue"
      }
      input#SetDropTongueSpeed: =
      {
        txt = "&"
        hint = "Set Drop Tongue speed"
      }
      input#LetGo: =
      {
        txt = "&"
        hint = "Let go of anything I am holding."
      }
      output#OnGrab: =
      {
        txt = "&"
        hint = "When I attach my tongue to something"
      }
      output#OnRelease: =
      {
        txt = "&"
        hint = "When I let go of something"
      }
    }
    npc_combinegunship:form =
    {
      t_BaseHelicopter = !
      input#OmniscientOn: =
      {
        txt = "&"
        hint = "Gunship knows target's location even when target is out of sig"
         "ht or behind cover"
      }
      input#OmniscientOff: =
      {
        txt = "&"
        hint = "Gunship relies on normal sight functions to locate target"
      }
      input#BlindfireOn: =
      {
        txt = "&"
        hint = "Gunship will fire at an unseen target, attempting to punch thr"
         "ough to them"
      }
      input#BlindfireOff: =
      {
        txt = "&"
        hint = "Gunship only fires at viusible target"
      }
      input#SetPenetrationDepth: =
      {
        txt = "&"
        hint = "Set penetration depth of bullets"
      }
      input#SetDockingBBox: =
      {
        txt = "&"
        hint = "Shrink Bounding Box"
      }
      input#SetNormalBBox: =
      {
        txt = "&"
        hint = "Set Bounding Box to normal size"
      }
      input#EnableGroundAttack: =
      {
        txt = "&"
        hint = "Allow the gunship to use its ground attack"
      }
      input#DisableGroundAttack: =
      {
        txt = "&"
        hint = "Don't allow the gunship to use its ground attack"
      }
      input#DoGroundAttack: =
      {
        txt = "&"
        hint = "Causes the gunship to execute its ground attack"
      }
      input#BecomeInvulnerable: =
      {
        txt = "&"
        hint = "Stops the gunship from taking damage, but still makes sounds e"
         "ffects"
      }
      input#BecomeVulnerable: =
      {
        txt = "&"
        hint = "Makes the gunship act normally to damage"
      }
      input#EnableRotorSound: =
      {
        txt = "&"
        hint = "Turns on rotor sounds"
      }
      input#DisableRotorSound: =
      {
        txt = "&"
        hint = "Turns off rotor sounds"
      }
      output#OnFireCannon: =
      {
        txt = "&"
        hint = "Fires when the gunship fires a cannon round"
      }
      output#OnFirstDamage: =
      {
        txt = "&"
        hint = "Fired when the first damage is done to the gunship."
      }
      output#OnSecondDamage: =
      {
        txt = "&"
        hint = "Fired when the second damage is done to the gunship."
      }
      output#OnThirdDamage: =
      {
        txt = "&"
        hint = "Fired when the third damage is done to the gunship."
      }
      output#OnFourthDamage: =
      {
        txt = "&"
        hint = "Fired when the fourth damage is done to the gunship."
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "No ground attack"
      }
    }
    info_target_helicopter_crash:form =
    {
      t_Targetname = !
      t_Parentname = !
    }
    info_target_gunshipcrash:form =
    {
      t_Targetname = !
      t_Parentname = !
      input#Enable: =
      {
        txt = "&"
        hint = "Enable the crash target."
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable the crash target."
      }
    }
    npc_combinedropship:form =
    {
      t_BaseHelicopter = !
      spawnflags: =
      {
        txt = "&"
        typ = "X32768"
        cap = "Wait for input before dropoff"
      }
      LandTarget: =
      {
        txt = "&"
        hint = "Land target name"
      }
      GunRange: =
      {
        txt = "&"
        hint = "Crate Gun Range"
      }
      RollermineTemplate: =
      {
        txt = "&"
        hint = "Name of Rollermine Template"
      }
      NPCTemplate: =
      {
        txt = "&"
        hint = "Name of Template NPC 1"
      }
      NPCTemplate2: =
      {
        txt = "&"
        hint = "Name of Template NPC 2"
      }
      NPCTemplate3: =
      {
        txt = "&"
        hint = "Name of Template NPC 3"
      }
      NPCTemplate4: =
      {
        txt = "&"
        hint = "Name of Template NPC 4"
      }
      NPCTemplate5: =
      {
        txt = "&"
        hint = "Name of Template NPC 5"
      }
      NPCTemplate6: =
      {
        txt = "&"
        hint = "Name of Template NPC 6"
      }
      Dustoff1: =
      {
        txt = "&"
        hint = "Name of dustoff point for NPC 1"
      }
      Dustoff2: =
      {
        txt = "&"
        hint = "Name of dustoff point for NPC 2"
      }
      Dustoff3: =
      {
        txt = "&"
        hint = "Name of dustoff point for NPC 3"
      }
      Dustoff4: =
      {
        txt = "&"
        hint = "Name of dustoff point for NPC 4"
      }
      Dustoff5: =
      {
        txt = "&"
        hint = "Name of dustoff point for NPC 5"
      }
      Dustoff6: =
      {
        txt = "&"
        hint = "Name of dustoff point for NPC 6"
      }
      APCVehicleName: =
      {
        txt = "&"
        hint = "Name of the APC to drop"
      }
      Invulnerable: =
      {
        txt = "&"
        hint = "Invulnerable"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      CrateType: =
      {
        txt = "&"
        hint = "Crate Type"
        typ = "C"
        items = "Jeep (No crate)"$0D"APC (No crate)"$0D"Strider (No crate)"$0D
         "Roller Hopper"$0D"Soldier Crate"$0D"None"
        values = "-3"$0D"-2"$0D"-1"$0D"0"$0D"1"$0D"2"
      }
      input#LandLeaveCrate: =
      {
        txt = "&"
        hint = "Land, drop soldiers, and leave the crate behind. Specify the n"
         "umber of troops to drop off in the parameter."
      }
      input#LandTakeCrate: =
      {
        txt = "&"
        hint = "Land, drop soldiers, but don't leave the crate behind. Specify"
         " the number of troops to drop off in the parameter."
      }
      input#DropMines: =
      {
        txt = "&"
        hint = "Drop Rollermines. Specify the number of mines to drop in the p"
         "arameter."
      }
      input#DropStrider: =
      {
        txt = "&"
        hint = "Drop the Strider you're carrying. Now."
      }
      input#DropAPC: =
      {
        txt = "&"
        hint = "Drop the APC you're carrying. Now."
      }
      input#Hover: =
      {
        txt = "&"
        hint = "Hover over a named target entity until told to fly to a path."
      }
      input#Pickup: =
      {
        txt = "&"
        hint = "Pickup an entity."
      }
      input#SetLandTarget: =
      {
        txt = "&"
        hint = "Set my land target name."
      }
      input#SetGunRange: =
      {
        txt = "&"
        hint = "Set my crate gun's range."
      }
      input#EnableRotorSound: =
      {
        txt = "&"
        hint = "Turns on rotor sounds"
      }
      input#DisableRotorSound: =
      {
        txt = "&"
        hint = "Turns off rotor sounds"
      }
      input#StopWaitingForDropoff: =
      {
        txt = "&"
        hint = "Stop waiting for the dropoff. Dropoff as soon as possible."
      }
      output#OnFinishedDropoff: =
      {
        txt = "&"
        hint = "Fires when the dropship has finished a dropoff."
      }
      output#OnFinishedPickup: =
      {
        txt = "&"
        hint = "Fires when the dropship has finished a pickup."
      }
      output#OnCrateShotDownBeforeDropoff: =
      {
        txt = "&"
        hint = "Fires when the container was shot down before it dropped off s"
         "oldiers. The parameter contains the number of soldiers that weren't "
         "successfully dropped off."
      }
      output#OnCrateShotDownAfterDropoff: =
      {
        txt = "&"
        hint = "Fires when the container was shot down after it dropped off so"
         "ldiers."
      }
    }
    npc_helicopter:form =
    {
      t_BaseHelicopter = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Loud rotor wash sound"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Electrical drone"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Helicopter lights"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "Ignore avoid spheres+boxes"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1048576"
        cap = "More aggressive attacks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2097152"
        cap = "Cast long shadow"
      }
      InitialSpeed: =
      {
        txt = "&"
        hint = "Initial Speed"
      }
      GracePeriod: =
      {
        txt = "&"
        hint = "Grace Period"
      }
      PatrolSpeed: =
      {
        txt = "&"
        hint = "Patrol Speed"
      }
      noncombat: =
      {
        txt = "&"
        hint = "Non-combat (Do not precache gibs)"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#GunOn: =
      {
        txt = "&"
        hint = "GunOn"
      }
      input#GunOff: =
      {
        txt = "&"
        hint = "GunOff"
      }
      input#MissileOn: =
      {
        txt = "&"
        hint = "MissileOn"
      }
      input#MissileOff: =
      {
        txt = "&"
        hint = "MissileOff"
      }
      input#EnableRotorWash: =
      {
        txt = "&"
        hint = "Turns on rotor wash effects"
      }
      input#DisableRotorWash: =
      {
        txt = "&"
        hint = "Turns off rotor wash effects"
      }
      input#EnableRotorSound: =
      {
        txt = "&"
        hint = "Turns on rotor sounds"
      }
      input#DisableRotorSound: =
      {
        txt = "&"
        hint = "Turns off rotor sounds"
      }
      input#StartBombingVehicle: =
      {
        txt = "&"
        hint = "Starts the chopper leading enemy vehicles and dropping bombs o"
         "n them."
      }
      input#StartTrailingVehicle: =
      {
        txt = "&"
        hint = "Starts the chopper trailing enemy vehicles and shooting at the"
         "m."
      }
      input#StartDefaultBehavior: =
      {
        txt = "&"
        hint = "Starts the chopper in the mode where he always stops at nav po"
         "ints instead of stopping anywhere in between nav points."
      }
      input#StartAlwaysLeadingVehicle: =
      {
        txt = "&"
        hint = "Starts the chopper *always* leading enemy vehicles (regardless"
         " of how they are moving w/respect to the path) and dropping bombs on"
         " them. This mode is different from StartBombingVehicle in that it ne"
         "ver uses the machine gun."
      }
      input#StartSprinkleBehavior: =
      {
        txt = "&"
        hint = "Starts the chopper dropping bombs randomly + shooting at the p"
         "layer."
      }
      input#StartBullrushBehavior: =
      {
        txt = "&"
        hint = "Starts the chopper bullrushing the player."
      }
      input#SetHealthFraction: =
      {
        txt = "&"
        hint = "Sets the chopper health as a percentage of max health"
      }
      input#EnableDeadlyShooting: =
      {
        txt = "&"
        hint = "Starts the chopper being deadly to on-foot players"
      }
      input#DisableDeadlyShooting: =
      {
        txt = "&"
        hint = "Stops the chopper being deadly to on-foot players"
      }
      input#StartNormalShooting: =
      {
        txt = "&"
        hint = "The chopper will fire in short bursts. Good for on-foot experi"
         "ences"
      }
      input#StartLongCycleShooting: =
      {
        txt = "&"
        hint = "The chopper fires in long bursts"
      }
      input#StartContinuousShooting: =
      {
        txt = "&"
        hint = "The chopper fires continuously."
      }
      input#StartFastShooting: =
      {
        txt = "&"
        hint = "The chopper fires normal bursts, but does not 'charge up' the "
         "gun. Fires immediately."
      }
      input#ResetIdleTime: =
      {
        txt = "&"
        hint = "Allows the helicopter to fire immediately if he's not in the m"
         "iddle of charging or firing"
      }
      input#SetAngles: =
      {
        txt = "&"
        hint = "Instantly snaps the orientation of the helicopter (Pitch Yaw R"
         "oll)"
      }
      input#DropBomb: =
      {
        txt = "&"
        hint = "Immediately drops a bomb based on normal bomb dropping rules"
      }
      input#DropBombStraightDown: =
      {
        txt = "&"
        hint = "Immediately drops a bomb directly downwards"
      }
      input#DropBombAtTarget: =
      {
        txt = "&"
        hint = "Immediately drops a bomb directly at the target destination, b"
         "ut only if the player isn't right there"
      }
      input#DropBombAtTargetAlways: =
      {
        txt = "&"
        hint = "Immediately drops a bomb directly at the target destination, n"
         "o matter whether it's fair or not."
      }
      input#DropBombDelay: =
      {
        txt = "&"
        hint = "Add a delay before the next bomb is dropped"
      }
      input#BecomeIndestructible: =
      {
        txt = "&"
        hint = "Makes the helicopter take no more damage"
      }
      input#DisablePathVisibilityTests: =
      {
        txt = "&"
        hint = "When the helicopter moves, he will not check for visibility fr"
         "om the path_track to the enemy to cull out path_tracks"
      }
      input#EnablePathVisibilityTests: =
      {
        txt = "&"
        hint = "When the helicopter moves, he will only move to path_tracks th"
         "at have line-of-sight to the enemy"
      }
      input#StartCarpetBombing: =
      {
        txt = "&"
        hint = "Starts the helicopter constantly dropping megabombs until Stop"
         "CarpetBombing input"
      }
      input#StopCarpetBombing: =
      {
        txt = "&"
        hint = "Stop the carpet bombing behavior"
      }
      output#OnHealthChanged: =
      {
        txt = "&"
        hint = "Fires when the helicopter health changes. The integer is the p"
         "ercentage of health the chopper has from 0-100."
      }
      output#OnShotDown: =
      {
        txt = "&"
        hint = "Fires the instant the helicopter is killed"
      }
    }
    grenade_helicopter:form =
    {
      t_Targetname = !
      t_Parentname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Is a dud"
      }
      input#ExplodeIn: =
      {
        txt = "&"
        hint = "Tells the bomb to explode in X seconds."
      }
      output#OnPhysGunOnlyPickup: =
      {
        txt = "&"
        hint = "Fired when a player picks this object up WITH THE PHYSGUN. +US"
         "E pickups do not fire this output."
      }
    }
    npc_heli_avoidsphere:form =
    {
      t_Targetname = !
      t_Parentname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Avoid the sphere above and below"
      }
      radius: =
      {
        txt = "&"
        hint = "Radius"
      }
    }
    npc_heli_avoidbox:form =
    {
      t_Origin = !
      t_Angles = !
      t_Parentname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Avoid the box above and below"
      }
    }
    npc_heli_nobomb:form =
    {
      t_Origin = !
      t_Angles = !
      t_Parentname = !
    }
    npc_fastzombie:form =
    {
      t_BaseNPC = !
      input#AttachToVehicle: =
      {
        txt = "&"
        hint = "Attach to a specified vehicle entity"
      }
    }
    npc_fastzombie_torso:form =
    {
      t_BaseNPC = !
    }
    npc_zombie:form =
    {
      t_BaseNPC = !
    }
    npc_zombie_torso:form =
    {
      t_BaseNPC = !
    }
    npc_zombine:form =
    {
      t_BaseNPC = !
      input#StartSprint: =
      {
        txt = "&"
        hint = "Forces the zombine to sprint."
      }
      input#PullGrenade: =
      {
        txt = "&"
        hint = "Forces the zombine to pull a grenade."
      }
    }
    npc_poisonzombie:form =
    {
      t_BaseNPC = !
      crabcount: =
      {
        txt = "&"
        hint = "Crabs in nest"
        typ = "C"
        items = "1 Crab"$0D"2 Crabs"$0D"3 Crabs"
        values = "1"$0D"2"$0D"3"
      }
    }
    npc_cscanner:form =
    {
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "No Dynamic Light"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Strider Scout Scanner"
      }
      spotlightlength: =
      {
        txt = "&"
        hint = "SpotlightLength"
      }
      spotlightwidth: =
      {
        txt = "&"
        hint = "SpotlightWidth"
      }
      spotlightdisabled: =
      {
        txt = "&"
        hint = "SpotlightDisabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      ShouldInspect: =
      {
        txt = "&"
        hint = "Should inspect"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      OnlyInspectPlayers: =
      {
        txt = "&"
        hint = "Only Inspect Players"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      NeverInspectPlayers: =
      {
        txt = "&"
        hint = "Never Inspect Players"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#DisableSpotlight: =
      {
        txt = "&"
        hint = "DisableSpotlight"
      }
      input#InspectTargetPhoto: =
      {
        txt = "&"
        hint = "Tells the scanner to photograph the given entity, named by cla"
         "ssname or by target name. !activator or !player works here also."
      }
      input#InspectTargetSpotlight: =
      {
        txt = "&"
        hint = "Tells the scanner to spotlight the given entity, named by clas"
         "sname or by target name. !activator or !player works here also."
      }
      input#InputSetFlightSpeed: =
      {
        txt = "&"
        hint = "Sets the flight speed of the scanner"
      }
      input#InputShouldInspect: =
      {
        txt = "&"
        hint = "Set whether should inspect or not"
      }
      input#SetFollowTarget: =
      {
        txt = "&"
        hint = "Set target to follow until told otherwise"
      }
      input#ClearFollowTarget: =
      {
        txt = "&"
        hint = "Stop following our target"
      }
      input#SetDistanceOverride: =
      {
        txt = "&"
        hint = "Override the distance the scanner will attempt to keep between"
         " inspection targets and itself"
      }
      input#DeployMine: =
      {
        txt = "&"
        hint = "Drop landmine (if carrying one)"
      }
      input#EquipMine: =
      {
        txt = "&"
        hint = "Equip with landmine"
      }
      output#OnPhotographPlayer: =
      {
        txt = "&"
        hint = "Fired any time the scanner takes a picture of the player."
      }
      output#OnPhotographNPC: =
      {
        txt = "&"
        hint = "Fired any time the scanner takes a picture of an NPC."
      }
    }
    npc_clawscanner:form =
    {
      t_BaseNPC = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "No Dynamic Light"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Strider Scout Scanner"
      }
      spotlightlength: =
      {
        txt = "&"
        hint = "SpotlightLength"
      }
      spotlightwidth: =
      {
        txt = "&"
        hint = "SpotlightWidth"
      }
      spotlightdisabled: =
      {
        txt = "&"
        hint = "SpotlightDisabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      ShouldInspect: =
      {
        txt = "&"
        hint = "Should inspect"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      OnlyInspectPlayers: =
      {
        txt = "&"
        hint = "Only Inspect Players"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      NeverInspectPlayers: =
      {
        txt = "&"
        hint = "Never Inspect Players"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#DisableSpotlight: =
      {
        txt = "&"
        hint = "DisableSpotlight"
      }
      input#InspectTargetPhoto: =
      {
        txt = "&"
        hint = "Tells the scanner to photograph the given entity, named by cla"
         "ssname or by target name. !activator or !player works here also."
      }
      input#InspectTargetSpotlight: =
      {
        txt = "&"
        hint = "Tells the scanner to spotlight the given entity, named by clas"
         "sname or by target name. !activator or !player works here also."
      }
      input#InputSetFlightSpeed: =
      {
        txt = "&"
        hint = "Sets the flight speed of the scanner"
      }
      input#InputShouldInspect: =
      {
        txt = "&"
        hint = "Set whether should inspect or not"
      }
      input#SetFollowTarget: =
      {
        txt = "&"
        hint = "Set target to follow until told otherwise"
      }
      input#ClearFollowTarget: =
      {
        txt = "&"
        hint = "Stop following our target"
      }
      input#SetDistanceOverride: =
      {
        txt = "&"
        hint = "Override the distance the scanner will attempt to keep between"
         " inspection targets and itself"
      }
      input#DeployMine: =
      {
        txt = "&"
        hint = "Drop landmine (if carrying one)"
      }
      input#EquipMine: =
      {
        txt = "&"
        hint = "Equip with landmine"
      }
      output#OnPhotographPlayer: =
      {
        txt = "&"
        hint = "Fired any time the scanner takes a picture of the player."
      }
      output#OnPhotographNPC: =
      {
        txt = "&"
        hint = "Fired any time the scanner takes a picture of an NPC."
      }
    }
    npc_manhack:form =
    {
      t_BaseNPC = !
      t_AlyxInteractable = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Start packed up (folded and engine off)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Don't use any damage effects"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Use Air Nodes"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1048576"
        cap = "No Danger Sounds"
      }
      input#DisableSwarm: =
      {
        txt = "&"
        hint = "Disable the manhack swarm behavior."
      }
      input#Unpack: =
      {
        txt = "&"
        hint = "Causes the manhack to stop being packed up."
      }
      ignoreclipbrushes: =
      {
        txt = "&"
        hint = "Ignore NPC Clip brushes"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
    }
    npc_mortarsynth:form =
    {
      t_BaseNPC = !
    }
    npc_metropolice:form =
    {
      t_BaseNPC = !
      t_RappelNPC = !
      additionalequipment: =
      {
        txt = "&"
        hint = "Weapons"
        typ = "C"
        items = "Pistol"$0D"SMG1"$0D"Stun Stick"$0D"Shotgun"$0D"Nothing"
        values = "weapon_pistol"$0D"weapon_smg1"$0D"weapon_stunstick"$0D"weapo"
         "n_shotgun"$0D"0"
      }
      manhacks: =
      {
        txt = "&"
        hint = "Number of Manhacks"
        typ = "C"
        items = "None"$0D"1"$0D"2"
        values = "0"$0D"1"$0D"2"
      }
      weapondrawn: =
      {
        txt = "&"
        hint = "Pistol starts drawn"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Simple cops"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X262144"
        cap = "Rappel (UNCHECK THIS IF IT IS CHECKED!)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X524288"
        cap = "Always stitch"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1048576"
        cap = "No chatter"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2097152"
        cap = "Arrest enemies"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4194304"
        cap = "No far stitching"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8388608"
        cap = "Prevent manhack toss"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16777216"
        cap = "Allowed to respond to thrown objects"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X33554432"
        cap = "Mid-range attacks (halfway between normal + long-range)"
      }
      input#EnableManhackToss: =
      {
        txt = "&"
        hint = "Enables manhack toss (which had been disabled by the spawnflag"
         ")"
      }
      input#SetPoliceGoal: =
      {
        txt = "&"
        hint = "Causes the NPC to police the area defined by an ai_goal_police"
      }
      input#ActivateBaton: =
      {
        txt = "&"
        hint = "Set the baton to active"
      }
      output#OnStunnedPlayer: =
      {
        txt = "&"
        hint = "Fires when the player is hit by a stunstick by this NPC."
      }
      output#OnCupCopped: =
      {
        txt = "&"
        hint = "Fires if the player hits me with the cupcop can. ONLY use for "
         "x360 achievement."
      }
    }
    npc_crabsynth:form =
    {
      t_BaseNPC = !
    }
    npc_monk:form =
    {
      t_TalkNPC = !
      additionalequipment: =
      {
        txt = "&"
        hint = "Weapons"
        typ = "C"
        items = "Annabelle"$0D"SMG1"$0D"AR2"$0D"Stun Stick"$0D"Crow Bar"$0D"Sh"
         "otgun"$0D"Beer Bottle"$0D"Beer Bottle2"$0D"RPG"$0D"Nothing"
        values = "weapon_annabelle"$0D"weapon_smg1"$0D"weapon_ar2"$0D"weapon_s"
         "tunstick"$0D"weapon_crowbar"$0D"weapon_shotgun"$0D"weapon_beerbottle"
         $0D"weapon_beerbottle2"$0D"weapon_rpg"$0D"0"
      }
      HasGun: =
      {
        txt = "&"
        hint = "Has Gun"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#PerfectAccuracyOn: =
      {
        txt = "&"
        hint = "Make every shot at a zombie a headshot"
      }
      input#PerfectAccuracyOff: =
      {
        txt = "&"
        hint = "Return to normal accuracy"
      }
    }
    npc_alyx:form =
    {
      t_TalkNPC = !
      t_Parentname = !
      t_PlayerCompanion = !
      t_modelselect = !
      additionalequipment: =
      {
        txt = "&"
        hint = "Weapons"
        typ = "C"
        items = "Alyx Gun"$0D"Shotgun"$0D"Nothing"
        values = "weapon_alyxgun"$0D"weapon_shotgun"$0D"0"
      }
      DontPickupWeapons: =
      {
        txt = "&"
        hint = "Prevent picking up weapons?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      ShouldHaveEMP: =
      {
        txt = "&"
        hint = "Should alyx have her EMP?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#AllowInteraction: =
      {
        txt = "&"
        hint = "Allow Alyx's 'hacking' AI to run."
      }
      input#DisallowInteraction: =
      {
        txt = "&"
        hint = "Disallow Alyx's 'hacking' AI."
      }
      input#AllowDarknessSpeech: =
      {
        txt = "&"
        hint = "Enables or disables Alyx's darkness speech ('where are you', e"
         "tc)."
      }
      input#SetAnimLockedEntity: =
      {
        txt = "&"
        hint = "Sets Alyx to take her animation and cycle position from anothe"
         "r entity."
      }
      input#ClearAnimLockedEntity: =
      {
        txt = "&"
        hint = "Stops Alyx from taking her animation locking from another char"
         "acter."
      }
      input#GiveEMP: =
      {
        txt = "&"
        hint = "Gives or removes the EMP tool."
      }
      output#OnFinishInteractWithObject: =
      {
        txt = "&"
        hint = "Fires when Alyx finishes interacting with an object (usually h"
         "acking it)."
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fires when a player +USEs Alyx."
      }
      input#EnterVehicle: =
      {
        txt = "&"
        hint = "Make Alyx enter the vehicle specified by name."
      }
      input#EnterVehicleImmediately: =
      {
        txt = "&"
        hint = "Make Alyx enter the vehicle specified by name immediately via "
         "teleportation."
      }
      input#ExitVehicle: =
      {
        txt = "&"
        hint = "Make Alyx exit the vehicle she's in."
      }
      input#CancelEnterVehicle: =
      {
        txt = "&"
        hint = "Stops Alyx from trying to enter the vehicle if she's outside o"
         "f it."
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fires when a player +USEs Alyx"
      }
    }
    ai_goal_operator:form =
    {
      t_Targetname = !
      t_EnableDisable = !
      actor: =
      {
        txt = "&"
        hint = "Actor to affect"
      }
      target: =
      {
        txt = "&"
        hint = "Position entity"
      }
      contexttarget: =
      {
        txt = "&"
        hint = "Context target"
      }
      state: =
      {
        txt = "&"
        hint = "Initial State"
        typ = "C"
        items = "Not ready (closed, locked, etc)"$0D"Ready (open and accessibl"
         "e)"
        values = "0"$0D"1"
      }
      moveto: =
      {
        txt = "&"
        hint = "How should NPC approach?"
        typ = "C"
        items = "DO NOT USE THIS SETTING"$0D"Walk"$0D"Run"
        values = "0"$0D"1"$0D"2"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Begin operating on the object"
      }
      input#SetStateReady: =
      {
        txt = "&"
        hint = "Set the object's state to READY. Fire this input when the obje"
         "ct has been unlocked/opened or otherwise made ready for interaction."
      }
      input#SetStateFinished: =
      {
        txt = "&"
        hint = "Fire this input when the NPC has completed the interaction wit"
         "h this object."
      }
      output#OnBeginApproach: =
      {
        txt = "&"
        hint = "Fired when the NPC begins to approach the position"
      }
      output#OnMakeReady: =
      {
        txt = "&"
        hint = "Make the item ready to operate"
      }
      output#OnBeginOperating: =
      {
        txt = "&"
        hint = "Fired when the NPC is ready to operate"
      }
      output#OnFinished: =
      {
        txt = "&"
        hint = "The item is done"
      }
    }
    info_darknessmode_lightsource:form =
    {
      t_Targetname = !
      t_EnableDisable = !
      LightRadius: =
      {
        txt = "&"
        hint = "Light Radius"
      }
    }
    npc_kleiner:form =
    {
      t_TalkNPC = !
      t_modelselect = !
    }
    npc_eli:form =
    {
      t_TalkNPC = !
      t_Parentname = !
      t_modelselect = !
    }
    npc_magnusson:form =
    {
      t_TalkNPC = !
      t_modelselect = !
    }
    npc_breen:form =
    {
      t_TalkNPC = !
      t_modelselect = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Ignore speech semaphore"
      }
    }
    npc_mossman:form =
    {
      t_TalkNPC = !
    }
    npc_gman:form =
    {
      t_TalkNPC = !
    }
    npc_dog:form =
    {
      t_BaseNPC = !
      input#SetPickupTarget: =
      {
        txt = "&"
        hint = "Sets the target entity for dog to pickup."
      }
      input#StartCatchThrowBehavior: =
      {
        txt = "&"
        hint = "Tells d0g to start playing with the player. You can pass in th"
         "e name of the object you want him to play with otherwise he'll find "
         "the closes phys_object."
      }
      input#StopCatchThrowBehavior: =
      {
        txt = "&"
        hint = "Stop the catch and throw behavior."
      }
      input#PlayerPickupObject: =
      {
        txt = "&"
        hint = "Tells d0g the physgun just picked up an object."
      }
      input#StartWaitAndCatch: =
      {
        txt = "&"
        hint = "Tells d0g to wait for the player to throw an object at him."
      }
      input#StopWaitAndCatch: =
      {
        txt = "&"
        hint = "Tells d0g to stop waiting for the player."
      }
      input#SetThrowArcModifier: =
      {
        txt = "&"
        hint = "Used to pass in a modifier for d0g's object flight arc."
      }
      input#SetThrowTarget: =
      {
        txt = "&"
        hint = "Set d0g's throw target (pass in !player if you want the player"
         ")"
      }
      input#TurnBoneFollowersOff: =
      {
        txt = "&"
        hint = "Turn dog's bone followers off"
      }
      input#TurnBoneFollowersOn: =
      {
        txt = "&"
        hint = "Turn dog's bone followers on"
      }
      output#OnDogThrow: =
      {
        txt = "&"
        hint = "Fires when dog throws an object."
      }
      output#OnDogPickup: =
      {
        txt = "&"
        hint = "Fires when dog picks up an object."
      }
      output#OnDogCatch: =
      {
        txt = "&"
        hint = "Fires when dog catches an object."
      }
    }
    monster_generic:form =
    {
      t_BaseNPC = !
      t_RenderFields = !
      t_Shadow = !
      spawnflags: =
      {
        txt = "&"
        typ = "X65536"
        cap = "Not solid"
      }
      model: =
      {
        txt = "&"
        hint = "Model"
        typ = "B"
        Cap = "models..."
        form = "t_models_hl2_form:form"
      }
      body: =
      {
        txt = "&"
        hint = "Body"
      }
    }
    generic_actor:form =
    {
      t_BaseNPC = !
      t_Parentname = !
      t_RenderFields = !
      t_Shadow = !
      model: =
      {
        txt = "&"
        hint = "Model"
        typ = "B"
        Cap = "models..."
        form = "t_models_hl2_form:form"
      }
      hull_name: =
      {
        txt = "&"
        hint = "Hull type"
        typ = "C"
        items = "Human"$0D"Wide"$0D"Tiny"$0D"Medium"$0D"Large"
        values = "HUMAN_HULL"$0D"WIDE_HUMAN_HULL"$0D"TINY_HULL"$0D"MEDIUM_HULL"
         $0D"LARGE_HULL"
      }
    }
    cycler_actor:form =
    {
      t_BaseNPC = !
      t_RenderFields = !
      t_Shadow = !
      model: =
      {
        txt = "&"
        hint = "Model"
        typ = "B"
        Cap = "models..."
        form = "t_models_hl2_form:form"
      }
      Sentence: =
      {
        txt = "&"
        hint = "Sentence Group"
      }
      input#Alpha: =
      {
        txt = "&"
        hint = "Set Alpha Value"
      }
    }
    npc_maker:form =
    {
      t_Angles = !
      t_BaseNPCMaker = !
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Fade Corpse"
      }
      NPCType: =
      {
        txt = "&"
        hint = "Class name of spawned NPC"
        typ = "C"
          items = "npc_advisor"
          $0D"npc_alyx"
          $0D"npc_antlion"
          $0D"npc_antlionguard"
          $0D"npc_antlion_grub"
          $0D"npc_antlion_template_maker"
          $0D"npc_apcdriver"
          $0D"npc_barnacle"
          $0D"npc_barney"
          $0D"npc_blob"
          $0D"npc_breen"
          $0D"npc_bullseye"
          $0D"npc_citizen"
          $0D"npc_clawscanner"
          $0D"npc_combine_camera"
          $0D"npc_combine_cannon"
          $0D"npc_combine_s"
          $0D"npc_combinedropship"
          $0D"npc_combinegunship"
          $0D"npc_combinegunship"
          $0D"npc_crabsynth"
          $0D"npc_cranedriver"
          $0D"npc_crow"
          $0D"npc_cscanner"
          $0D"npc_dog"
          $0D"npc_eli"
          $0D"npc_enemyfinder"
          $0D"npc_enemyfinder_combinecannon"
          $0D"npc_fastzombie"
          $0D"npc_fastzombie_torso"
          $0D"npc_fisherman"
          $0D"npc_gman"
          $0D"npc_grenade_frag"
          $0D"npc_headcrab"
          $0D"npc_headcrab_black"
          $0D"npc_headcrab_fast"
          $0D"npc_helicopter"
          $0D"npc_heli_avoidbox"
          $0D"npc_heli_avoidsphere"
          $0D"npc_heli_nobomb"
          $0D"npc_hunter"
          $0D"npc_hunter_maker"
          $0D"npc_ichthyosaur"
          $0D"npc_kleiner"
          $0D"npc_launcher"
          $0D"npc_maker"
          $0D"npc_manhack"
          $0D"npc_metropolice"
          $0D"npc_missiledefense"
          $0D"npc_magnusson"
          $0D"npc_monk"
          $0D"npc_mortarsynth"
          $0D"npc_mossman"
          $0D"npc_pigeon"
          $0D"npc_poisonzombie"
          $0D"npc_rollermine"
          $0D"npc_seagull"
          $0D"npc_sniper"
          $0D"npc_spotlight"
          $0D"npc_stalker"
          $0D"npc_strider"
          $0D"npc_turret_ceiling"
          $0D"npc_turret_floor"
          $0D"npc_turret_ground"
          $0D"npc_vehicledriver"
          $0D"npc_vortigaunt"
          $0D"npc_zombie"
          $0D"npc_zombie_torso"
          $0D"npc_zombine"
      }
      NPCTargetname: =
      {
        txt = "&"
        hint = "Childrens' Name"
      }
      NPCSquadname: =
      {
        txt = "&"
        hint = "Childrens' Squad Name"
      }
      NPCHintGroup: =
      {
        txt = "&"
        hint = "Childrens' Hint Group"
      }
      additionalequipment: =
      {
        txt = "&"
        hint = "Weapons"
        typ = "C"
        items = "Pistol"$0D"AR2"$0D"Shotgun"$0D"SMG1"$0D"Stun Stick"$0D"Grigor"
         "i's Shotgun"$0D"Nothing"
        values = "weapon_pistol"$0D"weapon_ar2"$0D"weapon_shotgun"$0D"weapon_s"
         "mg1"$0D"weapon_stunstick"$0D"weapon_annabelle"$0D"0"
      }
    }
    npc_antlion_template_maker:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Angles = !
      t_BaseNPCMaker = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1024"
        cap = "Random spawn node"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2048"
        cap = "Try to spawn close to the current target"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "Pick a random fight target"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8192"
        cap = "Try to play blocked effects near the player"
      }
      TemplateName: =
      {
        txt = "&"
        hint = "Name of template NPC"
      }
      spawngroup: =
      {
        txt = "&"
        hint = "Spawn on Hint Group"
      }
      spawnradius: =
      {
        txt = "&"
        hint = "Spawn radius"
      }
      spawntarget: =
      {
        txt = "&"
        hint = "Spawn target"
      }
      fighttarget: =
      {
        txt = "&"
        hint = "Fight target"
      }
      followtarget: =
      {
        txt = "&"
        hint = "Follow target"
      }
      vehicledistance: =
      {
        txt = "&"
        hint = "Vehicle Spawn Distance"
      }
      workerspawnrate: =
      {
        txt = "&"
        hint = "Random Worker Spawn Rate"
      }
      ignorebugbait: =
      {
        txt = "&"
        hint = "Ignore Bugbait"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      pool_start: =
      {
        txt = "&"
        hint = "Initial antlions in the pool."
      }
      pool_max: =
      {
        txt = "&"
        hint = "Max antlions in the pool."
      }
      pool_regen_amount: =
      {
        txt = "&"
        hint = "Pool regen amount."
      }
      pool_regen_time: =
      {
        txt = "&"
        hint = "Pool regen time."
      }
      input#SetFightTarget: =
      {
        txt = "&"
        hint = "Sets the target entity for children to fight to."
      }
      input#ClearFightTarget: =
      {
        txt = "&"
        hint = "Clears the fight target goal for this spawner."
      }
      input#SetFollowTarget: =
      {
        txt = "&"
        hint = "Sets the target entity for children to follow."
      }
      input#ClearFollowTarget: =
      {
        txt = "&"
        hint = "Clears the follow target goal for this spawner."
      }
      input#SetSpawnRadius: =
      {
        txt = "&"
        hint = "Sets the Spawn Radius."
      }
      input#AddToPool: =
      {
        txt = "&"
        hint = "Add the number of antlions specified in the parameter to the p"
         "ool."
      }
      input#SetMaxPool: =
      {
        txt = "&"
        hint = "Set the maximum number of antlions allowed in the pool at any "
         "time. Setting it to 0 turns off the pool behavior."
      }
      input#SetPoolRegenAmount: =
      {
        txt = "&"
        hint = "Set the number of antlions added to the pool every time it reg"
         "enerates."
      }
      input#SetPoolRegenTime: =
      {
        txt = "&"
        hint = "Set the time interval between pool regeneration ticks."
      }
      input#ChangeDestinationGroup: =
      {
        txt = "&"
        hint = "Change the spawn group for this spawner."
      }
      output#OnAllBlocked: =
      {
        txt = "&"
        hint = "Fires when all the hint nodes are blocked."
      }
      createspores: =
      {
        txt = "&"
        hint = "Create Spore effect"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
    }
    point_antlion_repellant:form =
    {
      t_Targetname = !
      repelradius: =
      {
        txt = "&"
        hint = "Repell radius"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable"
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable"
      }
    }
    t_player_control:incl =
    {
      bbox = '-10 -10 -10 10 10 10'
      t_Targetname = !
      input#Activate: =
      {
        txt = "&"
        hint = "Turns on"
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Turns off"
      }
      input#SetThrust: =
      {
        txt = "&"
        hint = "Set Thrust"
      }
      input#SetSideThrust: =
      {
        txt = "&"
        hint = "Set Side Thrust"
      }
    }
    t_BaseScripted:incl =
    {
      t_Targetname = !
      t_Parentname = !
      t_Angles = !
      m_iszEntity: =
      {
        txt = "&"
        hint = "Target NPC"
      }
      m_iszIdle: =
      {
        txt = "&"
        hint = "Pre Action Idle Animation"
      }
      m_iszEntry: =
      {
        txt = "&"
        hint = "Entry Animation"
      }
      m_iszPlay: =
      {
        txt = "&"
        hint = "Action Animation"
      }
      m_iszPostIdle: =
      {
        txt = "&"
        hint = "Post Action Idle Animation"
      }
      m_iszCustomMove: =
      {
        txt = "&"
        hint = "Custom Move Animation"
      }
      m_bLoopActionSequence: =
      {
        txt = "&"
        hint = "Loop Action Animation?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      m_bSynchPostIdles: =
      {
        txt = "&"
        hint = "Synch Post Idles?"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      m_flRadius: =
      {
        txt = "&"
        hint = "Search Radius (0=everywhere)"
      }
      m_flRepeat: =
      {
        txt = "&"
        hint = "Repeat Rate ms"
      }
      m_fMoveTo: =
      {
        txt = "&"
        hint = "Move to Position"
        typ = "C"
        items = "No"$0D"Walk"$0D"Run"$0D"Custom movement"$0D"Instantaneous"$0D
         "No - Turn to Face"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"
      }
      m_iszNextScript: =
      {
        txt = "&"
        hint = "Next Script"
      }
      m_bIgnoreGravity: =
      {
        txt = "&"
        hint = "Ignore Gravity on NPC during script"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      m_bDisableNPCCollisions: =
      {
        txt = "&"
        hint = "Disable NPC collisions during script"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#BeginSequence: =
      {
        txt = "&"
        hint = "Summons an NPC to act out the scripted sequence."
      }
      input#MoveToPosition: =
      {
        txt = "&"
        hint = "Summons an NPC to the script location. They will play their sc"
         "ripted idle (or ACT_IDLE if none is specified) until BeginSequence i"
         "s triggered."
      }
      input#CancelSequence: =
      {
        txt = "&"
        hint = "Stops the scripted sequence. If fired after a sequence starts,"
         " this input will not take effect until the NPC finishes playing the "
         "scripted action animation."
      }
      output#OnBeginSequence: =
      {
        txt = "&"
        hint = "Fires when the action animation begins playing."
      }
      output#OnEndSequence: =
      {
        txt = "&"
        hint = "Fires when the action animation completes."
      }
      output#OnCancelSequence: =
      {
        txt = "&"
        hint = "Fires when the sequence is cancelled."
      }
      output#OnCancelFailedSequence: =
      {
        txt = "&"
        hint = "Fires when the sequence is cancelled without ever playing (OnC"
         "ancelSequence will also fire)."
      }
      output#OnScriptEvent01: =
      {
        txt = "&"
        hint = "Fires when a 'trigger' anim event occurs while playing the scr"
         "ipt. Use { event 1003 framenum 1 } in the QC."
      }
      output#OnScriptEvent02: =
      {
        txt = "&"
        hint = "Fires when a 'trigger' anim event occurs while playing the scr"
         "ipt. Use { event 1003 framenum 2 } in the QC."
      }
      output#OnScriptEvent03: =
      {
        txt = "&"
        hint = "Fires when a 'trigger' anim event occurs while playing the scr"
         "ipt. Use { event 1003 framenum 3 } in the QC."
      }
      output#OnScriptEvent04: =
      {
        txt = "&"
        hint = "Fires when a 'trigger' anim event occurs while playing the scr"
         "ipt. Use { event 1003 framenum 4 } in the QC."
      }
      output#OnScriptEvent05: =
      {
        txt = "&"
        hint = "Fires when a 'trigger' anim event occurs while playing the scr"
         "ipt. Use { event 1003 framenum 5 } in the QC."
      }
      output#OnScriptEvent06: =
      {
        txt = "&"
        hint = "Fires when a 'trigger' anim event occurs while playing the scr"
         "ipt. Use { event 1003 framenum 6 } in the QC."
      }
      output#OnScriptEvent07: =
      {
        txt = "&"
        hint = "Fires when a 'trigger' anim event occurs while playing the scr"
         "ipt. Use { event 1003 framenum 7 } in the QC."
      }
      output#OnScriptEvent08: =
      {
        txt = "&"
        hint = "Fires when a 'trigger' anim event occurs while playing the scr"
         "ipt. Use { event 1003 framenum 8 } in the QC."
      }
    }
    scripted_sentence:form =
    {
      t_Targetname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Fire Once"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Followers Only"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Interrupt Speech"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Concurrent"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Speak to Activator"
      }
      sentence: =
      {
        txt = "&"
        hint = "Sentence Name"
      }
      entity: =
      {
        txt = "&"
        hint = "Speaker Type"
      }
      delay: =
      {
        txt = "&"
        hint = "Additional Sentence Time"
      }
      radius: =
      {
        txt = "&"
        hint = "Search Radius"
      }
      refire: =
      {
        txt = "&"
        hint = "Delay Before Refire"
      }
      listener: =
      {
        txt = "&"
        hint = "Listener Type"
      }
      volume: =
      {
        txt = "&"
        hint = "Volume 0-10"
      }
      attenuation: =
      {
        txt = "&"
        hint = "Sound Radius"
        typ = "C"
        items = "Small Radius"$0D"Medium Radius"$0D"Large  Radius"$0D"Play Eve"
         "rywhere"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
      input#BeginSentence: =
      {
        txt = "&"
        hint = "Starts the scripted sentence."
      }
      output#OnBeginSentence: =
      {
        txt = "&"
        hint = "Fires when the sentence begins"
      }
      output#OnEndSentence: =
      {
        txt = "&"
        hint = "Fires when the sentence ends"
      }
    }
    scripted_target:form =
    {
      t_Targetname = !
      t_Parentname = !
      StartDisabled: =
      {
        txt = "&"
        hint = "Start Disabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      m_iszEntity: =
      {
        txt = "&"
        hint = "Target NPC"
      }
      m_flRadius: =
      {
        txt = "&"
        hint = "Search Radius (0=everywhere)"
      }
      MoveSpeed: =
      {
        txt = "&"
        hint = "Move Speed"
      }
      PauseDuration: =
      {
        txt = "&"
        hint = "Pause Duration"
      }
      EffectDuration: =
      {
        txt = "&"
        hint = "Effect Duration"
      }
      target: =
      {
        txt = "&"
        hint = "Next Target"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable this entity"
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable this entity"
      }
      output#AtTarget: =
      {
        txt = "&"
        hint = "Fires when NPC reaches this target"
      }
      output#LeaveTarget: =
      {
        txt = "&"
        hint = "Fires when NPC leaves this target"
      }
    }
    ai_relationship:form =
    {
      t_Targetname = !
      subject: =
      {
        txt = "&"
        hint = "Subject(s)"
      }
      target: =
      {
        txt = "&"
        hint = "Target(s)"
      }
      disposition: =
      {
        txt = "&"
        hint = "Disposition"
        typ = "C"
        items = "Hate"$0D"Fear"$0D"Like"$0D"Neutral"
        values = "1"$0D"2"$0D"3"$0D"4"
      }
      radius: =
      {
        txt = "&"
        hint = "Radius for subject"
      }
      rank: =
      {
        txt = "&"
        hint = "Disposition Priority"
      }
      StartActive: =
      {
        txt = "&"
        hint = "Start Active"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Reciprocal: =
      {
        txt = "&"
        hint = "Reciprocal"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Notify subject of target's location"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Notify target of subject's location"
      }
      input#ApplyRelationship: =
      {
        txt = "&"
        hint = "Apply relationship changes. This will change all Subject entit"
         "ies' relationships to all Target entities. \n\nIMPORTANT: Once you A"
         "pplyRelationships, this entity is then 'ALWAYS ON' until you send a "
         "Disable input or RevertRelationship input. During the time this enti"
         "ty is 'ON', any entities that spawn who match the Subject or Target "
         "names will be affected. \n\nIMPORTANT: Unpredictable results may occ"
         "ur when two ai_relationship entities refer to the same set or subset"
         " of target or subject entities. This situation should be avoided."
      }
      input#RevertRelationship: =
      {
        txt = "&"
        hint = "Revert relationship changes. This will return the relationship"
         " to what it was at the time the ApplyRelationship input was called ("
         "or when this ai_relationship was spawned if StartActive is set)."
      }
      input#RevertToDefaultRelationship: =
      {
        txt = "&"
        hint = "Revert relationship changes to the default relationship, which"
         " may have changed since this ai_relationship was applied. This retur"
         "ns control of the entity relationship to the code."
      }
    }
    ai_ally_manager:form =
    {
      t_Targetname = !
      maxallies: =
      {
        txt = "&"
        hint = "Maximum number of allies"
      }
      maxmedics: =
      {
        txt = "&"
        hint = "Maximum number of medics"
      }
      input#SetMaxAllies: =
      {
        txt = "&"
        hint = "Set maximum number of allies"
      }
      input#SetMaxMedics: =
      {
        txt = "&"
        hint = "Set maximum number of medic allies"
      }
      input#Replenish: =
      {
        txt = "&"
        hint = "Replenish player allies"
      }
      output#SpawnMedicAlly: =
      {
        txt = "&"
        hint = "Spawn Medic Ally"
      }
      output#SpawnAlly0: =
      {
        txt = "&"
        hint = "Spawn Ally 0"
      }
      output#SpawnAlly1: =
      {
        txt = "&"
        hint = "Spawn Ally 1"
      }
      output#SpawnAlly2: =
      {
        txt = "&"
        hint = "Spawn Ally 2"
      }
      output#SpawnAlly3: =
      {
        txt = "&"
        hint = "Spawn Ally 3"
      }
      output#SpawnAlly4: =
      {
        txt = "&"
        hint = "Spawn Ally 4"
      }
      output#SpawnAlly5: =
      {
        txt = "&"
        hint = "Spawn Ally 5"
      }
      output#SpawnAlly6: =
      {
        txt = "&"
        hint = "Spawn Ally 6"
      }
      output#SpawnAlly7: =
      {
        txt = "&"
        hint = "Spawn Ally 7"
      }
      output#SpawnAlly8: =
      {
        txt = "&"
        hint = "Spawn Ally 8"
      }
      output#SpawnAlly9: =
      {
        txt = "&"
        hint = "Spawn Ally 9"
      }
      output#OnZeroAllies: =
      {
        txt = "&"
        hint = "Fires when there are no more allies"
      }
      output#OnZeroMedicAllies: =
      {
        txt = "&"
        hint = "Fires when there are no more allies"
      }
    }
    t_LeadGoalBase:incl =
    {
      t_Targetname = !
      actor: =
      {
        txt = "&"
        hint = "Actor(s) to affect"
      }
      goal: =
      {
        txt = "&"
        hint = "Target Entity"
      }
      WaitPointName: =
      {
        txt = "&"
        hint = "Point to wait at if the target's not visible"
      }
      WaitDistance: =
      {
        txt = "&"
        hint = "Wait until player gets this close"
      }
      LeadDistance: =
      {
        txt = "&"
        hint = "Lead Distance"
      }
      RetrieveDistance: =
      {
        txt = "&"
        hint = "Retrieve Distance"
      }
      SuccessDistance: =
      {
        txt = "&"
        hint = "Success Distance"
      }
      Run: =
      {
        txt = "&"
        hint = "Run instead of Walk"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Retrieve: =
      {
        txt = "&"
        hint = "Retrieve player?"
        typ = "C"
        items = "No, just idle and wait"$0D"Yes, move to retrieve"
        values = "0"$0D"1"
      }
      ComingBackWaitForSpeak: =
      {
        txt = "&"
        hint = "Before Coming Back, Wait for speech?"
        typ = "C"
        items = "No, come back while speaking"$0D"Yes, wait for speech to fini"
         "sh"
        values = "0"$0D"1"
      }
      RetrieveWaitForSpeak: =
      {
        txt = "&"
        hint = "On Retrieve, Wait for speech?"
        typ = "C"
        items = "No, start leading while speaking"$0D"Yes, wait for speech to "
         "finish"
        values = "0"$0D"1"
      }
      DontSpeakStart: =
      {
        txt = "&"
        hint = "Speak start greeting?"
        typ = "C"
        items = "Yes, speak the start greeting"$0D"No, don't speak the greetin"
         "g"
        values = "0"$0D"1"
      }
      LeadDuringCombat: =
      {
        txt = "&"
        hint = "Lead during combat?"
        typ = "C"
        items = "No. Stop to fight, resume leading when safe."$0D"Yes, lead wh"
         "ile fighting."
        values = "0"$0D"1"
      }
      GagLeader: =
      {
        txt = "&"
        hint = "Gag Leader?"
        typ = "C"
        items = "No. Speak lead concepts normally, respecting other lead speec"
         "h settings."$0D"Yes, don't speak any lead concepts at all, overridin"
         "g all other lead speech settings."
        values = "0"$0D"1"
      }
      AttractPlayerConceptModifier: =
      {
        txt = "&"
        hint = "Attract player concept modifier"
      }
      WaitOverConceptModifier: =
      {
        txt = "&"
        hint = "Player wait over concept modifier"
      }
      ArrivalConceptModifier: =
      {
        txt = "&"
        hint = "Arrival concept modifier"
      }
      PostArrivalConceptModifier: =
      {
        txt = "&"
        hint = "Post-arrival concepts modifier"
      }
      SuccessConceptModifier: =
      {
        txt = "&"
        hint = "Success concept modifier"
      }
      FailureConceptModifier: =
      {
        txt = "&"
        hint = "Failure concept modifier"
      }
      ComingBackConceptModifier: =
      {
        txt = "&"
        hint = "Coming Back concept modifier"
      }
      RetrieveConceptModifier: =
      {
        txt = "&"
        hint = "Retrieve concept modifier"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "No def success"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "No def failure"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Use goal facing"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Begin the leading behavior"
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Stop the leading behavior"
      }
      input#SetSuccess: =
      {
        txt = "&"
        hint = "Notify success of leading"
      }
      input#SetFailure: =
      {
        txt = "&"
        hint = "Notify failure of leading"
      }
      output#OnArrival: =
      {
        txt = "&"
        hint = "Fires when NPC reaches the lead point"
      }
      output#OnArrivalDone: =
      {
        txt = "&"
        hint = "Fires when NPC has played out any arrival speech"
      }
      output#OnSuccess: =
      {
        txt = "&"
        hint = "Fires when NPC achieves the goal"
      }
      output#OnFailure: =
      {
        txt = "&"
        hint = "Fires when NPC fails to achieves the goal"
      }
      output#OnDone: =
      {
        txt = "&"
        hint = "Fires when NPC completes behavior (any post-success or fail ac"
         "ting is complete)"
      }
    }
    ai_goal_lead:form =
    {
      t_LeadGoalBase = !
      SearchType: =
      {
        txt = "&"
        hint = "Search Type"
        typ = "C"
        items = "Entity Name"$0D"Classname"
        values = "0"$0D"1"
      }
    }
    ai_goal_lead_weapon:form =
    {
      t_LeadGoalBase = !
      WeaponName: =
      {
        txt = "&"
        hint = "Weapon"
        typ = "C"
        items = "Bugbait"$0D"SMG1"$0D"AR2"
        values = "weapon_bugbait"$0D"weapon_smg1"$0D"weapon_ar2"
      }
      MissingWeaponConceptModifier: =
      {
        txt = "&"
        hint = "Missing weapon concept modifier"
      }
      SearchType: =
      {
        txt = "&"
        hint = "Search Type"
        typ = "C"
        items = "Entity Name"$0D"Classname"
        values = "0"$0D"1"
      }
    }
    t_FollowGoal:incl =
    {
      t_Targetname = !
      actor: =
      {
        txt = "&"
        hint = "Actor(s) to affect"
      }
      goal: =
      {
        txt = "&"
        hint = "Target Entity"
      }
      SearchType: =
      {
        txt = "&"
        hint = "Search Type"
        typ = "C"
        items = "Entity Name"$0D"Classname"
        values = "0"$0D"1"
      }
      StartActive: =
      {
        txt = "&"
        hint = "Start Active"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      MaximumState: =
      {
        txt = "&"
        hint = "Maximum state"
        typ = "C"
        items = "Idle"$0D"Alert"$0D"Combat"
        values = "1"$0D"2"$0D"3"
      }
      Formation: =
      {
        txt = "&"
        hint = "Formation"
        typ = "C"
        items = "Close circle"$0D"Wide circle"$0D"Medium circle"$0D"Sidekick"$0D
         "Vortigaunt"
        values = "0"$0D"1"$0D"5"$0D"6"$0D"8"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Begin the follow behavior"
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Cease the follow behavior"
      }
    }
    ai_goal_follow:form =
    {
      t_FollowGoal = !
    }
    ai_goal_injured_follow:form =
    {
      t_FollowGoal = !
    }
    ai_battle_line:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = !
      t_Angles = !
      t_Parentname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Use parent's orientation"
      }
      actor: =
      {
        txt = "&"
        hint = "Actor(s) or squad to affect"
      }
      Active: =
      {
        txt = "&"
        hint = "Active"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Strict: =
      {
        txt = "&"
        hint = "Strict"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#Activate: =
      {
        txt = "&"
      }
      input#Activate: =
      {
        txt = "&"
      }
      Deactivate: =
      {
        txt = "&"
      }
    }
    ai_goal_standoff:form =
    {
      t_Targetname = !
      actor: =
      {
        txt = "&"
        hint = "Actor(s) to affect"
      }
      SearchType: =
      {
        txt = "&"
        hint = "Search Type"
        typ = "C"
        items = "Entity Name"$0D"Classname"
        values = "0"$0D"1"
      }
      StartActive: =
      {
        txt = "&"
        hint = "Start Active"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      HintGroupChangeReaction: =
      {
        txt = "&"
        hint = "Reaction to tactical change"
        typ = "C"
        items = "Move when ready (default AI)"$0D"Move when seek cover"$0D"Mov"
         "e immediately"
        values = "0"$0D"1"$0D"2"
      }
      Aggressiveness: =
      {
        txt = "&"
        hint = "Aggressiveness"
        typ = "C"
        items = "Very low"$0D"Low"$0D"Medium"$0D"High"$0D"Very High"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"
      }
      PlayerBattleline: =
      {
        txt = "&"
        hint = "Player battleline"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      StayAtCover: =
      {
        txt = "&"
        hint = "Stay at cover location"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      AbandonIfEnemyHides: =
      {
        txt = "&"
        hint = "Abandon if enemies hide"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Begin contesting position"
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Cease contesting position"
      }
      input#SetAggressiveness: =
      {
        txt = "&"
        hint = "Set aggressiveness"
      }
    }
    ai_goal_police:form =
    {
      t_Targetname = !
      t_Parentname = !
      t_Angles = !
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Knock-out target past crossing plane"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Do not leave post"
      }
      policeradius: =
      {
        txt = "&"
        hint = "Radius"
      }
      policetarget: =
      {
        txt = "&"
        hint = "Target"
      }
      input#EnableKnockOut: =
      {
        txt = "&"
        hint = "Tells the goal to make the active policing NPC knock out its t"
         "arget"
      }
      input#DisableKnockOut: =
      {
        txt = "&"
        hint = "Stop the active policing NPC from trying to knock out its targ"
         "et"
      }
      output#OnFirstWarning: =
      {
        txt = "&"
        hint = "Fires the first time a policing cop warns a target"
      }
      output#OnSecondWarning: =
      {
        txt = "&"
        hint = "Fires the second time a policing cop warns a target"
      }
      output#OnLastWarning: =
      {
        txt = "&"
        hint = "Fires when a policing cop warns a target for the last time"
      }
      output#OnSupressingTarget: =
      {
        txt = "&"
        hint = "Fires when a policing cop starts to suppress (ie. beat) a targ"
         "et"
      }
      output#OnKnockOut: =
      {
        txt = "&"
        hint = "Fires when a target has been knocked out"
      }
    }
    assault_rallypoint:form =
    {
      t_Targetname = !
      t_Parentname = !
      t_Angles = !
      assaultpoint: =
      {
        txt = "&"
        hint = "Assault Point"
      }
      assaultdelay: =
      {
        txt = "&"
        hint = "Assault Delay"
      }
      rallysequence: =
      {
        txt = "&"
        hint = "Rally Sequence"
      }
      priority: =
      {
        txt = "&"
        hint = "Priority"
      }
      forcecrouch: =
      {
        txt = "&"
        hint = "Force Crouch"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      urgent: =
      {
        txt = "&"
        hint = "Urgent"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      output#OnArrival: =
      {
        txt = "&"
        hint = "Fires when the NPC reaches this rally point"
      }
    }
    assault_assaultpoint:form =
    {
      t_Targetname = !
      t_Parentname = !
      t_Angles = !
      assaultgroup: =
      {
        txt = "&"
        hint = "Assault Hint Group"
      }
      nextassaultpoint: =
      {
        txt = "&"
        hint = "Next assault point (optional)"
      }
      assaulttimeout: =
      {
        txt = "&"
        hint = "Assault time out"
      }
      clearoncontact: =
      {
        txt = "&"
        hint = "Clear on contact with enemies"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      allowdiversion: =
      {
        txt = "&"
        hint = "Allow diversion"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      allowdiversionradius: =
      {
        txt = "&"
        hint = "Diversion Proximity"
      }
      nevertimeout: =
      {
        txt = "&"
        hint = "Never Timeout"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      strict: =
      {
        txt = "&"
        hint = "Strict?"
        typ = "C"
        items = "No, NPC may move from point to attack"$0D"Yes, NPC may not mo"
         "ve to attack"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Clear this point upon arrival, UNCONDITIONALLY"
      }
      forcecrouch: =
      {
        txt = "&"
        hint = "Force Crouch"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      urgent: =
      {
        txt = "&"
        hint = "Urgent"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      assaulttolerance: =
      {
        txt = "&"
        hint = "Attack Tolerance"
        typ = "C"
        items = "Tight (3ft)"$0D"Medium (6ft)"$0D"Large (10ft)"
        values = "36"$0D"72"$0D"120"
      }
      input#SetClearOnContact: =
      {
        txt = "&"
        hint = "Set the clear on contact flag. NPCs who spot enemies while run"
         "ning to the assault point, or while waiting at it, will immediately "
         "Clear it."
      }
      input#SetAllowDiversion: =
      {
        txt = "&"
        hint = "Set the allow diversion flag. NPCs who spot enemies whil runni"
         "ng to the assault point, or while waiting on it, will divert away (l"
         "eave Assault mode) to deal with the enemies. Upon losing enemies, th"
         "ey'll go back to Assault mode, and return to this assault point."
      }
      input#SetForceClear: =
      {
        txt = "&"
        hint = "Set the Force Clear flag. NPCs who are currently running to th"
         "e assault point will Clear it immediately. NPCs who acquire it in th"
         "e future will Clear it automatically."
      }
      output#OnArrival: =
      {
        txt = "&"
        hint = "Fires when the NPC reaches this assault point"
      }
      output#OnAssaultClear: =
      {
        txt = "&"
        hint = "Fires when this assault point is cleared of enemies"
      }
    }
    ai_goal_assault:form =
    {
      t_Targetname = !
      actor: =
      {
        txt = "&"
        hint = "Actor(s) to affect"
      }
      rallypoint: =
      {
        txt = "&"
        hint = "Rally Point Set"
      }
      SearchType: =
      {
        txt = "&"
        hint = "Search Type"
        typ = "C"
        items = "Entity Name"$0D"Classname"
        values = "0"$0D"1"
      }
      StartActive: =
      {
        txt = "&"
        hint = "Start Active"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      AssaultCue: =
      {
        txt = "&"
        hint = "Assault Cue"
        typ = "C"
        items = "Entity System Input"$0D"Gunfire"$0D"Don't wait for a cue."
        values = "1"$0D"2"$0D"3"
      }
      RallySelectMethod: =
      {
        txt = "&"
        hint = "Rally Point Selection Method"
        typ = "C"
        items = "Priority, Distance (default)"$0D"Random"
        values = "0"$0D"1"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Begin the assault behavior"
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Cease the assault behavior"
      }
      input#BeginAssault: =
      {
        txt = "&"
        hint = "Begin assault phase"
      }
    }
    t_BaseActBusy:incl =
    {
      t_Targetname = !
      actor: =
      {
        txt = "&"
        hint = "Actor(s) to affect"
      }
      StartActive: =
      {
        txt = "&"
        hint = "Start Active"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      SearchType: =
      {
        txt = "&"
        hint = "Search Type"
        typ = "C"
        items = "Entity Name"$0D"Classname"
        values = "0"$0D"1"
      }
      busysearchrange: =
      {
        txt = "&"
        hint = "Search Range for Busy Hints"
      }
      visibleonly: =
      {
        txt = "&"
        hint = "Visible Busy Hints Only"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Begin acting busy"
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Cease acting busy"
      }
      input#SetBusySearchRange: =
      {
        txt = "&"
        hint = "Update the busy search range for all actors."
      }
      input#ForceNPCToActBusy: =
      {
        txt = "&"
        hint = "Force an NPC to act busy. Takes parameters, separated by space"
         "s: <Targetname> <hint node targetname> <optional:teleport> <optional"
         ":$customactivityorsequence> <maximum time to actbusy>. If no hint no"
         "de targetname is specified, it'll search for a random one. If no max"
         " time is specified, it'll use the default. Specifying 0 as the max t"
         "ime will make the NPC act busy until disturbed. If the optional tele"
         "port parameter is specified, the NPC will teleport to the act busy p"
         "oint. A custom move animation can be specified by prepending $ to th"
         "e name of it. i.e. $ACT_RUN will make the NPC Run. Sequence names ca"
         "n be used instead of activities."
      }
      input#ForceThisNPCToActBusy: =
      {
        txt = "&"
        hint = "Force an NPC outputted from another entity to act busy. (only "
         "usable from an output that specifies an entity)"
      }
      input#ForceThisNPCToLeave: =
      {
        txt = "&"
        hint = "Force an NPC outputted from another entity to find a HINT_NPC_"
         "EXIT_POINT hintnode and vanish."
      }
      output#OnNPCStartedBusy: =
      {
        txt = "&"
        hint = "Fired when an NPC targeted by this goal starts an ActBusy anim"
         "ation."
      }
      output#OnNPCFinishedBusy: =
      {
        txt = "&"
        hint = "Fired when an NPC targeted by this goal finishes an ActBusy."
      }
      output#OnNPCLeft: =
      {
        txt = "&"
        hint = "Fired when an NPC target by this goal finishes a forced Leave."
      }
    }
    ai_goal_actbusy:form =
    {
      t_BaseActBusy = !
      seeentity: =
      {
        txt = "&"
        hint = "Sight Entity"
      }
      seeentitytimeout: =
      {
        txt = "&"
        hint = "Sight Entity Timeout"
      }
      sightmethod: =
      {
        txt = "&"
        hint = "Sight Enemy Method"
        typ = "C"
        items = "Default. LOS -and- Viewcone"$0D"LOS Only. Disregard Viewcone"
        values = "0"$0D"1"
      }
      type: =
      {
        txt = "&"
        hint = "Actbusy Type"
        typ = "C"
        items = "Default (Standard)"$0D"Combat"
        values = "0"$0D"1"
      }
      safezone: =
      {
        txt = "&"
        hint = "Combat Safe Zone"
      }
      allowteleport: =
      {
        txt = "&"
        hint = "Allow actor to teleport?"
        typ = "C"
        items = "No"$0D"Yes (Only for Combat Actbusy)"
        values = "0"$0D"1"
      }
      output#OnNPCLostSeeEntity: =
      {
        txt = "&"
        hint = "Fired when the NPC loses sight of the see entity (if one is sp"
         "ecified)."
      }
      output#OnNPCSeeEnemy: =
      {
        txt = "&"
        hint = "Fired when this NPC leaves his actbusy because of sighting an "
         "enemy."
      }
    }
    ai_goal_actbusy_queue:form =
    {
      t_BaseActBusy = !
      node_exit: =
      {
        txt = "&"
        hint = "Exit Node"
      }
      node01: =
      {
        txt = "&"
        hint = "Node 1"
      }
      node02: =
      {
        txt = "&"
        hint = "Node 2"
      }
      node03: =
      {
        txt = "&"
        hint = "Node 3"
      }
      node04: =
      {
        txt = "&"
        hint = "Node 4"
      }
      node05: =
      {
        txt = "&"
        hint = "Node 5"
      }
      node06: =
      {
        txt = "&"
        hint = "Node 6"
      }
      node07: =
      {
        txt = "&"
        hint = "Node 7"
      }
      node08: =
      {
        txt = "&"
        hint = "Node 8"
      }
      node09: =
      {
        txt = "&"
        hint = "Node 9"
      }
      node10: =
      {
        txt = "&"
        hint = "Node 10"
      }
      node11: =
      {
        txt = "&"
        hint = "Node 11"
      }
      node12: =
      {
        txt = "&"
        hint = "Node 12"
      }
      node13: =
      {
        txt = "&"
        hint = "Node 13"
      }
      node14: =
      {
        txt = "&"
        hint = "Node 14"
      }
      node15: =
      {
        txt = "&"
        hint = "Node 15"
      }
      node16: =
      {
        txt = "&"
        hint = "Node 16"
      }
      node17: =
      {
        txt = "&"
        hint = "Node 17"
      }
      node18: =
      {
        txt = "&"
        hint = "Node 18"
      }
      node19: =
      {
        txt = "&"
        hint = "Node 19"
      }
      node20: =
      {
        txt = "&"
        hint = "Node 20"
      }
      mustreachfront: =
      {
        txt = "&"
        hint = "Must Reach Front"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#PlayerStartedBlocking: =
      {
        txt = "&"
        hint = "Tell the queue manager that the player has started blocking a "
         "spot in the queue."
      }
      input#PlayerStoppedBlocking: =
      {
        txt = "&"
        hint = "Tell the queue manager that the player has stopped blocking a "
         "spot in the queue."
      }
      input#MoveQueueUp: =
      {
        txt = "&"
        hint = "Force the queue to move up, sending the front-most NPC out of "
         "the queue."
      }
      output#OnQueueMoved: =
      {
        txt = "&"
        hint = "Fired when the queue moves. Outputs the number of NPCs left in"
         " the queue."
      }
      output#OnNPCStartedLeavingQueue: =
      {
        txt = "&"
        hint = "Fired when the NPC at the head of the queue starts to leave. T"
         "he activator is the NPC, and the string is the name of the NPC."
      }
      output#OnNPCLeftQueue: =
      {
        txt = "&"
        hint = "Fired when the NPC at the head of the queue leaves. The activa"
         "tor is the NPC, and the string is the name of the NPC."
      }
    }
    ai_changetarget:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = !
      target: =
      {
        txt = "&"
        hint = "Target entity"
      }
      m_iszNewTarget: =
      {
        txt = "&"
        hint = "New Target"
      }
      input#Kill: =
      {
        txt = "&"
        hint = "Removes this entity from the world"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Changes the entities target"
      }
    }
    ai_npc_eventresponsesystem:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = !
      input#TriggerResponseEvent: =
      {
        txt = "&"
        hint = "Fire an NPC Response Event. The parameter should match the res"
         "ponse rules concept that any nearby friendly NPCs will try to speak."
      }
      input#ForceTriggerResponseEvent: =
      {
        txt = "&"
        hint = "Fire an NPC Response Event, and force the first available NPC "
         "to speak the response (breaking them out of any scene they're in). T"
         "he parameter should match the response rules concept that any nearby"
         " friendly NPCs will try to speak."
      }
      input#ForceTriggerResponseEventNoCancel: =
      {
        txt = "&"
        hint = "Fire an NPC Response Event, and force the first available NPC "
         "to speak the response (but don't break them out of any scene they're"
         " in). The parameter should match the response rules concept that any"
         " nearby friendly NPCs will try to speak."
      }
    }
    ai_changehintgroup:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_Targetname = !
      SearchType: =
      {
        txt = "&"
        hint = "Search Type"
        typ = "C"
        items = "Entity Name"$0D"Classname"$0D"Old Hint Group"
        values = "0"$0D"1"$0D"2"
      }
      SearchName: =
      {
        txt = "&"
        hint = "Name to search for"
      }
      NewHintGroup: =
      {
        txt = "&"
        hint = "New Hint Group"
      }
      Radius: =
      {
        txt = "&"
        hint = "Search Radius"
      }
      hintlimiting: =
      {
        txt = "&"
        hint = "Hint Limit Nav"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#Kill: =
      {
        txt = "&"
        hint = "Removes this entity from the world"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Change the Hint Group"
      }
    }
    ai_script_conditions:form =
    {
      t_Targetname = !
      Actor: =
      {
        txt = "&"
        hint = "Actor"
      }
      StartDisabled: =
      {
        txt = "&"
        hint = "Start Disabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      MinimumState: =
      {
        txt = "&"
        hint = "Minimum state"
        typ = "C"
        items = "Idle"$0D"Alert"$0D"Combat"
        values = "1"$0D"2"$0D"3"
      }
      MaximumState: =
      {
        txt = "&"
        hint = "Maximum state"
        typ = "C"
        items = "Idle"$0D"Alert"$0D"Combat"
        values = "1"$0D"2"$0D"3"
      }
      ScriptStatus: =
      {
        txt = "&"
        hint = "Actor is running a script?"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      RequiredTime: =
      {
        txt = "&"
        hint = "Required Time"
      }
      MinTimeout: =
      {
        txt = "&"
        hint = "Minimum time out"
      }
      MaxTimeout: =
      {
        txt = "&"
        hint = "Maximum time out"
      }
      ActorSeePlayer: =
      {
        txt = "&"
        hint = "Actor Sees Player"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      PlayerActorProximity: =
      {
        txt = "&"
        hint = "Player distance"
      }
      PlayerActorFOV: =
      {
        txt = "&"
        hint = "Player FOV for Actor "
      }
      PlayerActorFOVTrueCone: =
      {
        txt = "&"
        hint = "Play FOV to Actor is a true view cone"
        typ = "C"
        items = "No - Tall pie slice"$0D"Yes - True view cone"
        values = "0"$0D"1"
      }
      PlayerActorLOS: =
      {
        txt = "&"
        hint = "Player has LOS to Actor"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      target: =
      {
        txt = "&"
        hint = "Target (Optional)"
      }
      ActorSeeTarget: =
      {
        txt = "&"
        hint = "Actor Sees Target"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      ActorTargetProximity: =
      {
        txt = "&"
        hint = "Target distance"
      }
      PlayerTargetProximity: =
      {
        txt = "&"
        hint = "Player distance from Target"
      }
      PlayerTargetFOV: =
      {
        txt = "&"
        hint = "Player FOV for Target"
      }
      PlayerTargetFOVTrueCone: =
      {
        txt = "&"
        hint = "Play FOV to Target is a true view cone"
        typ = "C"
        items = "No - Tall pie slice"$0D"Yes - True view cone"
        values = "0"$0D"1"
      }
      PlayerTargetLOS: =
      {
        txt = "&"
        hint = "Player has LOS to Target"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      PlayerBlockingActor: =
      {
        txt = "&"
        hint = "Player blocking Actor"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      ActorInPVS: =
      {
        txt = "&"
        hint = "Actor in Player's PVS"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      ActorInVehicle: =
      {
        txt = "&"
        hint = "Actor in a vehicle"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      PlayerInVehicle: =
      {
        txt = "&"
        hint = "Player in a vehicle"
        typ = "C"
        items = "No"$0D"Yes"$0D"Don't care"
        values = "0"$0D"1"$0D"2"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Fire outputs with the Actor as Activator"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable this entity"
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable this entity"
      }
      output#OnConditionsSatisfied: =
      {
        txt = "&"
        hint = "Fires when AI conditions satisfied"
      }
      output#OnConditionsTimeout: =
      {
        txt = "&"
        hint = "Fires when AI conditions timed out"
      }
      output#NoValidActor: =
      {
        txt = "&"
        hint = "Fires if/when there are no matching actors in the map."
      }
    }
    scripted_sequence:form =
    {
      t_BaseScripted = !
      t_Angles = !
      t_DXLevelChoice = !
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Repeatable"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Leave Corpse"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Start on Spawn"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "No Interruptions"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Override AI"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Don't Teleport NPC On End"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Loop in Post Idle"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Priority Script"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "Allow actor death"
      }
      onplayerdeath: =
      {
        txt = "&"
        hint = "On player death"
        typ = "C"
        items = "Do Nothing"$0D"Cancel Script and return to AI"
        values = "0"$0D"1"
      }
    }
    aiscripted_schedule:form =
    {
      t_Targetname = !
      m_iszEntity: =
      {
        txt = "&"
        hint = "Target NPC"
      }
      m_flRadius: =
      {
        txt = "&"
        hint = "Search Radius (0=everywhere)"
      }
      graball: =
      {
        txt = "&"
        hint = "All in radius"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Repeatable"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1024"
        cap = "Search Cyclically"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2048"
        cap = "Don't Complain"
      }
      forcestate: =
      {
        txt = "&"
        hint = "AI state to set"
        typ = "C"
        items = "<None>"$0D"Set state to IDLE"$0D"Set state to ALERT"$0D"Set s"
         "tate to COMBAT"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
      schedule: =
      {
        txt = "&"
        hint = "Schedule to run"
        typ = "C"
        items = "<None>"$0D"Walk to Goal Entity"$0D"Run to Goal Entity"$0D"Set"
         " enemy to Goal Entity"$0D"Walk Goal Path"$0D"Run Goal Path"$0D"Set e"
         "nemy to Goal Entity AND Run to Goal Entity"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"
      }
      interruptability: =
      {
        txt = "&"
        hint = "Interruptability"
        typ = "C"
        items = "General"$0D"Damage or Death"$0D"Death"
        values = "0"$0D"1"$0D"2"
      }
      goalent: =
      {
        txt = "&"
        hint = "Goal entity"
      }
      input#StartSchedule: =
      {
        txt = "&"
        hint = "Starts the scripted schedule. This will first locate an NPC th"
         "at matches the given target, then tell the NPC to run the specified "
         "schedule."
      }
    }
    ai_citizen_response_system:form =
    {
      t_Targetname = !
      input#ResponseVitalNPC: =
      {
        txt = "&"
        hint = "Fire the VitalNPC Died response."
      }
    }
    func_healthcharger:form =
    {
      t_EnableDisable = !
      t_Parentname = !
      t_Origin = !
      t_Global = !
      _minlight: =
      {
        txt = "&"
        hint = "Minimum light level"
      }
      output#OutRemainingHealth: =
      {
        txt = "&"
        hint = "Remaining Health."
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fired when the player +USEs the charger."
      }
    }
    func_recharge:form =
    {
      t_Targetname = !
      t_Parentname = !
      t_Origin = !
      _minlight: =
      {
        txt = "&"
        hint = "Minimum light level"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8192"
        cap = "Citadel recharger"
      }
      input#Recharge: =
      {
        txt = "&"
        hint = "Recharge to full"
      }
      input#SetCharge: =
      {
        txt = "&"
        hint = "This sets the remaining charge in the charger to whatever valu"
         "e you specify"
      }
      output#OutRemainingCharge: =
      {
        txt = "&"
        hint = "Remaining Charge."
      }
      output#OnHalfEmpty: =
      {
        txt = "&"
        hint = "Half-Empty"
      }
      output#OnEmpty: =
      {
        txt = "&"
        hint = "Empty"
      }
      output#OnFull: =
      {
        txt = "&"
        hint = "Recharged to full."
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fired when the player +USEs the charger."
      }
    }
    func_vehicleclip:form =
    {
      t_Parentname = !
      t_Targetname = !
      t_Global = !
      input#Kill: =
      {
        txt = "&"
        hint = "Removes this entity from the world"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable collisions with vehicles"
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable collisions with vehicles"
      }
    }
    func_lookdoor:form =
    {
      t_func_movelinear = !
      spawnflags: =
      {
        txt = "&"
        typ = "X8192"
        cap = "LookDoor Threshold"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16384"
        cap = "LookDoor Invert"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32768"
        cap = "LookDoor From Open"
      }
      ProximityDistance: =
      {
        txt = "&"
        hint = "Proximity Distance"
      }
      ProximityOffset: =
      {
        txt = "&"
        hint = "Proximity Offset"
      }
      FieldOfView: =
      {
        txt = "&"
        hint = "FieldOfView"
      }
      input#InvertOn: =
      {
        txt = "&"
        hint = "InvertOn - when set behavior of door is inverted."
      }
      input#InvertOff: =
      {
        txt = "&"
        hint = "InvertOff - when set behavior of door is normal."
      }
    }
    trigger_waterydeath:form =
    {
      t_Trigger = !
    }
    env_global:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      t_EnvGlobal = !
      globalstate: =
      {
        txt = "&"
        hint = "Global State to Set"
        typ = "C"
        items = "Gordon pre-criminal"$0D"Antlions are player allies"$0D"Suit s"
         "print function not yet enabled"$0D"Super phys gun is enabled"$0D"Fri"
         "endly encounter sequence (lower weapons, etc.)"$0D"Gordon is invulne"
         "rable"$0D"Don't spawn seagulls on the jeep"$0D"Episode 2: Alyx injur"
         "ed"$0D"Episodic: Alyx darkness mode"$0D"Ep2 Counter: Hunters to run "
         "over before they dodge"
        values = "gordon_precriminal"$0D"antlion_allied"$0D"suit_no_sprint"$0D
         "super_phys_gun"$0D"friendly_encounter"$0D"gordon_invulnerable"$0D"no"
         "_seagulls_on_jeep"$0D"ep2_alyx_injured"$0D"ep_alyx_darknessmode"$0D"h"
         "unters_to_run_over"
      }
    }
    t_BaseTank:incl =
    {
      t_Targetname = !
      t_Parentname = !
      t_Origin = !
      t_Angles = !
      t_RenderFields = !
      t_Global = !
      t_Shadow = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Active"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Only Direct"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Controllable"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Damage Kick"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1024"
        cap = "NPC Controllable"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2048"
        cap = "NPC Set Controller"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "Allow friendlies to hit player"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32768"
        cap = "Non-solid."
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X131072"
        cap = "Perfect accuracy every 3rd shot at player"
      }
      control_volume: =
      {
        txt = "&"
        hint = "Control Volume"
      }
      master: =
      {
        txt = "&"
        hint = "(Team) Master"
      }
      yawrate: =
      {
        txt = "&"
        hint = "Yaw rate"
      }
      yawrange: =
      {
        txt = "&"
        hint = "Yaw range"
      }
      yawtolerance: =
      {
        txt = "&"
        hint = "Yaw tolerance"
      }
      pitchrate: =
      {
        txt = "&"
        hint = "Pitch rate"
      }
      pitchrange: =
      {
        txt = "&"
        hint = "Pitch range"
      }
      pitchtolerance: =
      {
        txt = "&"
        hint = "Pitch tolerance"
      }
      barrel: =
      {
        txt = "&"
        hint = "Barrel Length"
      }
      barrely: =
      {
        txt = "&"
        hint = "Barrel Horizontal"
      }
      barrelz: =
      {
        txt = "&"
        hint = "Barrel Vertical"
      }
      spritesmoke: =
      {
        txt = "&"
        hint = "Smoke Sprite"
      }
      spriteflash: =
      {
        txt = "&"
        hint = "Flash Sprite"
      }
      spritescale: =
      {
        txt = "&"
        hint = "Sprite scale"
      }
      rotatestartsound: =
      {
        txt = "&"
        hint = "Rotate Start Sound"
      }
      rotatesound: =
      {
        txt = "&"
        hint = "Rotate Loop Sound"
      }
      rotatestopsound: =
      {
        txt = "&"
        hint = "Rotate Stop Sound"
      }
      firerate: =
      {
        txt = "&"
        hint = "Rate of Fire"
      }
      bullet_damage: =
      {
        txt = "&"
        hint = "Damage Per Bullet"
      }
      bullet_damage_vs_player: =
      {
        txt = "&"
        hint = "Damage Per Bullet Vs Player"
      }
      persistence: =
      {
        txt = "&"
        hint = "Firing persistence"
      }
      persistence2: =
      {
        txt = "&"
        hint = "Firing persistence2"
      }
      firespread: =
      {
        txt = "&"
        hint = "Bullet accuracy"
        typ = "C"
        items = "Perfect Shot"$0D"Small cone"$0D"Medium cone"$0D"Large cone"$0D
         "Extra-large cone"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"
      }
      minRange: =
      {
        txt = "&"
        hint = "Minmum target range"
      }
      maxRange: =
      {
        txt = "&"
        hint = "Maximum target range"
      }
      _minlight: =
      {
        txt = "&"
        hint = "Minimum light level"
      }
      gun_base_attach: =
      {
        txt = "&"
        hint = "Gun Base Attachment"
      }
      gun_barrel_attach: =
      {
        txt = "&"
        hint = "Gun Barrel Attachment"
      }
      gun_yaw_pose_param: =
      {
        txt = "&"
        hint = "Gun Yaw Pose Param"
      }
      gun_yaw_pose_center: =
      {
        txt = "&"
        hint = "Gun Yaw Pose Center"
      }
      gun_pitch_pose_param: =
      {
        txt = "&"
        hint = "Gun Pitch Pose Param"
      }
      gun_pitch_pose_center: =
      {
        txt = "&"
        hint = "Gun Pitch Pose Center"
      }
      ammo_count: =
      {
        txt = "&"
        hint = "Ammunition Count"
      }
      LeadTarget: =
      {
        txt = "&"
        hint = "Lead Target"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      npc_man_point: =
      {
        txt = "&"
        hint = "NPC Man Point"
      }
      playergraceperiod: =
      {
        txt = "&"
        hint = "Post-NPC Attack Grace Period"
      }
      ignoregraceupto: =
      {
        txt = "&"
        hint = "Ignore Grace Upto"
      }
      playerlocktimebeforefire: =
      {
        txt = "&"
        hint = "Player Lock Time"
      }
      effecthandling: =
      {
        txt = "&"
        hint = "Effect Handling"
        typ = "C"
        items = "Use Individual Settings."$0D"AR2"$0D"Combine Cannon"
        values = "0"$0D"1"$0D"2"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Turn the tank on"
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Turn the tank off (go dormant)"
      }
      input#SetFireRate: =
      {
        txt = "&"
        hint = "How fast to fire (0 = don't fire)"
      }
      input#SetDamage: =
      {
        txt = "&"
        hint = "Set the Damage Per Bullet"
      }
      input#SetTargetPosition: =
      {
        txt = "&"
        hint = "World position that I should aim at"
      }
      input#SetTargetDir: =
      {
        txt = "&"
        hint = "Direction to aim at."
      }
      input#SetTargetEntityName: =
      {
        txt = "&"
        hint = "Name of entity I should follow/attack"
      }
      input#SetTargetEntity: =
      {
        txt = "&"
        hint = "Entity I should follow/attack (output from other entity only)"
      }
      input#ClearTargetEntity: =
      {
        txt = "&"
        hint = "Clear the entity I should be attacking."
      }
      input#FindNPCToManTank: =
      {
        txt = "&"
        hint = "Find a nearby NPC to man this func_tank."
      }
      input#StartFindingNPCs: =
      {
        txt = "&"
        hint = "Start searching for NPCs to man this func_tank."
      }
      input#StopFindingNPCs: =
      {
        txt = "&"
        hint = "Stop searching for NPCs to man this func_tank."
      }
      input#ForceNPCOff: =
      {
        txt = "&"
        hint = "Force the NPC manning this func_tank (if any) to leave."
      }
      input#SetMaxRange: =
      {
        txt = "&"
        hint = "Set the max range of the func_tank."
      }
      output#OnFire: =
      {
        txt = "&"
        hint = "Fires when the tank fires its bullets"
      }
      output#OnAquireTarget: =
      {
        txt = "&"
        hint = "Fires when target is newly in range and can be shot"
      }
      output#OnLoseTarget: =
      {
        txt = "&"
        hint = "Fires when when target goes out of range"
      }
      output#OnAmmoDepleted: =
      {
        txt = "&"
        hint = "Fires when tank runs out of ammo"
      }
      output#OnGotController: =
      {
        txt = "&"
        hint = "Fires when an NPC starts to control this tank. Players do NOT "
         "fire this input."
      }
      output#OnLostController: =
      {
        txt = "&"
        hint = "Fires when the NPC controller of the tank stops controlling it"
         ". Players do NOT fire this input."
      }
      output#OnGotPlayerController: =
      {
        txt = "&"
        hint = "Fires when a Player starts to control this tank. NPCs do NOT f"
         "ire this input."
      }
      output#OnLostPlayerController: =
      {
        txt = "&"
        hint = "Fires when the Player controller of the tank stops controlling"
         " it. NPCs do NOT fire this input."
      }
      output#OnReadyToFire: =
      {
        txt = "&"
        hint = "Fires once when the tank is done waiting to fire between round"
         "s"
      }
    }
    func_tank:form =
    {
      t_BaseTank = !
      ammotype: =
      {
        txt = "&"
        hint = "Ammo type"
        typ = "C"
        items = "None"$0D"Pistol"$0D"SMG1"$0D"AR2"$0D"Combine Heavy Cannon"
        values = $0D"Pistol"$0D"SMG1"$0D"AR2"$0D"CombineHeavyCannon"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8192"
        cap = "Ignore range when making viewcone checks"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Aiming Assistance (Player Only)"
      }
    }
    func_tankpulselaser:form =
    {
      t_BaseTank = !
      PulseSpeed: =
      {
        txt = "&"
        hint = "Pulse Speed"
      }
      PulseColor: =
      {
        txt = "&"
        hint = "Pulse Color"
      }
      PulseWidth: =
      {
        txt = "&"
        hint = "Pulse Width"
      }
      PulseLife: =
      {
        txt = "&"
        hint = "Pulse Life"
      }
      PulseLag: =
      {
        txt = "&"
        hint = "Pulse Lag"
      }
      PulseFireSound: =
      {
        txt = "&"
        hint = "Pulse Fire Sound"
      }
    }
    func_tanklaser:form =
    {
      t_BaseTank = !
      laserentity: =
      {
        txt = "&"
        hint = "env_laser Entity"
      }
    }
    func_tankrocket:form =
    {
      t_BaseTank = !
      rocketspeed: =
      {
        txt = "&"
        hint = "Projectile speed"
      }
    }
    func_tankairboatgun:form =
    {
      t_BaseTank = !
      airboat_gun_model: =
      {
        txt = "&"
        hint = "Name of a prop_dynamic which is the airboat gun model"
      }
    }
    func_tankapcrocket:form =
    {
      t_BaseTank = !
      rocketspeed: =
      {
        txt = "&"
        hint = "Projectile speed"
      }
      burstcount: =
      {
        txt = "&"
        hint = "Burst shot count"
      }
      input#DeathVolley: =
      {
        txt = "&"
        hint = "Fire a burst of rockets cause we're dying."
      }
    }
    func_tankmortar:form =
    {
      t_BaseTank = !
      iMagnitude: =
      {
        txt = "&"
        hint = "Explosion Magnitude"
      }
      firedelay: =
      {
        txt = "&"
        hint = "Shell travel time"
      }
      firestartsound: =
      {
        txt = "&"
        hint = "Firing start sound"
      }
      fireendsound: =
      {
        txt = "&"
        hint = "Firing end sound"
      }
      incomingsound: =
      {
        txt = "&"
        hint = "Incoming Shell Sound"
      }
      warningtime: =
      {
        txt = "&"
        hint = "Incoming warning time"
      }
      firevariance: =
      {
        txt = "&"
        hint = "Fire time variance"
      }
      input#FireAtWill: =
      {
        txt = "&"
        hint = "Allow tank to fire next shot as soon as ready."
      }
    }
    func_tankphyscannister:form =
    {
      t_BaseTank = !
      barrel_volume: =
      {
        txt = "&"
        hint = "Barrel Volume"
      }
    }
    func_tank_combine_cannon:form =
    {
      t_BaseTank = !
      ammotype: =
      {
        txt = "&"
        hint = "Ammo type"
        typ = "C"
        items = "None"$0D"Pistol"$0D"SMG1"$0D"AR2"$0D"Combine Heavy Cannon"
        values = $0D"Pistol"$0D"SMG1"$0D"AR2"$0D"CombineHeavyCannon"
      }
      input#DisableHarrass: =
      {
        txt = "&"
        hint = "Disable the cannon tracking an unseen player"
      }
      input#EnableHarrass: =
      {
        txt = "&"
        hint = "Allow the cannon to track and pester a player who is hiding (D"
         "EFAULT)"
      }
      output#OnShotAtPlayer: =
      {
        txt = "&"
        hint = "Fired everytime the cannon shoots at the player"
      }
    }
    t_Item:incl =
    {
      t_Targetname = !
      t_Angles = !
      t_Shadow = !
      output#OnPlayerTouch: =
      {
        txt = "&"
        hint = "Fires when the player touches this object"
      }
      output#OnCacheInteraction: =
      {
        txt = "&"
        hint = "This output fires when the player proves they have 'found' thi"
         "s item. Fires on: Player Touch (whether or not player actually acqui"
         "res the item), Picked up by +USE, Picked up by Physcannon, Punted by"
         " Physcannon."
      }
      fademindist: =
      {
        txt = "&"
        hint = "Start Fade Dist/Pixels"
      }
      fademaxdist: =
      {
        txt = "&"
        hint = "End Fade Dist/Pixels"
      }
      fadescale: =
      {
        txt = "&"
        hint = "Fade Scale"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start Constrained"
      }
    }
    item_dynamic_resupply:form =
    {
      t_Item = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Use Master's values"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Is Master"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Fallback to Health Vial"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Alternate master"
      }
      DesiredHealth: =
      {
        txt = "&"
        hint = "Desired Health Ratio"
      }
      DesiredArmor: =
      {
        txt = "&"
        hint = "Desired Armor Ratio"
      }
      DesiredAmmoPistol: =
      {
        txt = "&"
        hint = "Desired Pistol Ammo Ratio"
      }
      DesiredAmmoSMG1: =
      {
        txt = "&"
        hint = "Desired SMG1 Ammo Ratio"
      }
      DesiredAmmoSMG1_Grenade: =
      {
        txt = "&"
        hint = "Desired SMG1 Grenade Ammo Ratio"
      }
      DesiredAmmoAR2: =
      {
        txt = "&"
        hint = "Desired AR2 Ammo Ratio"
      }
      DesiredAmmoBuckshot: =
      {
        txt = "&"
        hint = "Desired Shotgun Ammo Ratio"
      }
      DesiredAmmoRPG_Round: =
      {
        txt = "&"
        hint = "Desired RPG Ammo Ratio"
      }
      DesiredAmmoGrenade: =
      {
        txt = "&"
        hint = "Desired Grenade Ammo Ratio"
      }
      DesiredAmmo357: =
      {
        txt = "&"
        hint = "Desired 357 Ammo Ratio"
      }
      DesiredAmmoCrossbow: =
      {
        txt = "&"
        hint = "Desired Crossbow Ammo Ratio"
      }
      DesiredAmmoAR2_AltFire: =
      {
        txt = "&"
        hint = "Desired AR2 Alt-fire Ammo Ratio"
      }
      input#CalculateType: =
      {
        txt = "&"
        hint = "Force the dynamic resupply to calculate which item it should s"
         "pawn."
      }
      input#BecomeMaster: =
      {
        txt = "&"
        hint = "Make this resupply the master resupply. All other resupplies s"
         "et to Use Master's Values will now use this resupply's values."
      }
    }
    item_ammo_pistol:form =
    {
      t_Item = !
    }
    item_ammo_pistol_large:form =
    {
      t_Item = !
    }
    item_ammo_smg1:form =
    {
      t_Item = !
    }
    item_ammo_smg1_large:form =
    {
      t_Item = !
    }
    item_ammo_ar2:form =
    {
      t_Item = !
    }
    item_ammo_ar2_large:form =
    {
      t_Item = !
    }
    item_ammo_357:form =
    {
      t_Item = !
    }
    item_ammo_357_large:form =
    {
      t_Item = !
    }
    item_ammo_crossbow:form =
    {
      t_Item = !
    }
    item_box_buckshot:form =
    {
      t_Item = !
    }
    item_rpg_round:form =
    {
      t_Item = !
    }
    item_ammo_smg1_grenade:form =
    {
      t_Item = !
    }
    item_battery:form =
    {
      t_Item = !
    }
    item_healthkit:form =
    {
      t_Item = !
    }
    item_healthvial:form =
    {
      t_Item = !
    }
    item_ammo_ar2_altfire:form =
    {
      t_Item = !
    }
    item_suit:form =
    {
      t_Item = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Short Logon"
      }
    }
    item_ammo_crate:form =
    {
      t_Targetname = !
      t_Angles = !
      t_BaseFadeProp = !
      AmmoType: =
      {
        txt = "&"
        hint = "Ammo Type"
        typ = "C"
        items = "Pistol"$0D"SMG1"$0D"AR2"$0D"RPG Rounds"$0D"Buckshot"$0D"Grena"
         "des"$0D"357"$0D"XBowBolt"$0D"AR2 Alt-Fire Round"$0D"SMG Alt-Fire gre"
         "nade"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"
      }
      input#Kill: =
      {
        txt = "&"
        hint = "Remove the ammo crate"
      }
      output#OnUsed: =
      {
        txt = "&"
        hint = "Fires when +used by the player."
      }
    }
    item_item_crate:form =
    {
      t_BasePropPhysics = !
      t_Targetname = !
      t_Angles = !
      t_DamageFilter = !
      t_BaseFadeProp = !
      CrateType: =
      {
        txt = "&"
        hint = "Crate Contains"
        typ = "C"
        items = "Contains specified item"
        values = "0"
      }
      CrateAppearance: =
      {
        txt = "&"
        hint = "Crate Appearance"
        typ = "C"
        items = "Default Appearance"$0D"Radar Beacon Crate"
        values = "0"$0D"1"
      }
      ItemClass: =
      {
        txt = "&"
        hint = "Item Type"
      }
      ItemCount: =
      {
        txt = "&"
        hint = "Item Count"
      }
      SpecificResupply: =
      {
        txt = "&"
        hint = "Specific resupply"
      }
      input#Kill: =
      {
        txt = "&"
        hint = "Remove the item crate"
      }
      input#Break: =
      {
        txt = "&"
        hint = "Breaks the breakable."
      }
      input#SetHealth: =
      {
        txt = "&"
        hint = "Sets a new value for health. If the breakable's health reaches"
         " zero it will break."
      }
      input#AddHealth: =
      {
        txt = "&"
        hint = "Adds health to the breakable. If the breakable's health reache"
         "s zero it will break."
      }
      input#RemoveHealth: =
      {
        txt = "&"
        hint = "Removes health from the breakable. If the breakable's health r"
         "eaches zero it will break."
      }
      output#OnBreak: =
      {
        txt = "&"
        hint = "Fires when broken."
      }
      output#OnHealthChanged: =
      {
        txt = "&"
        hint = "Fires when the health of this breakable changes, passing the n"
         "ew value of health as a percentage of max health, from [0..1]."
      }
      output#OnCacheInteraction: =
      {
        txt = "&"
        hint = "This output fires when the player proves they have 'found' thi"
         "s crate. Fires on: Picked up by +USE, Picked up by Physcannon, Punte"
         "d by Physcannon, Broken."
      }
    }
    item_healthcharger:form =
    {
      t_Targetname = !
      t_Angles = !
      t_BaseFadeProp = !
      _minlight: =
      {
        txt = "&"
        hint = "Minimum light level"
      }
      output#OutRemainingHealth: =
      {
        txt = "&"
        hint = "Remaining Health."
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fired when the player +USEs the charger."
      }
    }
    item_suitcharger:form =
    {
      t_Targetname = !
      t_Angles = !
      t_BaseFadeProp = !
      _minlight: =
      {
        txt = "&"
        hint = "Minimum light level"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8192"
        cap = "Citadel recharger"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16384"
        cap = "Kleiner's recharger"
      }
      input#Recharge: =
      {
        txt = "&"
        hint = "Recharge to full"
      }
      output#OutRemainingCharge: =
      {
        txt = "&"
        hint = "Remaining Charge."
      }
      output#OnHalfEmpty: =
      {
        txt = "&"
        hint = "Half-Empty"
      }
      output#OnEmpty: =
      {
        txt = "&"
        hint = "Empty"
      }
      output#OnFull: =
      {
        txt = "&"
        hint = "Recharged to full."
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fired when the player +USEs the charger."
      }
    }
    t_Weapon:incl =
    {
      t_Targetname = !
      t_Angles = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start constrained"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Deny player pickup (reserve for NPC)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Not puntable by Gravity Gun"
      }
      output#OnPlayerUse: =
      {
        txt = "&"
        hint = "Fires when the player +uses this weapon"
      }
      output#OnPlayerPickup: =
      {
        txt = "&"
        hint = "Fires when the player picks up this weapon"
      }
      output#OnNPCPickup: =
      {
        txt = "&"
        hint = "Fires when an NPC picks up this weapon"
      }
      output#OnCacheInteraction: =
      {
        txt = "&"
        hint = "Fires when the player 'proves' they've found this weapon. Fire"
         "s on: Player Touch, +USE pickup, Physcannon pickup, Physcannon punt."
      }
      fademindist: =
      {
        txt = "&"
        hint = "Start Fade Dist/Pixels"
      }
      fademaxdist: =
      {
        txt = "&"
        hint = "End Fade Dist/Pixels"
      }
      fadescale: =
      {
        txt = "&"
        hint = "Fade Scale"
      }
    }
    weapon_crowbar:form =
    {
      t_Weapon = !
    }
    weapon_stunstick:form =
    {
      t_Weapon = !
    }
    weapon_pistol:form =
    {
      t_Weapon = !
    }
    weapon_ar2:form =
    {
      t_Weapon = !
    }
    weapon_rpg:form =
    {
      t_Weapon = !
    }
    weapon_smg1:form =
    {
      t_Weapon = !
    }
    weapon_357:form =
    {
      t_Weapon = !
    }
    weapon_crossbow:form =
    {
      t_Weapon = !
    }
    weapon_shotgun:form =
    {
      t_Weapon = !
    }
    weapon_frag:form =
    {
      t_Weapon = !
    }
    weapon_physcannon:form =
    {
      t_Weapon = !
    }
    weapon_bugbait:form =
    {
      t_Weapon = !
    }
    weapon_alyxgun:form =
    {
      t_Weapon = !
    }
    weapon_annabelle:form =
    {
      t_Weapon = !
    }
    trigger_rpgfire:form =
    {
      t_Trigger = !
      output#OnTrigger: =
      {
        txt = "&"
        hint = "Fires while the trigger is activated"
      }
    }
    trigger_vphysics_motion:form =
    {
      t_Trigger = !
      spawnflags: =
      {
        txt = "&"
        typ = "X4096"
        cap = "Can move (through hierarchical attachment)"
      }
      StartDisabled: =
      {
        txt = "&"
        hint = "Start Disabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      filtername: =
      {
        txt = "&"
        hint = "Filter Name"
      }
      SetGravityScale: =
      {
        txt = "&"
        hint = "Scale gravity of objects in the field."
      }
      input#SetGravityScale: =
      {
        txt = "&"
        hint = "Scale gravity of objects in the field."
      }
      SetAdditionalAirDensity: =
      {
        txt = "&"
        hint = "Additional air density for drag"
      }
      input#SetAdditionalAirDensity: =
      {
        txt = "&"
        hint = "Additional air density for drag"
      }
      SetVelocityLimit: =
      {
        txt = "&"
        hint = "Max velocity in field (0 disables)"
      }
      input#SetVelocityLimit: =
      {
        txt = "&"
        hint = "Max velocity in field."
      }
      SetVelocityLimitDelta: =
      {
        txt = "&"
        hint = "Max amount to reduce velocity per second when it exceeds the v"
         "elocity limit (0 disables)"
      }
      input#SetVelocityLimitDelta: =
      {
        txt = "&"
        hint = "Max amount to reduce velocity per second"
      }
      input#SetVelocityLimitTime: =
      {
        txt = "&"
        hint = "Accepts two arguments: the first is the new velocity limit, th"
         "e second is the time it takes to ramp to that value"
      }
      SetVelocityScale: =
      {
        txt = "&"
        hint = "Velocity scale/drag"
      }
      input#SetVelocityScale: =
      {
        txt = "&"
        hint = "Velocity scale/drag"
      }
      SetAngVelocityLimit: =
      {
        txt = "&"
        hint = "Max angular velocity in field (degrees/s, 0 disables)"
      }
      input#SetAngVelocityLimit: =
      {
        txt = "&"
        hint = "Max angular velocity in field."
      }
      SetAngVelocityScale: =
      {
        txt = "&"
        hint = "Angular Velocity scale/drag"
      }
      input#SetAngVelocityScale: =
      {
        txt = "&"
        hint = "Angular Velocity scale/drag"
      }
      SetLinearForce: =
      {
        txt = "&"
        hint = "Linear force (0 disables)"
      }
      input#SetLinearForce: =
      {
        txt = "&"
        hint = "Linear force (0 disables)"
      }
      SetLinearForceAngles: =
      {
        txt = "&"
        hint = "Direction of linear force (Pitch Yaw Roll (Y Z X))"
      }
      ParticleTrailMaterial: =
      {
        txt = "&"
        hint = "Particle Trail Material"
      }
      ParticleTrailLifetime: =
      {
        txt = "&"
        hint = "Particle Trail Lifetime"
      }
      ParticleTrailStartSize: =
      {
        txt = "&"
        hint = "Particle Trail Starting Sprite Size"
      }
      ParticleTrailEndSize: =
      {
        txt = "&"
        hint = "Particle Trail Ending Sprite Size"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable the trigger."
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable the trigger."
      }
      input#Toggle: =
      {
        txt = "&"
        hint = "Toggle enable/disable."
      }
    }
    point_bugbait:form =
    {
      t_Targetname = !
      Enabled: =
      {
        txt = "&"
        hint = "Start Enabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Do not call antlions to position"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Don't activate on thrown bugbait splashes"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Don't activate on squeezed bugbait"
      }
      radius: =
      {
        txt = "&"
        hint = "Sensor Radius"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable the sensor."
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable the sensor."
      }
      input#Toggle: =
      {
        txt = "&"
        hint = "Toggle the sensor."
      }
      output#OnBaited: =
      {
        txt = "&"
        hint = "Fires when bugbait lands within a radius of the sensor"
      }
    }
    weapon_brickbat:form =
    {
      t_Weapon = !
      BrickbatType: =
      {
        txt = "&"
        hint = "BrickbatType"
        typ = "C"
        items = "Rock"$0D"Beer Bottle"$0D"Headcrab"$0D"Cremator Head"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
    }
    path_corner:form =
    {
      t_Targetname = !
      t_Angles = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Wait for retrigger"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Teleport to THIS path_corner"
      }
      target: =
      {
        txt = "&"
        hint = "Next stop target"
      }
      wait: =
      {
        txt = "&"
        hint = "Wait here (secs)"
      }
      speed: =
      {
        txt = "&"
        hint = "New Train Speed"
      }
      yaw_speed: =
      {
        txt = "&"
        hint = "New Train rot. Speed"
      }
      input#SetNextPathCorner: =
      {
        txt = "&"
        hint = "Sets next pathcorner"
      }
      output#OnPass: =
      {
        txt = "&"
        hint = "Fires when a path follower passes this point"
      }
    }
    path_corner_crash:form =
    {
      t_Targetname = !
      target: =
      {
        txt = "&"
        hint = "Next stop target"
      }
    }
    player_loadsaved:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      t_Targetname = !
      duration: =
      {
        txt = "&"
        hint = "Fade Duration (seconds)"
      }
      holdtime: =
      {
        txt = "&"
        hint = "Hold Fade (seconds)"
      }
      renderamt: =
      {
        txt = "&"
        hint = "Fade Alpha"
      }
      rendercolor: =
      {
        txt = "&"
        hint = "Fade Color (R G B)"
      }
      loadtime: =
      {
        txt = "&"
        hint = "Reload delay"
      }
      input#Reload: =
      {
        txt = "&"
        hint = "Ends this game and reloads"
      }
    }
    player_weaponstrip:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      t_Targetname = !
      input#Strip: =
      {
        txt = "&"
        hint = "Strip player's weapons"
      }
      input#StripWeaponsAndSuit: =
      {
        txt = "&"
        hint = "Strip player's weapons and his suit"
      }
    }
    player_speedmod:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      t_Targetname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Suppress weapons"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Suppress HUD"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Suppress jump"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Suppress duck"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Suppress use"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Suppress sprint"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Suppress attack"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Suppress zoom"
      }
      input#ModifySpeed: =
      {
        txt = "&"
        hint = "Modifies player speed by X ammount."
      }
    }
    logic_choreographed_scene:form =
    {
      t_Targetname = !
      SceneFile: =
      {
        txt = "&"
        hint = "Scene file"
      }
      target1: =
      {
        txt = "&"
        hint = "Target 1"
      }
      target2: =
      {
        txt = "&"
        hint = "Target 2"
      }
      target3: =
      {
        txt = "&"
        hint = "Target 3"
      }
      target4: =
      {
        txt = "&"
        hint = "Target 4"
      }
      target5: =
      {
        txt = "&"
        hint = "Target 5"
      }
      target6: =
      {
        txt = "&"
        hint = "Target 6"
      }
      target7: =
      {
        txt = "&"
        hint = "Target 7"
      }
      target8: =
      {
        txt = "&"
        hint = "Target 8"
      }
      busyactor: =
      {
        txt = "&"
        hint = "If an Actor is talking..."
        typ = "C"
        items = "Start immediately"$0D"Wait for actor to finish"$0D"Interrupt "
         "at next interrupt event"$0D"Cancel at next interrupt event"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
      input#Start: =
      {
        txt = "&"
        hint = "Starts playback of the scene file"
      }
      input#Pause: =
      {
        txt = "&"
        hint = "Pauses playback of the scene file"
      }
      input#Resume: =
      {
        txt = "&"
        hint = "Resumes playback of the scene if it has been paused"
      }
      input#Cancel: =
      {
        txt = "&"
        hint = "Cancels playback of the scene"
      }
      input#CancelAtNextInterrupt: =
      {
        txt = "&"
        hint = "Cancels playback of the scene at the next interrupt event in t"
         "he scene."
      }
      input#PitchShift: =
      {
        txt = "&"
        hint = "Multiplies the the pitch"
      }
      input#InterjectResponse: =
      {
        txt = "&"
        hint = "Finds an actor who can respond to the specified concept string"
         " while the scene continues playing"
      }
      input#StopWaitingForActor: =
      {
        txt = "&"
        hint = "Stop waiting on an actor to stop talking."
      }
      output#OnStart: =
      {
        txt = "&"
        hint = "The scene has started"
      }
      output#OnCompletion: =
      {
        txt = "&"
        hint = "The scene has completed"
      }
      output#OnCanceled: =
      {
        txt = "&"
        hint = "The scene has been canceled"
      }
      output#OnTrigger1: =
      {
        txt = "&"
        hint = "Scene trigger 1"
      }
      output#OnTrigger2: =
      {
        txt = "&"
        hint = "Scene trigger 2"
      }
      output#OnTrigger3: =
      {
        txt = "&"
        hint = "Scene trigger 3"
      }
      output#OnTrigger4: =
      {
        txt = "&"
        hint = "Scene trigger 4"
      }
      output#OnTrigger5: =
      {
        txt = "&"
        hint = "Scene trigger 5"
      }
      output#OnTrigger6: =
      {
        txt = "&"
        hint = "Scene trigger 6"
      }
      output#OnTrigger7: =
      {
        txt = "&"
        hint = "Scene trigger 7"
      }
      output#OnTrigger8: =
      {
        txt = "&"
        hint = "Scene trigger 8"
      }
      output#OnTrigger9: =
      {
        txt = "&"
        hint = "Scene trigger 9"
      }
      output#OnTrigger10: =
      {
        txt = "&"
        hint = "Scene trigger 10"
      }
      output#OnTrigger11: =
      {
        txt = "&"
        hint = "Scene trigger 11"
      }
      output#OnTrigger12: =
      {
        txt = "&"
        hint = "Scene trigger 12"
      }
      output#OnTrigger13: =
      {
        txt = "&"
        hint = "Scene trigger 13"
      }
      output#OnTrigger14: =
      {
        txt = "&"
        hint = "Scene trigger 14"
      }
      output#OnTrigger15: =
      {
        txt = "&"
        hint = "Scene trigger 15"
      }
      output#OnTrigger16: =
      {
        txt = "&"
        hint = "Scene trigger 16"
      }
      onplayerdeath: =
      {
        txt = "&"
        hint = "On player death"
        typ = "C"
        items = "Do Nothing"$0D"Cancel Script and return to AI"
        values = "0"$0D"1"
      }
    }
    logic_scene_list_manager:form =
    {
      t_Targetname = !
      scene0: =
      {
        txt = "&"
        hint = "Scene 1"
      }
      scene1: =
      {
        txt = "&"
        hint = "Scene 2"
      }
      scene2: =
      {
        txt = "&"
        hint = "Scene 3"
      }
      scene3: =
      {
        txt = "&"
        hint = "Scene 4"
      }
      scene4: =
      {
        txt = "&"
        hint = "Scene 5"
      }
      scene5: =
      {
        txt = "&"
        hint = "Scene 6"
      }
      scene6: =
      {
        txt = "&"
        hint = "Scene 7"
      }
      scene7: =
      {
        txt = "&"
        hint = "Scene 8"
      }
      scene8: =
      {
        txt = "&"
        hint = "Scene 9"
      }
      scene9: =
      {
        txt = "&"
        hint = "Scene 10"
      }
      scene10: =
      {
        txt = "&"
        hint = "Scene 11"
      }
      scene11: =
      {
        txt = "&"
        hint = "Scene 12"
      }
      scene12: =
      {
        txt = "&"
        hint = "Scene 13"
      }
      scene13: =
      {
        txt = "&"
        hint = "Scene 14"
      }
      scene14: =
      {
        txt = "&"
        hint = "Scene 15"
      }
      scene15: =
      {
        txt = "&"
        hint = "Scene 16"
      }
      input#Shutdown: =
      {
        txt = "&"
        hint = "Remove the manager and all scenes referenced by it (and all sc"
         "enes referenced by logic_scene_list_manager's embedded in this one)."
      }
    }
    ai_sound:form =
    {
      t_Targetname = !
      t_Parentname = !
      input#EmitAISound: =
      {
        txt = "&"
        hint = "Make the sound."
      }
      volume: =
      {
        txt = "&"
        hint = "Volume"
      }
      duration: =
      {
        txt = "&"
        hint = "Duration"
      }
      soundtype: =
      {
        txt = "&"
        hint = "Sound Type"
        typ = "C"
        items = "Select one"$0D"Combat"$0D"World"$0D"Danger"$0D"Bullet Impact"$0D
         "Carcass"$0D"Meat"$0D"Garbage"$0D"Thumper"$0D"Move Away - Most NPCs w"
         "ill clear the radius of this sound when heard."$0D"Readiness - Low"$0D
         "Readiness - Medium"$0D"Readiness - High"
        values = "0"$0D"1"$0D"2"$0D"8"$0D"16"$0D"32"$0D"64"$0D"128"$0D"256"$0D
         "4096"$0D"16384"$0D"32768"$0D"65536"
      }
      soundcontext: =
      {
        txt = "&"
        hint = "Additional sound context (optional)"
        typ = "C"
        items = "Select one"$0D"Only Combine hear"$0D"Combine cannot hear"
        values = "0"$0D"8388608"$0D"67108864"
      }
      locationproxy: =
      {
        txt = "&"
        hint = "Location Proxy"
      }
    }
    env_rotorwash:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = !
      t_Parentname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Ignore solid"
      }
      input#DoEffect: =
      {
        txt = "&"
        hint = "Make a rotor puff"
      }
    }
    combine_mine:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = !
      t_Parentname = !
      bounce: =
      {
        txt = "&"
        hint = "Bounce"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      LockSilently: =
      {
        txt = "&"
        hint = "Lock Silently"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      StartDisarmed: =
      {
        txt = "&"
        hint = "Start Disarmed"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      Modification: =
      {
        txt = "&"
        hint = "Citizen modified"
        typ = "C"
        items = "Normal"$0D"Cavern"
        values = "0"$0D"1"
      }
      input#Disarm: =
      {
        txt = "&"
        hint = "Disarm this mine (open hooks and shut off) if not placed by pl"
         "ayer."
      }
      output#OnPulledUp: =
      {
        txt = "&"
        hint = "Fires when this mine is uprooted with physgun"
      }
    }
    env_ar2explosion:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = !
      t_Parentname = !
      input#Explode: =
      {
        txt = "&"
        hint = "Make the explosion effect."
      }
      material: =
      {
        txt = "&"
        hint = "Particle Material"
        typ = "ET"
        Cap = "texture..."
      }
    }
    env_starfield:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = !
      input#TurnOn: =
      {
        txt = "&"
        hint = "Turn on"
      }
      input#TurnOff: =
      {
        txt = "&"
        hint = "Turn off"
      }
      input#SetDensity: =
      {
        txt = "&"
        hint = "Set the density of the starfield. It's a multiplier, so 1 is t"
         "he default."
      }
    }
    env_flare:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = !
      t_Parentname = !
      t_Angles = !
      scale: =
      {
        txt = "&"
        hint = "Scale"
      }
      duration: =
      {
        txt = "&"
        hint = "Duration"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "No DLight"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "No Smoke"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Infinite"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Start off"
      }
      input#Start: =
      {
        txt = "&"
        hint = "Starts the flare burning. The flare will burn for the specifie"
         "d number of seconds (0 = infinite)."
      }
      input#Die: =
      {
        txt = "&"
        hint = "Causes the flare to fade out over the specified number of seco"
         "nds, and then die (0 = die instantly)."
      }
      input#Launch: =
      {
        txt = "&"
        hint = "Launch the flare forward with the specified speed."
      }
    }
    env_muzzleflash:form =
    {
      t_Targetname = !
      t_Parentname = !
      t_Angles = !
      parentattachment: =
      {
        txt = "&"
        hint = "Parent Attachment"
      }
      scale: =
      {
        txt = "&"
        hint = "Scale"
      }
      input#Fire: =
      {
        txt = "&"
        hint = "Fires the effect once."
      }
    }
    env_terrainmorph:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Targetname = !
      t_Parentname = !
      startradius: =
      {
        txt = "&"
        hint = "Start Radius"
      }
      goalradius: =
      {
        txt = "&"
        hint = "Goal Radius"
      }
      duration: =
      {
        txt = "&"
        hint = "Duration"
      }
      fraction: =
      {
        txt = "&"
        hint = "Displacement Fraction"
      }
      input#BeginMorph: =
      {
        txt = "&"
        hint = "Begin Morph"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Instant"
      }
    }
    logic_achievement:form =
    {
      t_Targetname = !
      t_EnableDisable = !
      AchievementEvent: =
      {
        txt = "&"
        hint = "Achievement Event"
        typ = "C"
        items = "[HL2] Hit the trashcan cop with the can."$0D"[HL2] Put the ca"
         "n in the trash."$0D"[HL2] Escape the apartment block raid."$0D"[HL2]"
         " Break the mini-teleporter in Kleiner's lab."$0D"[HL2] Get the crowb"
         "ar."$0D"[HL2] Get the Airboat"$0D"[HL2] Get the airboat's mounted gu"
         "n."$0D"[HL2] Discover the hidden singing vortigaunt cave in chapter "
         "Water Hazard."$0D"[HL2] Destroy the hunter-chopper in Half-Life 2."$0D
         "[HL2] Find the HEV Suit Charger faceplate in Eli's scrapyard."$0D"[H"
         "L2] Get the Gravity Gun in Black Mesa East"$0D"[HL2] Make a basket i"
         "n Eli's scrapyard."$0D"[HL2] Beat Ravenholm Gravgun only. (Start)."$0D
         "[HL2] Beat Ravenholm Gravgun only. (End)."$0D"[HL2] Escort Gregori s"
         "afely through the church cemetery."$0D"[HL2] Kill 3 enemies using th"
         "e crane."$0D"[HL2] Pin the soldier to the billboard with the crossbo"
         "w in chapter Highway 17."$0D"[HL2] Defend Little Odessa from the gun"
         "ship attack."$0D"[HL2] Cross the antlion beach in chapter Sandtraps "
         "without touching the sand."$0D"[HL2] Get inside Nova Prospekt"$0D"[H"
         "L2] Survive the second turret standoff in the prison."$0D"[HL2] Gain"
         " command of a squad of rebels in the uprising"$0D"[HL2] Get through "
         "the toxic tunnel under City 17 in Half-Life 2."$0D"[HL2] Survive the"
         " Generator Plaza standoff in chapter Anticitizen One."$0D"[HL2] Kill"
         " all of the snipers in City 17."$0D"[HL2] Shut down the supression d"
         "evice by disabling its generators."$0D"[HL2] Survive the rooftop str"
         "ider battle in the ruins of City 17."$0D"[HL2] Destroy the Citadel's"
         " reactor core (Beat Game)."$0D"[HL2] G-Man: trainstation_05 on Klein"
         "er's Monitor"$0D"[HL2] G-Man: canals_01 on TV in vort train car"$0D"["
         "HL2] G-Man: canals_06 at the red barn"$0D"[HL2] G-Man: canals_06 on "
         "giant outdoor monitor"$0D"[HL2] G-Man: canals_12 on catwalk"$0D"[HL2"
         "] G-Man: canals_13 to the left of the dam"$0D"[HL2] G-Man: town_05 a"
         "t the end of the tracks"$0D"[HL2] G-Man: coast_03 odessa meeting"$0D
         "[HL2] G-Man: prison_02 control room monitor"$0D"[HL2] G-Man: c17_02 "
         "on TV in the destroyed foyer"$0D"[HL2] Lamda: Secret entrance to Kle"
         "iner's lab in trainstation_05"$0D"[HL2] Lamda: canals_01 building by"
         " tracks"$0D"[HL2] Lamda: canals_01 vent crawl"$0D"[HL2] Lamda: canal"
         "s_01a tunnel"$0D"[HL2] Lamda: canals_02 below grate in sewer corrido"
         "r"$0D"[HL2] Lamda: canals_03 under steam pipe"$0D"[HL2] Lamda: canal"
         "s_05 on second level of curved room"$0D"[HL2] Lamda: canals_05 befor"
         "e shanty town"$0D"[HL2] Lamda: canals_06 on overhead metal walkway i"
         "n tunnel"$0D"[HL2] Lamda: canals_06 at the red barn"$0D"DON'T USE ME"
         " [HL2] Lamda: canals_06 outside the pipe at floating ramp puzzle"$0D
         "[HL2] Lamda: canals_06 outside exploded tanker (zombie ambush)"$0D"["
         "HL2] Lamda: canals_07 in the wall below apcs"$0D"[HL2] Lamda: canals"
         "_08 in counterweighted basket"$0D"[HL2] Lamda: canals_08 behind rail"
         "way bridge piling"$0D"[HL2] Lamda: canals_09 on wooden platforms in "
         "tunnel"$0D"[HL2] Lamda: canals_10 up banked side of canals passage"$0D
         "[HL2] Lamda: canals_10 in wall opening after canals passage"$0D"[HL2"
         "] Lamda: canals_12 right side of split channel"$0D"[HL2] Lamda: eli_"
         "01 Black Mesa East dock"$0D"[HL2] Lamda: town_01 through ductwork be"
         "hind generators"$0D"[HL2] Lamda: town_01 behind fence in car-crusher"
         " arena"$0D"[HL2] Lamda: town_01a in attic opposite map exit"$0D"[HL2"
         "] Lamda: town_05 tunnel exit from ravenholm mine"$0D"[HL2] Lamda: co"
         "ast_01 shack after the buggy jump"$0D"[HL2] Lamda: coast_03 poison h"
         "eadcrab shack"$0D"[HL2] Lamda: coast_04 broken down van after the gu"
         "nship"$0D"[HL2] Lamda: coast_05 suicide citizen's gas tank cache"$0D
         "[HL2] Lamda: coast_07 fenced off area outside of town"$0D"[HL2] Lamd"
         "a: coast_09 above the bathroom in the battery puzzle building"$0D"[H"
         "L2] Lamda: coast_11 elevated shack after the board bridge"$0D"[HL2] "
         "Lamda: prison_02 in the boarded up area of the gman sighting"$0D"[HL"
         "2] Lamda: prison_03 in the prison cell"$0D"[HL2] Lamda: prison_05 in"
         " the laundry utility room"$0D"[HL2] Lamda: prison_06 on top of the s"
         "oda machine"$0D"[HL2] Lamda: c17_02 next to first Combine wall"$0D"["
         "HL2] Lambda: c17_04 inside shack before metrocop holdout"$0D"[HL2] L"
         "amda: c17_05 behind fence before end of map"$0D"[HL2] Lamda: c17_06a"
         " at start of freeway tunnel"$0D"[HL2] Lamda: c17_06b before second d"
         "rawbridge"$0D"[HL2] Lamda: c17_06b behind fence before end of map"$0D
         "[HL2] Lamda: c17_08 lowest catwalk at sewer entrance"$0D"[HL2] Lamda"
         ": c17_08 wall cubby next to poison zombie"$0D"[HL2] Lamda: c17_08 en"
         "d of pipe hop tunnel by poison zombie"$0D"[HL2] Lamda: c17_08 side o"
         "f building next to hallway leading to level exit"$0D"[HL2] Lamda: c1"
         "7_12b at map exit"$0D"[HL2] Lamda: c17_13 white van in underground g"
         "arage"$0D"[EP1] Reach the bottom of the main elevator shaft."$0D"[EP"
         "1] Contain the citadel core. (start)"$0D"[EP1] Contain the citadel c"
         "ore. (end)"$0D"[EP1] Contain the citadel core."$0D"[EP1] Contain the"
         " citadel core with no stalker kills"$0D"[EP1] Survive long enough to"
         " get on the elevator in the parking garage."$0D"[EP1] Destroy the gu"
         "nship in the hospital attic."$0D"[EP1] Don't let any citizens die wh"
         "en escorting them to the escape train (start)."$0D"[EP1] Don't let a"
         "ny citizens die when escorting them to the escape train (end)."$0D"["
         "EP1] Beat EP1 without picking up any health. (start)"$0D"[EP1] Beat "
         "EP1 without picking up any health. (end)"$0D"[EP1] Began EP1 (for tr"
         "acking One Free Bullet)"$0D"[EP1] Beat EP1 (for tracking One Free Bu"
         "llet)"$0D"[EP2] Hold off the antlion invasion inside the mine shaft"$0D
         "[EP2] Defeat both antlion guards outside the White Forest"$0D"[EP2] "
         "Survive the Hunter ambush at the radio tower."$0D"[EP2] Start of the"
         " chopper arena battle."$0D"[EP2] End of the chopper arena battle."$0D
         "[EP2] Destroy the Combine Cannon in the junkyard."$0D"[EP2] Beat DOG"
         " in the race to the White Forest."$0D"[EP2] Unlock the Rocket Launch"
         "er lambda cache in chapter Under The Radar."$0D"[EP2] Survive the in"
         "vasion at White Forest Inn"$0D"[EP2] Send <some object from chapter "
         "1> into space."$0D"[EP2] Secure the launch doors on missile silo 2."$0D
         "[EP2] Save the missile silo from the Combine offensive."$0D"[EP2] Sa"
         "ve the missile silo without losing any buildings."$0D"[EP2] Found a "
         "radar cache in chapter Under The Radar."$0D"[EP2] Radar Cache: 09 fi"
         "rst van cache"$0D"[EP2] Radar Cache: 09 rpg cache"$0D"[EP2] Radar Ca"
         "che: 09 shack floor board cache"$0D"[EP2] Radar Cache: 10 cave cache"
         $0D"[EP2] Radar Cache: 10 hanging crate cache"$0D"[EP2] Web Cache: ep"
         "2_outland_01a underwater cache"$0D"[EP2] Web Cache: ep2_outland_03 g"
         "rim pinata cache"$0D"[EP2] Web Cache: ep2_outland_03 first arena exi"
         "t tunnel wall cache"$0D"[EP2] Web Cache: ep2_outland_03 second arena"
         " exit tunnel ceiling cache"$0D"[EP2] Web Cache: ep2_outland_03 zombi"
         "ne grenade trap cache"$0D"[EP2] Web Cache: ep2_outland_04 gear cave "
         "entry wall cache"$0D"[EP2] Web Cache: ep2_outland_04 gear cave rockf"
         "all ceiling cache"$0D"[EP2] Web Cache: ep2_outland_04 gear cave barn"
         "acle ceiling cache"$0D"[EP2] Web Cache: ep2_outland_04 gear cave poi"
         "son crab wall cache"$0D"[PORTAL] Acquire the fully powered Aperture "
         "Science Handheld Portal Device."$0D"[PORTAL] Do whatever it takes to"
         " survive."$0D"[PORTAL] Make the correct party escort submission posi"
         "tion decision."$0D"[PORTAL] Complete Portal."
        values = "ACHIEVEMENT_EVENT_HL2_HIT_CANCOP_WITHCAN"$0D"ACHIEVEMENT_EVE"
         "NT_HL2_PUT_CANINTRASH"$0D"ACHIEVEMENT_EVENT_HL2_ESCAPE_APARTMENTRAID"
         $0D"ACHIEVEMENT_EVENT_HL2_BREAK_MINITELEPORTER"$0D"ACHIEVEMENT_EVENT_"
         "HL2_GET_CROWBAR"$0D"ACHIEVEMENT_EVENT_HL2_GET_AIRBOAT"$0D"ACHIEVEMEN"
         "T_EVENT_HL2_GET_AIRBOATGUN"$0D"ACHIEVEMENT_EVENT_HL2_FIND_VORTIGAUNT"
         "CAVE"$0D"ACHIEVEMENT_EVENT_HL2_KILL_CHOPPER"$0D"ACHIEVEMENT_EVENT_HL"
         "2_FIND_HEVFACEPLATE"$0D"ACHIEVEMENT_EVENT_HL2_GET_GRAVITYGUN"$0D"ACH"
         "IEVEMENT_EVENT_HL2_MAKEABASKET"$0D"ACHIEVEMENT_EVENT_HL2_BEAT_RAVENH"
         "OLM_NOWEAPONS_START"$0D"ACHIEVEMENT_EVENT_HL2_BEAT_RAVENHOLM_NOWEAPO"
         "NS_END"$0D"ACHIEVEMENT_EVENT_HL2_BEAT_CEMETERY"$0D"ACHIEVEMENT_EVENT"
         "_HL2_KILL_ENEMIES_WITHCRANE"$0D"ACHIEVEMENT_EVENT_HL2_PIN_SOLDIER_TO"
         "BILLBOARD"$0D"ACHIEVEMENT_EVENT_HL2_KILL_ODESSAGUNSHIP"$0D"ACHIEVEME"
         "NT_EVENT_HL2_BEAT_DONTTOUCHSAND"$0D"ACHIEVEMENT_EVENT_HL2_ENTER_NOVA"
         "PROSPEKT"$0D"ACHIEVEMENT_EVENT_HL2_BEAT_TURRETSTANDOFF2"$0D"ACHIEVEM"
         "ENT_EVENT_HL2_FOLLOWFREEMAN"$0D"ACHIEVEMENT_EVENT_HL2_BEAT_TOXICTUNN"
         "EL"$0D"ACHIEVEMENT_EVENT_HL2_BEAT_PLAZASTANDOFF"$0D"ACHIEVEMENT_EVEN"
         "T_HL2_KILL_ALLC1709SNIPERS"$0D"ACHIEVEMENT_EVENT_HL2_BEAT_SUPRESSION"
         "DEVICE"$0D"ACHIEVEMENT_EVENT_HL2_BEAT_C1713STRIDERSTANDOFF"$0D"ACHIE"
         "VEMENT_EVENT_HL2_BEAT_GAME"$0D"ACHIEVEMENT_EVENT_HL2_GMAN_KLEINERSLA"
         "B"$0D"ACHIEVEMENT_EVENT_HL2_GMAN_TRAINCAR"$0D"ACHIEVEMENT_EVENT_HL2_"
         "GMAN_REDBARN"$0D"ACHIEVEMENT_EVENT_HL2_GMAN_OUTDOORMONITOR"$0D"ACHIE"
         "VEMENT_EVENT_HL2_GMAN_CATWALK"$0D"ACHIEVEMENT_EVENT_HL2_GMAN_DAM"$0D
         "ACHIEVEMENT_EVENT_HL2_GMAN_TRAINTRACKS"$0D"ACHIEVEMENT_EVENT_HL2_GMA"
         "N_ODESSA"$0D"ACHIEVEMENT_EVENT_HL2_GMAN_PRISONMONITOR"$0D"ACHIEVEMEN"
         "T_EVENT_HL2_GMAN_FOYERTV"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_KLEINE"
         "RSLAB"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CANALSSTATION"$0D"ACHIEVE"
         "MENT_EVENT_HL2_LAMDACACHE_VENTCRAWL"$0D"ACHIEVEMENT_EVENT_HL2_LAMDAC"
         "ACHE_CANALSTUNNEL"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SEWERGRATE"$0D
         "ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STEAMPIPE"$0D"ACHIEVEMENT_EVENT_HL2"
         "_LAMDACACHE_CURVEDROOM"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SHANTYTO"
         "WN"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_TUNNELLADDER"$0D"ACHIEVEMENT"
         "_EVENT_HL2_LAMDACACHE_REDBARN"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_F"
         "LOATINGRAMP"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_ZOMBIEAMBUSH"$0D"AC"
         "HIEVEMENT_EVENT_HL2_LAMDACACHE_BELOWAPCS"$0D"ACHIEVEMENT_EVENT_HL2_L"
         "AMDACACHE_COUNTERWEIGHT"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_RAILWAY"
         "BRIDGE"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_TUNNELPLATFORMS"$0D"ACHI"
         "EVEMENT_EVENT_HL2_LAMDACACHE_BANKEDCANAL"$0D"ACHIEVEMENT_EVENT_HL2_L"
         "AMDACACHE_CANALWALL"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CHANNELSPLI"
         "T"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_BMEDOCK"$0D"ACHIEVEMENT_EVENT"
         "_HL2_LAMDACACHE_GENERATORS"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CARC"
         "RUSHERARENA"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_RAVENHOLMATTIC"$0D"A"
         "CHIEVEMENT_EVENT_HL2_LAMDACACHE_MINETUNNELEXIT"$0D"ACHIEVEMENT_EVENT"
         "_HL2_LAMDACACHE_COASTSHACK"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_POIS"
         "ONSHACK"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_GUNSHIPVAN"$0D"ACHIEVEM"
         "ENT_EVENT_HL2_LAMDACACHE_SUICIDECITIZEN"$0D"ACHIEVEMENT_EVENT_HL2_LA"
         "MDACACHE_RAILROADSHACK"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_COASTABO"
         "VEBATTERY"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SANDSHACK"$0D"ACHIEVE"
         "MENT_EVENT_HL2_LAMDACACHE_GMANCACHE"$0D"ACHIEVEMENT_EVENT_HL2_LAMDAC"
         "ACHE_CELLCACHE"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_POISONLAUNDRY"$0D
         "ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SODAMACHINE"$0D"ACHIEVEMENT_EVENT_H"
         "L2_LAMDACACHE_STREETWARDOGWALL"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_"
         "STREETWARSHACK"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STREETWARFENCE"$0D
         "ACHIEVEMENT_EVENT_HL2_LAMDACACHE_FREEWAYTUNNEL"$0D"ACHIEVEMENT_EVENT"
         "_HL2_LAMDACACHE_DRAWBRIDGE"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_PLAZ"
         "AFENCE"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SEWERSCATWALKS"$0D"ACHIE"
         "VEMENT_EVENT_HL2_LAMDACACHE_POISONZOMBIEALCOVE"$0D"ACHIEVEMENT_EVENT"
         "_HL2_LAMDACACHE_PIPEHOPTUNNEL"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_E"
         "XITCATWALK"$0D"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_ENDOFC1712B"$0D"ACHI"
         "EVEMENT_EVENT_HL2_LAMDACACHE_WHITEVAN"$0D"ACHIEVEMENT_EVENT_EP1_BEAT"
         "_MAINELEVATOR"$0D"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_START"$0D"A"
         "CHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_END"$0D"ACHIEVEMENT_EVENT_EP1_"
         "BEAT_CITADELCORE"$0D"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_NOSTALKE"
         "RKILLS"$0D"ACHIEVEMENT_EVENT_EP1_BEAT_GARAGEELEVATORSTANDOFF"$0D"ACH"
         "IEVEMENT_EVENT_EP1_BEAT_HOSPITALATTICGUNSHIP"$0D"ACHIEVEMENT_EVENT_E"
         "P1_BEAT_CITIZENESCORT_NOCITIZENDEATHS_START"$0D"ACHIEVEMENT_EVENT_EP"
         "1_BEAT_CITIZENESCORT_NOCITIZENDEATHS_END"$0D"ACHIEVEMENT_EVENT_EP1_B"
         "EAT_GAME_NOHEALTHPICKUPS_START"$0D"ACHIEVEMENT_EVENT_EP1_BEAT_GAME_N"
         "OHEALTHPICKUPS_END"$0D"ACHIEVEMENT_EVENT_EP1_START_GAME"$0D"ACHIEVEM"
         "ENT_EVENT_EP1_BEAT_GAME"$0D"ACHIEVEMENT_EVENT_EP2_BEAT_ANTLIONINVASI"
         "ON"$0D"ACHIEVEMENT_EVENT_EP2_BEAT_ANTLIONGUARDS"$0D"ACHIEVEMENT_EVEN"
         "T_EP2_BEAT_HUNTERAMBUSH"$0D"ACHIEVEMENT_EVENT_EP2_KILL_CHOPPER_NOMIS"
         "SES_START"$0D"ACHIEVEMENT_EVENT_EP2_KILL_CHOPPER_NOMISSES_END"$0D"AC"
         "HIEVEMENT_EVENT_EP2_KILL_COMBINECANNON"$0D"ACHIEVEMENT_EVENT_EP2_BEA"
         "T_RACEWITHDOG"$0D"ACHIEVEMENT_EVENT_EP2_BEAT_ROCKETCACHEPUZZLE"$0D"A"
         "CHIEVEMENT_EVENT_EP2_BEAT_WHITEFORESTINN"$0D"ACHIEVEMENT_EVENT_EP2_P"
         "UT_ITEMINROCKET"$0D"ACHIEVEMENT_EVENT_EP2_BEAT_MISSILESILO2"$0D"ACHI"
         "EVEMENT_EVENT_EP2_BEAT_GAME"$0D"ACHIEVEMENT_EVENT_EP2_BEAT_OUTLAND12"
         "_NOBUILDINGSDESTROYED"$0D"ACHIEVEMENT_EVENT_EP2_FIND_RADAR_CACHE"$0D
         "ACHIEVEMENT_EVENT_EP2_RADARCACHE_VAN"$0D"ACHIEVEMENT_EVENT_EP2_RADAR"
         "CACHE_RPG"$0D"ACHIEVEMENT_EVENT_EP2_RADARCACHE_SHACK"$0D"ACHIEVEMENT"
         "_EVENT_EP2_RADARCACHE_CAVE"$0D"ACHIEVEMENT_EVENT_EP2_RADARCACHE_HANG"
         "ING"$0D"ACHIEVEMENT_EVENT_EP2_WEBCACHE_01"$0D"ACHIEVEMENT_EVENT_EP2_"
         "WEBCACHE_02"$0D"ACHIEVEMENT_EVENT_EP2_WEBCACHE_03"$0D"ACHIEVEMENT_EV"
         "ENT_EP2_WEBCACHE_04"$0D"ACHIEVEMENT_EVENT_EP2_WEBCACHE_05"$0D"ACHIEV"
         "EMENT_EVENT_EP2_WEBCACHE_06"$0D"ACHIEVEMENT_EVENT_EP2_WEBCACHE_07"$0D
         "ACHIEVEMENT_EVENT_EP2_WEBCACHE_08"$0D"ACHIEVEMENT_EVENT_EP2_WEBCACHE"
         "_09"$0D"ACHIEVEMENT_EVENT_PORTAL_GET_PORTALGUNS"$0D"ACHIEVEMENT_EVEN"
         "T_PORTAL_KILL_COMPANIONCUBE"$0D"ACHIEVEMENT_EVENT_PORTAL_ESCAPE_TEST"
         "CHAMBERS"$0D"ACHIEVEMENT_EVENT_PORTAL_BEAT_GAME"
      }
      input#Toggle: =
      {
        txt = "&"
        hint = "Toggle the relay between enabled and disabled."
      }
      input#FireEvent: =
      {
        txt = "&"
        hint = "Tells the achievement system the specifed event has occured."
      }
      output#OnFired: =
      {
        txt = "&"
        hint = "When the event fires, this fires."
      }
    }
    point_camera:form =
    {
      t_Parentname = !
      t_Angles = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Start Off"
      }
      targetname: =
      {
        txt = "&"
        hint = "Name"
      }
      FOV: =
      {
        txt = "&"
        hint = "FOV"
      }
      UseScreenAspectRatio: =
      {
        txt = "&"
        hint = "Screen Aspect Ratio"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      fogEnable: =
      {
        txt = "&"
        hint = "Fog Enable"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      fogColor: =
      {
        txt = "&"
        hint = "Fog Color"
      }
      fogStart: =
      {
        txt = "&"
        hint = "Fog Start"
      }
      fogEnd: =
      {
        txt = "&"
        hint = "Fog End"
      }
      fogMaxDensity: =
      {
        txt = "&"
        hint = "Fog Max Density [0..1]"
      }
      input#ChangeFOV: =
      {
        txt = "&"
        hint = "Changes camera's FOV over time"
      }
      input#SetOnAndTurnOthersOff: =
      {
        txt = "&"
        hint = "Turn the camera on, and turn all other cameras off."
      }
      input#SetOn: =
      {
        txt = "&"
        hint = "Turn the camera on."
      }
      input#SetOff: =
      {
        txt = "&"
        hint = "Turn the camera off."
      }
    }
    func_monitor:form =
    {
      t_func_brush = !
      target: =
      {
        txt = "&"
        hint = "Camera name"
      }
      input#Toggle: =
      {
        txt = "&"
        hint = "Toggle - If on, turn off, if off, turn on."
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable."
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable."
      }
      input#SetCamera: =
      {
        txt = "&"
        hint = "Sets the camera to use for this monitor. Takes the name of a p"
         "oint_camera entity in the map."
      }
    }
    func_bulletshield:form =
    {
      t_func_brush = !
    }
    t_BaseVehicle:incl =
    {
      t_Targetname = !
      t_Origin = !
      t_Global = !
      t_prop_static_base = !
      vehiclescript: =
      {
        txt = "&"
        hint = "Vehicle Script File"
      }
      actionScale: =
      {
        txt = "&"
        hint = "Scale of action input / framerate"
      }
      input#Action: =
      {
        txt = "&"
        hint = "Set the speed of the action animation"
      }
      input#TurnOn: =
      {
        txt = "&"
        hint = "Turn on: Start engine & enable throttle"
      }
      input#TurnOff: =
      {
        txt = "&"
        hint = "Turn off: Stop engine, disable throttle, engage brakes."
      }
      input#Lock: =
      {
        txt = "&"
        hint = "Prevent the player from entering or exiting the vehicle."
      }
      input#Unlock: =
      {
        txt = "&"
        hint = "Re-allow the player to enter or exit the vehicle."
      }
    }
    t_BaseDriveableVehicle:incl =
    {
      t_BaseVehicle = !
      VehicleLocked: =
      {
        txt = "&"
        hint = "Start locked"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      output#PlayerOn: =
      {
        txt = "&"
        hint = "Player entered the vehicle"
      }
      output#PlayerOff: =
      {
        txt = "&"
        hint = "Player exited the vehicle"
      }
      output#PressedAttack: =
      {
        txt = "&"
        hint = "Player Pressed attack key"
      }
      output#PressedAttack2: =
      {
        txt = "&"
        hint = "Player Pressed attack2 key"
      }
      output#AttackAxis: =
      {
        txt = "&"
        hint = "State of attack button [0,1]"
      }
      output#Attack2Axis: =
      {
        txt = "&"
        hint = "State of attack2 button [0,1]"
      }
      input#HandBrakeOn: =
      {
        txt = "&"
        hint = "Turns the handbrake on"
      }
      input#HandBrakeOff: =
      {
        txt = "&"
        hint = "Releases the handbrake"
      }
    }
    prop_vehicle:form =
    {
      t_BaseVehicle = !
      input#Steer: =
      {
        txt = "&"
        hint = "Steer the vehicle +/-1"
      }
      input#Throttle: =
      {
        txt = "&"
        hint = "Throttle +/-1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Always Think (Run physics every frame)"
      }
    }
    prop_vehicle_driveable:form =
    {
      t_BaseDriveableVehicle = !
    }
    point_apc_controller:form =
    {
      t_Targetname = !
      t_Angles = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Active"
      }
      yawrate: =
      {
        txt = "&"
        hint = "Yaw rate"
      }
      yawtolerance: =
      {
        txt = "&"
        hint = "Yaw tolerance"
      }
      pitchrate: =
      {
        txt = "&"
        hint = "Pitch rate"
      }
      pitchtolerance: =
      {
        txt = "&"
        hint = "Pitch tolerance"
      }
      rotatestartsound: =
      {
        txt = "&"
        hint = "Rotate Start Sound"
      }
      rotatesound: =
      {
        txt = "&"
        hint = "Rotate Loop Sound"
      }
      rotatestopsound: =
      {
        txt = "&"
        hint = "Rotate Stop Sound"
      }
      minRange: =
      {
        txt = "&"
        hint = "Minmum target range"
      }
      maxRange: =
      {
        txt = "&"
        hint = "Maximum target range"
      }
      targetentityname: =
      {
        txt = "&"
        hint = "Name of entity I should follow/attack"
      }
      input#Activate: =
      {
        txt = "&"
        hint = "Turn the APC rockets on"
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Turn the APC rockets off (go dormant)"
      }
      output#OnFireAtTarget: =
      {
        txt = "&"
        hint = "Fires when a valid target is found and the APC should shoot ro"
         "ckets"
      }
    }
    prop_vehicle_apc:form =
    {
      t_BaseDriveableVehicle = !
      missilehint: =
      {
        txt = "&"
        hint = "Missile Hint Target"
      }
      input#FireMissileAt: =
      {
        txt = "&"
        hint = "A target to fire a missile at"
      }
      input#Destroy: =
      {
        txt = "&"
        hint = "Causes the APC to blow up."
      }
      output#OnFiredMissile: =
      {
        txt = "&"
        hint = "Fired when the APC shoots a missile."
      }
      output#OnDeath: =
      {
        txt = "&"
        hint = "Fired when the APC is killed."
      }
      output#OnDamaged: =
      {
        txt = "&"
        hint = "Fired when the APC is damaged."
      }
      output#OnDamagedByPlayer: =
      {
        txt = "&"
        hint = "Fired when the APC is damaged by the player."
      }
    }
    info_apc_missile_hint:form =
    {
      t_Targetname = !
      t_Origin = !
      t_Angles = !
      t_EnableDisable = !
      target: =
      {
        txt = "&"
        hint = "Target Entity"
      }
    }
    prop_vehicle_jeep:form =
    {
      t_BaseDriveableVehicle = !
      input#StartRemoveTauCannon: =
      {
        txt = "&"
        hint = "Start the tau removal sequence."
      }
      input#FinishRemoveTauCannon: =
      {
        txt = "&"
        hint = "Finish the tau removal sequence."
      }
      input#LockEntrance: =
      {
        txt = "&"
        hint = "Stops NPC's from entering the vehicle until unlocked."
      }
      input#UnlockEntrance: =
      {
        txt = "&"
        hint = "Allows NPC's to enter the vehicle."
      }
      input#LockExit: =
      {
        txt = "&"
        hint = "Stops NPC's from exiting the vehicle until unlocked."
      }
      input#UnlockExit: =
      {
        txt = "&"
        hint = "Allows NPC's to exit the vehicle."
      }
      input#EnableRadar: =
      {
        txt = "&"
        hint = "Turn on the Jalopy radar"
      }
      input#DisableRadar: =
      {
        txt = "&"
        hint = "Turn off the Jalopy radar"
      }
      input#EnableRadarDetectEnemies: =
      {
        txt = "&"
        hint = "Enable Jalopy radar to detect Striders and Hunters"
      }
      input#AddBusterToCargo: =
      {
        txt = "&"
        hint = "Put a striderbuster in the cargo trigger"
      }
      input#SetCargoHopperVisibility: =
      {
        txt = "&"
        hint = "Set the strider buster hopper thingy to be visible, or invisib"
         "le."
      }
      input#DisablePhysGun: =
      {
        txt = "&"
        hint = "Disable physgun interactions with the jeep."
      }
      input#EnablePhysGun: =
      {
        txt = "&"
        hint = "Enable physgun interactions with the jeep (default)."
      }
      input#CreateLinkController: =
      {
        txt = "&"
        hint = "Automatically builds and attaches a link controller to the car"
         ", which cuts the node connections under the car while the car is sta"
         "nding still."
      }
      input#DestroyLinkController: =
      {
        txt = "&"
        hint = "Destroys the link controller created by CreateLinkController."
      }
      CargoVisible: =
      {
        txt = "&"
        hint = "Hopper Visible"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "HUD Locator Precache"
      }
      output#OnCompanionEnteredVehicle: =
      {
        txt = "&"
        hint = "Companion has entered the vehicle."
      }
      output#OnCompanionExitedVehicle: =
      {
        txt = "&"
        hint = "Companion has exited the vehicle."
      }
      output#OnHostileEnteredVehicle: =
      {
        txt = "&"
        hint = "Hostile has entered the vehicle."
      }
      output#OnHostileExitedVehicle: =
      {
        txt = "&"
        hint = "Hostile has exited the vehicle."
      }
    }
    vehicle_viewcontroller:form =
    {
      t_BaseDriveableVehicle = !
      input#ForcePlayerIn: =
      {
        txt = "&"
        hint = "Force the player into the vehicle. The animation to use can be"
         " specified in the parameter. Without a parameter, the player just te"
         "leports."
      }
      input#ForcePlayerOut: =
      {
        txt = "&"
        hint = "Force the player out of the vehicle."
      }
    }
    prop_vehicle_airboat:form =
    {
      t_BaseDriveableVehicle = !
      t_modelselect = !
      vehiclescript: =
      {
        txt = "&"
        hint = "Vehicle Script File"
      }
      EnableGun: =
      {
        txt = "&"
        hint = "Has Gun"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      input#EnableGun: =
      {
        txt = "&"
        hint = "Enables or disables the airboat gun and associated crosshair."
      }
      input#InputStartRotorWashForces: =
      {
        txt = "&"
        hint = "The airboat will start to be blown around by the helicopter ro"
         "tor wash."
      }
      input#InputStopRotorWashForces: =
      {
        txt = "&"
        hint = "The airboat will no longer be blown around by the helicopter r"
         "otor wash."
      }
    }
    prop_vehicle_cannon:form =
    {
      t_BaseDriveableVehicle = !
    }
    prop_vehicle_crane:form =
    {
      t_BaseDriveableVehicle = !
      magnetname: =
      {
        txt = "&"
        hint = "Magnet entity"
      }
      input#ForcePlayerIn: =
      {
        txt = "&"
        hint = "Force the player to get into the crane. Only works in singlepl"
         "ayer."
      }
    }
    prop_vehicle_prisoner_pod:form =
    {
      t_BaseDriveableVehicle = !
      t_Parentname = !
      t_modelselect = !
      vehiclescript: =
      {
        txt = "&"
        hint = "Vehicle Script File"
      }
      input#Open: =
      {
        txt = "&"
        hint = "Plays the pod's open animation and unlocks the pod for entry o"
         "r exit."
      }
      input#Close: =
      {
        txt = "&"
        hint = "Plays the pod's close animation and locks the pod for entry or"
         " exit."
      }
      input#EnterVehicle: =
      {
        txt = "&"
        hint = "Forces the activator (or player) into the pod."
      }
      input#EnterVehicleImmediate: =
      {
        txt = "&"
        hint = "Forces the activator (or player) into the pod without enter/ex"
         "it animations."
      }
      input#ExitVehicle: =
      {
        txt = "&"
        hint = "Boots the prisoner out of the pod."
      }
      output#OnOpen: =
      {
        txt = "&"
        hint = "Fired when the pod is open enough to enter."
      }
      output#OnClose: =
      {
        txt = "&"
        hint = "Fired when the pod too closed to enter."
      }
    }
    env_speaker:form =
    {
      t_BaseSpeaker = !
    }
    script_tauremoval:form =
    {
      t_Angles = !
      t_Targetname = !
      t_Parentname = !
      vortigaunt: =
      {
        txt = "&"
        hint = "Vortigaunt to use"
      }
      input#StartScript: =
      {
        txt = "&"
        hint = "Start the script."
      }
      input#RemoveTau: =
      {
        txt = "&"
        hint = "Start removing the Tau cannon now."
      }
    }
    script_intro:form =
    {
      t_Targetname = !
      input#Activate: =
      {
        txt = "&"
        hint = "Take control of the player's view and start blending the two s"
         "cenes."
      }
      input#Deactivate: =
      {
        txt = "&"
        hint = "Stop controlling the view."
      }
      input#SetCameraViewEntity: =
      {
        txt = "&"
        hint = "Set the viewpoint to blend with the player's viewpoint."
      }
      input#SetBlendMode: =
      {
        txt = "&"
        hint = "Set the blending mode to use."
      }
      input#SetFOV: =
      {
        txt = "&"
        hint = "Set the fov for the second camera."
      }
      input#SetNextFOV: =
      {
        txt = "&"
        hint = "Set the FOV to blend to over time. Follow this with a SetFOVBl"
         "endTime input to start the fov blend."
      }
      input#SetFOVBlendTime: =
      {
        txt = "&"
        hint = "Set the amount of time it should take to blend to the next fov"
         " target, and start blending."
      }
      input#SetNextBlendMode: =
      {
        txt = "&"
        hint = "Set the blending mode to blend to over time. Follow this with "
         "a SetNextBlendTime input to start the mode blend."
      }
      input#SetNextBlendTime: =
      {
        txt = "&"
        hint = "Set the amount of time it should take to blend to the next mod"
         "e, and start blending."
      }
      input#FadeTo: =
      {
        txt = "&"
        hint = "Fade to a specific alpha amount of an amount of time. Paramete"
         "rs: <alpha> <duration>"
      }
      input#SetFadeColor: =
      {
        txt = "&"
        hint = "Set the fade color. Parameters: <Red> <Green> <Blue>"
      }
      alternatefovchange: =
      {
        txt = "&"
        hint = "Match env_zoom's FOV transition"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
    }
    env_citadel_energy_core:form =
    {
      t_Angles = !
      t_Targetname = !
      t_Parentname = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "No small particles"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Start on"
      }
      scale: =
      {
        txt = "&"
        hint = "Scale"
      }
      input#StartCharge: =
      {
        txt = "&"
        hint = "Start charging the core over specified number of seconds."
      }
      input#StartDischarge: =
      {
        txt = "&"
        hint = "Start discharging the core over specified number of seconds."
      }
      input#Stop: =
      {
        txt = "&"
        hint = "Stops the effect at any point."
      }
    }
    env_alyxemp:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      t_Angles = !
      t_Targetname = !
      t_Parentname = !
      Type: =
      {
        txt = "&"
        hint = "EMP Type"
        typ = "C"
        items = "Small"$0D"Large"
        values = "0"$0D"1"
      }
      EndTargetName: =
      {
        txt = "&"
        hint = "Target Entity"
      }
      input#StartCharge: =
      {
        txt = "&"
        hint = "Start charging the effect over specified number of seconds."
      }
      input#StartDischarge: =
      {
        txt = "&"
        hint = "Start discharging the effect over specified number of seconds."
      }
      input#Stop: =
      {
        txt = "&"
        hint = "Stops the effect at any point."
      }
      input#SetTargetEnt: =
      {
        txt = "&"
        hint = "Sets the target entity for the effect."
      }
    }
    test_sidelist:form =
    {
      sides: =
      {
        txt = "&"
        hint = "Sides"
      }
    }
    info_teleporter_countdown:form =
    {
      t_Targetname = !
      input#StartCountdown: =
      {
        txt = "&"
        hint = "Starts the teleporter countdown. Requires an argument which is"
         " the number of seconds for the countdown."
      }
      input#StopCountdown: =
      {
        txt = "&"
        hint = "Stops the countdown permanently"
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Pauses the countdown due to a temporary malfunction. A warning"
         " sign will appear on the linked vgui screens."
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Restarts the countdown since the malfunction is finished."
      }
    }
    prop_vehicle_choreo_generic:form =
    {
      t_BaseDriveableVehicle = !
      t_Parentname = !
      t_modelselect = !
      vehiclescript: =
      {
        txt = "&"
        hint = "Vehicle Script File"
      }
      input#Open: =
      {
        txt = "&"
        hint = "Plays the vehicle's open animation and unlocks the vehicle for"
         " entry or exit."
      }
      input#Close: =
      {
        txt = "&"
        hint = "Plays the vehicle's close animation and locks the vehicle for "
         "entry or exit."
      }
      input#EnterVehicle: =
      {
        txt = "&"
        hint = "Forces the activator (or player) into the vehicle."
      }
      input#EnterVehicleImmediate: =
      {
        txt = "&"
        hint = "Forces the activator (or player) into the vehicle without ente"
         "r/exit animations."
      }
      input#ExitVehicle: =
      {
        txt = "&"
        hint = "Boots the prisoner out of the vehicle."
      }
      input#Viewlock: =
      {
        txt = "&"
        hint = "Set true to prevent Gordon from looking around *at all*. Set f"
         "alse to let him look within limits."
      }
      input#SetAnimation: =
      {
        txt = "&"
        hint = "Force the prop to play an animation. The parameter should be t"
         "he name of the animation."
      }
      output#OnOpen: =
      {
        txt = "&"
        hint = "Fired when the vehicle is open enough to enter."
      }
      output#OnClose: =
      {
        txt = "&"
        hint = "Fired when the vehicle too closed to enter."
      }
      ignoremoveparent: =
      {
        txt = "&"
        hint = "Ignore Move Parent on Exit"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      ignoreplayer: =
      {
        txt = "&"
        hint = "Ignore Player collision"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
    }
    filter_combineball_type:form =
    {
      t_BaseFilter = !
      balltype: =
      {
        txt = "&"
        hint = "Ball Type"
        typ = "C"
        items = "Not Thrown (in combine ball field, etc)"$0D"Thrown/Launched b"
         "y the player's physcannon"$0D"Launched by point_combine_ball_launche"
         "r"
        values = "0"$0D"2"$0D"3"
      }
    }
    env_entity_dissolver:form =
    {
      t_Targetname = !
      input#Dissolve: =
      {
        txt = "&"
        hint = "Dissolve target, if no target is passed it'll use the target s"
         "pecified in the target field."
      }
      target: =
      {
        txt = "&"
        hint = "Target to Dissolve"
      }
      magnitude: =
      {
        txt = "&"
        hint = "Magnitude"
      }
      dissolvetype: =
      {
        txt = "&"
        hint = "Dissolve Type"
        typ = "C"
        items = "Energy"$0D"Heavy electrical"$0D"Light electrical"$0D"Core Eff"
         "ect"
        values = "0"$0D"1"$0D"2"$0D"3"
      }
    }
    prop_coreball:form =
    {
      t_Targetname = !
      t_Angles = !
      input#SetScaleX: =
      {
        txt = "&"
        hint = "Scales the coreball in one Axis. Params: <New Size> <Time>"
      }
      input#SetScaleY: =
      {
        txt = "&"
        hint = "Scales the coreball in one Axis. Params: <New Size> <Time>"
      }
      input#SetScaleZ: =
      {
        txt = "&"
        hint = "Scales the coreball in one Axis. Params: <New Size> <Time>"
      }
    }
    prop_scalable:form =
    {
      t_Targetname = !
      t_Studiomodel = !
      t_Angles = !
      t_RenderFields = !
      input#SetScaleX: =
      {
        txt = "&"
        hint = "Scales the prop in one Axis. Params: <New Size> <Time>"
      }
      input#SetScaleY: =
      {
        txt = "&"
        hint = "Scales the prop in one Axis. Params: <New Size> <Time>"
      }
      input#SetScaleZ: =
      {
        txt = "&"
        hint = "Scales the prop in one Axis. Params: <New Size> <Time>"
      }
    }
    point_push:form =
    {
      t_Targetname = !
      t_Angles = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Test LOS before pushing"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Use angles for push direction"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "No falloff (constant push at any distance)"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Push players"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Push physics"
      }
      enabled: =
      {
        txt = "&"
        hint = "Start Enabled"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      magnitude: =
      {
        txt = "&"
        hint = "Magnitude"
      }
      radius: =
      {
        txt = "&"
        hint = "Radius"
      }
      inner_radius: =
      {
        txt = "&"
        hint = "Inner radius"
      }
      input#Enable: =
      {
        txt = "&"
        hint = "Enable the push."
      }
      input#Disable: =
      {
        txt = "&"
        hint = "Disable the push."
      }
    }
    npc_antlion_grub:form =
    {
      t_Targetname = !
      t_Angles = !
      t_BaseFadeProp = !
      t_Global = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Do not automatically attach to surface"
      }
      input#Squash: =
      {
        txt = "&"
        hint = "Squash the grub!"
      }
      output#OnAgitated: =
      {
        txt = "&"
        hint = "Fired when the grub is stepped on or damaged."
      }
      output#OnDeath: =
      {
        txt = "&"
        hint = "Fired when the grub is killed."
      }
      output#OnDeathByPlayer: =
      {
        txt = "&"
        hint = "Fired when the grub is killed (only by the player)."
      }
    }
    weapon_striderbuster:form =
    {
      t_BasePropPhysics = !
      spawnflags: =
      {
        txt = "&"
        typ = "X8388608"
        cap = "Don't use game_weapon_manager"
      }
      dud: =
      {
        txt = "&"
        hint = "Dud Bomb"
        typ = "C"
        items = "No"$0D"Yes"
        values = "0"$0D"1"
      }
      output#OnAttachToStrider: =
      {
        txt = "&"
        hint = "Fired when the striderbuster successfully attaches to a stride"
         "r."
      }
      output#OnDetonate: =
      {
        txt = "&"
        hint = "Fired when the striderbuster detonates."
      }
      output#OnShatter: =
      {
        txt = "&"
        hint = "Fired when the striderbuster shatters without detonating."
      }
      output#OnShotDown: =
      {
        txt = "&"
        hint = "Fired when the striderbuster shatters after being shot down by"
         " Hunters"
      }
    }
    point_flesh_effect_target:form =
    {
      t_Targetname = !
      t_Parentname = !
      radius: =
      {
        txt = "&"
        hint = "Radius"
      }
      input#SetRadius: =
      {
        txt = "&"
        hint = "Sets a new radius and time to interpolate to it(as a vector <S"
         "ize> <Time in Seconds>)."
      }
    }
  }
}
