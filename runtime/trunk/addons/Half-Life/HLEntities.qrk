QQRKSRC1
// Half-Life entities file for Quark

//$Header$
// ----------- REVISION HISTORY ------------
//$Log$
//

{
  QuArKProtected = "1"
  Description = "Half-Life Entities"

//
// Entity-Template definitions
//
    t_orig_ang:incl = { origin="0 0 0" angle="360" }

  Toolbox Folders.qtx =
  {
    Toolbox = "New map items..."
    Root = "Half-Life Entities.qtxfolder"
    Half-Life Entities.qtxfolder =
    {
//
// Entities
//
        Player Starts.qtxfolder = {
                ;desc = "Send additions/corrections to decker@post1.tele.dk"

                info_player_start:e             = { t_orig_ang=! ;desc = "Single Player start" }
                info_player_start2:e            = { t_orig_ang=! ;desc = "Episode return point" }
                info_player_coop:e              = { t_orig_ang=! ;desc = "Cooperative start" }
                info_player_deathmatch:e        = { t_orig_ang=! ;desc = "Deathmatch start" }
        }
        Weapons & Ammo.qtxfolder = {
                weapon_357:e                    = { t_orig_ang=! ;desc = "357 Handgun" }
                weapon_9mmAR:e                  = { t_orig_ang=! ;desc = "9mm Assault Rifle" }
                weapon_9mmhandgun:e             = { t_orig_ang=! ;desc = "9mm Handgun" }
                weapon_crossbow:e               = { t_orig_ang=! ;desc = "Crossbow" }
                weapon_crowbar:e                = { t_orig_ang=! ;desc = "Crowbar" }
                weapon_egon:e                   = { t_orig_ang=! ;desc = "Egon Gun" }
                weapon_gauss:e                  = { t_orig_ang=! ;desc = "Gauss Gun" }
                weapon_handgrenade:e            = { t_orig_ang=! ;desc = "Handgrenade Ammo" }
                weapon_hornetgun:e              = { t_orig_ang=! ;desc = "Hornet Gun (Alien)" }
                weapon_rpg:e                    = { t_orig_ang=! ;desc = "RPG" }
                weapon_satchel:e                = { t_orig_ang=! ;desc = "Satchel Charge Ammo" }
                weapon_shotgun:e                = { t_orig_ang=! ;desc = "Shotgun" }
                weapon_snark:e                  = { t_orig_ang=! ;desc = "Squeak Grenade (Alien)" }
                weapon_tripmine:e               = { t_orig_ang=! ;desc = "Tripmine Ammo" }

                weaponbox:e                     = { t_orig_ang=! ;desc = "Weapon/Ammo Container" }

                ammo_357:e                      = { t_orig_ang=! ;desc = "357 Ammo" }
                ammo_9mmAR:e                    = { t_orig_ang=! ;desc = "9mm Assault Rifle Ammo" }
                ammo_9mmbox:e                   = { t_orig_ang=! ;desc = "9mm Ammobox" }
                ammo_9mmclip:e                  = { t_orig_ang=! ;desc = "9mm Pistol Ammo" }
                ammo_ARgrenades:e               = { t_orig_ang=! ;desc = "Assault Grenades" }
                ammo_buckshot:e                 = { t_orig_ang=! ;desc = "Shotgun Ammo" }
                ammo_crossbow:e                 = { t_orig_ang=! ;desc = "Crossbow Ammo" }
                ammo_gaussclip:e                = { t_orig_ang=! ;desc = "Gauss Gun Ammo" }
                ammo_rpgclip:e                  = { t_orig_ang=! ;desc = "RPG Ammo" }

                Weapon & Ammo Synonyms.qtxfolder = {
                        weapon_glock:e          = { t_orig_ang=! ;desc = "...same as 9mm Handgun" }
                        weapon_mp5:e            = { t_orig_ang=! ;desc = "...same as 9mm Assault Rifle" }
                        weapon_python:e         = { t_orig_ang=! ;desc = "...same as 357 Handgun" }
                        ammo_glockclip:e        = { t_orig_ang=! ;desc = "...same as 9mm Pistol Ammo" }
                        ammo_mp5clip:e          = { t_orig_ang=! ;desc = "...same as 9mm Assault Rifle Ammo" }
                        ammo_mp5grenades:e      = { t_orig_ang=! ;desc = "...same as Assault Grenades" }
                }
        }
        Env_ entities.qtxfolder = {
                env_beam:e                      = { origin="0 0 0" ;desc = "Energy Beam Effect" }
                env_beverage:e                  = { origin="0 0 0" ;desc = "Beverage Dispenser" }
                env_blood:e                     = { origin="0 0 0" ;desc = "Blood Effects" }
                env_bubbles:b                   = { angle="360"    ;desc = "Bubble Volume" ;incl="trigger" }
//Undocumented  env_debris:?                    = { origin="0 0 0" ;desc = "???" }
                env_explosion:e                 = { origin="0 0 0" ;desc = "Explosion" }
                env_fade:e                      = { origin="0 0 0" ;desc = "Screen Fade" }
                env_funnel:e                    = { origin="0 0 0" ;desc = "Large Portal Funnel" }
                env_global:e                    = { origin="0 0 0" ;desc = "Global State" }
                env_glow:e                      = { origin="0 0 0" ;desc = "Light Glow/Haze" renderfx="14" rendermode="3" model="sprites/flare1.spr" scale="1.0" }
                env_laser:e                     = { origin="0 0 0" ;desc = "Laser Beam Effect" }
//Undocumented  env_lighting:?                  = { origin="0 0 0" ;desc = "???" }
                env_message:e                   = { origin="0 0 0" ;desc = "HUD Text Message" }
                env_render:e                    = { origin="0 0 0" ;desc = "Render Controls" }
                env_shake:e                     = { origin="0 0 0" ;desc = "Screen Shake" }
                env_shooter:e                   = { origin="0 0 0" ;desc = "Model Shooter" }
//Undocumented  env_smoker:?                    = { origin="0 0 0" ;desc = "???" }
                env_sound:e                     = { origin="0 0 0" ;desc = "DSP Sound" }
                env_spark:e                     = { origin="0 0 0" ;desc = "Spark" }
                env_sprite:e                    = { origin="0 0 0" ;desc = "Sprite Effect" framerate="10" model="sprites/flare1.spr" }
        }
        Func_ entities.qtxfolder = {
                path_corner:e                   = { origin="0 0 0" ;desc = "Moving platform stop" }
                path_track:e                    = { origin="0 0 0" ;desc = "Train Track Path" }
                func_breakable:b                = {                ;desc = "Breakable Object" ;incl="poly" }
                func_button:b                   = { angle="360"    ;desc = "Button" ;incl="poly" }
                func_conveyor:b                 = { angle="360"    ;desc = "Conveyor Belt" ;incl="poly" }
                func_door:b                     = { angle="360"    ;desc = "Basic door" ;incl="poly" }
                func_door_rotating:b            = {                ;desc = "Rotating door" ;incl="poly,origin" }
                func_friction:b                 = {                ;desc = "Surface with a change in friction" ;incl="poly" }
                func_guntarget:b                = {                ;desc = "Moving platform" ;incl="poly" }
                func_healthcharger:b            = {                ;desc = "Wall health recharger" ;incl="poly" }
                func_illusionary:b              = {                ;desc = "Fake Wall/Light" ;incl="poly" }
                func_ladder:b                   = {                ;desc = "Ladder" ;incl="trigger" }
                func_monsterclip:b              = {                ;desc = "Monster clip brush" ;incl="trigger" }
                func_mortar_field:b             = {                ;desc = "Mortar Field" ;incl="trigger" }
                func_pendulum:b                 = {                ;desc = "Swings back and forth" ;incl="poly,origin" }
                func_plat:b                     = {                ;desc = "Elevator" ;incl="poly" }
                func_platrot:b                  = {                ;desc = "Moving Rotating platform" ;incl="poly,origin" }
                func_pushable:b                 = {                ;desc = "Pushable object" ;incl="poly" }
                func_recharge:b                 = {                ;desc = "Battery recharger" ;incl="poly" }
                func_rot_button:b               = {                ;desc = "Rotating Button" ;incl="poly,origin" }
                func_rotating:b                 = {                ;desc = "Rotating Object" ;incl="poly,origin" }
                func_tank:b                     = { angle="360"    ;desc = "Brush Gun Turret" ;incl="poly,origin" yawrate="300" yawrange="90" yawtolerance="15" pitchtolerance="5" persistence="1" bullet="1" }
                func_tankcontrols:b             = {                ;desc = "Turret Control Volume" ;incl="trigger" }
                func_tanklaser:b                = { angle="360"    ;desc = "Brush Laser Turret" ;incl="poly,origin" yawrate="300" yawrange="90" yawtolerance="15" pitchtolerance="5" persistence="1" bullet="1" }
                func_tankmortar:b               = { angle="360"    ;desc = "Brush Mortar Turret" ;incl="poly,origin" yawrate="300" yawrange="90" yawtolerance="15" pitchtolerance="5" persistence="1" bullet="1" }
                func_tankrocket:b               = { angle="360"    ;desc = "Brush Rocket Turret" ;incl="poly,origin" yawrate="300" yawrange="90" yawtolerance="15" pitchtolerance="5" persistence="1" bullet="1" }
                func_trackautochange:b          = {                ;desc = "Automatic track changing platform" ;incl="poly,origin" }
                func_trackchange:b              = {                ;desc = "Train track changing platform" ;incl="poly,origin" }
                func_tracktrain:b               = {                ;desc = "Track Train" ;incl="poly,origin" }
                func_train:b                    = {                ;desc = "Moving platform" ;incl="poly" }
                func_traincontrols:b            = {                ;desc = "Train Control Volume" ;incl="trigger" }
                func_wall:b                     = {                ;desc = "Moving wall" ;incl="poly" }
                func_wall_toggle:b              = {                ;desc = "Toggleable geometry" ;incl="poly" }
                func_water:b                    = { angle="360"    ;desc = "Liquid" ;incl="poly" }
        }
        Info_ entities.qtxfolder = {
                info_bigmomma:e                 = { origin="0 0 0" ;desc = "Big Momma Node" }
                info_intermission:e             = { origin="0 0 0" ;desc = "Intermission Spot" }
                info_landmark:e                 = { origin="0 0 0" ;desc = "Transition Landmark" }
                info_node:e                     = { origin="0 0 0" ;desc = "AI node" }
                info_node_air:e                 = { origin="0 0 0" ;desc = "AI air node" }
                info_null:e                     = { origin="0 0 0" ;desc = "Spotlight target" }
                info_target:e                   = { origin="0 0 0" ;desc = "Beam Target" }
                info_teleport_destination:e     = { t_orig_ang=!   ;desc = "Teleport destination" }
                infodecal:e                     = { origin="0 0 0" ;desc = "Decal" texture = "{LAMBDA06" }
        }
        Item_ entities.qtxfolder = {
                item_airtank:e                  = { t_orig_ang=! ;desc = "Oxygen tank" }
                item_antidote:e                 = { t_orig_ang=! ;desc = "Poison antidote" }
                item_battery:e                  = { t_orig_ang=! ;desc = "HEV battery" }
                item_healthkit:e                = { t_orig_ang=! ;desc = "Small Health Kit" }
                item_longjump:e                 = { t_orig_ang=! ;desc = "Longjump Module" }
                item_security:e                 = { t_orig_ang=! ;desc = "Security card" }
//Undocumented  item_sodacan:e                  = { origin="0 0 0" ;desc = "???" }
                item_suit:e                     = { t_orig_ang=! ;desc = "HEV Suit" }
                world_items:e                   = { t_orig_ang=! ;desc = "World Items" }
        }
        Light_ entities.qtxfolder = {
                light:e                         = { origin="0 0 0" ;desc = "Invisible lightsource" _light = "255 255 255 300"}
                light_environment:e             = { t_orig_ang=!   ;desc = "Environmental Lighting (Sky light)"  }
                light_spot:e                    = { t_orig_ang=!   ;desc = "Spotlight" _light = "255 255 255 300"  }
        }
        Monster_ entities.qtxfolder = {
                monster_generic:e               = { t_orig_ang=! ;desc = "Generic Script Monster" }
                monstermaker:e                  = { t_orig_ang=! ;desc = "Monster Maker" }
                monster_alien_controller:e      = { t_orig_ang=! ;desc = "Controller" }
                monster_alien_grunt:e           = { t_orig_ang=! ;desc = "Alien Grunt" }
                monster_alien_slave:e           = { t_orig_ang=! ;desc = "Vortigaunt" }
                monster_babycrab:e              = { t_orig_ang=! ;desc = "Baby Headcrab" }
                monster_barnacle:e              = { t_orig_ang=! ;desc = "Barnacle Monster" }
                monster_bigmomma:e              = { t_orig_ang=! ;desc = "Big Momma" }
                monster_bloater:e               = { t_orig_ang=! ;desc = "Bloater (No AI enabled)" }
                monster_bullchicken:e           = { t_orig_ang=! ;desc = "BullChicken" }
                monster_cockroach:e             = { t_orig_ang=! ;desc = "Cockroach" }
                monster_flyer:e                 = { t_orig_ang=! ;desc = "Flyer" }
                monster_flyer_flock:e           = { t_orig_ang=! ;desc = "Flock of Flyers" }
                monster_gargantua:e             = { t_orig_ang=! ;desc = "Gargantua" }
                monster_headcrab:e              = { t_orig_ang=! ;desc = "Head Crab" }
                monster_houndeye:e              = { t_orig_ang=! ;desc = "Houndeye" }
                monster_ichthyosaur:e           = { t_orig_ang=! ;desc = "Ichthyosaur" }
                monster_leech:e                 = { t_orig_ang=! ;desc = "Leech" }
                monster_nihilanth:e             = { t_orig_ang=! ;desc = "Nihilanth" }
                monster_rat:e                   = { t_orig_ang=! ;desc = "Rat (No AI enabled)" }
                monster_snark:e                 = { t_orig_ang=! ;desc = "Armed Snark" }
                monster_tentacle:e              = { t_orig_ang=! ;desc = "Tentacle Arm" }
        }
        Monster_ Humans (Dangerous, Alive & Dead).qtxfolder = {
                monster_barney:e                = { t_orig_ang=! ;desc = "Barney" }
                monster_gman:e                  = { t_orig_ang=! ;desc = "G-Man (The suit-man)" }
                monster_grunt_repel:e           = { t_orig_ang=! ;desc = "Human Grunt (Repel)" }
                monster_human_assassin:e        = { t_orig_ang=! ;desc = "Human Assassin (Female)" }
                monster_human_grunt:e           = { t_orig_ang=! ;desc = "Human Grunt" }
                monster_scientist:e             = { t_orig_ang=! ;desc = "Scared Scientist" }
                monster_sitting_scientist:e     = { t_orig_ang=! ;desc = "Sitting Scientist" }
                monster_zombie:e                = { t_orig_ang=! ;desc = "Scientist Zombie" }
                monster_barney_dead:e           = { t_orig_ang=! ;desc = "Dead Barney" }
                monster_hevsuit_dead:e          = { t_orig_ang=! ;desc = "Dead HEV Suit" }
                monster_hgrunt_dead:e           = { t_orig_ang=! ;desc = "Dead Human Grunt" }
                monster_scientist_dead:e        = { t_orig_ang=! ;desc = "Dead Scientist" }
                monster_furniture:e             = { t_orig_ang=! ;desc = "Monster Furniture" }
        }
        Monster_ Vehicles, Turrets & Active explosives.qtxfolder = {
                monster_apache:e                = { t_orig_ang=! ;desc = "Apache" }
                monster_osprey:e                = { t_orig_ang=! ;desc = "Osprey" }
                monster_miniturret:e            = { t_orig_ang=! ;desc = "Mini Auto Turret" }
                monster_sentry:e                = { t_orig_ang=! ;desc = "Sentry Turret Gun" }
                monster_turret:e                = { t_orig_ang=! ;desc = "Auto Turret" }
                monster_satchel:e               = { t_orig_ang=! ;desc = "Live Satchel Charge" }
                monster_tripmine:e              = { t_orig_ang=! ;desc = "Active Tripmine" }
                monster_handgrenade:e           = { t_orig_ang=! ;desc = "Live Handgrenade" }
        }
        Trigger_ entities.qtxfolder = {
                trigger_auto:e                  = { origin="0 0 0" ;desc = "Trigger auto (trigger once when level starts)" }
                trigger_autosave:b              = {                ;desc = "Trigger auto-save" ;incl="trigger" }
                trigger_camera:e                = { t_orig_ang=!   ;desc = "Trigger camera" }
                trigger_cdaudio:b               = {                ;desc = "Trigger CD audio" ;incl="trigger" }
                trigger_changelevel:b           = {                ;desc = "Trigger change level" ;incl="trigger" }
                trigger_changetarget:e          = { origin="0 0 0" ;desc = "Trigger change target" }
                trigger_counter:e               = { origin="0 0 0" ;desc = "Trigger counter (point-entity)" }
                trigger_counter:b               = { origin="0 0 0" ;desc = "Trigger counter (brush-entity)" ;incl="trigger" }
                trigger_endsection:b            = {                ;desc = "Trigger end-section" ;incl="trigger" }
                trigger_gravity:b               = {                ;desc = "Trigger gravity" gravity="1.0" ;incl="trigger" }
                trigger_hurt:b                  = {                ;desc = "Trigger player hurt" ;incl="trigger" }
                trigger_monsterjump:b           = {                ;desc = "Trigger monster jump" ;incl="trigger" }
                trigger_multiple:b              = {                ;desc = "Trigger multiple" ;incl="trigger" }
                trigger_once:b                  = {                ;desc = "Trigger once" ;incl="trigger" }
                trigger_push:b                  = { angle="360"    ;desc = "Trigger player push" ;incl="trigger" }
                trigger_relay:e                 = { origin="0 0 0" ;desc = "Trigger relay" }
                trigger_teleport:b              = {                ;desc = "Trigger teleport" ;incl="trigger" }
                trigger_transition:b            = {                ;desc = "Trigger transition area" ;incl="trigger" }
        }
        Xen_ entities.qtxfolder = {
                xen_hair:e                      = { t_orig_ang=! ;desc = "Xen Hair"  }
                xen_plantlight:e                = { t_orig_ang=! ;desc = "Xen Plant Light"  }
                xen_spore_large:e               = { t_orig_ang=! ;desc = "Xen Spore (large)"  }
                xen_spore_medium:e              = { t_orig_ang=! ;desc = "Xen Spore (medium)"  }
                xen_spore_small:e               = { t_orig_ang=! ;desc = "Xen Spore (small)"  }
                xen_tree:e                      = { t_orig_ang=! ;desc = "Xen Tree"  }
        }
        Misc.qtxfolder = {
                aiscripted_sequence:e           = { t_orig_ang=!   ;desc = "AI Scripted Sequence" }
                ambient_generic:e               = { origin="0 0 0" ;desc = "Universal Ambient" health="5" }
                button_target:b                 = {                ;desc = "Target Button" ;incl="poly" }
                cycler:e                        = { origin="0 0 0" ;desc = "Monster Cycler"  }
                cycler_sprite:e                 = { origin="0 0 0" ;desc = "Sprite Cycler"  }
                cycler_weapon:e                 = { origin="0 0 0" ;desc = "Weapon Cycler"  }
                cycler_wreckage:e               = { origin="0 0 0" ;desc = "Wreckage" }
                gibshooter:e                    = { origin="0 0 0" ;desc = "Gib Shooter" }
                momentary_door:b                = { angle="360"    ;desc = "Momentary/Continuous door" ;incl="poly" }
                momentary_rot_button:b          = {                ;desc = "Direct wheel control" ;incl="poly,origin" }
                multi_manager:e                 = { origin="0 0 0" ;desc = "MultiTarget Manager" }
                multisource:e                   = { origin="0 0 0" ;desc = "Multisource" }
                player_loadsaved:e              = { origin="0 0 0" ;desc = "Load Auto-Saved game" }
                player_weaponstrip:e            = { origin="0 0 0" ;desc = "Strips player's weapons" }
                scripted_sentence:e             = { origin="0 0 0" ;desc = "Scripted Sentence" listener = "player" }
                scripted_sequence:e             = { t_orig_ang=!   ;desc = "Scripted Sequence" }
                speaker:e                       = { origin="0 0 0" ;desc = "Announcement Speaker" }
                target_cdaudio:e                = { origin="0 0 0" ;desc = "CD Audio Target" }
        }
        Game_ entities.qtxfolder = {
                game_counter:e                  = { origin="0 0 0" ;desc = "Fires when limit value meet" spawnflags="2" frags="0" health="10" }
                game_counter_set:e              = { origin="0 0 0" ;desc = "Sets a game_counter" frags="10" }
                game_end:e                      = { origin="0 0 0" ;desc = "End multiplayer game" }
                game_player_equip:e             = { origin="0 0 0" ;desc = "Initial player equipment" }
                game_player_hurt:e              = { origin="0 0 0" ;desc = "Hurts player who shoots" dmg="99" }
                game_player_team:e              = { origin="0 0 0" ;desc = "Allows player to change teams" }
                game_score:e                    = { origin="0 0 0" ;desc = "Increase/Decrease frag scores" points="1" }
                game_team_master:e              = { origin="0 0 0" ;desc = "Team based master/relay" teamindex="-1" }
                game_team_set:e                 = { origin="0 0 0" ;desc = "Sets team of game_team_master" }
                game_text:e                     = { origin="0 0 0" ;desc = "HUD text message" x="-1" y="-1" color="100 100 100" color2="240 110 0" fadein="1.5" fadeout="0.5" holdtime="1.2" fxtime="0.25" channel="1" }
                game_zone_player:b              = { origin="0 0 0" ;desc = "Player in/out of a zone trigger" ;incl="trigger" }
        }
        Spirit of Half-Life (modification).qtxfolder = {
                env_model:e                     = { t_orig_ang=!   ;desc = "New alternative to cyclers" }
                env_rain:b                      = { origin="0 0 0" ;desc = "Rain Effect" ;incl="trigger" angles="0 0 0" m_dripSpeed="40" m_dripSize="5" m_brightness="128" rendercolor="64 128 255" m_burstSize="2" m_flUpdateTime="0.5" texture="sprites/rain.spr" }
                env_state:e                     = { origin="0 0 0" ;desc = "Local State" }
                info_alias:e                    = { origin="0 0 0" ;desc = "Alias" }
                info_group:e                    = { origin="0 0 0" ;desc = "Entity Group" }
                multi_alias:e                   = { origin="0 0 0" ;desc = "Multi-target alias" }
                multi_manager:e                 = { origin="0 0 0" ;desc = "Multi-target manager" }
                watcher:                        = { origin="0 0 0" ;desc = "State Watcher" }
                multi_watcher:e                 = { origin="0 0 0" ;desc = "Multi-target State Watcher" }
                trigger_changealias:e           = { origin="0 0 0" ;desc = "Trigger Change Alias" }
                trigger_lightstyle:e            = { origin="0 0 0" ;desc = "Trigger Change Lightstyle" }
        }
    }
  }

  Modifications.qtx =
  {
        ToolBox = "New map items..."
        Root = "Modifications.qtxfolder"

   Modifications.qtxfolder =
   {
    Opposing Force Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        OP4 Weapons & Ammo.qtxfolder = {
                weapon_pipewrench:e     = { t_orig_ang=! ;desc="Pipe Wrench" }
                weapon_knife:e          = { t_orig_ang=! ;desc="Knife" }
                weapon_grapple:e        = { t_orig_ang=! ;desc="Barnacle Grapple" }
                weapon_eagle:e          = { t_orig_ang=! ;desc="Desert Eagle" }
                weapon_m249:e           = { t_orig_ang=! ;desc="M249 SAW" }
                weapon_displacer:e      = { t_orig_ang=! ;desc="Displacer" }
                weapon_sniperrifle:e    = { t_orig_ang=! ;desc="Sniper Rifle" }
                weapon_shockrifle:e     = { t_orig_ang=! ;desc="Shock Roach" }
                weapon_sporelauncher:e  = { t_orig_ang=! ;desc="Spore Launcher" }
                weapon_penguin:e        = { t_orig_ang=! ;desc="Killer Penguin" }
                ammo_556:e              = { t_orig_ang=! ;desc="M249 Ammo" }
                ammo_762:e              = { t_orig_ang=! ;desc="Sniper Ammo" }
                ammo_spore:e            = { t_orig_ang=! ;desc="Spore Ammo" }
        }
        OP4 Env_ entities.qtxfolder = {
                env_blowercannon:e              = { origin="0 0 0" ;desc="Blower Cannon" }
                env_electrified_wire:e          = { origin="0 0 0" ;desc="Electrified Wire" segments="16" sparkfrequency="3" bodysparkfrequency="3" lightningfrequency="3" xforce="80000" yforce="80000" zforce="80000" endingmodel="models/wire_copper16.mdl" bodymodel="models/wire_black16.mdl" }
                env_rope:e                      = { origin="0 0 0" ;desc="Rope" segments="16" endingmodel="models/rope16.mdl" bodymodel="models/rope16.mdl" }
                env_spritetrain:e               = { origin="0 0 0" ;desc="Sprite Train" model="sprites/glow01.spr" speed="64" }
        }
        OP4 Func_ entities.qtxfolder = {
                op4mortar:e                     = { origin="0 0 0" ;desc="Op4 Mortar" }
                func_op4mortarcontroller:b      = {                ;desc="Op4 Mortar Controller" ;incl="trigger" }
                func_tank_of:b                  = { angle="360"    ;desc="Brush Gun Turret" ;incl="poly,origin" yawrate="30" yawrange="180" yawtolerance="15" pitchtolerance="5" spritescale="1" firerate="1" persistence="1" enemytype="1" }
                func_tankcontrols_of:b          = {                ;desc="Tank controls" ;incl="trigger" }
                func_tanklaser_of:b             = { angle="360"    ;desc="Brush Laser Turret" ;incl="poly,origin" yawrate="30" yawrange="180" yawtolerance="15" pitchtolerance="5" spritescale="1" firerate="1" persistence="1" enemytype="1" }
                func_tankrocket_of:b            = { angle="360"    ;desc="Brush Rocket Turret" ;incl="poly,origin" yawrate="30" yawrange="180" yawtolerance="15" pitchtolerance="5" spritescale="1" firerate="1" persistence="1" enemytype="1" }
                func_tankmortar_of:b            = { angle="360"    ;desc="Brush Mortar Turret" ;incl="poly,origin" yawrate="30" yawrange="180" yawtolerance="15" pitchtolerance="5" spritescale="1" firerate="1" persistence="1" enemytype="1" }
        }
        OP4 Info_ entities.qtxfolder = {
                info_displacer_xen_target:e     = { origin="0 0 0" ;desc="Displacer XEN Target" }
                info_displacer_earth_target:e   = { origin="0 0 0" ;desc="Displacer EARTH Target" }
                info_pitworm_steam_lock:e       = { origin="0 0 0" ;desc="Pitworm Steam Lock" }
        }
        OP4 Item_ entities.qtxfolder = {
                item_generic:e          = { t_orig_ang=! ;desc="Generic scenery item" sequencename="idle" model="models/egg.mdl" }
                item_nuclearbomb:e      = { t_orig_ang=! ;desc="Nuclear Bomb" wait="1" }
        }
        OP4 Monster_ entities.qtxfolder = {
                monster_alien_babyvoltigore:e           = { t_orig_ang=! ;desc="Baby Voltigore" }
                monster_alien_voltigore:e               = { t_orig_ang=! ;desc="Voltigore" }
                monster_alien_slave_dead:e              = { t_orig_ang=! ;desc="Dead Vortigaunt" }
                monster_assassin_repel:e                = { t_orig_ang=! ;desc="Male Assassin (Repel)" }
                monster_blkop_apache:e                  = { t_orig_ang=! ;desc="Black Ops Apache" }
                monster_blkop_osprey:e                  = { t_orig_ang=! ;desc="Black Ops Osprey" }
                monster_cleansuit_scientist:e           = { t_orig_ang=! ;desc="Cleansuit Scientist" }
                monster_cleansuit_scientist_dead:e      = { t_orig_ang=! ;desc="Dead Cleansuit Scientist" }
                monster_sitting_cleansuit_scientist:e   = { t_orig_ang=! ;desc="Sitting Cleansuit Scientist" }
                monster_drillsergeant:e                 = { t_orig_ang=! ;desc="Drill Sergeant" }
                monster_geneworm:e                      = { t_orig_ang=! ;desc="Gene Worm" }
                monster_gonome:e                        = { t_orig_ang=! ;desc="Gonome" }
                monster_gonome_dead:e                   = { t_orig_ang=! ;desc="Dead Gonome" }
                monster_houndeye_dead:e                 = { t_orig_ang=! ;desc="Dead Houndeye" }
                monster_grunt_ally_repel:e              = { t_orig_ang=! ;desc="Human Grunt Ally (Repel)" }
                monster_human_grunt_ally:e              = { t_orig_ang=! ;desc="Human Grunt Ally (camo)" }
                monster_human_grunt_ally_dead:e         = { t_orig_ang=! ;desc="Dead Human Grunt Ally" }
                monster_human_medic_ally:e              = { t_orig_ang=! ;desc="Medic" }
                monster_human_torch_ally:e              = { t_orig_ang=! ;desc="Torch" }
                monster_male_assassin:e                 = { t_orig_ang=! ;desc="Male Assassin" }
                monster_op4loader:e                     = { t_orig_ang=! ;desc="Loader machine" }
                monster_otis:e                          = { t_orig_ang=! ;desc="Otis" }
                monster_otis_dead:e                     = { t_orig_ang=! ;desc="Dead Otis" }
                monster_pitdrone:e                      = { t_orig_ang=! ;desc="PitDrone" }
                monster_pitworm:e                       = { t_orig_ang=! ;desc="Pit Worm" }
                monster_pitworm_up:e                    = { t_orig_ang=! ;desc="Pit Worm Upright" }
                monster_shockroach:e                    = { t_orig_ang=! ;desc="Shock Roach" }
                monster_zombie_barney:e                 = { t_orig_ang=! ;desc="Barney Zombie" }
                monster_zombie_soldier:e                = { t_orig_ang=! ;desc="Soldier Zombie" }
                monster_zombie_soldier_dead:e           = { t_orig_ang=! ;desc="Dead Soldier Zombie" }
                monster_recruit:e                       = { t_orig_ang=! ;desc="Recruit" }
                monster_skeleton_dead:e                 = { t_orig_ang=! ;desc="Dead Skeleton" }
                monster_shocktrooper:e                  = { t_orig_ang=! ;desc="Shock Trooper" }
                pitworm_gibshooter:e                    = { t_orig_ang=! ;desc="Pitworm Gib Shooter" }
        }
        OP4 Trigger_ entities.qtxfolder = {
                trigger_geneworm_hit:b  = {                ;desc="Trigger GeneWorm Hit" ;incl="trigger" }
                trigger_playerfreeze:e  = { origin="0 0 0" ;desc="Trigger Player Freeze" }
                trigger_xen_return:b    = {                ;desc="Return To Earth (self-tele)" ;incl="trigger" }
        }
        OP4 CTF entities.qtxfolder = {
                info_ctfdetect:e        = {              ;desc="CTF Detect" }
                info_ctfspawn:e         = { t_orig_ang=! ;desc="Player CTF Start" }
                item_ctfflag:e          = { t_orig_ang=! ;desc="CTF Flag" }
                item_ctfbase:e          = { t_orig_ang=! ;desc="CTF Goal" }
                item_ctflongjump:e      = { t_orig_ang=! ;desc="Longjump Module for CTF" }
                item_ctfportablehev:e   = { t_orig_ang=! ;desc="Portable HEV charger for CTF" }
                item_ctfregeneration:e  = { t_orig_ang=! ;desc="Health regeneration for CTF" }
                item_ctfaccelerator:e   = { t_orig_ang=! ;desc="Double Weapon Damage for CTF" }
                item_ctfbackpack:e      = { t_orig_ang=! ;desc="Backpack Powerup for CTF" }
                info_ctfspawn_powerup:e = { t_orig_ang=! ;desc="CTF Powerup Spawn Spot" }
                trigger_ctfgeneric:b    = {              ;desc="Trigger CTF Generic" ;incl="trigger" }
        }
    }

    Team Fortress Classic Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        TFC Team Starts.qtxfolder = {
                info_player_teamspawn:e = { t_orig_ang=! ;desc = "Teamspawn start" }
                info_tf_teamcheck:e     = { ;desc = "Team check" }
                info_tf_teamset:e       = { ;desc = "Change the team-no of a info_tf_teamcheck" }
        }
        TFC Entities.qtxfolder = {
                info_tfdetect:e         = { origin="0 0 0" ;desc = "Detection entity" }
                info_tfgoal:e           = { origin="0 0 0" ;desc = "info_tfgoal Point-entity" }
                info_tfgoal:b           = { origin="0 0 0" ;desc = "info_tfgoal Brush-entity" ;incl="trigger" }
                i_t_g:b                 = { origin="0 0 0" ;desc = "info_tfgoal Brush-entity" ;incl="trigger" }
                info_tfgoal_timer:e     = { origin="0 0 0" ;desc = "" }
                item_tfgoal:e           = { t_orig_ang=!   ;desc = "Player pickable/dropable item (Typically a flag)" }
                info_areadef:e          = { origin="0 0 0" ;desc = "Area definition" }
        }
        TFC Brush Entities.qtxfolder = {
                func_nobuild:b          = { ;desc = "Area where engineer can't build" ;incl="trigger" }
                func_nogrenades:b       = { ;desc = "Area where grenades can't explode" ;incl="trigger" }
        }
        TFC Armor Entities.qtxfolder = {
                item_armor1:e           = { t_orig_ang=! ;desc = "Green armor (100)" respawn_delay="5" }
                item_armor2:e           = { t_orig_ang=! ;desc = "Yellow armor (150)" respawn_delay="5" }
                item_armor3:e           = { t_orig_ang=! ;desc = "Red armor (200)" respawn_delay="5" }
        }
    }

    Blue Shift Entities.qtxfolder =
    {
        BS Entities.qtxfolder = {
                env_warpball:e          = { t_orig_ang=! ;desc="Warp In Ball" radius="256" }
                item_helmet:e           = { t_orig_ang=! ;desc="Barney Helmet" sequence="0" }
                item_armorvest:e        = { t_orig_ang=! ;desc="Barney Vest" sequence="0" }
                monster_rosenberg:e     = { t_orig_ang=! ;desc="Dr. Rosenberg" body="3" }
                trigger_playerfreeze:e  = { t_orig_ang=! ;desc="Trigger Player Freeze" }
        }
    }

    Deathmatch Classic Entities.qtxfolder =
    {
          DMC Weapons & Items.qtxfolder =
          {
            weapon_supershotgun:e               = { t_orig_ang=! ;desc="Super shotgun" }
            weapon_nailgun:e                    = { t_orig_ang=! ;desc="Nailgun" }
            weapon_supernailgun:e               = { t_orig_ang=! ;desc="Perforator" }
            weapon_grenadelauncher:e            = { t_orig_ang=! ;desc="Grenade launcher" }
            weapon_rocketlauncher:e             = { t_orig_ang=! ;desc="Rocket launcher" }
            weapon_lightning:e                  = { t_orig_ang=! ;desc="Thunderbolt" }
            item_cells:e                        = { t_orig_ang=! ;desc="Thunderbolt ammo" }
            item_rockets:e                      = { t_orig_ang=! ;desc="Rockets" }
            item_shells:e                       = { t_orig_ang=! ;desc="Shells" }
            item_spikes:e                       = { t_orig_ang=! ;desc="Perforator/Nailgun ammo" }
            item_health:e                       = { t_orig_ang=! ;desc="Health pak" }
            item_artifact_envirosuit:e          = { t_orig_ang=! ;desc="Environmental protection suit" }
            item_artifact_super_damage:e        = { t_orig_ang=! ;desc="Quad damage" }
            item_artifact_invulnerability:e     = { t_orig_ang=! ;desc="Pentagram of Protection" }
            item_artifact_invisibility:e        = { t_orig_ang=! ;desc="Ring of Shadows" }
            item_armorInv:e                     = { t_orig_ang=! ;desc="200% armor (Red)" }
            item_armor2:e                       = { t_orig_ang=! ;desc="150% armor (Yellow)" }
            item_armor1:e                       = { t_orig_ang=! ;desc="100% armor (Green)" }
          }
    }

    Half-Life Rally.qtxfolder =
    {
        HLR Entities.qtxfolder =
        {
            info_player_deathmatch:e      = { t_orig_ang=! ;desc="Car Grid Position" }
            info_checkpoint:b             = { angle="360"  ;desc="Checkpoint" ;incl="poly" }
        }
    }

    Action Half-Life Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        AHL Weapons & Ammo.qtxfolder = {
                weapon_beretta:e        = { t_orig_ang=! ;desc="Beretta" }
                weapon_akimbob:e        = { t_orig_ang=! ;desc="Akimbo Berettas" }
                weapon_anaconda:e       = { t_orig_ang=! ;desc="Anaconda Revolver" }
                weapon_colt:e           = { t_orig_ang=! ;desc="Colt 1911" }
                weapon_akimcolt:e       = { t_orig_ang=! ;desc="Akimbo Colt 1911s" }
                weapon_de50:e           = { t_orig_ang=! ;desc="Desert Eagle" }
                weapon_saa:e            = { t_orig_ang=! ;desc="Colt SAA" }
                weapon_akimsaa:e        = { t_orig_ang=! ;desc="Akimbo Colt SAAs" }
                weapon_knife:e          = { t_orig_ang=! ;desc="Knife" }
                weapon_50cal:e          = { t_orig_ang=! ;desc=".50 cal Sniper Rifle" }
                weapon_frag:e           = { t_orig_ang=! ;desc="Frag Grenade" }
                weapon_handcannon:e     = { t_orig_ang=! ;desc="Handcannon" }
                weapon_hkmp5:e          = { t_orig_ang=! ;desc="Submachine Gun" }
                weapon_ithaca:e         = { t_orig_ang=! ;desc="Shotgun" }
                weapon_m4:e             = { t_orig_ang=! ;desc="Assault Rifle" }
                weapon_msg90:e          = { t_orig_ang=! ;desc="Semi-Auto Sniper Rifle" }
                ammo_pistol:e           = { t_orig_ang=! ;desc="Pistol Ammo Pack" }
                ammo_colt:e             = { t_orig_ang=! ;desc="Colt 1911 Ammo" }
                ammo_de50:e             = { t_orig_ang=! ;desc="Desert Eagle Ammo" }
                ammo_50cal:e            = { t_orig_ang=! ;desc="Bolt-Action Sniper Ammo" }
                ammo_buckshot:e         = { t_orig_ang=! ;desc="Shotgun/HC Ammo" }
                ammo_m4:e               = { t_orig_ang=! ;desc="Assault Rifle Ammo" }
                ammo_mp5clip:e          = { t_orig_ang=! ;desc="Sub-machinegun Ammo" }
                ammo_msg90:e            = { t_orig_ang=! ;desc="Semi-Auto Sniper Ammo" }
        }
        AHL Items.qtxfolder = {
                item_bandolier:e        = { t_orig_ang=! ;desc="Bandolier" }
                item_flashlight:e       = { t_orig_ang=! ;desc="Flashlight" }
                item_item_holster:e     = { t_orig_ang=! ;desc="Holster" }
                item_laser:e            = { t_orig_ang=! ;desc="LaserSight" }
                item_nightvision:e      = { t_orig_ang=! ;desc="NightVision Goggles" }
                item_silencer:e         = { t_orig_ang=! ;desc="Silencer" }
                item_stealth:e          = { t_orig_ang=! ;desc="Stealth Slippers" }
                item_vest:e             = { t_orig_ang=! ;desc="Kevlar Vest" }
        }
        AHL Info_ entities.qtxfolder = {
                info_location:e         = { t_orig_ang=! ;desc="Location File" }
        }
    }

    Counter-Strike Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        CS Player Starts.qtxfolder = {
                info_player_start:e      = { t_orig_ang=! ;desc = "Counter-terrorist start" }
                info_player_deathmatch:e = { t_orig_ang=! ;desc = "Terrorist start" }
                func_buyzone:b           = {              ;desc="Buy zone" team="0" ;incl="trigger" }
        }
        CS Hostage.qtxfolder = {
                hostage_entity:e         = { t_orig_ang=!   ;desc = "Hostage" gravity="1" model="models/scientist.mdl" }
                func_hostage_rescue:b    = {                ;desc = "Hostage rescue zone" ;incl="trigger" }
                info_hostage_rescue:e    = { origin="0 0 0" ;desc = "Hostage rescue point" }
        }
        CS Defusion.qtxfolder = {
                info_bomb_target:e       = { origin="0 0 0" ;desc = "Bomb target point" }
                func_bomb_target:b       = {                ;desc = "Bomb target zone" ;incl="trigger" }
                infodecal:e              = { origin="0 0 0" ;desc = "Target Decal #1" texture = "{TARGET" }
                infodecal:e              = { origin="0 0 0" ;desc = "Target Decal #2" texture = "{TARGET2" }
        }
        CS Assassination.qtxfolder = {
                func_vip_safetyzone:b   = {              ;desc="VIP safety zone" ;incl="trigger" }
                info_vip_start:e        = { t_orig_ang=! ;desc="VIP start" }
        }
        CS Escape.qtxfolder = {
                func_escapezone:b       = {                ;desc="Terrorist escape zone" ;incl="trigger" }
                armoury_entity:e        = { origin="0 0 0" ;desc="Items in the armoury" count="1" }
                info_map_parameters:e   = { origin="0 0 0" ;desc="Miscellaneous mapping parameters" bombradius="500" }
        }
        CS Camera.qtxfolder = {
                func_button:b           = { angle="360"    ;desc = "Camera activate/deactivate" ;incl="poly" spawnflags="32" }
                trigger_camera:e        = { t_orig_ang=!   ;desc = "Camera" }
                info_target:e           = { origin="0 0 0" ;desc = "Camera Non-moving Target" }
                func_train:b            = {                ;desc = "Camera Moving Target (func_train)" ;incl="poly" }
        }
        CS Drivable Vehicles.qtxfolder  = {
                func_vehicle:b          = { t_orig_ang=!   ;desc = "Drivable Vehicle" ;incl="poly" target="vehicle1_start" targetname="vehicle1" }
                func_vehiclecontrols:b  = { origin="0 0 0" ;desc = "Drivable Vehicle Controls" ;incl="poly" target="vehicle1" }
                path_track:e            = { origin="0 0 0"   ;desc = "First Train Track Path" targetname="vehicle1_start" target="vehicle1_middle" }
                path_track:e            = { origin="64 0 0"  ;desc = "Middle Train Track Path" targetname="vehicle1_middle" target="vehicle1_end" }
                path_track:e            = { origin="32 32 0" ;desc = "End Train Track Path, links the path_tracks together" targetname="vehicle1_end" target="vehicle1_start" }
        }
    }

    Jailbreak Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        JB Player Starts.qtxfolder = {
                info_player_jail:e      = { t_orig_ang=! ;desc = "Player start" }
        }
        JB Misc.qtxfolder = {
                env_fade:e              = { origin="0 0 0" ;desc = "Screen Fade" }
                jail_execute:e          = { origin="0 0 0" ;desc = "Custom execution" executedelay = "5" }
                jail_team_master:e      = { origin="0 0 0" ;desc = "Jail team master" teamindex = "-1" }
        }
        JB Areas.qtxfolder = {
                trigger_armory:b        = { origin="0 0 0" ;desc = "Armory" ;incl="trigger" }
                trigger_jail:b          = { origin="0 0 0" ;desc = "Mark a player as being in jail" ;incl="trigger" }
                trigger_jail_release:b  = { origin="0 0 0" ;desc = "Prisoner release" ;incl="trigger" }
                func_nobuild:b          = { origin="0 0 0" ;desc = "Safe area" ;incl="trigger" }
        }
    }

    Science & Industry Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        SI Info_ entities.qtxfolder = {
                info_sidetect:e = { ;desc="SI Detect"
                        mclscis="3"
                        afdscis="3"
                }
                info_administrator:e    = { t_orig_ang=! ;desc="Administrator" team="0" }
                info_scientist_start:e  = { t_orig_ang=! ;desc="Scientist Start-point" team="0" model="models/scientist.mdl" }
                info_node:e             = { t_orig_ang=! ;desc="Walk AI-node for scientists" }
        }
        SI Item_ entites.qtxfolder = {
                item_resource:e =
                {
                  angle = "360"
                  origin = "0 0 0"
                  ;desc = "Resource Entity"
                  netname = "Resource"
                  message = "Deliver this to your administrator"
                  icon = "2"
                  model = "models/resource_crystal.mdl"
                  noise = "models/carryresource.mdl"
                  body = "0"
                  skin = "0"
                  team = "-1"
                  cash = "0"
                  research = "0"
                  spawndelay = "0"
                  replacetime = "30"
                  timelimit = "0"
                  timeeffect = "0"
                  importance = "2"
                  dmg = "0"
                  dmgperiodic = "0"
                  damagetype = "0"
                  carryspeed = "100"
                }
        }
        SI Weapon_ & Ammo_ entities.qtxfolder = {
                weapon_briefcase:e      = { t_orig_ang=! ;desc="Briefcase" }
                weapon_colt:e           = { t_orig_ang=! ;desc="Colt Defender" }
                weapon_357:e            = { t_orig_ang=! ;desc="357 Handgun" }
                weapon_shotgun:e        = { t_orig_ang=! ;desc="Shotgun" }
                weapon_rpg:e            = { t_orig_ang=! ;desc="RPG" }
                weapon_gauss:e          = { t_orig_ang=! ;desc="Gauss Gun" }
                weapon_crossbow:e       = { t_orig_ang=! ;desc="Crossbow" }
                weapon_tripmine:e       = { t_orig_ang=! ;desc="Tripmine Ammo" }
                weapon_satchel:e        = { t_orig_ang=! ;desc="Satchel Charge Ammo" }
                weapon_handgrenade:e    = { t_orig_ang=! ;desc="Handgrenade Ammo" }
                weapon_transistor:e     = { t_orig_ang=! ;desc="Radio Transistor" }
                weapon_vomit:e          = { t_orig_ang=! ;desc="GI Destabilizer" }
                weapon_mindray:e        = { t_orig_ang=! ;desc="Mindray" }
                weapon_tommygun:e       = { t_orig_ang=! ;desc="Thompson Submachine Gun" }
                weapon_snUZI:e          = { t_orig_ang=! ;desc="Akimbo snUZIs" }
                weapon_rocketpistol:e   = { t_orig_ang=! ;desc="Rocket Pistol" }
                weapon_fleshgrenade:e   = { t_orig_ang=! ;desc="Flesh Eating Virus" }
                weapon_grapple:e        = { t_orig_ang=! ;desc="Grappling Hook" }
                weapon_cloak:e          = { t_orig_ang=! ;desc="Cloaking Device" }
                weapon_generic:e        = { t_orig_ang=! ;desc="Weapon Generic" }
                weapon_experimental:e   = { t_orig_ang=! ;desc="Weapon Experimental" }

                ammo_9mmclip:e          = { t_orig_ang=! ;desc="9mm Pistol Ammo" }
                ammo_9mmAR:e            = { t_orig_ang=! ;desc="9mm Assault Rifle Ammo" }
                ammo_9mmbox:e           = { t_orig_ang=! ;desc="box of 200 9mm shells" }
                ammo_ARgrenades:e       = { t_orig_ang=! ;desc="Assault Grenades" }
                ammo_buckshot:e         = { t_orig_ang=! ;desc="Shotgun Ammo" }
                ammo_357:e              = { t_orig_ang=! ;desc="357 Ammo" }
                ammo_rpgclip:e          = { t_orig_ang=! ;desc="RPG Ammo" }
                ammo_gaussclip:e        = { t_orig_ang=! ;desc="Gauss Gun Ammo" }
                ammo_crossbow:e         = { t_orig_ang=! ;desc="Crossbow Ammo" }
                ammo_snUZI:e            = { t_orig_ang=! ;desc="snUZI Ammo" }
                ammo_rocketpistol:e     = { t_orig_ang=! ;desc="Rocket Pistol Ammo" }
        }
        SI Func_ entities.qtxfolder = {
                func_tech_breakable:b = { angle="360" ;incl="poly" ;desc="Breakable Technology Object"
                        netname="TechBreak"
                        spawnflags="256"
                        message="Some of your company's valuable research equipment has been destroyed, affecting the efficiency of your company's operations."
                        team="0"
                        cost="5000"
                        replacetime="120"
                        addcash="0"
                        addresearch="0"
                        lostresearch="0"
                        importance="2"
                        techtype="0"
                }
        }
    }

    Classic CTF Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        CCTF Red Team.qtxfolder = {
                ctf_redflag:e        = { t_orig_ang=! ;desc = "Red Flag" model="models/redflag.mdl" gravity="1.0" message="Red Flag" }
                ctf_redspawn:e       = { t_orig_ang=! ;desc = "Red Spawnpoint" model="models/redspawn.mdl" gravity="1.0" message="Red spawn Point" }
        }
        CCTF Blue Team.qtxfolder = {
                ctf_blueflag:e       = { t_orig_ang=! ;desc = "Blue Flag" model="models/blueflag.mdl" gravity="1.0" message="Blue Flag" }
                ctf_bluespawn:e      = { t_orig_ang=! ;desc = "Blue Spawnpoint" model="models/bluespawn.mdl" gravity="1.0" message="Blue spawn Point" }
        }
        CCTF Runes.qtxfolder = {
                ctf_healthrune:e     = { t_orig_ang=! ;desc = "Health Rune" model="models/water.mdl" gravity="1.0" message="Healing" }
                ctf_shieldrune:e     = { t_orig_ang=! ;desc = "Protection Rune" model="models/earth.mdl" gravity="1.0" message="Protected" }
                ctf_damagerune:e     = { t_orig_ang=! ;desc = "Damange Rune" model="models/fire.mdl" gravity="1.0" message="Damage" }
                ctf_speedrune:e      = { t_orig_ang=! ;desc = "Speed Rune" model="models/air.mdl" gravity="1.0" message="Speed" }
                ctf_spiritrune:e     = { t_orig_ang=! ;desc = "Spirit Rune" model="models/spirit.mdl" gravity="1.0" message="Spirit" }
        }
        CCTF Misc.qtxfolder = {
                ctf_smallbattery:e   = { t_orig_ang=! ;desc = "Small battery" model="models/w_battsmall.mdl" gravity="1.0" message="sbatt" }
                ctf_medbattery:e     = { t_orig_ang=! ;desc = "Medium battery" model="models/w_battmed.mdl" gravity="1.0" message="mbatt" }
                ctf_largebattery:e   = { t_orig_ang=! ;desc = "Large battery" model="models/w_battlarge.mdl" gravity="1.0" message="lbatt" }
                ctf_normmedkit:e     = { t_orig_ang=! ;desc = "Normal MediKit" model="models/w_medkit.mdl" gravity="1.0" message="medkit" }
                ctf_largemedkit:e    = { t_orig_ang=! ;desc = "Large MediKit" model="models/w_medkit.mdl" gravity="1.0" message="lrgmedkit" }
        }
    }

//  War In Europe Entities.qtxfolder =
//  {
//      ;desc = "Send additions/corrections to decker@post1.tele.dk"
//
//      WIE Player starts.qtxfolder = {
//              info_player_team1:e     = { t_orig_ang=! ;desc = "Spawnpoint Allies" }
//              info_player_team2:e     = { t_orig_ang=! ;desc = "Spawnpoint Axies" }
//      }
//      WIE Weapons & Ammo.qtxfolder = {
//              ammo_mg42:e             = { t_orig_ang=! ;desc = "Ammo for MG42" }
//              ammo_mp40:e             = { t_orig_ang=! ;desc = "Ammo for MP40" }
//              ammo_bar:e              = { t_orig_ang=! ;desc = "Ammo for Bar" }
//              ammo_mauser:e           = { t_orig_ang=! ;desc = "Ammo for Mauser" }
//              ammo_sniper:e           = { t_orig_ang=! ;desc = "Ammo for Sniper" }
//              ammo_m1:e               = { t_orig_ang=! ;desc = "Ammo for M1" }
//              ammo_tommy:e            = { t_orig_ang=! ;desc = "Ammo for Tommy" }
//      }
//  }

    The Assignment Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        ASN Player starts.qtxfolder = {
                info_start_assassin:e   = { t_orig_ang=! ;desc="Assassin Spawn Point" }
                info_start_suit:e       = { t_orig_ang=! ;desc="Suit Spawn Point" }
                info_start_militia:e    = { t_orig_ang=! ;desc="Militia Spawn Point" }
                info_start_salina:e     = { t_orig_ang=! ;desc="Salina Spawn Point" }
        }
        ASN Weapons & Ammo.qtxfolder = {
                team_suit_buy:e         = { t_orig_ang=! ;desc="The Place Where The Suit & Team Can Buy Weapons/Ammo/Items" }
                team_salina_buy:e       = { t_orig_ang=! ;desc="The Place Where Salina & Team Can Buy Weapons/Ammo/Items" }
        }
        ASN Resources.qtxfolder = {
                item_resource_1:e       = { t_orig_ang=! ;desc="Resource 1's Spawn Point" }
                item_resource_2:e       = { t_orig_ang=! ;desc="Resource 2's Spawn Point" }
                item_resource_3:e       = { t_orig_ang=! ;desc="Resource 3's Spawn Point" }
                item_resource_4:e       = { t_orig_ang=! ;desc="Resource 4's Spawn Point" }

                func_door_suit:b        = { angle="360"  ;desc="Door To The Suit's Special Resource" ;incl="poly" }
                func_door_salina:b      = { angle="360"  ;desc="Door To Salina's Special Resource" ;incl="poly" }
                item_special_suit:e     = { t_orig_ang=! ;desc="The Special Resouce For The Suit" }
                item_special_salina:e   = { t_orig_ang=! ;desc="The Special Resouce For Salina" }
        }
        ASN Capture Points.qtxfolder = {
                info_capture_suit:e     = { t_orig_ang=! ;desc="The Suit's Capture Point" }
                info_capture_salina:e   = { t_orig_ang=! ;desc="Salina's Capture Point" }
        }
    }

//  Sabaneta 2050 Entities.qtxfolder =
//  {
//      ;desc = "Send additions/corrections to decker@post1.tele.dk"
//
//      SB Required Entities.qtxfolder = {
//              info_game_sabaneta:e    = {              ;desc = "Sabaneta 2050 Game Entity" }
//              info_map_rush:e         = {              ;desc = "This entity defines a rush map" }
//              info_player_observer:e  = { t_orig_ang=! ;desc = "Team Selection (Initial Spawn Entity)" }
//      }
//      SB Cops.qtxfolder = {
//              info_player_team1:e     = { t_orig_ang=! ;desc = "Cops start point" }
//              presidente_uno:e        = { t_orig_ang=! ;desc = "Cops Commander" gravity = "1" }
//      }
//      SB Convicts.qtxfolder = {
//              info_player_team2:e     = { t_orig_ang=! ;desc = "Convicts start point" }
//              presidente_dos:e        = { t_orig_ang=! ;desc = "Convicts Commander" gravity = "1" }
//      }
//  }

    Kanonball Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        KB Entities.qtxfolder = {
                info_kb_deathmatch:e    = { t_orig_ang=!   ;desc="Kanonball Player Start" }
                team_goal:b             = {                ;desc="Team Goal" ;incl="trigger" }
                ball_launcher:e         = { t_orig_ang=!   ;desc="Ball launcher" launchspeed="100" launchangle="0" }
                crowd:e                 = { origin="0 0 0" ;desc="Crowd cheer sound effect" }
        }
    }

    FireArms Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        FA Entities.qtxfolder = {
                info_firearms_detect:e  = {t_orig_ang=! ;desc="Firearms Detection Entity" impulse="7" dmg="7" }
                info_playerstart_blue:e = {t_orig_ang=! ;desc="Blue Force teamplay start" }
                info_playerstart_red:e  = {t_orig_ang=! ;desc="Red Force teamplay start" }
                trigger_multiple:b      = {             ;desc="Trigger: Activate multiple" ;incl="trigger" }
                fa_team_goal:e          = {t_orig_ang=! ;desc="Used for doing team goal operations" }
                fa_team_item:e          = {t_orig_ang=! ;desc="Used team items" }
                fa_parachute:e          = {t_orig_ang=! ;desc="Parachute" }
                fa_push_point:b         = {             ;desc="Push Point" ;incl="trigger" }
                fa_push_flag:e          = {t_orig_ang=! ;desc="Push Flag" }
                fa_sd_object:b          = {             ;desc="Search and Destroy Object" }
        }
        FA Items.qtxfolder = {
                item_bandage:e          = {t_orig_ang=! ;desc="Bandage"}
                item_claymore:e         = {t_orig_ang=! ;desc="Claymore Mine"}
                item_flashbang:e        = {t_orig_ang=! ;desc="Flashbang Grenade"}
                item_frag:e             = {t_orig_ang=! ;desc="Fragmentation Grenade"}
                item_stg24:e            = {t_orig_ang=! ;desc="Stiehlhandgrenade"}
        }
        FA Ammo.qtxfolder = {
                ammo_ak47:e             = {t_orig_ang=! ;desc="AK-47 Clip"}
                ammo_anaconda:e         = {t_orig_ang=! ;desc="Colt Anaconda Ammo"}
                ammo_aug:e              = {t_orig_ang=! ;desc="Steyr Aug Ammo"}
                ammo_benelli:e          = {t_orig_ang=! ;desc="Benelli M3 Super 90 Ammo"}
                ammo_ber92f:e           = {t_orig_ang=! ;desc="Beretta 92F Clip"}
                ammo_ber93r:e           = {t_orig_ang=! ;desc="Beretta 93R Clip"}
                ammo_coltgov:e          = {t_orig_ang=! ;desc="Colt Government M1911A1 Ammo"}
                ammo_desert:e           = {t_orig_ang=! ;desc="IMI Desert Eagle Ammo"}
                ammo_g36e:e             = {t_orig_ang=! ;desc="H&K G36E Ammo"}
                ammo_g3a3:e             = {t_orig_ang=! ;desc="H&K G3A3 Ammo"}
                ammo_m11:e              = {t_orig_ang=! ;desc="Ingram M11 Ammo"}
                ammo_m16:e              = {t_orig_ang=! ;desc="M16 Clip"}
                ammo_m4:e               = {t_orig_ang=! ;desc="M4 Beta-C Magazine"}
                ammo_m60:e              = {t_orig_ang=! ;desc="M-60 Machinegun Ammo"}
                ammo_m79:e              = {t_orig_ang=! ;desc="M79 40mm HE Grenades"}
                ammo_m82:e              = {t_orig_ang=! ;desc="M82 Clip"}
                ammo_mp5a5:e            = {t_orig_ang=! ;desc="MP5A5 Clip"}
                ammo_mp5k:e             = {t_orig_ang=! ;desc="MP5K Clip"}
                ammo_psg1:e             = {t_orig_ang=! ;desc="H&K PSG-1 Ammo"}
                ammo_saiga:e            = {t_orig_ang=! ;desc="Saiga 12K Clip"}
                ammobox:e               = {t_orig_ang=! ;desc="Ammo Reload Box" delay="1" damage="2000" respawntime="30"}
        }
        FA Weapons.qtxfolder = {
                weapon_ak47:e           = {t_orig_ang=! ;desc="AK-47"}
                weapon_anaconda:e       = {t_orig_ang=! ;desc="Colt Anaconda"}
                weapon_aug:e            = {t_orig_ang=! ;desc="Steyr AUG A1"}
                weapon_benelli:e        = {t_orig_ang=! ;desc="Benelli M3 Super 90 Combat Shotgun"}
                weapon_ber92f:e         = {t_orig_ang=! ;desc="Beretta 92F"}
                weapon_ber92f:e         = {t_orig_ang=! ;desc="Beretta 92F"}
                weapon_claymore:e       = {t_orig_ang=! ;desc="Claymore Mines"}
                weapon_coltgov:e        = {t_orig_ang=! ;desc="Colt Government M1911A1"}
                weapon_desert:e         = {t_orig_ang=! ;desc="IMI Desert Eagle"}
                weapon_flashbang:e      = {t_orig_ang=! ;desc="Flashbang Grenades"}
                weapon_g36e:e           = {t_orig_ang=! ;desc="H&K G36E"}
                weapon_g3a3:e           = {t_orig_ang=! ;desc="H&K G3A3"}
                weapon_frag:e           = {t_orig_ang=! ;desc="Fragmentation Grenades"}
                weapon_knife:e          = {t_orig_ang=! ;desc="Combat Knife"}
                weapon_m11:e            = {t_orig_ang=! ;desc="Ingram M11"}
                weapon_m16:e            = {t_orig_ang=! ;desc="Colt M-16A1"}
                weapon_m4:e             = {t_orig_ang=! ;desc="Colt M4A1"}
                weapon_m60:e            = {t_orig_ang=! ;desc="M-60 Machinegun"}
                weapon_m79:e            = {t_orig_ang=! ;desc="M-79 Grenade Launcher"}
                weapon_m82:e            = {t_orig_ang=! ;desc="Barett M-82A1"}
                weapon_mp5a5:e          = {t_orig_ang=! ;desc="H&K MP5A5"}
                weapon_mp5k:e           = {t_orig_ang=! ;desc="H&K MP5K"}
                weapon_psg1:e           = {t_orig_ang=! ;desc="H&K PSG-1"}
                weapon_saiga:e          = {t_orig_ang=! ;desc="Kalashnikov Saiga-12k Combat Shotgun"}
                weapon_stg24:e          = {t_orig_ang=! ;desc="Stiehlandgrenade"}
                weapon_mc51:e           = {t_orig_ang=! ;desc="H&K 51-B Vollmer beltfed"}
                weapon_famas:e          = {t_orig_ang=! ;desc="FA-MAS"}
        }
    }

    Desert Crisis Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        DC Entities.qtxfolder = {
                info_player_upko:e      = {t_orig_ang=! ;desc="UP-KO deathmatch start" }
                info_player_usa:e       = {t_orig_ang=! ;desc="USA deathmatch start" }
                info_player_sotd:e      = {t_orig_ang=! ;desc="SD deathmatch start" }
                func_vehicle:b          = {angle="360"  ;desc="Vehicle" ;incl="poly" }
                func_wheel:b            = {angle="360"  ;desc="Wheel of Vehicle" ;incl="poly" }
                func_fence:b            = {             ;desc="Fence (Vehicle blocker)" ;incl="trigger" }
        }
    }

    The Sherman Project Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to decker@post1.tele.dk"

        TSP Entities.qtxfolder = {
                info_teamstart:e        = {t_orig_ang=! ;desc="Team spawn point" weaponpref="-1" }
                info_capturezone:b      = {             ;desc="Capture Zone" ;incl="trigger" duration="1" }
                info_roundwin:e         = {             ;desc="Trigger to win" }
                info_captureitem:e      = {t_orig_ang=! ;desc="Capture item" model="models/filecabinet.mdl" }
                info_areaname:b         = {             ;desc="Area Identifier" ;incl="trigger" }
        }
    }

    Arg! The Pirates Strike Back Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to stedden@avalanchedesign.nu"

        ARG Entities.qtxfolder = {
                info_player_deathmatch:e = { t_orig_ang=! ;desc = "Deathmatch start" }
                weapon_longsword:e       = { t_orig_ang=! ;desc = "Long Sword" }
                weapon_tucan:e           = { t_orig_ang=! ;desc = "Evil Tucan" }
                weapon_bsword:e          = { t_orig_ang=! ;desc = "Broad Sword" }
                weapon_cocogrenade:e     = { t_orig_ang=! ;desc = "Coco Grenade" }
                weapon_whiskey:e         = { t_orig_ang=! ;desc = "Whiskey" }
                weapon_tdagger:e         = { t_orig_ang=! ;desc = "Throwing Dagger" }
                weapon_fishingrod:e      = { t_orig_ang=! ;desc = "Fishing Rod" }
                weapon_ndagger:e         = { t_orig_ang=! ;desc = "Normal Dagger" }
                weapon_mop:e             = { t_orig_ang=! ;desc = "Deck Mop" }
                weapon_flute:e           = { t_orig_ang=! ;desc = "Flute" }
                weaponbox:e              = { t_orig_ang=! ;desc = "Weapon/Ammo Container" }
                world_items:e            = { t_orig_ang=! ;desc = "World Items" }
        }
    }

    Sven-Coop Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to mufasa@columbus.rr.com"

        SVC Entities.qtxfolder = {
                squadmaker:e = { t_orig_ang=! ;desc="Squad Maker"
                        monstercount="-1"
                        respawn_as_playerally="0"
                        delay="5"
                        m_imaxlivechildren="5"
                        weapons="1"
                        change_rendermode="0"
                        new_model=""
                        new_body="-1"
                        trigger_condition="0"
                        notsolid="-1"
                        gag="-1"
                        is_squad_leader="0"
                        squadname=""
                }
                trigger_random:e = { origin="0 0 0" ;desc="Trigger Random"
                        target_count="4"
                }
                trigger_random_time:e = { origin="0 0 0" ;desc="Trigger Random Time"
                        target_count="4"
                        min_delay="3.0"
                        max_delay="7.0"
                }
                weapon_uzi:e = { t_orig_ang=! ;desc="Single UZI (2 Uzis for Akimbo)" }
        }
    }

    Front Line Force Entities.qtxfolder =
    {
        ;desc = "Send additions/corrections to nemesis232@hotmail.com"

        FLF Player Starts, Info & Capture Points.qtxfolder = {
                info_frontline:e        = {             ;desc="FLF Info Entity (Required in all FLF Maps)" roundtime="5" warmuptime="30" arespawntime="5" drespawntime="10" }
                info_player_attacker:e  = {t_orig_ang=! ;desc="Attacker Start" }
                info_player_defender:e  = {t_orig_ang=! ;desc="Defender Start" }
                info_player_observer:e  = {t_orig_ang=! ;desc="Introduction camera player first sees when he joins the map.  Place several of these close to capture points." }
                capture_point:e         = {t_orig_ang=! ;desc="Attacker Capture Point Objective" capturetime="10" model="models/antena.mdl" }
                secondary_point:e       = {t_orig_ang=! ;desc="2ndary Capture Point" capturetime="10" model="models/antena.mdl" }
        }
        FLF Turrets.qtxfolder = {
                monster_miniturret:e    = {t_orig_ang=! ;desc="Mini Auto Turret (Most commonly used)" }
                monster_turret:e        = {t_orig_ang=! ;desc="Auto Turret" }
        }
    }

    Turbo Entities.qtxfolder =
    {
        TBO Entities.qtxfolder = {
                dropship_message:e      = {t_orig_ang=! ;desc="Dropship Message" }
                func_holoteleport:b     = {             ;desc="HoloTeleport"    ;incl="poly" }
                info_checkpoint:b       = {             ;desc="Checkpoint"      ;incl="trigger"
                        wait="1"
                }
        }
    }

    Day of Defeat v3.0 Entities.qtxfolder =
    {
        DOD3 Entities.qtxfolder = {
            Player starts.qtxfolder = {
                info_player_allies:e = { angle="360" origin="0 0 0" ;desc="Allies team start" }
                info_player_axis:e = { angle="360" origin="0 0 0" ;desc="Axis team start" }
                info_player_observer:e = { angle="360" origin="0 0 0" ;desc="Observer start" }
            }
            Objectives.qtxfolder = {
                dod_object:e = { angle="360" origin="0 0 0" ;desc="Object Objective"
                    model="models/Tnt.mdl"
                    object_name=""
                    object_owner="0"
                    object_group=""
                    object_carryspeed="0.5"
                    object_resetontouch="1"
                    object_resettime="60"
                    object_cappoints="10"
                    object_otherpoints="5"
                    object_donetarget=""
                    object_player_sprite="sprites/obj_tnt_sm.spr"
                    object_hud_sprite="sprites/obj_tnt.spr"
                }
                dod_object_goal:b = { angle="360" ;incl="defpoly" ;desc="Object Capturepoint"
                    capobj_group=""
                    capobj_donetarget=""
                    capobj_hud_sprite="sprites/obj_tnt.spr"
                }
                dod_score_ent:e = { angle="360" origin="0 0 0" ;desc="Used for done sequences"
                    team="0"
                    score_points="10"
                    score_resetitemtime="3"
                    score_resetplayerstime="3"
                    noise=""
                    noise2="0"
                    message=""
                    score_nextmap=""
                    score_nextmapdelay="3"
                }
                dod_control_point_master:e = { angle="360" origin="0 0 0" ;desc="Control Point Master"
                    point_give_delay_time="20"
                    allies_capture_target=""
                    axis_capture_target=""
                    master=""
                    cpm_group=""
                }
                dod_control_point:e = { angle="360" origin="0 0 0" ;desc="Control Point"
                    point_name="a control point"
                    point_can_allies_touch="0"
                    point_can_axis_touch="0"
                    point_pointvalue="1"
                    point_points_for_cap="1"
                    point_default_owner="0"
                    point_axis_capsound=""
                    point_allies_capsound=""
                    point_resetsound=""
                    point_allies_model="models/w_aflag.mdl"
                    point_axis_model="models/w_gflag.mdl"
                    point_reset_model="models/w_wflag.mdl"
                    point_allies_target=""
                    point_axis_target=""
                    point_reset_target=""
                    point_win_string="%p captured the %n for the %t"
                    point_group=""
                    point_index="-1"
                }
                dod_capture_area:b = { angle="360" ;incl="defpoly" ;desc="Capture Area"
                    area_allies_cancap="1"
                    area_axis_cancap="1"
                    area_allies_numcap="1"
                    area_axis_numcap="1"
                    area_time_to_cap="5"
                    area_allies_startcap=""
                    area_allies_breakcap=""
                    area_allies_endcap=""
                    area_axis_startcap=""
                    area_axis_breakcap=""
                    area_axis_endcap=""
                    area_hud_sprite=""
                    area_object_group=""
                }
                dod_point_relay:e = { angle="360" origin="0 0 0" ;desc="Capture Relay"
                    dod_relay_team="1"
                }
                dod_round_timer:e = { angle="360" origin="0 0 0" ;desc="DoD Timer"
                    spawnflags="1"
                    round_timer_length="60"
                }
            }
            Misc.qtxfolder = {
                dod_camera:e = { angle="360" origin="0 0 0" ;desc="DoD Camera"
                    wait="10"
                    spawnflags="3"
                    speed="0"
                    acceleration="500"
                    deceleration="500"
                    teambound="3"
                }
                dod_location:e = { angle="360" origin="0 0 0" ;desc="Location"
                    location_name="(unknown location name)"
                }
                dod_trigger_sandbag:b = { angle="360" ;incl="defpoly" ;desc="Sandbag Trigger"
                    sandbag_range="15"
                }
            }
            Weapons and Ammo.qtxfolder = {
                weapon_30cal:e = { angle="360" origin="0 0 0" ;desc="30 cal MG" }
                weapon_amerknife:e = { angle="360" origin="0 0 0" ;desc="American Knife" }
                weapon_bar:e = { angle="360" origin="0 0 0" ;desc="BAR" }
                weapon_colt:e = { angle="360" origin="0 0 0" ;desc="Colt Pistol" }
                weapon_garand:e = { angle="360" origin="0 0 0" ;desc="Garand Rifle" }
                weapon_gerknife:e = { angle="360" origin="0 0 0" ;desc="German Knife" }
                weapon_gewehr:e = { angle="360" origin="0 0 0" ;desc="KAR Sniper Rifle" }
                weapon_kar:e = { angle="360" origin="0 0 0" ;desc="KAR Rifle" }
                weapon_luger:e = { angle="360" origin="0 0 0" ;desc="Luger Pistol" }
                weapon_m1carbine:e = { angle="360" origin="0 0 0" ;desc="M1 Carbine" }
                weapon_mg34:e = { angle="360" origin="0 0 0" ;desc="MG34" }
                weapon_mg42:e = { angle="360" origin="0 0 0" ;desc="MG42" }
                weapon_mp40:e = { angle="360" origin="0 0 0" ;desc="MP40" }
                weapon_mp44:e = { angle="360" origin="0 0 0" ;desc="MP44" }
                weapon_spade:e = { angle="360" origin="0 0 0" ;desc="spade" }
                weapon_spring:e = { angle="360" origin="0 0 0" ;desc="Springfield Sniper Rifle" }
                weapon_thompson:e = { angle="360" origin="0 0 0" ;desc="Thompson" }
                ammo_30cal:e = { angle="360" origin="0 0 0" ;desc="30 cal Ammo" }
                ammo_bar:e = { angle="360" origin="0 0 0" ;desc="BAR Ammo" }
                ammo_colt:e = { angle="360" origin="0 0 0" ;desc="Colt Ammo" }
                ammo_garand:e = { angle="360" origin="0 0 0" ;desc="Garand Ammo" }
                ammo_gewehr:e = { angle="360" origin="0 0 0" ;desc="K98 Sniper Ammo" }
                ammo_kar:e = { angle="360" origin="0 0 0" ;desc="KAR Ammo" }
                ammo_luger:e = { angle="360" origin="0 0 0" ;desc="Luger Ammo" }
                ammo_m1carbine:e = { angle="360" origin="0 0 0" ;desc="M1 Carbine Ammo" }
                ammo_mg34:e = { angle="360" origin="0 0 0" ;desc="MG34 Ammo" }
                ammo_MG42:e = { angle="360" origin="0 0 0" ;desc="MG42 Ammo" }
                ammo_mp40:e = { angle="360" origin="0 0 0" ;desc="MP40 Ammo" }
                ammo_mp44:e = { angle="360" origin="0 0 0" ;desc="MP44 Ammo" }
                ammo_spring:e = { angle="360" origin="0 0 0" ;desc="Springfield Ammo" }
                ammo_thompson:e = { angle="360" origin="0 0 0" ;desc="Thompson Ammo" }
            }
        }
    }

    BuzzyBots Entities.qtxfolder =
    {
        BB Entities.qtxfolder = {
            npc_skrunk:e =
            {
              angle = "360"
              origin = "0 0 0"
              ;desc = "Npc Skrunk"
              team = "1"
            }
            object_beacon:e =
            {
              angle = "360"
              origin = "0 0 0"
              ;desc = "Object Beacon"
              timer = "10"
              submodel = "0"
              team = "0"
            }
            object_superchip:e =
            {
              angle = "360"
              origin = "0 0 0"
              ;desc = "Object SuperChip"
              submodel = "0"
            }
            info_player_red:e =
            {
              angle = "360"
              origin = "0 0 0"
              ;desc = "Red Team Spawnpoint"
            }
            info_player_blue:e =
            {
              angle = "360"
              origin = "0 0 0"
              ;desc = "Blue Team Spawnpoint"
            }
            info_player_observer:e =
            {
              angle = "360"
              origin = "0 0 0"
              ;desc = "Observer Spawnpoint"
            }
            info_chip:e =
            {
              angle = "360"
              origin = "0 0 0"
              ;desc = "SuperChip Spawnpoint"
            }
            func_base:b =
            {
              angle = "360"
              ;incl = "defpoly"
              ;desc = "The Home Base"
              team = "0"
            }
            monster_bbturret:e =
            {
              angle = "360"
              origin = "0 0 0"
              ;desc = "Mini Auto Turret"
              orientation = "0"
              team = "0"
            }
        }
    }

   }
  }


  Entity forms.fctx =
  {
//
// Form-Template definitions
//
        f_zhlt_brushentity:form = {
                zhlt_lightflags: = { txt="&" typ="X1" cap="Embedded Fix" hint="" }
                zhlt_lightflags: = { txt="&" typ="X2" cap="Opaque" hint="" }
                zhlt_lightflags: = { txt="&" typ="X4" cap="Concave Fix" hint="" }
                light_origin: = { txt="&" hint=
   "Set optional light placement. Can be applied to any brush based entity."
$0D
$0D"light_origin can be used to place a brush based entity to a new location for"
$0D"the purposes of lighting. Typical use requires placing an info_target at the"
$0D"relevant location, and then setting the light_origin to point the info_target's"
$0D"name. If the entity is opaque, it will also cast shadows from that location in"
$0D"addition to being lit as if it were there."
                }
        }

        f_zhlt_lightentity:form = {
                _fade: = { txt="&" hint=
   "Set fade (larger values = shorter lights). Applies to any light,"
$0D"light_environment, or light_spot entities."
$0D
$0D"This value adds in an artificial factor into the normal (1 / dist * dist)"
$0D"inverse square falloff calculations, by multiplying the denominator of the"
$0D"scale by the fade value. Point lights can set their own individual fade and"
$0D"falloff values, which override any global setting on the command line. These"
$0D"calculations only affect the direct lighting layer, as the radiosity pass"
$0D"always uses plain inverse square falloff. The default value is 1.0, and as you"
$0D"approach 0.0 the lights will travel much further, and as you go higher than"
$0D"1.0, they will travel less."
                }
                _falloff: = { txt="&" typ="C" hint=
   "Set falloff mode (1 = inv linear, 2 = inv square). Applies to any light,"
$0D"light_environment, light_spot entities."
$0D
$0D"This option can change the normal inverse square falloff of lighting in the"
$0D"direct lighting layer with inverse falloff."
                        items ="1 inv linear"$0D"2 inv square"
                        values="1"           $0D"2"
                }
        }

        t_pointentity:incl = {}
        t_lightentity:incl = {
                zhlt: = {
                        Typ = "B"
                        Txt = "(ZHLT)"
                        Cap = "Settings..."
                        form = "f_zhlt_lightentity:form"
                        Hint = "Settings for Zoner's Half-Life Tools"
                }
        }
        t_brushentity:incl = {
                zhlt: = {
                        Typ = "B"
                        Txt = "(ZHLT)"
                        Cap = "Settings..."
                        form = "f_zhlt_brushentity:form"
                        Hint = "Settings for Zoner's Half-Life Tools"
                }
        }

        t_targetname:incl       = { targetname: = { Txt="&" Hint="The name of this object, so others can 'target' it." } }
        t_target:incl           = { target:     = { Txt="&" Hint="Target(s) to activate, when this object is triggered" } }
        t_killtarget:incl       = { killtarget: = { Txt="&" Hint="Kill target(s), when this object is triggered" } }
        t_message:incl          = { message:    = { Txt="&" } }
        t_globalname:incl       = { globalname: = { Txt="&" Hint="Global Entity Name" } }
        t_angles:incl           = { angles:     = { Txt="&" Hint="Pitch Yaw Roll (Y Z X)" } }
        t_targetx:incl = {
                t_target = !
                t_killtarget = !
                delay: = { Txt="&" Hint="Delay before activating target(s)" }
        }
        t__minlight:incl = { txt="&" Hint="Minimum light level" }
        t_renderfx:incl = {
                renderfx: = { Typ="C" Txt="&"
                        Items =
   "Normal"
$0D"Slow pulse"
$0D"Fast pulse"
$0D"Slow Wide Pulse"
$0D"Fast Wide Pulse"
$0D"Slow Fade Away"
$0D"Fast Fade Away"
$0D"Slow Become Solid"
$0D"Fast Become Solid"
$0D"Slow Strobe"
$0D"Fast Strobe"
$0D"Faster Strobe"
$0D"Slow Flicker"
$0D"Fast Flicker"
$0D"Constant Glow"
$0D"Distort"
$0D"Hologram (Distort + fade)"
                        Values = "0"$0D "1"$0D "2"$0D "3"$0D "4"$0D "5"$0D "6"$0D "7"$0D "8"$0D "9"
                             $0D"10"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"
                }
        }
        t_rendermode:incl = {
                t_renderfx = !
                rendermode: = { Typ="C" Txt="&" Hint="See 'renderamt' for details"
                        Items = "Normal"
                             $0D"Color"
                             $0D"Texture"
                             $0D"Glow"
                             $0D"Solid"
                             $0D"Additive"
                        Values ="0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"
                }
                renderamt: = { Txt="&"
                        Hint="FX Amount (0 - 255)"$0D
                        $0D"The renderamt value is depended on what rendermode is set to:"
                        $0D"NORMAL -> As it says."
                        $0D"COLOR -> The lower the value, the more clear(transparent) the color will be. 'Rendercolor' must be specified. Brush-texture is irrelevant."
                        $0D"TEXTURE -> The lower the value, the more transparent the texture will be. 'Rendercolor' seems irrelevant."
                        $0D"GLOW -> Not for brushes, only env_ entities! The lower the value, the less glow the sprite will show."
                        $0D"SOLID -> For see-through textures (Rails). Value 0 is invisible, other values gives visibility."
                        $0D"ADDITIVE -> Like COLOR, but 'add' the colors behind it, so it gives a special neat effect."
                }
                rendercolor: = { Txt="&" Hint="FX Color (R G B)" }
        }

//
// Spirit of Half-Life
//
        t_spirit_movewith:incl =
        {
          movewith: =
          {
            txt = "&"
            hint = "Moves with"
          }
        }

//
// Team Fortress Classic includes
//
        t_tfc_HTML:incl = {
                //HTML = "http://info.gamedesign.net"
        }
        t_netname:incl = {
                netname: = { Txt="Netname" Hint="Name of this entity, to ease debugging" }
        }
        t_team_no:incl = {
                team_no: = { Typ="C" Txt="Team No" Hint="Team this entity can be activated by, or affects, or changes, or sets."
                        items = "Team 1 (Blue)"
                             $0D"Team 2 (Red)"
                             $0D"Team 3 (Yellow)"
                             $0D"Team 4 (Green)"
                             $0D"Any team"
                        values = "1"$0D"2"$0D"3"$0D"4"$0D"0"
                }
        }
        t_owned_by:incl = {
                owned_by: = { Typ="C" Txt="Owned by" Hint="Team this entity is owned by/belongs to."
                        items = "Team 1 (Blue)"
                             $0D"Team 2 (Red)"
                             $0D"Team 3 (Yellow)"
                             $0D"Team 4 (Green)"
                             $0D"(none)"
                        values = "1"$0D"2"$0D"3"$0D"4"$0D"0"
                }
        }
        t_skill_level:incl = {
//              ex_skill_min: = { Typ="C" Txt="Min. skill level" Hint="Minimum skill level, this entity will exist at. Can be float"
//                      items = "(Unspecf.)"
//                           $0D"Easy"
//                           $0D"Medium"
//                           $0D"Hard"
//                           $0D"Nightmare"
//                      values = ""$0D"-1"$0D"1.0"$0D"2.0"$0D"3.0"
//              }
//              ex_skill_max: = { Typ="C" Txt="Max. skill level" Hint="Maximum skill level, this entity will exist at. Can be float"
//                      items = "(Unspecf.)"
//                           $0D"Easy"
//                           $0D"Medium"
//                           $0D"Hard"
//                           $0D"Nightmare"
//                      values = ""$0D"-1"$0D"1.0"$0D"2.0"$0D"3.0"
//              }
        }
        t_initial_state:incl = {
                goal_state: = { Typ="C" Txt="Initial State"
                        items = "Inactive"
                             $0D"Active"
                             $0D"Removed"
                        values = ""$0D"1"$0D"3"
                }
        }
        t_armorclass:incl = {
                armorclass: = { Typ="X1"  Cap="Bullets"         Txt="Armor protection" Hint="Kevlar" }
                armorclass: = { Typ="X2"  Cap="Nails"           Txt="Armor protection" Hint="Wooden" }
                armorclass: = { Typ="X4"  Cap="Explosions"      Txt="Armor protection" Hint="Blast" }
                armorclass: = { Typ="X8"  Cap="Electricity"     Txt="Armor protection" Hint="Shock" }
                armorclass: = { Typ="X16" Cap="Fire"            Txt="Armor protection" Hint="Ceramic" }
        }
        t_armor:incl = {
                t_team_no = !
                t_armorclass = !
                respawn_delay: = { Txt="Respawn Delay" Hint="" }
                bbox = '-16 -16 0 16 16 36'     // t_item:incl
                t_targetname = !                // t_item:incl
                t_targetx = !                   // t_item:incl
        }
        t_ammo_armor:incl = {
                ammo_shells:    = { Txt="Shells added" }
                ammo_nails:     = { Txt="Nails added" }
                ammo_rockets:   = { Txt="Rockets added" }
                ammo_cells:     = { Txt="Cells added" }
                ammo_medikit:   = { Txt="Medikits added" }
                ammo_detpack:   = { Txt="Detpacks added" }
                no_grenades_1:  = { Txt="Type 1 grenades added" }
                no_grenades_2:  = { Txt="Type 2 grenades added" }
                armorvalue:     = { Txt="Percent of armor added" }
                armortype:      = { Typ="C" Txt="Armor quality"
                        items = "(Default)"
                             $0D"100-Green"
                             $0D"150-Yellow"
                             $0D"200-Red"
                        values = ""$0D"0.3"$0D"0.6"$0D"0.8"
                }
                t_armorclass = !
        }
        t_health_powerups:incl = {
                invisible_finished:     = { Txt="Seconds of invisibility" }
                invincible_finished:    = { Txt="Seconds of invincibility" }
                super_damage_finished:  = { Txt="Seconds of quad damage" }
                radsuit_finished:       = { Txt="Seconds of radsuit" }
                health:                 = { Txt="Health added" }
                frags:                  = { Txt="Player score added" }
                lives:                  = { Txt="Lives added" }
                count:                  = { Txt="Team score added" }
        }
        t_playerclass:incl = {
                playerclass: = { Typ="C" Txt="Playerclass"
                        items = "Any class"
                             $0D"Scout"
                             $0D"Sniper"
                             $0D"Soldier"
                             $0D"DemoMan"
                             $0D"Medic"
                             $0D"HWGuy"
                             $0D"Pyro"
                             $0D"Spy"
                             $0D"Engineer"
                        values = ""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"
                }
        }
        t_goalno_groupno:incl = {
                goal_no: = { Txt="Unique Goal No" Hint="Unique Goal Number ID" }
                group_no: = { Txt="Belongs to Group No" Hint="Entity belongs to this Group Number ID" }
        }
        t_teamcheck:incl = {
                teamcheck: = { Txt="Name of info_tf_teamcheck" hint="Points to a info_tf_teamcheck" }
        }
        t_tfc_mdl:incl = {
                items = ""
$0D"g_armor.mdl"
$0D"y_armor.mdl"
$0D"r_armor.mdl"
$0D"backpack.mdl"
$0D"ball.mdl"
$0D"bigrat.mdl"
$0D"bomblet.mdl"
$0D"caltrop.mdl"
$0D"chainammo.mdl"
$0D"conc_grenade.mdl"
$0D"detpack.mdl"
$0D"dispenser.mdl"
$0D"emp_grenade.mdl"
$0D"flag.mdl"
$0D"gasmask.mdl"
$0D"invis.mdl"
$0D"keycard.mdl"
$0D"mirv_grenade.mdl"
$0D"nail.mdl"
$0D"napalm.mdl"
$0D"ngrenade.mdl"
$0D"pent.mdl"
$0D"pipebomb.mdl"
$0D"presentlg.mdl"
$0D"presentsm.mdl"
$0D"quad.mdl"
$0D"sentry1.mdl"
$0D"sentry2.mdl"
$0D"sentry3.mdl"
$0D"spy_grenade.mdl"
                values = ""
$0D"models/g_armor.mdl"
$0D"models/y_armor.mdl"
$0D"models/r_armor.mdl"
$0D"models/backpack.mdl"
$0D"models/ball.mdl"
$0D"models/bigrat.mdl"
$0D"models/bomblet.mdl"
$0D"models/caltrop.mdl"
$0D"models/chainammo.mdl"
$0D"models/conc_grenade.mdl"
$0D"models/detpack.mdl"
$0D"models/dispenser.mdl"
$0D"models/emp_grenade.mdl"
$0D"models/flag.mdl"
$0D"models/gasmask.mdl"
$0D"models/invis.mdl"
$0D"models/keycard.mdl"
$0D"models/mirv_grenade.mdl"
$0D"models/nail.mdl"
$0D"models/napalm.mdl"
$0D"models/ngrenade.mdl"
$0D"models/pent.mdl"
$0D"models/pipebomb.mdl"
$0D"models/presentlg.mdl"
$0D"models/presentsm.mdl"
$0D"models/quad.mdl"
$0D"models/sentry1.mdl"
$0D"models/sentry2.mdl"
$0D"models/sentry3.mdl"
$0D"models/spy_grenade.mdl"
        }
        t_tfc_vox:incl = {
                items = ""
$0D"Command point 1 secured"
$0D"Command point 2 secured"
$0D"Command point 3 secured"
$0D"Command point 4 secured"
$0D"Command point 5 secured"
$0D"Command point 1 is now hostile"
$0D"Command point 2 is now hostile"
$0D"Command point 3 is now hostile"
$0D"Command point 4 is now hostile"
$0D"Command point 5 is now hostile"
$0D"All command points secured"
$0D"Enemy captured all command points"
$0D"Blue control center destroyed"
$0D"Red control center destroyed"
$0D"You captured the enemy flag"
$0D"Your team captured the flag"
$0D"The enemy team captured the flag"
$0D"You have the enemy flag"
$0D"Your team has the enemy flag"
$0D"The enemy has your flag"
$0D"Your flag has returned"
$0D"The enemy flag has returned"
$0D"Escape door open"
$0D"Blue yards has been breached"
$0D"Red yards has been breached"
$0D"Your key has returned"
$0D"Enemy key returned"
$0D"Your team has the enemy key"
$0D"The enemy has your key"
$0D"Blue team scores. Nerve gas released. Secure protective suit immediately"
$0D"Red team scores. Nerve gas released. Secure protective suit immediately"
$0D"Take key to enemy gas chamber"
$0D"Blue team scores"
$0D"Red team scores"
$0D"The enemy team captured the flag"
$0D"Your team captured the flag"
$0D"You captured the flag"
$0D"Time_remaining, two minutes"
$0D"Time_remaining, thirty seconds"
$0D"Time_remaining, three minutes"
$0D"Time_remaining, four minutes"
$0D"Time_remaining, five minutes"
$0D"Time_remaining, sixty seconds"
$0D"Blue team captured red base"
$0D"Blue team secured command point one"
$0D"Blue team secured command point two"
$0D"Red team holds red base"
$0D"The enemy is inside your base"
$0D"Command point one secured"
$0D"Command point two secured"
$0D"Command point three secured"
$0D"Command point four secured"
$0D"Command point one is now hostile"
$0D"Command point two is now hostile"
$0D"Command point three is now hostile"
$0D"Command point four is now hostile"
$0D"Command point four has been breached"
$0D"Blue team returned flag one"
$0D"Blue team returned flag two"
$0D"Blue team returned flag three"
$0D"Blue team returned flag four"
$0D"Blue team secured flag one two three and four"
$0D"The enemy has flag one"
$0D"The enemy has flag two"
$0D"The enemy has flag three"
$0D"The enemy has flag four"
$0D"The enemy team secured flag one"
$0D"The enemy team secured flag two"
$0D"The enemy team secured flag three"
$0D"The enemy team secured flag four"
$0D"The enemy has stolen flag one"
$0D"The enemy has stolen flag two"
$0D"The enemy has stolen flag three"
$0D"The enemy has stolen flag four"
$0D"You have flag one"
$0D"You have flag two"
$0D"You have flag three"
$0D"You have flag four"
$0D"Flag one has returned"
$0D"Flag two has returned"
$0D"Flag three has returned"
$0D"Flag four has returned"
$0D"Red team returned flag one"
$0D"Red team returned flag two"
$0D"Red team returned flag three"
$0D"Red team returned flag four"
$0D"Red team secured flag one two three and four"
$0D"You have stolen flag one"
$0D"You have stolen flag two"
$0D"You have stolen flag three"
$0D"You have stolen flag four"
$0D"Your team has flag one"
$0D"Your team has flag two"
$0D"Your team has flag three"
$0D"Your team has flag four"
$0D"Your team secured flag one"
$0D"Your team secured flag two"
$0D"Your team secured flag three"
$0D"Your team secured flag four"
$0D"Your team has stolen flag one"
$0D"Your team has stolen flag two"
$0D"Your team has stolen flag three"
$0D"Your team has stolen flag four"
$0D"You returned flag one"
$0D"You returned flag two"
$0D"You returned flag three"
$0D"You returned flag four"
$0D"You secured flag one"
$0D"You secured flag two"
$0D"You secured flag three"
$0D"You secured flag four"
                values =""
$0D"!CZ_GOTCP1"
$0D"!CZ_GOTCP2"
$0D"!CZ_GOTCP3"
$0D"!CZ_GOTCP4"
$0D"!CZ_GOTCP5"
$0D"!CZ_LOSTCP1"
$0D"!CZ_LOSTCP2"
$0D"!CZ_LOSTCP3"
$0D"!CZ_LOSTCP4"
$0D"!CZ_LOSTCP5"
$0D"!CZ_GOTALL"
$0D"!CZ_THEYGOTALL"
$0D"!CZ_BCC_DET"
$0D"!CZ_RCC_DET"
$0D"!CTF_YOUCAP"
$0D"!CTF_TEAMCAP"
$0D"!CTF_THEYCAP"
$0D"!CTF_YOUGOTFLAG"
$0D"!CTF_GOTFLAG"
$0D"!CTF_LOSTFLAG"
$0D"!CTF_FLAGBACK"
$0D"!CTF_EFLAGBACK"
$0D"!HTD_DOORS"
$0D"!RK_BYARDOPEN"
$0D"!RK_RYARDOPEN"
$0D"!RK_KEYBACK"
$0D"!RK_EKEYBACK"
$0D"!RK_GOTKEY"
$0D"!RK_LOSTKEY"
$0D"!RK_BSCORE"
$0D"!RK_RSCORE"
$0D"!RK_TAKEKEY"
$0D"!FBALL_BSCORE"
$0D"!FBALL_RSCORE"
$0D"!DBLMINT_ECAP"
$0D"!DBLMINT_TEAMCAP"
$0D"!DBLMINT_YOUCAP"
$0D"!DUST_2MIN"
$0D"!DUST_30SEC"
$0D"!DUST_3MIN"
$0D"!DUST_4MIN"
$0D"!DUST_5MIN"
$0D"!DUST_60SEC"
$0D"!DUST_CAP"
$0D"!DUST_CP1"
$0D"!DUST_CP2"
$0D"!DUST_HOLD"
$0D"!ENEMY_IN_BASE"
$0D"!ITALY_CP1"
$0D"!ITALY_CP2"
$0D"!ITALY_CP3"
$0D"!ITALY_CP4"
$0D"!ITALY_ECP1"
$0D"!ITALY_ECP2"
$0D"!ITALY_ECP3"
$0D"!ITALY_ECP4"
$0D"!ITALY_HOLE"
$0D"!WAR_BRET1"
$0D"!WAR_BRET2"
$0D"!WAR_BRET3"
$0D"!WAR_BRET4"
$0D"!WAR_BWINS"
$0D"!WAR_EN_1"
$0D"!WAR_EN_2"
$0D"!WAR_EN_3"
$0D"!WAR_EN_4"
$0D"!WAR_ESEC_1"
$0D"!WAR_ESEC_2"
$0D"!WAR_ESEC_3"
$0D"!WAR_ESEC_4"
$0D"!WAR_ESTOLE_1"
$0D"!WAR_ESTOLE_2"
$0D"!WAR_ESTOLE_3"
$0D"!WAR_ESTOLE_4"
$0D"!WAR_HAVE_1"
$0D"!WAR_HAVE_2"
$0D"!WAR_HAVE_3"
$0D"!WAR_HAVE_4"
$0D"!WAR_RET_1"
$0D"!WAR_RET_2"
$0D"!WAR_RET_3"
$0D"!WAR_RET_4"
$0D"!WAR_RRET1"
$0D"!WAR_RRET2"
$0D"!WAR_RRET3"
$0D"!WAR_RRET4"
$0D"!WAR_RWINS"
$0D"!WAR_STOLE_1"
$0D"!WAR_STOLE_2"
$0D"!WAR_STOLE_3"
$0D"!WAR_STOLE_4"
$0D"!WAR_TEAM_1"
$0D"!WAR_TEAM_2"
$0D"!WAR_TEAM_3"
$0D"!WAR_TEAM_4"
$0D"!WAR_TSEC_1"
$0D"!WAR_TSEC_2"
$0D"!WAR_TSEC_3"
$0D"!WAR_TSEC_4"
$0D"!WAR_TSTOLE_1"
$0D"!WAR_TSTOLE_2"
$0D"!WAR_TSTOLE_3"
$0D"!WAR_TSTOLE_4"
$0D"!WAR_YRET1"
$0D"!WAR_YRET2"
$0D"!WAR_YRET3"
$0D"!WAR_YRET4"
$0D"!WAR_YSEC_1"
$0D"!WAR_YSEC_2"
$0D"!WAR_YSEC_3"
$0D"!WAR_YSEC_4"
        }
        t_goal_messages:incl = {
                owned_by_teamcheck:             = { Txt="Owned by teamcheck"            Hint="Points to a info_tf_teamcheck entity" }
                endround_time:                  = { txt="EndRound fade"                 Hint="Number of seconds by which the screen is black, and players can't move."$0D"0 = disabled" }
                endround_owned_by:              = { txt="Owners EndRound message"       Hint="Printed to owning team" }
                endround_non_owned_by:          = { txt="Non-owners EndRound message"   Hint="Printed to non-owning team" }
                endround_team1:                 = { txt="EndRound msg team 1"           Hint="" }
                endround_team2:                 = { txt="EndRound msg team 2"           Hint="" }
                endround_team3:                 = { txt="EndRound msg team 3"           Hint="" }
                endround_team4:                 = { txt="EndRound msg team 4"           Hint="" }
                sep: = { Typ="S" Txt="" }
                broadcast:                      = { Txt="AllMsg"                Hint="Printed to everyone, except the Activator" }
                message:                        = { Txt="PlyMsg"                Hint="Printed to the Activator" }
                team_broadcast:                 = { Txt="TeamMsg"               Hint="Printed to all of the Activator's team, but not the Activator!" }
                non_team_broadcast:             = { Txt="NonTeamMsg"            Hint="Printed to all _not_ on the Activator's team" }
                owners_team_broadcast:          = { Txt="OwnerMsg"              Hint="Printed to all team-members owning the goal" }
                sep: = { Typ="S" Txt="" }
                netname_broadcast:              = { Txt="<plyname> AllMsg"      Hint="Gets printed to _all_ players, prepended by the Activator's name." }
                netname_team_broadcast:         = { Txt="<plyname> TeamMsg"     Hint="Gets printed to all of the Activator's team, except the Activator, with the Activator's name prepending it." }
                netname_non_team_broadcast:     = { Txt="<plyname> NonTeamMsg"  Hint="Gets printed to all non-Activator-teammembers, prepended by the Activator's name." }
                netname_owners_team_broadcast:  = { Txt="<plyname> OwnerMsg"    Hint="Gets printed to all the members of the team that own the goal/item, prepended by the Activator's name." }
                sep: = { Typ="S" Txt="" }
                speak:                          = { Txt="Speak"                 Hint="Sentence to play to everyone"                             Typ="C" t_tfc_vox = ! }
                AP_speak:                       = { Txt="PlySpeak"              Hint="Sentence to play to Activator"                            Typ="C" t_tfc_vox = ! }
                team_speak:                     = { Txt="TeamSpeak"             Hint="Sentence to play to all of the Activator's team"          Typ="C" t_tfc_vox = ! }
                non_team_speak:                 = { Txt="NonTeamSpeak"          Hint="Sentence to play to all non-Activator-teammembers"        Typ="C" t_tfc_vox = ! }
                owners_team_speak:              = { Txt="OwnerSpeak"            Hint="Sentence to play to team that own the goal/item"          Typ="C" t_tfc_vox = ! }
        }
        t_goalitem_messages:incl = {
                team_drop:              = { Txt="ItemDrop OwnerMsg"              Hint="When item is dropped by a dying player,"$0D"this is printed to all the members of the team that own the item." }
                non_team_drop:          = { Txt="ItemDrop NonOwnerMsg"           Hint="When item is dropped by a dying player,"$0D"this is printed to everyone except the members of the team that own the item." }
                netname_team_drop:      = { Txt="ItemDrop <plyname> OwnerMsg"    Hint="Gets printed to all members of the team who own the item, prepended by the name of the player who dropped the item." }
                netname_non_team_drop:  = { Txt="ItemDrop <plyname> NonOwnerMsg" Hint="Gets printed to all players not of the team who own the item, prepended by the name of the player who dropped the item." }
                noise3:                 = { Txt="ItemReturn OwnerMsg"            Hint="Gets printed to all member of the team who own the item, when item returns" }
                noise4:                 = { Txt="ItemReturn NonOwnerMsg"         Hint="Gets printed to all players not of the team who own the item, when item returns" }
        }
        t_activation_criteria:incl = {
                t_teamcheck = !
                sep: = { Typ="S" Txt="" }
                items_allowed:          = { Txt="Carrying GoalItem No"                  Hint="Player must carry this Goal Number ID item" }
                has_item_from_group:    = { Txt="Carrying Group No"                     Hint="Player must carry something from Group Number ID" }
                sep: = { Typ="S" Txt="" }
                if_goal_is_active:      = { Txt="Goal No must be Active"                Hint="This Goal Number ID must be active" }
                if_goal_is_inactive:    = { Txt="Goal No must be Inactive"              Hint="This Goal Number ID must be inactive" }
                if_goal_is_removed:     = { Txt="Goal No must be Removed"               Hint="This Goal Number ID must be removed" }
                sep: = { Typ="S" Txt="" }
                if_group_is_active:     = { Txt="Group No must be Active"               Hint="All items in Group Number ID must be active" }
                if_group_is_inactive:   = { Txt="Group No must be Inactive"             Hint="All items in Group Number ID must be inactive" }
                if_group_is_removed:    = { Txt="Group No must be Removed"              Hint="All items in Group Number ID must be removed" }
                sep: = { Typ="S" Txt="" }
                if_item_has_moved:      = { Txt="Goal No must have been moved"          Hint="This Goal Number ID must have been moved" }
                if_item_hasnt_moved:    = { Txt="Goal No must not have been moved"      Hint="This Goal Number ID must not have been moved" }
                sep: = { Typ="S" Txt="" }
                else_goal:              = { Txt="...else activate this goal"            Hint="If the activation criteria fails, activate this goal instead" }
        }
        t_activation_effects:incl = {
                delay_time:= { Txt="Activation delay" Hint="" }
                goal_effects: = { Typ="X1" Cap="Yes, Activator" Txt="Activator is Affected" }
                goal_effects: = { Typ="X2" Cap="Yes, Team"      Txt="Activator's Team is Affected" }
                goal_effects: = { Typ="X4" Cap="Yes, NonTeam"   Txt="All not on Activator's Team is affected" }
                goal_effects: = { Typ="X8" Cap="Yes, All but Activator" Txt="Everyone is affected, except Activator" }
                maxammo_shells: = { Typ="C" Txt="Affect only Team"
                        items = "(none)"
                             $0D"Team 1 (Blue)"
                             $0D"Team 2 (Red)"
                             $0D"Team 3 (Yellow)"
                             $0D"Team 4 (Green)"
                        values = ""$0D"1"$0D"2"$0D"3"$0D"4"
                }
                maxammo_nails: = { Typ="C" Txt="Affect everyone except Team"
                        items = "(none)"
                             $0D"Team 1 (Blue)"
                             $0D"Team 2 (Red)"
                             $0D"Team 3 (Yellow)"
                             $0D"Team 4 (Green)"
                        values = ""$0D"1"$0D"2"$0D"3"$0D"4"
                }
                t_length: = { Txt="Affect Radius" Hint="" }
                goal_effects: = { Typ="X16" Cap="Obstructed by walls" Txt="(Affect Radius)" }
                goal_effects: = { Typ="X32" Cap="Yes, Water=Water, Ground=Ground" Txt="Affected must be in same environment" }
                goal_effects: = { Typ="X64" Cap="Yes" Txt="Effect individually in group" }
        }
        t_activation_result:incl = {
                goal_result: = { Typ="X1" Cap="Yes, remove" Txt="Remove at activation" }
                wait: = { Txt="Sec. before inactivation" Hint="If the 'wait' specific is non-zero, then the Goal stays"$0D"ACTIVE for the 'wait' seconds, and then inactivates. If 'wait' is -1, the Goal stays active permanently." }
                items: = { Txt="Give GoalItem No to ply" Hint="" }
                axhitme: = { Txt="Take GoalItem No from ply" Hint="" }
                remove_item_group: = { Txt="Take Group No items from ply" Hint="" }
                goal_result: = { Typ="X4" Cap="Yes, end level" Txt="End the level" }
                goal_result: = { Typ="X8" Cap="Yes, don't apply their results" Txt="Given items..." }
                goal_result: = { Typ="X16" Cap="Yes, reset affected spy" Txt="Uncover spy disguise" }
                goal_result: = { Typ="X32" Cap="Yes, respawn affected players" Txt="Respawn players" }
                activate_goal_no: = { Txt="Activate Goal No" Hint="" }
                inactivate_goal_no: = { Txt="Inactivate Goal No" Hint="" }
                remove_goal_no: = { Txt="Remove Goal No" Hint="" }
                restore_goal_no: = { Txt="Restore Goal No" Hint="" }
                all_active: = { Txt="If all active in Group No..." Hint="" }
                last_impulse: = { Txt="...then activate Goal No" Hint="" }
                activate_group_no: = { Txt="Activate goals in Group No" Hint="" }
                inactivate_group_no: = { Txt="Inactivate goals in Group No" Hint="" }
                remove_group_no: = { Txt="Remove goals in Group No" Hint="" }
                restore_group_no: = { Txt="Restore goals in Group No" Hint="" }
                return_item_no: = { Txt="Return noncarried GoalItem No" Hint="" }
                remove_spawnpoint: = { Txt="Remove Spawn No" Hint="Remove a spawnpoint with a matching 'goal_no'" }
                restore_spawnpoint: = { Txt="Restore Spawn No" Hint="Restore the matching spawnpoint" }
                remove_spawngroup: = { Txt="Remove SpawnGroup No" Hint="Remove all spawnpoints with a 'group_no' matching this number." }
                restore_spawngroup: = { Txt="Restore SpawnGroup No" Hint="Restore a group of spawnpoints." }
                increase_team: = { Txt="Teamcheck point gain" hint="Gives points to the info_tf_teamcheck team" }
                increase_team_owned_by: = { Txt="&" hint="? unknown ?" }
                increase_team1: = { Txt="Increase team 1 score" Hint="" }
                increase_team2: = { Txt="Increase team 2 score" Hint="" }
                increase_team3: = { Txt="Increase team 3 score" Hint="" }
                increase_team4: = { Txt="Increase team 4 score" Hint="" }
        }
        t_bbox:incl = {
                goal_min: = { Txt="bbox Min" Hint="Boundingbox minimum (-x,-y,-z)" }
                goal_max: = { Txt="bbox Max" Hint="Boundingbox maximum (x,y,z)" }
        }
        t_tfc_mdl_skin:incl = {
                mdl: = { Txt="MDL-file" Hint="" Typ="C" t_tfc_mdl = ! }
                skin: = { Txt="Skin No"
                        Hint="For FLAG.MDL the following skin-numbers apply:"
                          $0D"0 = Default"
                          $0D"1 = Team 2 (Red)"
                          $0D"2 = Team 1 (Blue)"
                          $0D"3 = Team 3 (Yellow)"
                          $0D"4 = Team 4 (Green)"$0D
                          $0D"(Don't ask why Red and Blue is set as it is)"
                }
        }

//
// Team Fortress Classic forms.
//
        f_status:form = {
                display_item_status1: = { Txt="1st Goal Item ID to Query" Hint="First Goal No ID to query, and display one of the three messages below" }
                display_item_status2: = { Txt="2nd Goal Item ID to Query" Hint="Second Goal No ID to query, and display one of the three messages below" }
                display_item_status3: = { Txt="3rd Goal Item ID to Query" Hint="Third Goal No ID to query, and display one of the three messages below" }
                display_item_status4: = { Txt="4th Goal Item ID to Query" Hint="Fourth Goal No ID to query, and display one of the three messages below" }

                team_str_moved: = { Txt="(Team) Item has been moved message" Hint="Example: 'Your team flag is secured at home'" }
                team_str_home: = { Txt="(Team) Item has not been moved message" Hint="Example: 'Your team flags is lying around'" }
                team_str_carried: = { Txt="(Team) Item is being carried message" Hint="Example: 'Your team flag is carried by <playername>', where <playername> is automatically appended." }

                non_team_str_moved: = { Txt="(Other teams) Item has been moved message" Hint="Example: 'The enemy flag is secured in their base'" }
                non_team_str_home: = { Txt="(Other teams) Item has not been moved message" Hint="Example: 'The enemy flag is lying around. Go find it!'" }
                non_team_str_carried: = { Txt="(Other teams) Item is being carried message" Hint="Example: 'The enemy flag is carried by <playername>', where <playername> is automatically appended." }
        }
        f_info_player_teamspawn:form = {
                goal_no: = { Txt="Unique Spawn No" Hint="Unique Spawn Number ID" }
                group_no: = { Txt="Belongs to Spawn Group No" Hint="Entity belongs to this Spawn Group Number ID" }
                goal_effects: = { Txt="(Teamspawn)" Typ="X1" Cap="Only use once" Hint="Only use this respawn point one time" }
                message: = { Txt="Respawn Message" Hint="Message to display to player respawning here" }
                goal_activation: = { Txt="(Respawn Message)" Typ="X2" Cap="Msg to everyone" Hint="Display message to everyone who spawns here."$0D"Unchecked means only to display message to the first person who spawns here." }
                items: = { Txt="Give Goal No" Hint="Give Goal Number ID item to player who respawns here" }
                goal_activation: = { Txt="(Give Goal No)" Typ="X1" Cap="Give to everyone" Hint="Give Goal Number ID item to everyone who respawns here"$0D"Unchecked means only to the first player who respawns here" }
                activate_goal_no: = { Txt="Activate Goal No" Hint="Activate this Goal Number ID, when someone respawns here" }
                goal_result: = { Typ="X2" cap="Yes" txt="Sub-goals apply mods" }
        }
        f_teamspawn_activation_criteria:form = {
                t_playerclass = !
                t_activation_criteria = !
        }
        f_info_activation_criteria:form = {
                t_team_no = !
                t_playerclass = !
                goal_activation: = { Typ="X1" Cap="Player touch" Txt="Activated by" }
                goal_activation: = { Typ="X2" Cap="Detpack explosion" Txt="Activated by" }
                goal_activation: = { Typ="X4" Cap="Yes, activator must NOT match criteria" Txt="Invert Activation Criteria" }
                t_activation_criteria = !
        }
        f_info_activation_effects:form = {
                t_owned_by = !
                t_activation_effects = !
        }
        f_timer_activation_effects:form = {
                delay_time:= { Txt="Activation delay" Hint="" }
                maxammo_shells: = { Typ="C" Txt="Affect only Team"
                        items = "(none)"
                             $0D"Team 1 (Blue)"
                             $0D"Team 2 (Red)"
                             $0D"Team 3 (Yellow)"
                             $0D"Team 4 (Green)"
                        values = ""$0D"1"$0D"2"$0D"3"$0D"4"
                }
                maxammo_nails: = { Typ="C" Txt="Affect everyone except Team"
                        items = "(none)"
                             $0D"Team 1 (Blue)"
                             $0D"Team 2 (Red)"
                             $0D"Team 3 (Yellow)"
                             $0D"Team 4 (Green)"
                        values = ""$0D"1"$0D"2"$0D"3"$0D"4"
                }
                t_length: = { Txt="Affect Radius" Hint="" }
                goal_effects: = { Typ="X16" Cap="Obstructed by walls" Txt="(Affect Radius)" }
                goal_effects: = { Typ="X32" Cap="Yes, Water=Water, Ground=Ground" Txt="Affected must be in same environment" }
                goal_effects: = { Typ="X64" Cap="Yes, check each ply" Txt="Individual ply affect-check" }
        }
        f_info_activation_result:form = {
                t_activation_result = !
                goal_result: = { Typ="X2" Cap="Yes, apply to Activator" Txt="Apply modif. of affected goals" }
                goal_result: = { Typ="X64" Cap="Yes, remove SG & dispensers"   Txt="Removes all SentryGuns and Dispensers in map" }
        }
        f_timer_activation_result:form = {
                t_activation_result = !
                goal_result: = { Typ="X64" Cap="Yes" Txt="If individually in group fails criteria" }
        }
        f_item_activation_criteria:form = {
                t_team_no = !
                t_playerclass = !
                t_activation_criteria = !
        }
        f_item_activation_effects:form = {
                t_activation_effects = !
                speed_reduction: = { Txt="% speed reduction" Hint="Percent of playerclass original speed" }
                goal_activation: = { Typ="X512" Cap="Yes, glow when not carried" Txt="Glow not carried" }
                goal_activation: = { Typ="X1024" Cap="Yes, keep effects" Txt="If item gets taken..." }
                items: = { Typ="X131072" Txt="Carried item light up..." Cap="'Blue' icon" Hint="Affects 'items' specific" }
                items: = { Typ="X262144" Txt="Carried item light up..." Cap="'Red' icon" Hint="Affects 'items' specific" }
                items: = { Typ="X16777216" Txt="Carried item light up..." Cap="'Yellow' icon" Hint="Affects 'items' specific" }
                items: = { Typ="X33554432" Txt="Carried item light up..." Cap="'Green' icon" Hint="Affects 'items' specific" }
                items: = { Typ="X524288" Txt="Carried item light up..." Cap="'Invisibility' icon" Hint="Affects 'items' specific" }
                items: = { Typ="X1048576" Txt="Carried item light up..." Cap="'Invulnerability' icon" Hint="Affects 'items' specific" }
                items: = { Typ="X2097152" Txt="Carried item light up..." Cap="'Radsuit' icon" Hint="Affects 'items' specific" }
                items: = { Typ="X4194304" Txt="Carried item light up..." Cap="'Quad' icon" Hint="Affects 'items' specific" }
        }
        f_item_activation_result:form = {
                t_activation_result = !
                goal_result: = { Typ="X2" Cap="Yes, don't apply bonuses to Activator" Txt="Don't apply bonuses of activated goals" }
                goal_result: = { Typ="X64" Cap="Yes, remove SG & dispensers"   Txt="Removes all SentryGuns and Dispensers in map" }
                goal_activation: = { Typ="X1" Cap="Yes, make player glow" Txt="Glow carrier" }
                goal_activation: = { Typ="X2" Cap="Yes, half-speed" Txt="Slowdown carrier" }
                goal_activation: = { Typ="X4" Cap="Yes, drop item" Txt="Drop item when carrier killed" }
                goal_activation: = { Typ="X8" Cap="Yes, return" Txt="Return if dropped" }
                goal_activation: = { Typ="X16" Cap="Yes, return" Txt="Return if removed" }
                goal_activation: = { Typ="X128" Cap="Yes, remove" Txt="Remove if timeout" }
                goal_activation: = { Typ="X8" Cap="Yes, return" Txt="Return if removed by timeout" }
                pausetime: = { Txt="Timeout sec." }
                impulse: = { Txt="Restore Goal No if this is returned" Hint="" }
                goal_activation: = { Typ="X256" Cap="Yes, keep it" Txt="Ply keeps item even when dead" }
                distance: = { Txt="If all items in Group No carried..." }
                pain_finished: = { Txt="...then activate Goal No" }
                speed: = { Txt="If all items in Group No carried by one player..." }
                attack_finished: = { Txt="...then activate Goal No" }
        }
        f_ammo_armor_health_powerups:form = {
                t_ammo_armor = !
                t_health_powerups = !
        }
        f_team1:form = {
                team1_name: = { txt="Team 1 teamname" Hint="E.q. 'Attackers', 'Defenders' or whatever cool"$0D"teamname you can think of. Max 15 characters." }
                maxammo_shells: = { Typ="C" Txt="Team 1 consists of" Hint=""
                        items = "All classes"
                             $0D"Civilians only"
                        values = ""$0D"-1"
                }
//              maxammo_shells: = { Typ="X-1" Txt="Team 1 consists of" Cap="Only civilians" Hint="The specific 'maxammo_shells' must be exactly '-1', to make this team Civilian only!" }
                maxammo_shells: = { Typ="X1" Txt="Team 1 can't play" Cap="Scout" Hint="" }
                maxammo_shells: = { Typ="X2" Txt="Team 1 can't play" Cap="Sniper" Hint="" }
                maxammo_shells: = { Typ="X4" Txt="Team 1 can't play" Cap="Soldier" Hint="" }
                maxammo_shells: = { Typ="X8" Txt="Team 1 can't play" Cap="DemoMan" Hint="" }
                maxammo_shells: = { Typ="X16" Txt="Team 1 can't play" Cap="Medic" Hint="" }
                maxammo_shells: = { Typ="X32" Txt="Team 1 can't play" Cap="HWGuy" Hint="" }
                maxammo_shells: = { Typ="X64" Txt="Team 1 can't play" Cap="Pyro" Hint="" }
                maxammo_shells: = { Typ="X256" Txt="Team 1 can't play" Cap="Spy" Hint="" }
                maxammo_shells: = { Typ="X512" Txt="Team 1 can't play" Cap="Engineer" Hint="" }
                maxammo_shells: = { Typ="X128" Txt="Team 1 can't play" Cap="Random" Hint="" }
                noise1: = { Txt="Team 1 classmenu String" Hint="" }
                ammo_shells: = { Txt="Limit lives to" Hint="0 = Unlimited" }
                ammo_medikit: = { Txt="Limit no of players to" Hint="0 = Unlimited" }
//              team1_allies: = { Typ="X1" Cap="Blue"   Txt="Team 1 allied with Blue" }
                team1_allies: = { Typ="X2" Cap="Red"    Txt="Team 1 allied with Red" }
                team1_allies: = { Typ="X4" Cap="Yellow" Txt="Team 1 allied with Yellow" }
                team1_allies: = { Typ="X8" Cap="Green"  Txt="Team 1 allied with Green" }
        }
        f_team2:form = {
                team2_name: = { txt="Team 2 teamname" Hint="E.q. 'Attackers', 'Defenders' or whatever cool"$0D"teamname you can think of. Max 15 characters." }
                maxammo_nails: = { Typ="C" Txt="Team 2 consists of" Hint=""
                        items = "All classes"
                             $0D"Civilians only"
                        values = ""$0D"-1"
                }
//              maxammo_nails: = { Typ="X-1" Txt="Team 2 consists of" Cap="Only civilians" Hint="The specific 'maxammo_nails' must be exactly '-1', to make this team Civilian only!" }
                maxammo_nails: = { Typ="X1" Txt="Team 2 can't play" Cap="Scout" Hint="" }
                maxammo_nails: = { Typ="X2" Txt="Team 2 can't play" Cap="Sniper" Hint="" }
                maxammo_nails: = { Typ="X4" Txt="Team 2 can't play" Cap="Soldier" Hint="" }
                maxammo_nails: = { Typ="X8" Txt="Team 2 can't play" Cap="DemoMan" Hint="" }
                maxammo_nails: = { Typ="X16" Txt="Team 2 can't play" Cap="Medic" Hint="" }
                maxammo_nails: = { Typ="X32" Txt="Team 2 can't play" Cap="HWGuy" Hint="" }
                maxammo_nails: = { Typ="X64" Txt="Team 2 can't play" Cap="Pyro" Hint="" }
                maxammo_nails: = { Typ="X256" Txt="Team 2 can't play" Cap="Spy" Hint="" }
                maxammo_nails: = { Typ="X512" Txt="Team 2 can't play" Cap="Engineer" Hint="" }
                maxammo_nails: = { Typ="X128" Txt="Team 2 can't play" Cap="Random" Hint="" }
                noise2: = { Txt="Team 2 classmenu String" Hint="" }
                ammo_nails: = { Txt="Limit lives to" Hint="0 = Unlimited" }
                ammo_detpack: = { Txt="Limit no of players to" Hint="0 = Unlimited" }
                team2_allies: = { Typ="X1" Cap="Blue"   Txt="Team 2 allied with Blue" }
//              team2_allies: = { Typ="X2" Cap="Red"    Txt="Team 2 allied with Red" }
                team2_allies: = { Typ="X4" Cap="Yellow" Txt="Team 2 allied with Yellow" }
                team2_allies: = { Typ="X8" Cap="Green"  Txt="Team 2 allied with Green" }
        }
        f_team3:form = {
                team3_name: = { txt="Team 3 teamname" Hint="E.q. 'Attackers', 'Defenders' or whatever cool"$0D"teamname you can think of. Max 15 characters." }
                maxammo_rockets: = { Typ="C" Txt="Team 3 consists of" Hint=""
                        items = "All classes"
                             $0D"Civilians only"
                        values = ""$0D"-1"
                }
//              maxammo_rockets: = { Typ="X-1" Txt="Team 3 consists of" Cap="Only civilians" Hint="The specific 'maxammo_rockets' must be exactly '-1', to make this team Civilian only!" }
                maxammo_rockets: = { Typ="X1" Txt="Team 3 can't play" Cap="Scout" Hint="" }
                maxammo_rockets: = { Typ="X2" Txt="Team 3 can't play" Cap="Sniper" Hint="" }
                maxammo_rockets: = { Typ="X4" Txt="Team 3 can't play" Cap="Soldier" Hint="" }
                maxammo_rockets: = { Typ="X8" Txt="Team 3 can't play" Cap="DemoMan" Hint="" }
                maxammo_rockets: = { Typ="X16" Txt="Team 3 can't play" Cap="Medic" Hint="" }
                maxammo_rockets: = { Typ="X32" Txt="Team 3 can't play" Cap="HWGuy" Hint="" }
                maxammo_rockets: = { Typ="X64" Txt="Team 3 can't play" Cap="Pyro" Hint="" }
                maxammo_rockets: = { Typ="X256" Txt="Team 3 can't play" Cap="Spy" Hint="" }
                maxammo_rockets: = { Typ="X512" Txt="Team 3 can't play" Cap="Engineer" Hint="" }
                maxammo_rockets: = { Typ="X128" Txt="Team 3 can't play" Cap="Random" Hint="" }
                noise3: = { Txt="Team 3 classmenu String" Hint="" }
                ammo_rockets: = { Txt="Limit lives to" Hint="0 = Unlimited" }
                maxammo_medikit: = { Txt="Limit no of players to" Hint="0 = Unlimited" }
                team3_allies: = { Typ="X1" Cap="Blue"   Txt="Team 3 allied with Blue" }
                team3_allies: = { Typ="X2" Cap="Red"    Txt="Team 3 allied with Red" }
//              team3_allies: = { Typ="X4" Cap="Yellow" Txt="Team 3 allied with Yellow" }
                team3_allies: = { Typ="X8" Cap="Green"  Txt="Team 3 allied with Green" }
        }
        f_team4:form = {
                team4_name: = { txt="Team 4 teamname" Hint="E.q. 'Attackers', 'Defenders' or whatever cool"$0D"teamname you can think of. Max 15 characters." }
                maxammo_cells: = { Typ="C" Txt="Team 4 consists of" Hint=""
                        items = "All classes"
                             $0D"Civilians only"
                        values = ""$0D"-1"
                }
//              maxammo_cells: = { Typ="X-1" Txt="Team 4 consists of" Cap="Only civilians" Hint="The specific 'maxammo_cells' must be exactly '-1', to make this team Civilian only!" }
                maxammo_cells: = { Typ="X1" Txt="Team 4 can't play" Cap="Scout" Hint="" }
                maxammo_cells: = { Typ="X2" Txt="Team 4 can't play" Cap="Sniper" Hint="" }
                maxammo_cells: = { Typ="X4" Txt="Team 4 can't play" Cap="Soldier" Hint="" }
                maxammo_cells: = { Typ="X8" Txt="Team 4 can't play" Cap="DemoMan" Hint="" }
                maxammo_cells: = { Typ="X16" Txt="Team 4 can't play" Cap="Medic" Hint="" }
                maxammo_cells: = { Typ="X32" Txt="Team 4 can't play" Cap="HWGuy" Hint="" }
                maxammo_cells: = { Typ="X64" Txt="Team 4 can't play" Cap="Pyro" Hint="" }
                maxammo_cells: = { Typ="X256" Txt="Team 4 can't play" Cap="Spy" Hint="" }
                maxammo_cells: = { Typ="X512" Txt="Team 4 can't play" Cap="Engineer" Hint="" }
                maxammo_cells: = { Typ="X128" Txt="Team 4 can't play" Cap="Random" Hint="" }
                noise4: = { Txt="Team 4 classmenu String" Hint="" }
                ammo_cells: = { Txt="Limit lives to" Hint="0 = Unlimited" }
                maxammo_detpack: = { Txt="Limit no of players to" Hint="0 = Unlimited" }
                team4_allies: = { Typ="X1" Cap="Blue"   Txt="Team 4 allied with Blue" }
                team4_allies: = { Typ="X2" Cap="Red"    Txt="Team 4 allied with Red" }
                team4_allies: = { Typ="X4" Cap="Yellow" Txt="Team 4 allied with Yellow" }
//              team4_allies: = { Typ="X8" Cap="Green"  Txt="Team 4 allied with Green" }
        }
        f_infogoal_messages:form = {
                t_goal_messages = !
        }
        f_itemgoal_messages:form = {
                t_goal_messages = !
                t_goalitem_messages = !
        }
        f_tfc_trigger_activation_criteria:form = {
                t_team_no = !
                t_playerclass = !
                t_activation_criteria = !
//              goal_activation: = { Typ="X1" Cap="Player touch" Txt="Activated by" }
//              goal_activation: = { Typ="X2" Cap="Detpack explosion" Txt="Activated by" }
                goal_activation: = { Typ="X4" Cap="Yes, activator must NOT match criteria" Txt="Invert Activation Criteria" }
                goal_activation: = { Typ="X8" Cap="Activate if Engineer Spanner" Txt="Activate if hit by Engineer Spanner" }
        }
        f_tfc_trigger_activation_effects:form = {
                t_owned_by = !
                t_activation_effects = !
        }
        f_tfc_trigger_activation_result:form = {
                t_activation_result = !
        }
        f_tfc_trigger_goal_messages:form = {
                t_goal_messages = !
        }

        t_tfc_settings:incl = {
                tfc_form1: = {
                        Typ = "B"
                        Txt = "(TFC)"
                        Cap = "Activ.Criteria"
                        form = "f_tfc_trigger_activation_criteria:form"
                        Hint = ""
                }
                tfc_form2: = {
                        Typ = "B"
                        Txt = "(TFC)"
                        Cap = "Activ.Effects"
                        form = "f_tfc_trigger_activation_effects:form"
                        Hint = ""
                }
                tfc_form3: = {
                        Typ = "B"
                        Txt = "(TFC)"
                        Cap = "Activ.Result"
                        form = "f_tfc_trigger_activation_result:form"
                        Hint = ""
                }
                tfc_form4: = {
                        Typ = "B"
                        Txt = "(TFC)"
                        Cap = "Messages"
                        form = "f_tfc_trigger_goal_messages:form"
                        Hint = ""
                }
        }
        f_tfc_turret_attack:form = {
                t_teamcheck = !
                t_team_no = !
                goal_activation: = { Typ="X4" Cap="NOT on the choosen team" Txt="Attack anyone..." }
        }
        t_tfc_turret:incl = {
                tfc_form1: = {
                        Typ = "B"
                        Txt = "(TFC)"
                        Cap = "Attack..."
                        form = "f_tfc_turret_attack:form"
                        Hint = ""
                }
        }

//
// Science & Industry
//
        // Simple INCLs
        t_si_team:incl ={
                team: = { Typ="C" Txt="Team" Hint="Team"
                        items = "None"
                             $0D"MCL (Blue)"
                             $0D"AFD (Green)"
                        values="-1"$0D"0"$0D"1"
                }
        }

        // FORMs
        f_si_t_weapon:form = {
                t_si_team = !
                spawnflags: = { typ="X32" cap="Ignore Research" }
        }
        f_si_t_breakable:form = {
                spawnobject: = { Typ="C" Txt="&"
                        Items =
   "Nothing"
$0D"Battery"
$0D"Healthkit"
$0D"weapon_colt"
$0D"weapon_357"
$0D"weapon_9mmAR"
$0D"weapon_shotgun"
$0D"weapon_rpg"
$0D"weapon_gauss"
$0D"weapon_crossbow"
$0D"weapon_tripmine"
$0D"weapon_satchel"
$0D"weapon_handgrenade"
$0D"weapon_transistor"
$0D"weapon_vomit"
$0D"weapon_mindray"
$0D"weapon_tommygun"
$0D"weapon_snUZI"
$0D"weapon_rocketpistol"
$0D"weapon_fleshgrenade"
$0D"weapon_grapple"
$0D"weapon_cloak"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D"20"$0D"21"
                }
        }
        f_si_t_team:form = {
                t_si_team = !
        }

        // Button INCLs
        t_si_button:incl = {
                Typ = "B"
                Txt = "(Sci+Indu)"
                Cap = "Push..."
                Hint = "Science & Industry settings"
        }
        t_si_t_weapon:incl = {
                science_and_industry: = {
                        t_si_button = !
                        form = "f_si_t_weapon:form"
                }
        }
        t_si_t_breakable:incl = {
                science_and_industry: = {
                        t_si_button = !
                        form = "f_si_t_breakable:form"
                }
        }
        t_si_t_team:incl = {
                science_and_industry: = {
                        t_si_button = !
                        form = "f_si_t_team:form"
                }
        }

//
// War In Europe
//
        t_wie_worldspawn:incl = {
                mapteams = { Typ="C" Txt="&"
                        items = "allies;axis"
                        values= "allies;axis"
                }
        }
        f_war_in_europe:form = {
                t_wie_worldspawn = !
        }
        t_wie_settings:incl = {
                war_in_europe: = {
                        Typ = "B"
                        Txt = "(WarInEurope)"
                        Cap = "Push..."
                        form = "f_war_in_europe:form"
                        Hint = "War In Europe settings"
                }
        }


//
// Opposing Force
//
        t_op4_weapon:incl = {
                bbox = '-16 -16 0 16 16 32'
                t_targetname = !
                t_targetx = !
                t_rendermode = !
        }
        t_op4_ammo:incl = {
                bbox = '-16 -16 0 16 16 32'
                t_targetname = !
                t_targetx = !
                t_rendermode = !
        }

        f_op4_worldspawn:form = {
                defaultctf: = { Txt="&" Typ="C" Hint="Default CTF"
                        items = "Not CTF map"
                             $0D"CTF map"
                        values = "0"$0D"1"
                }
        }
        t_op4_worldspawn_settings:incl = {
                op4: = {
                        Typ = "B"
                        Txt = "(OpposingForce)"
                        Cap = "Push..."
                        form = "f_op4_worldspawn:form"
                        Hint = "Opposing Force settings"
                }
        }
        f_op4_scientist:form = {
                body: = { Typ="C" Txt="&"
                        Items = "Random"
                             $0D"Glasses"
                             $0D"Einstein"
                             $0D"Luther"
                             $0D"Slick"
                             $0D"Einstein w/Clipboard"
                             $0D"Slick w/Stick"
                        Values ="-1"$0D"0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"
                }
                suspicious: = { Typ="C" Hint="(Opposing Force)" Txt="&"
                        items = "No"
                             $0D"Yes"
                        values = "0"$0D"1"
                }
        }
        t_op4_scientist_settings:incl = {
                op4: = {
                        Typ = "B"
                        Txt = "(OpposingForce)"
                        Cap = "Push..."
                        form = "f_op4_scientist:form"
                        Hint = "Opposing Force settings"
                }
        }
        f_op4_suspicious:form = {
                suspicious: = { Typ="C" Hint="(Opposing Force)" Txt="&"
                        items = "No"
                             $0D"Yes"
                        values = "0"$0D"1"
                }
        }
        t_op4_suspicious_settings:incl = {
                op4: = {
                        Typ = "B"
                        Txt = "(OpposingForce)"
                        Cap = "Push..."
                        form = "f_op4_suspicious:form"
                        Hint = "Opposing Force settings"
                }
        }
        f_op4_body:form = {
                body: = { Typ="C" Hint="(Opposing Force)" Txt="&"
                        items = "Standing"
                             $0D"Laying flat"
                        values = "0"$0D"1"
                }
        }
        t_op4_body_settings:incl = {
                op4: = {
                        Typ = "B"
                        Txt = "(OpposingForce)"
                        Cap = "Push..."
                        form = "f_op4_body:form"
                        Hint = "Opposing Force settings"
                }
        }
        f_op4_tentacle3:form = {
                spawnflags: = { Txt="&" Typ="X64" Cap="Tentacle3" Hint="(Opposing Force)" }
        }
        t_op4_tentacle3_settings:incl = {
                op4: = {
                        Typ = "B"
                        Txt = "(OpposingForce)"
                        Cap = "Push..."
                        form = "f_op4_tentacle3:form"
                        Hint = "Opposing Force settings"
                }
        }
        f_op4_noresetentity:form = {
                spawnflags: = { Txt="&" Typ="X256" Cap="No Reset Entity" Hint="(Opposing Force)" }
        }
        t_op4_noresetentity_settings:incl = {
                op4: = {
                        Typ = "B"
                        Txt = "(OpposingForce)"
                        Cap = "Push..."
                        form = "f_op4_noresetentity:form"
                        Hint = "Opposing Force settings"
                }
        }
        t_op4_wirerope_mdl:incl = {
                items =
   "rope16"
$0D"rope24"
$0D"rope32"
$0D"wire_black8"
$0D"wire_black16"
$0D"wire_black24"
$0D"wire_black32"
$0D"wire_blue8"
$0D"wire_blue16"
$0D"wire_blue24"
$0D"wire_blue32"
$0D"wire_copper8"
$0D"wire_copper16"
$0D"wire_copper24"
$0D"wire_copper32"
$0D"wire_red8"
$0D"wire_red16"
$0D"wire_red24"
$0D"wire_red32"
                values =
   "models/rope16.mdl"
$0D"models/rope24.mdl"
$0D"models/rope32.mdl"
$0D"models/wire_black8.mdl"
$0D"models/wire_black16.mdl"
$0D"models/wire_black24.mdl"
$0D"models/wire_black32.mdl"
$0D"models/wire_blue8.mdl"
$0D"models/wire_blue16.mdl"
$0D"models/wire_blue24.mdl"
$0D"models/wire_blue32.mdl"
$0D"models/wire_copper8.mdl"
$0D"models/wire_copper16.mdl"
$0D"models/wire_copper24.mdl"
$0D"models/wire_copper32.mdl"
$0D"models/wire_red8.mdl"
$0D"models/wire_red16.mdl"
$0D"models/wire_red24.mdl"
$0D"models/wire_red32.mdl"
        }
        f_op4_teleport:form = {
                telesound: = { txt="&" Hint="Teleport Sound" }
        }
        t_op4_teleport_settings:incl = {
                op4: = {
                        Typ = "B"
                        Txt = "(OpposingForce)"
                        Cap = "Push..."
                        form = "f_op4_teleport:form"
                        Hint = "Opposing Force settings"
                }
        }

//
// Deathmatch Classic
//
        f_dmc_worldspawn_settings:form = {
          ;desc = "Deathmatch Classic settings"
          worldtype: =
          {
            txt = "&"
            hint = "Ambience"
            typ = "C"
            items = "Medieval"$0D"Runic (metal)"$0D"Present (base)"
            values = "0"$0D"1"$0D"2"
          }
        }
        t_dmc_worldspawn_settings:incl = {
          dmc: = {
            Typ = "B"
            Txt = "(Deathmatch Classic)"
            Cap = "Push..."
            form = "f_dmc_worldspawn_settings:form"
            Hint = ""
          }
        }

//
// FireArms
//
        t_fa_trigger_multiple:form = {
            wait: = { txt="&" hint="Delay before reset" }
            impulse: = { txt="&" typ="C" hint="Team Trigger"
                items="Either team"
                   $0D"Red Force only"
                   $0D"Blue Force only"
                values="0"$0D"1"$0D"2"
            }
            team: = {txt="&" typ="C" hint="Team Item Required"
                items="No Item Required"
                   $0D"Neutral Item"
                   $0D"Red Force Item"
                   $0D"Blue Force Item"
                values="0"$0D"-1"$0D"1"$0D"2"
            }
            dmg: = { txt="&" typ="C" hint="Capture Item?"
                items="No"
                   $0D"Yes"
                values="0"$0D"1"
            }
        }
        t_fa_trigger_multiple_settings:incl = {
            fa: = {
                    Typ = "B"
                    Txt = "(FireArms)"
                    Cap = "Push..."
                    form = "t_fa_trigger_multiple:form"
                    Hint = "FireArms settings"
            }
        }

//
// The Sherman Project
//
	t_tsp_teamid:incl = {
		teamid: = { txt="&" typ="C" hint="Team ID"
                        items=  "Good guys"
                             $0D"Bad guys"
                             $0D"special"
			values="0"$0D"1"$0D"2"
		}
	}

//
// Sven-Coop
//
        t_svc_HTML:incl = {
            HTML = "http://www.svencoop.com"
        }

        f_svc_basetank:form = {
            relation_player:    = { typ="C" txt="&" hint="R Player"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_none:    = { typ="C" txt="&" hint="R Unknown"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_machine:    = { typ="C" txt="&" hint="R Machine"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_human_passive:    = { typ="C" txt="&" hint="R Human Passive"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_human_militar:    = { typ="C" txt="&" hint="R Human Militar"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_alien_militar:    = { typ="C" txt="&" hint="R Alien Militar"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_alien_passive:    = { typ="C" txt="&" hint="R Alien Passive"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_alien_monster:    = { typ="C" txt="&" hint="R Alien Monster"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_alien_prey:    = { typ="C" txt="&" hint="R Alien Prey"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_alien_predator:    = { typ="C" txt="&" hint="R Alien Predator"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_insect:    = { typ="C" txt="&" hint="R Insect"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_player_ally:    = { typ="C" txt="&" hint="R Player Ally"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_player_bioweapon:    = { typ="C" txt="&" hint="R Player BioWeapon"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
            relation_monster_bioweapon:    = { typ="C" txt="&" hint="R Monster BioWeapon"
                items =
                       "Ally"
                    $0D"Friend"
                    $0D"No Relation"
                    $0D"Dislike"
                    $0D"Hate"
                    $0D"Nemesis"
                values =
                       "-2"
                    $0D"-1"
                    $0D"0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
            }
        }
        t_svc_basetank:incl = {
                svc: = {
                    Typ = "B"
                    Txt = "(Sven-Coop)"
                    Cap = "Push..."
                    form = "f_svc_basetank:form"
                    Hint = "Sven-Coop settings"
                }
        }

        f_svc_monster_barney:form = {
            is_player_ally:    = { typ="C" txt="&" hint="Is Player Ally"
                items =
                       "No"
                    $0D"Yes"
                values =
                       "1"
                    $0D"0"
            }
        }
        t_svc_monster_barney:incl = {
                svc: = {
                    Typ = "B"
                    Txt = "(Sven-Coop)"
                    Cap = "Push..."
                    form = "f_svc_monster_barney:form"
                    Hint = "Sven-Coop settings"
                }
        }

        f_svc_monster_grunt_repel:form = {
            weapons:    = { typ="C" txt="&" hint="Weapons"
                items =
                       "9mmAR"
                    $0D"9mmAR + HG"
                    $0D"9mmAR + GL"
                    $0D"Shotgun"
                    $0D"Shotgun + HG"
                values =
                       "1"
                    $0D"3"
                    $0D"5"
                    $0D"8"
                    $0D"10"
            }
        }
        t_svc_monster_grunt_repel:incl = {
                svc: = {
                    Typ = "B"
                    Txt = "(Sven-Coop)"
                    Cap = "Push..."
                    form = "f_svc_monster_grunt_repel:form"
                    Hint = "Sven-Coop settings"
                }
        }

        f_svc_monster_osprey:form = {
            health:    = { txt="&" hint="Health" }
        }
        t_svc_monster_osprey:incl = {
                svc: = {
                    Typ = "B"
                    Txt = "(Sven-Coop)"
                    Cap = "Push..."
                    form = "f_svc_monster_osprey:form"
                    Hint = "Sven-Coop settings"
                }
        }

        f_svc_monstermaker:form = {
            respawn_as_playerally:    = { typ="C" txt="&" hint="Make Player Allys"
                items =
                       "NO"
                    $0D"YES"
                values =
                       "0"
                    $0D"1"
            }
        }
        t_svc_monstermaker:incl = {
                svc: = {
                    Typ = "B"
                    Txt = "(Sven-Coop)"
                    Cap = "Push..."
                    form = "f_svc_monstermaker:form"
                    Hint = "Sven-Coop settings"
                }
        }

//
// Front Line Force
//
        f_flf_turret:form = {
                origin:     = {txt="&" hint="Place the center of the entity level with floor or ceiling."$0D"Next move the entity one unit down if its a 'floor mount' and one unit up if its a 'ceiling mount'." }
                angle:      = {txt="&" hint="Set to the angle an enemy is most likely to come from (not nessesary.)" }
                s:          = {typ="S" Txt="" }
                orientation: = {Typ="C" Txt="&" Hint="Orientation"$0D$0D"Place the center of the entity level with floor or ceiling."$0D"Next move the entity one unit down if its a 'floor mount' and one unit up if its a 'ceiling mount'."
                        Items = "Floor Mount"
                             $0D"Ceiling Mount"
                        Values ="0"
                             $0D"1"
                }
                TriggerCondition: = { Typ="C" Txt="&"
                        Items ="See Player, Mad at Player"
                        Values="1"
                }
                teamowner:  = {txt="&" typ="C" hint="Owner, give it a value of 'attacker' if it belongs to the attackers or 'defender' if it belongs to the defenders."
                        items ="attacker"
                            $0D"defender"
                }
                spawnflags: = {txt="&" typ="X32" cap="Autostart" hint="Check if you want the turret to automaticaly open fire (recomended)." }
        }
        t_flf_turret:incl = {
                flf: = {
                    Typ = "B"
                    Txt = "(FrontLineForce)"
                    Cap = "Push..."
                    form = "f_flf_turret:form"
                    Hint = "Front Line Force settings"
                }
        }

//
// Turbo
//
        f_tbo_t_weapon:form = {
                spawnflags: = { Typ="X1" Cap="Preserve" hint="" txt="&" }
        }
        t_tbo_t_weapon:incl = {
                tbo: = {
                    Typ = "B"
                    Txt = "(Turbo)"
                    Cap = "Push..."
                    form = "f_tbo_t_weapon:form"
                    Hint = "Turbo settings"
                }
        }

//
// Day of Defeat
//
        f_dod_t_door:form = {
                TeamDoors: = { txt="&" typ="C" hint="Team Specific Door"
                        items =    "Both Teams"
                                $0D"Allies Only"
                                $0D"Axis Only"
                        values = "0"$0D"1"$0D"2"
                }
                t_spirit_movewith = !
        }
        t_dod_t_door:incl = {
                dod: = {
                    Typ = "B"
                    Txt = "(DayOfDefeat)"
                    Cap = "Push..."
                    form = "f_dod_t_door:form"
                    Hint = "Day of Defeat settings"
                }
        }

        f_dod_t_triggerhurt:form = {
                spawnflags: = { Txt="&" Typ="X64"  Cap="DontHurtAllies" }
                spawnflags: = { Txt="&" Typ="X128" Cap="DontHurtAxis" }
        }
        t_dod_t_triggerhurt:incl = {
                dod: = {
                    Typ = "B"
                    Txt = "(DayOfDefeat)"
                    Cap = "Push..."
                    form = "f_dod_t_triggerhurt:form"
                    Hint = "Day of Defeat settings"
                }
        }

        f_dod_teleport:form = {
                spawnflags: = { Txt="&" Typ="X8"  Cap="No Allies" }
                spawnflags: = { Txt="&" Typ="X16" Cap="No Axis" }
        }
        t_dod_teleport:incl = {
                dod: = {
                    Typ = "B"
                    Txt = "(DayOfDefeat)"
                    Cap = "Push..."
                    form = "f_dod_teleport:form"
                    Hint = "Day of Defeat settings"
                }
        }

        f_dod_trigger:form = {
                teamonly: = { txt="&" typ="C" hint="Activate for team"
                        items =    "Both Teams"
                                $0D"Allies Only"
                                $0D"Axis Only"
                        values = "0"$0D"1"$0D"2"
                }
        }
        t_dod_trigger:incl = {
                dod: = {
                    Typ = "B"
                    Txt = "(DayOfDefeat)"
                    Cap = "Push..."
                    form = "f_dod_trigger:form"
                    Hint = "Day of Defeat settings"
                }
        }

        f_dod_cam:form = {
            zoomlevel: = { txt="&" hint="Zoom FOV (scope=20, binoc=50, normal=90)" }
            cam_overlay: = { txt="&" typ="C"
                items = "normal"
                     $0D"Scope (20)"
                     $0D"Binoculars (50)"
                     $0D"Widescreen (110)"
                values = "0"$0D"1"$0D"2"$0D"3"
            }
            subtitle: = { typ="&" hint="Subtitle" }
        }
        t_dod_cam:incl = {
                dod: = {
                    Typ = "B"
                    Txt = "(DayOfDefeat)"
                    Cap = "Push..."
                    form = "f_dod_cam:form"
                    Hint = "Day of Defeat settings"
                }
        }

//
// JailBreak
//
        f_jb_env_fade:form = {
                master: = { Txt="&" Hint="(Team) Master" }
        }
        t_jb_env_fade:incl = {
                jailbreak: = {
                        Typ = "B"
                        Txt = "(Jailbreak)"
                        Cap = "Push..."
                        form = "f_jb_env_fade:form"
                        Hint = "Jailbreak settings"
                }
        }

//
//
//
        t_weapon:incl = {
                bbox = '-16 -16 0 16 16 32'
                t_targetname = !
                t_targetx = !
                t_rendermode = !
                t_angles = !
                t_tfc_settings = !
                t_si_t_weapon = !
                t_tbo_t_weapon = !
        }
        t_ammo:incl = {
                bbox = '-16 -16 0 16 16 32'
                t_targetname = !
                t_targetx = !
                t_rendermode = !
                t_tfc_settings = !
                t_si_t_weapon = !
        }
        t_item:incl = {
                bbox = '-16 -16 0 16 16 36'
                t_targetname = !
                t_targetx = !
                t_tfc_settings = !
        }
        t_player:incl = {
                bbox = '-16 -16 -36 16 16 36'
                t_angles = !
        }
        t_modelbrowser:incl = {
                Typ = "EP"
                DefExt = "mdl"
                BasePath = "$Game"
                CutPath = "$Game\?\models"
                DirSep = "/"
                AugPath = "models"
        }
        t_soundbrowser:incl = {
                Typ = "EP"
                DefExt = "wav"
                BasePath = "$Game"
                CutPath = "$Game\?\sound"
                DirSep = "/"
                AugPath = "sound"
        }
        t_spritebrowser:incl = {
                Typ = "EP"
                DefExt = "spr"
                BasePath = "$Game"
                CutPath = "$Game\?\sprites"
                DirSep = "/"
                AugPath = "sprites"
        }



        t_monster:incl = {
                t_targetname = !
                t_target = !
                TriggerTarget: = { Txt="&" Hint="Targetname of object to trigger when 'TriggerCondition' is met" }
                TriggerCondition: = { Typ="C" Txt="&"
                        Items = "No Trigger"
                             $0D"See Player, Mad at Player"
                             $0D"Take Damage"
                             $0D"50% Health Remaining"
                             $0D"Death"
//                             $0D"(N/A) Squad Member Dead"
//                             $0D"(N/A) Squad Leader Dead"
                             $0D"Hear World"
                             $0D"Hear Player"
                             $0D"Hear Combat"
                             $0D"See Player Unconditional"
                             $0D"See Player, Not In Combat"
                        Values ="0"$0D"1"$0D"2"$0D"3"$0D"4"
//                                $0D"5"
//                                $0D"6"
                             $0D"7"$0D"8"$0D"9"$0D"10"$0D"11"
                }
                spawnflags: = { Txt="&" Typ="X1" Cap="WaitTillSeen" hint="Don't attack the player until s/he can see us." }
                spawnflags: = { Txt="&" Typ="X2" Cap="Gag" hint="Don't speak except when in combat. Don't make 'idle' noises."}
                spawnflags: = { Txt="&" Typ="X4" Cap="MonsterClip" hint="If ticked, the monster can't enter a func_monsterclip area."}
                spawnflags: = { Txt="&" Typ="X16" Cap="Prisoner" hint="If ticked, the monster will ignore all other monsters and vice versa."}
                spawnflags: = { Txt="&" Typ="X128" Cap="No yellow blobs" hint="The dreaded yellow blobs appear for a good reason; they show a monster is stuck"$0D"in a wall and unable to move. Only tick this if you're happy for it to be stuck."}
                spawnflags: = { Txt="&" Typ="X256" Cap="Pre-Disaster" }
                spawnflags: = { Txt="&" Typ="X512" Cap="Fade Corpse" }
                spawnflags: = { Txt="&" Typ="X2048" Cap="Invert ally" hint="Setting for Spirit of Half-Life"$0D"Prevents the monster from attacking the player. The monster's relationships with"$0D"other monsters won't change. (If you set 'behaves as' to Scientist or Barney, this"$0D"flag will make the monster attack the player.)" }
                m_iClass: = { txt="Behave as" typ="C" hint="Setting for Spirit of Half-Life"
                    items =
                           "Normal"
                        $0D"Scientist"
                        $0D"Barney"
                        $0D"Human Military"
                        $0D"Machine (Human Military)"
                        $0D"Alien Military"
                        $0D"Other Alien"
                        $0D"Headcrab"
                        $0D"Bullsquid"
                    values =
                           "0"
                        $0D"3"
                        $0D"11"
                        $0D"4"
                        $0D"1"
                        $0D"5"
                        $0D"7"
                        $0D"8"
                        $0D"9"
                }
                t_rendermode = !
                t_angles = !
        }
        t_talkmonster:incl = {
                UseSentence: = { Txt="&" }
                UnUseSentence: = { Txt="&" }

                RefusalSentence: = { Txt="&" hint="Settings for Spirit of Half-Life" }
                master: = { txt="&" hint="Settings for Spirit of Half-Life"$0D"Master (prevents following)" }
                SpeakAs: = { txt="&" hint="Speech Group" hint="Settings for Spirit of Half-Life"$0D"Mostly provided for mod-makers. In the standard sentences.txt,"$0D"valid settings for this are BA (speak as a Barney) and SC (speak as a Scientist)."}
                spawnflags: = { Txt="&" Typ="X256" Cap="Pre-Disaster" hint="Unless given a Master, a pre-disaster monster will refuse to follow the player." }
        }
        t_squadmonster:incl = {
                netname: = { Txt="&"  Hint="Squad Name" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Squad Leader" }
        }
        t_op4_suspicious:incl = {
                t_op4_suspicious_settings = !
        }
        t_light:incl = {
                _light: = { Txt="&" Hint="Brightness (R G B intensity)" }
                _light: = { Typ="L 4" Txt="&" Hint="Click here to pick the light color" }
                style: = { Typ="C" Txt="&"
                        Items =
   "Normal"
$0D"Fluorescent flicker"
$0D"Slow, strong pulse"
$0D"Slow pulse, noblack"
$0D"Gentle pulse"
$0D"Flicker A"
$0D"Flicker B"
$0D"Candle A"
$0D"Candle B"
$0D"Candle C"
$0D"Fast strobe"
$0D"Slow strobe"
$0D"Underwater"
                        Values = "0"$0D"10"$0D"2"$0D"11"$0D"5"$0D"1"$0D"6"$0D"3"$0D"7"$0D"8"$0D"4"$0D"9"$0D"12"
                }
                pattern: = { Txt="&" Hint="Custom Appearance" }

                m_iOnStyle: = { Typ="C" Txt="&" hint="Appearance (on)"
                    items =
                            "Normal (on)"
                            $0D"Off"
                            $0D"Fluorescent flicker"
                            $0D"Slow, strong pulse"
                            $0D"Slow pulse, noblack"
                            $0D"Gentle pulse"
                            $0D"Flicker A"
                            $0D"Flicker B"
                            $0D"Candle A"
                            $0D"Candle B"
                            $0D"Candle C"
                            $0D"Fast strobe"
                            $0D"Slow strobe"
                            $0D"Underwater"
                    values =
                            "0"
                            $0D"13"
                            $0D"10"
                            $0D"2"
                            $0D"11"
                            $0D"5"
                            $0D"1"
                            $0D"6"
                            $0D"3"
                            $0D"7"
                            $0D"8"
                            $0D"4"
                            $0D"9"
                            $0D"12"
                }

                m_iTurnOnTime: = { txt="&" hint="Time taken to turn on (secs)" }
                m_iTurnOnStyle: = { txt="&" typ="C" hint="Appearance (turn on)"
                    items =
                            "Normal (off)"
                            $0D"On"
                            $0D"Fluorescent flicker"
                            $0D"Slow, strong pulse"
                            $0D"Slow pulse, noblack"
                            $0D"Gentle pulse"
                            $0D"Flicker A"
                            $0D"Flicker B"
                            $0D"Candle A"
                            $0D"Candle B"
                            $0D"Candle C"
                            $0D"Fast strobe"
                            $0D"Slow strobe"
                            $0D"Underwater"
                    values =
                            "0"
                            $0D"20"
                            $0D"10"
                            $0D"2"
                            $0D"11"
                            $0D"5"
                            $0D"1"
                            $0D"6"
                            $0D"3"
                            $0D"7"
                            $0D"8"
                            $0D"4"
                            $0D"9"
                            $0D"12"
                }

                m_iTurnOffTime: = {txt="&" hint="Time taken to turn off (secs)" }
                m_iTurnOffStyle: = { typ="C" txt="&" hint="Appearance (turn off)"
                    items =
                            "Normal (on)"
                            $0D"Off"
                            $0D"Fluorescent flicker"
                            $0D"Slow, strong pulse"
                            $0D"Slow pulse, noblack"
                            $0D"Gentle pulse"
                            $0D"Flicker A"
                            $0D"Flicker B"
                            $0D"Candle A"
                            $0D"Candle B"
                            $0D"Candle C"
                            $0D"Fast strobe"
                            $0D"Slow strobe"
                            $0D"Underwater"
                    values =
                            "0"
                            $0D"13"
                            $0D"10"
                            $0D"2"
                            $0D"11"
                            $0D"5"
                            $0D"1"
                            $0D"6"
                            $0D"3"
                            $0D"7"
                            $0D"8"
                            $0D"4"
                            $0D"9"
                            $0D"12"
                }
        }
        t_gibs_mdl:incl = {
                Items = "(Default/None)"
$0D"agibs"
$0D"big_momgibs"
$0D"bonegibs"
$0D"bookgibs"
$0D"cactusgibs"
$0D"catwalkgibs"
$0D"ceilinggibs"
$0D"chromegibs"
$0D"cindergibs"
$0D"cindergibs_green"
$0D"cindergibs_yellow"
$0D"computergibs"
$0D"concrete_gibs"
$0D"concretegibs"
$0D"fleshgibs"
$0D"garbagegibs"
$0D"gib_b_bone"
$0D"gib_b_gib"
$0D"gib_hgrunt"
$0D"gib_legbone"
$0D"gib_lung"
$0D"gib_skull"
$0D"glassgibs"
$0D"hgibs"
$0D"islave_gibs1"
$0D"mechgibs"
$0D"med_crategibs"
$0D"metalgibs"
$0D"metalplategibs"
$0D"metalplategibs_dark"
$0D"metalplategibs_green"
$0D"mil_crategibs"
$0D"office_gibs"
$0D"osprey_bodygibs"
$0D"osprey_enginegibs"
$0D"osprey_tailgibs"
$0D"rockgibs"
$0D"stickygib"
$0D"stickygibpink"
$0D"tech_crategibs"
$0D"webgibs"
$0D"wetfloorsign_gibs"
$0D"woodgibs"
$0D"zombiegibs1"
                Values = ""
$0D"models/agibs.mdl"
$0D"models/big_momgibs.mdl"
$0D"models/bonegibs.mdl"
$0D"models/bookgibs.mdl"
$0D"models/cactusgibs.mdl"
$0D"models/catwalkgibs.mdl"
$0D"models/ceilinggibs.mdl"
$0D"models/chromegibs.mdl"
$0D"models/cindergibs.mdl"
$0D"models/cindergibs_green.mdl"
$0D"models/cindergibs_yellow.mdl"
$0D"models/computergibs.mdl"
$0D"models/concrete_gibs.mdl"
$0D"models/concretegibs.mdl"
$0D"models/fleshgibs.mdl"
$0D"models/garbagegibs.mdl"
$0D"models/gib_b_bone.mdl"
$0D"models/gib_b_gib.mdl"
$0D"models/gib_hgrunt.mdl"
$0D"models/gib_legbone.mdl"
$0D"models/gib_lung.mdl"
$0D"models/gib_skull.mdl"
$0D"models/glassgibs.mdl"
$0D"models/hgibs.mdl"
$0D"models/islave_gibs1.mdl"
$0D"models/mechgibs.mdl"
$0D"models/med_crategibs.mdl"
$0D"models/metalgibs.mdl"
$0D"models/metalplategibs.mdl"
$0D"models/metalplategibs_dark.mdl"
$0D"models/metalplategibs_green.mdl"
$0D"models/mil_crategibs.mdl"
$0D"models/office_gibs.mdl"
$0D"models/osprey_bodygibs.mdl"
$0D"models/osprey_enginegibs.mdl"
$0D"models/osprey_tailgibs.mdl"
$0D"models/rockgibs.mdl"
$0D"models/stickygib.mdl"
$0D"models/stickygibpink.mdl"
$0D"models/tech_crategibs.mdl"
$0D"models/webgibs.mdl"
$0D"models/wetfloorsign_gibs.mdl"
$0D"models/woodgibs.mdl"
$0D"models/zombiegibs1.mdl"
        }
        t_breakable:incl = {
                t_target = !
                t_globalname = !
                delay: = { Txt="&" Hint="Delay before break" }
                health: = { Txt="&" Hint="Strength" }
                explosion: = { Typ="C" Txt="&"
                        Items = "Random"
                             $0D"Relative to Attack"
                        Values = "0"$0D"1"
                }
                explodemagnitude: = { Txt="&" Hint="Explode Magnitude (0=none)" }
                material: = { Typ="C" Txt="&"
                        Items = "Glass"
                             $0D"Wood"
                             $0D"Metal"
                             $0D"Flesh"
                             $0D"Cinder Block"
                             $0D"Ceiling Tile"
                             $0D"Computer"
                             $0D"Unbreakable Glass"
                             $0D"Rocks"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"
                }
                gibmodel: = { Typ="C" Txt="&" Hint="Gib model (models/?????.mdl)" t_gibs_mdl = ! }
                spawnobject: = { Typ="C" Txt="&"
                        Items =
   "Nothing"
$0D"Battery"
$0D"Healthkit"
$0D"9mm Handgun"
$0D"9mm Clip"
$0D"Machine Gun"
$0D"Machine Gun Clip"
$0D"Machine Gun Grenades"
$0D"Shotgun"
$0D"Shotgun Shells"
$0D"Crossbow"
$0D"Crossbow Bolts"
$0D"357"
$0D"357 clip"
$0D"RPG"
$0D"RPG Clip"
$0D"Gauss clip"
$0D"Hand grenade"
$0D"Tripmine"
$0D"Satchel Charge"
$0D"Snark"
$0D"Hornet Gun"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D"20"$0D"21"
                }
                t__minlight = !
                t_tfc_settings = !
                t_si_t_breakable = !
        }
        t_buttondoorsnds:incl = {
                locked_sound: = { Typ="C" Txt="&"
                        Items = "(none)"
                             $0D"Access Denied"
                             $0D"Small zap"
                             $0D"Buzz"
                             $0D"Buzz Off"
                             $0D"Latch Locked"
                        Values =""$0D"2"$0D"8"$0D"10"$0D"11"$0D"12"
                }
                unlocked_sound: = { Typ="C" Txt="&"
                        Items = "(none)"
                             $0D"Big zap & Warmup"
                             $0D"Access Granted"
                             $0D"Quick Combolock"
                             $0D"Power Deadbolt 1"
                             $0D"Power Deadbolt 2"
                             $0D"Plunger"
                             $0D"Small zap"
                             $0D"Keycard Sound"
                             $0D"Buzz"
                             $0D"Latch Unlocked"
                             $0D"Light Switch"
                        Values =""$0D"1"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"13"$0D"14"
                }
                locked_sentence: = { Typ="C" Txt="&"
                        Items = "(none)"
                             $0D"Gen. Access Denied"
                             $0D"Security Lockout"
                             $0D"Blast Door"
                             $0D"Fire Door"
                             $0D"Chemical Door"
                             $0D"Radiation Door"
                             $0D"Gen. Containment"
                             $0D"Maintenance Door"
                             $0D"Broken Shut Door"
                        Values = ""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"
                }
                unlocked_sentence: = { Typ="C" Txt="&"
                        Items = "(none)"
                             $0D"Gen. Access Granted"
                             $0D"Security Disengaged"
                             $0D"Blast Door"
                             $0D"Fire Door"
                             $0D"Chemical Door"
                             $0D"Radiation Door"
                             $0D"Gen. Containment"
                             $0D"Maintenance area"
                        Values = ""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"
                }
        }
        t_master:incl = { master: = { Txt="&" Hint="Targetname of a 'multisource' entity" } }
        t_gamemaster:incl = { master: = { Txt="&" Hint="Targetname of a 'multisource' or 'game_team_master' entity"$0D"The master must be 'on' for the game_end to work" } }
        t_door:incl = {
                t_targetname = !
                t_targetx = !
                netname: = { Txt="&" Hint="Fire on Close (targetname of object to trigger when closing)" }
                t_master = !
                speed: = { Txt="&" Hint="Movement speed" }
                wait: = { Txt="&" Hint="Delay before close (-1 = stays open)" }
                dmg: = { Txt="&" Hint="Damage inflicted when blocked" }
                health: = { Txt="&" Hint="If set, door must be shot open" }
                lip: = { Txt="&" Hint="Lip remaining at end of move" }
                movesnd: = { Typ="C" Txt="&"
                        Items = "No Sound"
                             $0D"Servo (Sliding)"
                             $0D"Pneumatic (Sliding)"
                             $0D"Pneumatic (Rolling)"
                             $0D"Vacuum"
                             $0D"Power Hydraulic"
                             $0D"Large Rollers"
                             $0D"Track Door"
                             $0D"Snappy Metal Door"
                             $0D"Squeaky 1"
                             $0D"Squeaky 2"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"
                }
                stopsnd: = { Typ="C" Txt="&"
                        Items = "No Sound"
                             $0D"Clang with brake"
                             $0D"Clang reverb"
                             $0D"Ratchet Stop"
                             $0D"Chunk"
                             $0D"Light airbrake"
                             $0D"Metal Slide Stop"
                             $0D"Metal Lock Stop"
                             $0D"Snappy Metal Stop"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"
                }
                message: = { Txt="&" Hint="Message if triggered" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Starts Open" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Don't Link" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Passable" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Toggle" }
                spawnflags: = { Txt="&" Typ="X256" Cap="Use Only" }
                spawnflags: = { Txt="&" Typ="X512" Cap="Monsters Can't" }
                spawnflags: = { Txt="&" Typ="X1024" Cap="Force toughable" hint="Setting for Spirit of Half-Life" }
                spawnflags: = { Txt="&" Typ="X2048" Cap="Synch movement" hint="Setting for Spirit of Half-Life" }
                t_buttondoorsnds = !
                t__minlight = !
                t_rendermode = !
                t_angles = !
                t_tfc_settings = !
                t_dod_t_door = !
                t_si_t_team = !
                t_brushentity = !
        }
        t_tank:incl = {
                Help =  "A little hint:"
                     $0D"- Create your turret-brushes pointing towards angle 0 (or 360)."
                     $0D"  Then set the 'angle' specific of func_tank* to point in the direction you want the turret to start pointing at."
                t_targetname = !
                t_target = !
                t_globalname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Active" }
//Removed?      spawnflags: = { Txt="&" Typ="X2" Cap="Player" }
//Removed?      spawnflags: = { Txt="&" Typ="X4" Cap="Humans" }
//Removed?      spawnflags: = { Txt="&" Typ="X8" Cap="Aliens" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Line of sight" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Controllable" Hint="Players can control it (Remember to have a 'func_tankcontrols' target this object)" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Laser Spot" hint="Setting for Spirit of Half-Life?" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Match target" hint="Setting for Spirit of Half-Life?" }
                t_gamemaster = !
                yawrate: = { Txt="&" Hint="Yaw rate (the higher value the faster it moves. 600 is good for deathmatch)" }
                yawrange: = { Txt="&" Hint="Yaw range (how many degrees it can turn to the left and right)" }
                yawtolerance: = { Txt="&" Hint="Yaw tolerance" }
                pitchrate: = { Txt="&" Hint="Pitch rate (the higher value the faster it moves. 600 is good for deathmatch)" }
                pitchrange: = { Txt="&" Hint="Pitch range (how many degrees it can turn up and down)" }
                pitchtolerance: = { Txt="&" Hint="Pitch tolerance" }
                barrel: = { Txt="&" Hint="Barrel Length (from center of ORIGIN to barrelmuzzle, in units)" }
                barrely: = { Txt="&" Hint="Barrel Horizontal (offset of barrelmuzzle)" }
                barrelz: = { Txt="&" Hint="Barrel Vertical (offset of barrelmuzzle)" }
                spritesmoke: = { Txt="&" Hint="Smoke Sprite (sprites/?????.spr)" }
                spriteflash: = { Txt="&" Hint="Flash Sprite (sprites/?????.spr)" }
                spritescale: = { Txt="&" Hint="Sprite scale" }
                rotatesound: = { Typ="C" Txt="&" Hint="Rotate Sound (path/filename.wav)"
                        Items = "(none)"
                             $0D"turretrot1"
                             $0D"turretrot2"
                        Values =""
                             $0D"ambience/turretrot1.wav"
                             $0D"ambience/turretrot2.wav"
                }
                firerate: = { Txt="&" Hint="Rate of Fire per second" }
                bullet_damage: = { Txt="&" Hint="Damage Per Bullet" }
                persistence: = { Txt="&" Hint="Firing persistence" }
                firespread: = { Typ="C" Txt="&" Hint="Bullet accuracy"
                        Items = "Perfect Shot"
                             $0D"Small cone"
                             $0D"Medium cone"
                             $0D"Large cone"
                             $0D"Extra-large cone"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"
                }
                minRange: = { Txt="&" Hint="Minimum target range" }
                maxRange: = { Txt="&" Hint="Maximum target range" }
                t__minlight = !
                t_rendermode = !
                t_angles = !
                t_spirit_movewith = !
                t_tfc_settings = !
                t_svc_basetank = !
        }
        t_platsound:incl = {
                movesnd: = { Typ="C" Txt="&"
                        Items = "No Sound"
                             $0D"big elev 1"
                             $0D"big elev 2"
                             $0D"tech elev 1"
                             $0D"tech elev 2"
                             $0D"tech elev 3"
                             $0D"freight elev 1"
                             $0D"freight elev 2"
                             $0D"heavy elev"
                             $0D"rack elev"
                             $0D"rail elev"
                             $0D"squeek elev"
                             $0D"odd elev 1"
                             $0D"odd elev 2"
                        Values ="0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"
                }
                stopsnd: = { Typ="C" Txt="&"
                        Items = "No Sound"
                             $0D"big elev stop1"
                             $0D"big elev stop2"
                             $0D"freight elev stop"
                             $0D"heavy elev stop"
                             $0D"rack stop"
                             $0D"rail stop"
                             $0D"squeek stop"
                             $0D"quick stop"
                        Values ="0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"
                }
                volume: = { Txt="&" }
        }
        t_trackchange:incl = {
                t_targetname = !
                height: = { Txt="&" Hint="Travel altitude (can be negative)" }
                rotation: = { Txt="&" Hint="Spin amount (deg)" }
                train: = { Txt="&" Hint="Train to switch (targetname of a 'func_train')" }
                toptrack: = { Txt="&" Hint="Top track (targetname of a 'path_track' object)" }
                bottomtrack: = { Txt="&" Hint="Bottom track (targetname of a 'path_track' object)" }
                speed: = { Txt="&" Hint="Move/Rotate speed" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Auto Activate Train" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Re-link track" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Start at Bottom" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Rotate Only" }
                spawnflags: = { Txt="&" Typ="X64" Cap="X Axis" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Y Axis" }
                t_platsound = !
                t_rendermode = !
        }
        t_trigger:incl = {
                t_targetname = !
                t_targetx = !
                netname: = { Txt="&" Hint="Target Path" }
                t_master = !
                t_message = !
//                style: = { Txt="&" Hint="Style" }
                sounds: = { Typ="C" Txt="&" Hint="Sound style"
                        Items = "No Sound"
                             $0D"1"
                             $0D"2"
                             $0D"3"
                        Values = "0"$0D"1"$0D"2"$0D"3"
                }
                spawnflags: = { Txt="&" Typ="X1" Cap="Monsters" Hint="Triggered by monsters" }
                spawnflags: = { Txt="&" Typ="X2" Cap="No Clients" Hint="Not triggered by players" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Pushables" Hint="Activated by pushable objects" }
                t_spirit_movewith = !
                t_tfc_settings = !
        }
        t_scientistbody:incl = {
                body: = { Typ="C" Txt="&"
                        Items = "Random"
                             $0D"Glasses"
                             $0D"Einstein"
                             $0D"Luther"
                             $0D"Slick"
                        Values ="-1"$0D"0"$0D"1"$0D"2"$0D"3"
                }
        }
        t_gibshooter:incl = {
                t_targetname = !
                m_iGibs: = { Txt="&" Hint="Number of Gibs" }
                delay: = { Txt="&" Hint="Delay (in seconds) between shots. If 0, all gibs shoot at once." }
                m_flVelocity: = { Txt="&" Hint="How fast the gibs are fired" }
                m_flVariance: = { Txt="&" Hint="Course Variance" }
                m_flGibLife: = { Txt="&" Hint="Time in seconds for gibs to live +/- 5%" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Repeatable" }
                t_angles = !
                t_spirit_movewith = !
        }
//
// Forms
//
        qrk_trigger_hurt_damagetype:form = {
                damagetype: = { Typ="X1"        Txt="&" Cap="Crush" }
                damagetype: = { Typ="X2"        Txt="&" Cap="Bullet" }
                damagetype: = { Typ="X4"        Txt="&" Cap="Slash" }
                damagetype: = { Typ="X8"        Txt="&" Cap="Burn" }
                damagetype: = { Typ="X16"       Txt="&" Cap="Freeze" }
                damagetype: = { Typ="X32"       Txt="&" Cap="Fall" }
                damagetype: = { Typ="X64"       Txt="&" Cap="Blast" }
                damagetype: = { Typ="X128"      Txt="&" Cap="Club" }
                damagetype: = { Typ="X256"      Txt="&" Cap="Shock" }
                damagetype: = { Typ="X512"      Txt="&" Cap="Sonic" }
                damagetype: = { Typ="X1024"     Txt="&" Cap="Energy beam" }
                damagetype: = { Typ="X16384"    Txt="&" Cap="Drown" }
                damagetype: = { Typ="X32768"    Txt="&" Cap="Paralyse" }
                damagetype: = { Typ="X65536"    Txt="&" Cap="Nervegas" }
                damagetype: = { Typ="X131072"   Txt="&" Cap="Poison" }
                damagetype: = { Typ="X262144"   Txt="&" Cap="Radiation" }
                damagetype: = { Typ="X524288"   Txt="&" Cap="Drown (recover)" }
                damagetype: = { Typ="X1048576"  Txt="&" Cap="Chemical" }
                damagetype: = { Typ="X2097152"  Txt="&" Cap="Slow burn" }
                damagetype: = { Typ="X4194304"  Txt="&" Cap="Slow freeze" }
                damagetype: = { Typ="X4096"     Txt="&" Cap="... and Never Gib" }
                damagetype: = { Typ="X8192"     Txt="&" Cap="... and Always Gib" }
        }

        qrk_env_message_message:form = {
                message: = { Typ="C" Txt="Intro Credits"
                        items =
   "CR27"
$0D"CR1"
$0D"CR2"
$0D"CR3"
$0D"CR4"
$0D"CR5"
$0D"CR6"
$0D"CR7"
$0D"CR8"
$0D"CR9"
$0D"CR10"
$0D"CR11"
$0D"CR12"
$0D"CR13"
$0D"CR14"
$0D"CR15"
$0D"CR16"
$0D"CR17"
$0D"CR18"
$0D"CR19"
$0D"CR20"
$0D"CR21"
$0D"CR22"
$0D"CR23"
$0D"CR24"
$0D"CR25"
$0D"CR26"
$0D"CR35"
$0D"CR36"
$0D"CR37"
$0D"CR38"
                }
                message: = { Typ="C" Txt="End Credits"
                        items =
   "VALVEIS"
$0D"END1"
$0D"END2"
$0D"END3"
                }
                message: = { Typ="C" Txt="Intro Titles"
                        items =
   "CR28"
$0D"CR29"
$0D"CR30"
$0D"CR31"
$0D"CR32"
$0D"CR33"
$0D"CR34"
                }
                message: = { Typ="C" Txt="Gameover"
                        items =
   "GAMEOVER"
$0D"TRAITOR"
$0D"LOSER"
                }
                message: = { Typ="C" Txt="Chapter Titles"
                        items =
   "T0A0TITLE"
$0D"C0A0TITLE"
$0D"C0A1TITLE"
$0D"C1A1TITLE"
$0D"C1A2TITLE"
$0D"C1A3TITLE"
$0D"C1A4TITLE"
$0D"C2A1TITLE"
$0D"C2A2TITLE"
$0D"C2A3TITLE"
$0D"C2A4TITLE1"
$0D"C2A4TITLE2"
$0D"C2A5TITLE"
$0D"C3A1TITLE"
$0D"C3A2TITLE"
$0D"C4A1TITLE"
$0D"C4A1ATITLE"
$0D"C4A2TITLE"
$0D"C4A3TITLE"
$0D"C5TITLE"
                }
                message: = { Typ="C" Txt="Ingame Messages"
                        items =
   "GAMESAVED"
                }
                message: = { Typ="C" Txt="Game Title"
                        items =
   "GAMETITLE"
                }
                message: = { Typ="C" Txt="Hazard Course Text"
                        items =
   "HZBUTTON1"
$0D"HZBUTTON2"
$0D"HZMOVE"
$0D"HZJUMP"
$0D"HZDUCK"
$0D"HZCOMBO"
$0D"HZDUCKJUMP"
$0D"HZLADDER"
$0D"HZLJUMP"
$0D"HZLMOD"
$0D"HZMEDKIT"
$0D"HZMOMENT"
$0D"HZPUSH"
$0D"HZPULL"
$0D"HZCROWBAR"
$0D"HZLITEON"
$0D"HZLITEOFF"
$0D"HZWEAPON"
$0D"HZFIREWEAP"
$0D"HZARMOR"
$0D"HZSWIM"
$0D"HZDAMAGE"
$0D"HZHAZARD"
$0D"HZSCIENTIST"
$0D"HZBARNEY"
$0D"HZTRAIN"
$0D"HZDONE"
                }
        }
        qrk_sentence_hologram:form = {
                sentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        Items =
   "!HOLO_3JUMPS"
$0D"!HOLO_BREAKBOX"
$0D"!HOLO_BREATH"
$0D"!HOLO_BUTTON"
$0D"!HOLO_CHARGER"
$0D"!HOLO_COMMENCING"
$0D"!HOLO_CONGRATS"
$0D"!HOLO_DONE"
$0D"!HOLO_DROWN"
$0D"!HOLO_DUCK"
$0D"!HOLO_FALLSHORT"
$0D"!HOLO_FANTASTIC"
$0D"!HOLO_FLASHLIGHT"
$0D"!HOLO_GREATWORK"
$0D"!HOLO_GRENADE"
$0D"!HOLO_HITALL"
$0D"!HOLO_INJURY"
$0D"!HOLO_INTRO"
$0D"!HOLO_JDUCK"
$0D"!HOLO_JUMP"
$0D"!HOLO_JUMPDOWN"
$0D"!HOLO_JUMPGAP"
$0D"!HOLO_KEEPTRYING"
$0D"!HOLO_LADDER"
$0D"!HOLO_LEADGUARD"
$0D"!HOLO_LIGHTOFF"
$0D"!HOLO_LONGJUMP"
$0D"!HOLO_MEDKIT"
$0D"!HOLO_MOVE"
$0D"!HOLO_NICEJOB"
$0D"!HOLO_PIPEDUCK"
$0D"!HOLO_PULLBOX"
$0D"!HOLO_PUSHBOX"
$0D"!HOLO_RADIATION"
$0D"!HOLO_RETRY"
$0D"!HOLO_RUNSTART"
$0D"!HOLO_SPINBRIDGE"
$0D"!HOLO_STARTLIFT"
$0D"!HOLO_STEAM"
$0D"!HOLO_TARGET"
$0D"!HOLO_TRYAGAIN"
$0D"!HOLO_USETRAIN"
                }
        }
        qrk_sentence_gman:form = {
                sentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        Items =
   "!GM_1MUMBLE"
$0D"!GM_2MUMBLE"
$0D"!GM_3MUMBLE"
$0D"!GM_4MUMBLE"
$0D"!GM_5MUMBLE"
$0D"!GM_6MUMBLE"
$0D"!GM_SUIT"
$0D"!GM_NASTY"
$0D"!GM_POTENTIAL"
$0D"!GM_STEPIN"
$0D"!GM_OTHERWISE"
$0D"!GM_1CHOOSE"
$0D"!GM_2CHOOSE"
$0D"!GM_WISE"
$0D"!GM_REGRET"
$0D"!GM_WONTWORK"
                }
        }
        t_sentence_scientist:incl = {
                Items =
   "!SC_OK0"
$0D"!SC_OK1"
$0D"!SC_OK2"
$0D"!SC_OK3"
$0D"!SC_OK4"
$0D"!SC_OK5"
$0D"!SC_OK6"
$0D"!SC_OK7"
$0D"!SC_OK8"
$0D"!SC_WAIT0"
$0D"!SC_WAIT1"
$0D"!SC_WAIT2"
$0D"!SC_WAIT3"
$0D"!SC_WAIT4"
$0D"!SC_WAIT5"
$0D"!SC_WAIT6"
$0D"!SC_STOP0"
$0D"!SC_STOP1"
$0D"!SC_STOP2"
$0D"!SC_STOP3"
$0D"!SC_STARE0"
$0D"!SC_STARE1"
$0D"!SC_STARE2"
$0D"!SC_HELLO0"
$0D"!SC_HELLO1"
$0D"!SC_HELLO2"
$0D"!SC_HELLO3"
$0D"!SC_HELLO4"
$0D"!SC_HELLO5"
$0D"!SC_HELLO6"
$0D"!SC_HELLO7"
$0D"!SC_HELLO8"
$0D"!SC_ANSWER0"
$0D"!SC_ANSWER1"
$0D"!SC_ANSWER2"
$0D"!SC_ANSWER3"
$0D"!SC_ANSWER4"
$0D"!SC_ANSWER5"
$0D"!SC_ANSWER6"
$0D"!SC_ANSWER7"
$0D"!SC_ANSWER8"
$0D"!SC_ANSWER9"
$0D"!SC_ANSWER10"
$0D"!SC_ANSWER11"
$0D"!SC_ANSWER12"
$0D"!SC_ANSWER13"
$0D"!SC_ANSWER14"
$0D"!SC_ANSWER15"
$0D"!SC_ANSWER16"
$0D"!SC_ANSWER17"
$0D"!SC_ANSWER18"
$0D"!SC_ANSWER19"
$0D"!SC_ANSWER20"
$0D"!SC_ANSWER21"
$0D"!SC_ANSWER22"
$0D"!SC_ANSWER23"
$0D"!SC_ANSWER24"
$0D"!SC_ANSWER25"
$0D"!SC_ANSWER26"
$0D"!SC_ANSWER27"
$0D"!SC_ANSWER28"
$0D"!SC_ANSWER29"
$0D"!SC_QUESTION0"
$0D"!SC_QUESTION1"
$0D"!SC_QUESTION2"
$0D"!SC_QUESTION3"
$0D"!SC_QUESTION4"
$0D"!SC_QUESTION5"
$0D"!SC_QUESTION6"
$0D"!SC_QUESTION7"
$0D"!SC_QUESTION8"
$0D"!SC_QUESTION9"
$0D"!SC_QUESTION10"
$0D"!SC_QUESTION11"
$0D"!SC_QUESTION12"
$0D"!SC_QUESTION13"
$0D"!SC_QUESTION14"
$0D"!SC_QUESTION15"
$0D"!SC_QUESTION16"
$0D"!SC_QUESTION17"
$0D"!SC_QUESTION18"
$0D"!SC_QUESTION19"
$0D"!SC_QUESTION20"
$0D"!SC_QUESTION21"
$0D"!SC_QUESTION22"
$0D"!SC_QUESTION23"
$0D"!SC_QUESTION24"
$0D"!SC_QUESTION25"
$0D"!SC_QUESTION26"
$0D"!SC_IDLE0"
$0D"!SC_IDLE1"
$0D"!SC_IDLE2"
$0D"!SC_IDLE3"
$0D"!SC_IDLE4"
$0D"!SC_IDLE5"
$0D"!SC_IDLE6"
$0D"!SC_IDLE7"
$0D"!SC_IDLE8"
$0D"!SC_IDLE9"
$0D"!SC_IDLE10"
$0D"!SC_IDLE11"
$0D"!SC_IDLE12"
$0D"!SC_IDLE13"
$0D"!SC_NOGO"
$0D"!SC_MONST0"
$0D"!SC_MONST1"
$0D"!SC_HEAR0"
$0D"!SC_HEAR1"
$0D"!SC_HEAR2"
$0D"!SC_SMELL0"
$0D"!SC_SMELL1"
$0D"!SC_SMELL2"
$0D"!SC_SMELL3"
$0D"!SC_WOUND0"
$0D"!SC_WOUND1"
$0D"!SC_MORTAL0"
$0D"!SC_MORTAL1"
$0D"!SC_CUREA"
$0D"!SC_CUREB"
$0D"!SC_CUREC"
$0D"!SC_HEAL0"
$0D"!SC_HEAL1"
$0D"!SC_HEAL2"
$0D"!SC_HEAL3"
$0D"!SC_HEAL4"
$0D"!SC_HEAL5"
$0D"!SC_HEAL6"
$0D"!SC_HEAL7"
$0D"!SC_PLFEAR0"
$0D"!SC_PLFEAR1"
$0D"!SC_PLFEAR2"
$0D"!SC_PLFEAR3"
$0D"!SC_PLFEAR4"
$0D"!SC_PLFEAR5"
$0D"!SC_FEAR0"
$0D"!SC_FEAR1"
$0D"!SC_FEAR2"
$0D"!SC_FEAR3"
$0D"!SC_FEAR4"
$0D"!SC_FEAR5"
$0D"!SC_FEAR6"
$0D"!SC_FEAR7"
$0D"!SC_FEAR8"
$0D"!SC_FEAR9"
$0D"!SC_FEAR10"
$0D"!SC_FEAR11"
$0D"!SC_FEAR12"
$0D"!SC_SCREAM0"
$0D"!SC_SCREAM1"
$0D"!SC_SCREAM2"
$0D"!SC_SCREAM3"
$0D"!SC_SCREAM4"
$0D"!SC_SCREAM5"
$0D"!SC_SCREAM6"
$0D"!SC_SCREAM7"
$0D"!SC_SCREAM8"
$0D"!SC_SCREAM9"
$0D"!SC_SCREAM10"
$0D"!SC_SCREAM11"
$0D"!SC_SCREAM12"
$0D"!SC_SCREAM13"
$0D"!SC_SCREAM14"
$0D"!SC_SCARED0"
$0D"!SC_SCARED1"
$0D"!SC_SCARED2"
$0D"!SC_PHELLO0"
$0D"!SC_PHELLO1"
$0D"!SC_PHELLO2"
$0D"!SC_PHELLO3"
$0D"!SC_PHELLO4"
$0D"!SC_PHELLO5"
$0D"!SC_PHELLO6"
$0D"!SC_PQUEST0"
$0D"!SC_PQUEST1"
$0D"!SC_PQUEST2"
$0D"!SC_PQUEST3"
$0D"!SC_PQUEST4"
$0D"!SC_PQUEST5"
$0D"!SC_PQUEST6"
$0D"!SC_PQUEST7"
$0D"!SC_PQUEST8"
$0D"!SC_PQUEST9"
$0D"!SC_PQUEST10"
$0D"!SC_PQUEST11"
$0D"!SC_PQUEST12"
$0D"!SC_PQUEST13"
$0D"!SC_PQUEST14"
$0D"!SC_PQUEST15"
$0D"!SC_PQUEST16"
$0D"!SC_PQUEST17"
$0D"!SC_PIDLE0"
$0D"!SC_PIDLE1"
$0D"!SC_PIDLE2"
$0D"!SC_PIDLE3"
$0D"!SC_PIDLE4"
$0D"!SC_PIDLE5"
$0D"!SC_PIDLE6"
$0D"!SC_PIDLE7"
$0D"!SC_PIDLE8"
$0D"!SC_PIDLE9"
$0D"!SC_PIDLE10"
$0D"!SC_HAZ_OK0"
$0D"!SC_HAZ_WAIT0"
$0D"!SC_GOODWORK"
$0D"!SC_HARDLYNOTICE"
$0D"!SC_NEXTSTATION"
$0D"!SC_POK0"
$0D"!SC_POK1"
$0D"!SC_POK2"
$0D"!SC_POK3"
$0D"!SC_POK4"
$0D"!SC_1MUMBLE"
$0D"!SC_DISA"
$0D"!SC_DIS1A"
$0D"!SC_DIS1B"
$0D"!SC_DIS1C"
$0D"!SC_DIS1D"
$0D"!SC_DIS2A"
$0D"!SC_DIS3A"
$0D"!SC_DIS4A"
$0D"!SC_DIS5A"
$0D"!SC_DIS6A"
$0D"!SC_DIS7A"
$0D"!SC_DIS8A"
$0D"!SC_DIS9A"
$0D"!SC_DIS10A"
$0D"!SC_DIS11A"
$0D"!SC_DIS12A"
$0D"!SC_DIS13A"
$0D"!SC_DIS14A"
$0D"!SC_DIS15A"
$0D"!SC_DIS16A"
$0D"!SC_DIS17A"
$0D"!SC_GETAWAY"
$0D"!SC_GMORN"
$0D"!SC_BIGDAY"
$0D"!SC_SAMPLE"
$0D"!SC_NOTTHAT"
$0D"!SC_LOCK1A"
$0D"!SC_LOCK2A"
$0D"!SC_LOCK3A"
$0D"!SC_LOCK4A"
$0D"!SC_LOCK5A"
$0D"!SC_LOCK6A"
$0D"!SC_LOCK7A"
$0D"!SC_LOCK8A"
$0D"!SC_LOCK9A"
$0D"!SC_CRIT1A"
$0D"!SC_CRIT2A"
$0D"!SC_CRIT3A"
$0D"!SC_CTRL1A"
$0D"!SC_CTRL2A"
$0D"!SC_CTRL3A"
$0D"!SC_CTRL4A"
$0D"!SC_CONSOLE1A"
$0D"!SC_CONSOLE2A"
$0D"!SC_CONSOLE3A"
$0D"!SC_CONSOLE4A"
$0D"!SC_CONSOLE5A"
$0D"!SC_CONSOLERPT"
$0D"!SC_ZOMBIE1A"
$0D"!SC_ZOMBIE3A"
$0D"!SC_ZOMBIE5A"
$0D"!SC_ZOMBIE6A"
$0D"!SC_DANGLING"
$0D"!SC_DARKROOM"
$0D"!SC_ELEVATOR"
$0D"!SC_LOUNGE"
$0D"!SC_TRANSMISSION"
$0D"!SC_1MAN"
$0D"!SC_ATLAST"
$0D"!SC_RESCUED"
$0D"!SC_SILO1A"
$0D"!SC_SILO2A"
$0D"!SC_TEAM"
$0D"!SC_THANKGOD"
$0D"!SC_TRAINEND"
$0D"!SC_ROCKET"
$0D"!SC_BLIND"
$0D"!SC_POWEROFF"
$0D"!SC_POWERON"
$0D"!SC_GENER"
$0D"!SC_TRUST"
$0D"!SC_TENT"
$0D"!SC_ICKY"
$0D"!SC_TRACK"
$0D"!SC_ARG1A"
$0D"!SC_ARG2A"
$0D"!SC_TAU2A"
$0D"!SC_TAU4A"
$0D"!SC_1PSURG"
$0D"!SC_2PSURG"
$0D"!SC_3PSURG"
$0D"!SC_ALLDIE"
$0D"!SC_LETOUT"
$0D"!SC_BOOBIE"
$0D"!SC_LEBUZ"
$0D"!SC_STRAWS"
$0D"!SC_GLUON2A"
$0D"!SC_FLOOD"
$0D"!SC_LINGER"
$0D"!SC_SURVEY1A"
$0D"!SC_SURVEY3A"
$0D"!SC_SURVEY5A"
$0D"!SC_SURVEY7A"
$0D"!SC_LJUMP"
$0D"!SC_UPHERE"
$0D"!SC_PORTAL"
$0D"!SC_PORTOPEN"
$0D"!SC_POSITION"
$0D"!SC_FOREVER"
$0D"!SC_NOTYET"
$0D"!SC_FOOL"
$0D"!SC_LETYOUIN"
$0D"!SC_OVERHERE"
        }
        t_sentence_barney:incl = {
                        Items =
   "!BA_OK0"
$0D"!BA_OK1"
$0D"!BA_OK2"
$0D"!BA_OK3"
$0D"!BA_OK4"
$0D"!BA_OK5"
$0D"!BA_OK6"
$0D"!BA_WAIT0"
$0D"!BA_WAIT1"
$0D"!BA_WAIT2"
$0D"!BA_WAIT3"
$0D"!BA_WAIT4"
$0D"!BA_WAIT5"
$0D"!BA_HELLO0"
$0D"!BA_HELLO1"
$0D"!BA_HELLO2"
$0D"!BA_HELLO3"
$0D"!BA_HELLO4"
$0D"!BA_HELLO5"
$0D"!BA_HELLO6"
$0D"!BA_QUESTION0"
$0D"!BA_QUESTION1"
$0D"!BA_QUESTION2"
$0D"!BA_QUESTION3"
$0D"!BA_QUESTION4"
$0D"!BA_QUESTION5"
$0D"!BA_QUESTION6"
$0D"!BA_QUESTION7"
$0D"!BA_QUESTION8"
$0D"!BA_QUESTION9"
$0D"!BA_QUESTION10"
$0D"!BA_QUESTION11"
$0D"!BA_QUESTION12"
$0D"!BA_QUESTION13"
$0D"!BA_QUESTION14"
$0D"!BA_ANSWER0"
$0D"!BA_ANSWER1"
$0D"!BA_ANSWER2"
$0D"!BA_ANSWER3"
$0D"!BA_ANSWER4"
$0D"!BA_ANSWER5"
$0D"!BA_ANSWER6"
$0D"!BA_ANSWER7"
$0D"!BA_ANSWER8"
$0D"!BA_ANSWER9"
$0D"!BA_ANSWER10"
$0D"!BA_ANSWER11"
$0D"!BA_ANSWER12"
$0D"!BA_ANSWER13"
$0D"!BA_ANSWER14"
$0D"!BA_ANSWER15"
$0D"!BA_ANSWER16"
$0D"!BA_ANSWER17"
$0D"!BA_ANSWER18"
$0D"!BA_ANSWER19"
$0D"!BA_ANSWER20"
$0D"!BA_ANSWER21"
$0D"!BA_STARE0"
$0D"!BA_STARE1"
$0D"!BA_STARE2"
$0D"!BA_STARE3"
$0D"!BA_IDLE0"
$0D"!BA_IDLE1"
$0D"!BA_IDLE2"
$0D"!BA_IDLE3"
$0D"!BA_IDLE4"
$0D"!BA_IDLE5"
$0D"!BA_IDLE6"
$0D"!BA_IDLE7"
$0D"!BA_IDLE8"
$0D"!BA_IDLE9"
$0D"!BA_IDLE10"
$0D"!BA_ATTACK0"
$0D"!BA_ATTACK1"
$0D"!BA_ATTACK2"
$0D"!BA_ATTACK3"
$0D"!BA_ATTACK4"
$0D"!BA_ATTACK5"
$0D"!BA_HEAR0"
$0D"!BA_HEAR1"
$0D"!BA_HEAR2"
$0D"!BA_SMELL0"
$0D"!BA_SMELL1"
$0D"!BA_SMELL2"
$0D"!BA_CUREA"
$0D"!BA_CUREB"
$0D"!BA_CUREC"
$0D"!BA_SCARED0"
$0D"!BA_SCARED1"
$0D"!BA_WOUND0"
$0D"!BA_WOUND1"
$0D"!BA_MORTAL0"
$0D"!BA_SHOT0"
$0D"!BA_SHOT1"
$0D"!BA_SHOT2"
$0D"!BA_SHOT3"
$0D"!BA_SHOT4"
$0D"!BA_SHOT5"
$0D"!BA_MAD0"
$0D"!BA_MAD1"
$0D"!BA_MAD2"
$0D"!BA_MAD3"
$0D"!BA_MAD4"
$0D"!BA_MAD5"
$0D"!BA_MAD6"
$0D"!BA_KILL0"
$0D"!BA_KILL1"
$0D"!BA_KILL2"
$0D"!BA_KILL3"
$0D"!BA_KILL4"
$0D"!BA_KILL5"
$0D"!BA_KILL6"
$0D"!BA_HAZ_OK0"
$0D"!BA_HAZ_WAIT0"
$0D"!BA_LIGHTSON"
$0D"!BA_POK0"
$0D"!BA_POK1"
$0D"!BA_POK2"
$0D"!BA_POK3"
$0D"!BA_STOP0"
$0D"!BA_STOP1"
$0D"!BA_STOP2"
$0D"!BA_LATE"
$0D"!BA_HEADDOWN"
$0D"!BA_DESK"
$0D"!BA_BUTTON"
$0D"!BA_HEVNO"
$0D"!BA_HEVYES"
$0D"!BA_GLAD"
$0D"!BA_BULLSQUID"
$0D"!BA_ZOMBIE2"
$0D"!BA_ZOMBIE4"
$0D"!BA_CLIMB"
$0D"!BA_SLEW"
$0D"!BA_SURFACE"
$0D"!BA_TOPSIDE"
$0D"!BA_WHISPER"
$0D"!BA_TENTACLE"
$0D"!BA_HUB1A"
$0D"!BA_HUB2A"
$0D"!BA_AGAIN"
$0D"!BA_LAUNCH"
$0D"!BA_ASSN"
$0D"!BA_LONGNITE"
$0D"!BA_STERIL"
$0D"!BA_TEACH"
$0D"!BA_ARG1A"
$0D"!BA_ARG2A"
$0D"!BA_ARG3A"
$0D"!BA_TAU1A"
$0D"!BA_TAU3A"
$0D"!BA_TAU5A"
$0D"!BA_ALIVE"
$0D"!BA_LETMEOUT"
$0D"!BA_RPG"
$0D"!BA_HELPME"
$0D"!BA_SNIPED"
$0D"!BA_SURVEY2A"
$0D"!BA_SURVEY4A"
$0D"!BA_SURVEY6A"
$0D"!BA_SURVEY8A"
$0D"!BA_PORTSTAY"
        }

        qrk_sentence_scientist:form = {
                sentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        t_sentence_scientist = !
                }
        }
        qrk_sentence_barney:form = {
                sentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        t_sentence_barney = !
                }
        }
        qrk_sentence_human_grunt:form = {
                sentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        Items =
   "!HG_GREN0"
$0D"!HG_GREN1"
$0D"!HG_GREN2"
$0D"!HG_GREN3"
$0D"!HG_GREN4"
$0D"!HG_GREN5"
$0D"!HG_GREN6"
$0D"!HG_ALERT0"
$0D"!HG_ALERT1"
$0D"!HG_ALERT2"
$0D"!HG_ALERT3"
$0D"!HG_ALERT4"
$0D"!HG_ALERT5"
$0D"!HG_ALERT6"
$0D"!HG_MONST0"
$0D"!HG_MONST1"
$0D"!HG_MONST2"
$0D"!HG_MONST3"
$0D"!HG_COVER0"
$0D"!HG_COVER1"
$0D"!HG_COVER2"
$0D"!HG_COVER3"
$0D"!HG_COVER4"
$0D"!HG_COVER5"
$0D"!HG_COVER6"
$0D"!HG_COVER7"
$0D"!HG_THROW0"
$0D"!HG_THROW1"
$0D"!HG_THROW2"
$0D"!HG_THROW3"
$0D"!HG_TAUNT0"
$0D"!HG_TAUNT1"
$0D"!HG_TAUNT2"
$0D"!HG_TAUNT3"
$0D"!HG_TAUNT4"
$0D"!HG_TAUNT5"
$0D"!HG_CHARGE0"
$0D"!HG_CHARGE1"
$0D"!HG_CHARGE2"
$0D"!HG_CHARGE3"
$0D"!HG_IDLE0"
$0D"!HG_IDLE1"
$0D"!HG_IDLE2"
$0D"!HG_QUEST0"
$0D"!HG_QUEST1"
$0D"!HG_QUEST2"
$0D"!HG_QUEST3"
$0D"!HG_QUEST4"
$0D"!HG_QUEST5"
$0D"!HG_QUEST6"
$0D"!HG_QUEST7"
$0D"!HG_QUEST8"
$0D"!HG_QUEST9"
$0D"!HG_QUEST10"
$0D"!HG_QUEST11"
$0D"!HG_ANSWER0"
$0D"!HG_ANSWER1"
$0D"!HG_ANSWER2"
$0D"!HG_ANSWER3"
$0D"!HG_ANSWER4"
$0D"!HG_ANSWER5"
$0D"!HG_ANSWER6"
$0D"!HG_CLEAR0"
$0D"!HG_CLEAR1"
$0D"!HG_CLEAR2"
$0D"!HG_CLEAR3"
$0D"!HG_CLEAR4"
$0D"!HG_CLEAR5"
$0D"!HG_CLEAR6"
$0D"!HG_CLEAR7"
$0D"!HG_CLEAR8"
$0D"!HG_CLEAR9"
$0D"!HG_CLEAR10"
$0D"!HG_CLEAR11"
$0D"!HG_CLEAR12"
$0D"!HG_CHECK0"
$0D"!HG_CHECK1"
$0D"!HG_CHECK2"
$0D"!HG_CHECK3"
$0D"!HG_CHECK4"
$0D"!HG_CHECK5"
$0D"!HG_CHECK6"
$0D"!HG_CHECK7"
$0D"!HG_SNOOP1A"
$0D"!HG_SNOOP2A"
$0D"!HG_SNOOP3A"
$0D"!HG_SNOOP4A"
$0D"!HG_SNOOP5A"
$0D"!HG_DRAG1A"
$0D"!HG_DRAG2A"
$0D"!HG_DRAG3A"
$0D"!HG_DRAG4A"
$0D"!HG_DRAG5A"
$0D"!HG_DRAG6A"
$0D"!HG_SUCKS"
                }
        }
        qrk_use_sentence_scientist:form = {
                UseSentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        t_sentence_scientist = !
                }
                UnUseSentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        t_sentence_scientist = !
                }
        }
        qrk_use_sentence_barney:form = {
                UseSentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        t_sentence_barney = !
                }
                UnUseSentence: = { Typ="C" Txt="&" Hint="(in SENTENCES.TXT)"
                        t_sentence_barney = !
                }
        }

        qrk_sequences_aflock:incl = { Typ="C" Txt="Aflock.mdl"
                Hint =
   "fly - Normal flying motion"
$0D"fly2 - Another flying motion"
$0D"bankL - Flies a bit different from fly and fly2"
$0D"bankR - Same as bankL"
$0D"hit - It looks like it's shot"
$0D"wounded - It flies with a hurt wing"
$0D"crash - It crashes into the ground and stops moving"
                items =
   "fly"
$0D"fly2"
$0D"bankL"
$0D"bankR"
$0D"hit"
$0D"wounded"
$0D"crash"
        }
        qrk_sequences_agrunt:incl = { Typ="C" Txt="Agrunt.mdl"
                Hint =
   "idle1 - just stands there"
$0D"threat - threats you badly with guns n gutter."
$0D"walk - walks normal forward"
$0D"run - runs fast forward"
$0D"turnl - turns left and back to normal position"
$0D"turnr - turns right and back to normal position"
$0D"smallflinch - makes small redraw from shock, fear or pain"
$0D"bigflinch - makes big redraw from shock, fear or pain. stays at same position though"
$0D"mattack2 - does an attack with the right claw, like when you are too close to him"
$0D"mattack3 - does an attack with the left claw, like when you are too close to him"
$0D"victorysquat - does small step forward to celebrate your death"
$0D"victoryeat - brings a piece of meat to his mouth with his '3rd' arm at his stomach"
$0D"larmflinch - steps back with left leg quickly and moves his head quickly for a second because of a shock, fear or pain"
$0D"llegflinch - moves weight to left leg and turns slightly to left as if hit or has pain at right side"
$0D"rarmflinch - moves with his shoulders backwards, more with right shoulder as if hit at left side"
$0D"rlegflinch - is hit or shocked and moves weight slightly on right leg"
$0D"attack3 - shoots hornets with right arm to enemy that's positioned slightly above/in front of him"
$0D"hornetattack - shoots hornets straight forward."
$0D"quickshoot - shoots several hornets straight forward"
$0D"longshoot - shoots hornets for a longer time straight forward"
$0D"diehead - hit in head, dead, falls backwards on back"
$0D"diegut - hit in stomach, and falls dead forward on stomach"
$0D"dieforward - just hit, dies and falls dead forward on stomach"
$0D"diesimple - just falls forward and is dead"
$0D"diebackward - almost the same as diehead only slower"
$0D"float - hangs in water floating, doesn't move besides breathing"
$0D"scare - tries to scare everyone by showing how a badboy he is"
$0D"bigopen - opens 2 sliding doors like in the game."
$0D"smashrail - smashes something with his right claw, moving it from leftdown to right up."
$0D"landhard - lands from the sky hard on the ground on his feet"
                Items =
   "idle1"
$0D"threat"
$0D"walk"
$0D"run"
$0D"turnl"
$0D"turnr"
$0D"smallflinch"
$0D"bigflinch"
$0D"mattack2"
$0D"mattack3"
$0D"victorysquat"
$0D"victoryeat"
$0D"larmflinch"
$0D"llegflinch"
$0D"rarmflinch"
$0D"rlegflinch"
$0D"attack3"
$0D"hornetattack"
$0D"quickshoot"
$0D"longshoot"
$0D"diehead"
$0D"diegut"
$0D"dieforward"
$0D"diesimple"
$0D"diebackward"
$0D"float"
$0D"scare"
$0D"bigopen"
$0D"smashrail"
$0D"landhard"
        }
        qrk_sequences_archer:incl = { Typ="C" Txt="Archer.mdl"
                Hint =
   "idle1 - just hangs in the water breathing"
$0D"idle2 - same as idle1"
$0D"idle3 - same as idle1"
$0D"burst(small) - shoots a small burst of it's bullits."
$0D"swim - swims, like moving it's tail"
$0D"swim_fast - like swim but faster"
$0D"bite - bites what's in front of him and rips it apart"
$0D"flinch1 - acts like it took a hit from the right side"
$0D"flinch2 - acts like it took a hit from below"
$0D"die1 - dies after a hit from the right. "
$0D"die2 - dies after a hit from below"
$0D"shoot - shoots 1 bullit."
$0D"surface - moves it's weird eyes to the surface to watch."
$0D"sink - a pose you can use to move it to the bottom of the waterarea. It acts dead and lies on it's left side"
$0D"dead_float - opposite pose of sink, on left side but right side curved upwards, floating at the surface of a waterarea"
$0D"180left - turns left and back"
$0D"180right - turns right and back"
                items =
   "idle1"
$0D"idle2"
$0D"idle3"
$0D"burst(small)"
$0D"swim"
$0D"swim_fast"
$0D"bite"
$0D"flinch1"
$0D"flinch2"
$0D"die1"
$0D"die2"
$0D"shoot"
$0D"surface"
$0D"sink"
$0D"dead_float"
$0D"180left"
$0D"180right"
        }
        qrk_sequences_baby_headcrab:incl = { Typ="C" Txt="Baby_Headcrab.mdl"
                Hint =
   "idle1 - sits there, doing nothing"
$0D"idle2 - sits there, doing nothing"
$0D"idle3 - sits there, doing nothing"
$0D"walk - walks gently forward"
$0D"run - runs fast forward"
$0D"angry - stands there being mad at you, asking you to smash his head"
$0D"flinch - takes a hit"
$0D"dieback - makes a looping in the air, lands on its back and is dead"
$0D"180_left - checks out leftside"
$0D"180_right - checks out rightside"
$0D"jump - jumps in the air. It's up to you how high"
$0D"jump_variation1 - a different jump, for the rest same as jump"
$0D"jump_variation2 - another different jump"
                Items =
   "idle1"
$0D"idle2"
$0D"idle3"
$0D"walk"
$0D"run"
$0D"angry"
$0D"flinch"
$0D"dieback"
$0D"180_left"
$0D"180_right"
$0D"jump"
$0D"jump_variation1"
$0D"jump_variation2"
        }
        qrk_sequences_barnacle:incl = { Typ="C" Txt="Barnacle.mdl"
                Hint=
   "idle1 - it's doing nothing, swinging it's tongue back and forth"
$0D"idle2 - same as idle1, swinging differently"
$0D"idle3 - same as idle1, swinging differently"
$0D"flinch_sm - takes a hit, collapses and pulls tongue, then refolds to previous state"
$0D"attack1 - sequence shown in game that it spits gibs out when it died. Tongue not present"
$0D"chewcycle - chews on something. Tongue not present (great for eating a grunt that is just leeched up by a scripted sequence"
$0D"death - the complete die sequence known from the game: tongue goes up, gibvomiting action and small inactive tongue is replaced"
                items=
   "idle1"
$0D"idle2"
$0D"idle3"
$0D"flinch_sm"
$0D"attack1"
$0D"chewcycle"
$0D"death"
        }
        qrk_sequences_barney:incl = { Typ="C" Txt="Barney.mdl"
                Hint=
   "idle1 - just stands there, breathing."
$0D"idle2 - does step forward, stands straight like an officer shouts at him and steps back, rests"
$0D"idle3 - pulls up his pants, like they're shoving of his b*tt"
$0D"idle4 - almost same as idle1 but with a slightly more movement with the hips (dancing quietly ;)"
$0D"walk - walks normal straight forward"
$0D"run - runs with big steps straight forward"
$0D"shootgun - stands still and shoots pistol with both hands together straight forward"
$0D"shootgun2 - as shootgun but shoots faster"
$0D"draw - draws gun and helds it in front of him. sequence stops there, so shootgun or shootgun2 should follow immediately"
$0D"disarm - slowly puts gun away in holster"
$0D"reload - reloads gun and restarts shooting"
$0D"turnleft - looks left and returns to initial position"
$0D"turnright - looks right and returns to initial position"
$0D"laflinch - takes hit in left arm and draws it back"
$0D"raflinch - takes hit in right arm and draws it back"
$0D"llflinch - takes hit and pulls weight on left leg which bends a little"
$0D"rlflinch - same as llflinch only now for right side"
$0D"smlflinch - takes a shot from front but keeps standing up"
$0D"cower_stand - bended legs and slowly looking from left to right and back"
$0D"locked_door - pulls on locked door with both arms and bended legs. "
$0D"fall_loop - a small animation of a barney falling into an endless cave."
$0D"barn_wave - bended legs, comes to stand and waves with right arm"
$0D"beat_grunt - stands above a dead grunt with one leg at either side, looks at it and steps away"
$0D"beat_gruntidle - stands above a dead grunt looking at it."
$0D"flashlight - helds a flashlight above his head forward"
$0D"diesimple - fells on his butt sitting, then falls on his back. Dead"
$0D"dieviolent - makes a perfect triple-rietberger pirouette and falls on his stomach. Dead"
$0D"diegutshot - takes hit in stomach, collapses, and falls on his stomach. Dead"
$0D"dieforward - just falls on his stomach. Dead"
$0D"diebackward - falls on his back. Dead"
$0D"diecrump - takes hit, falls on right side. Dead"
$0D"barnaclehit - reaches to his throat. barnaclepull should take off then"
$0D"barnaclepull - hangs in air, moving his legs rapidly, and hands at his throat"
$0D"barnaclecrunch - hangs in air, moves his legs slowly back and forward. Do this when shoved up in a barnacle up to the middle"
$0D"barnaclechew - hangs in the air, moves slightly up and down. Legs moving slowly but almost still"
$0D"lying_on_back - a pose. Lies on back"
$0D"lying_on_side - a pose. Lies on right side"
$0D"lying_on_stomach - a pose. Lies on stomach with arms straight besides his head"
$0D"stuffed_in_vent - a pose. Totally fold up. Legs in a weird-don't-try-this-at-home folded up up his back"
$0D"standing_idle - stands up, arms behind his back."
$0D"cprbarney - lies on back, and reacts on heartmassage."
$0D"cprbarneyrevive - reincarnates after heartmassage, crawls up slowly, gets pulled up by someone, and stands up, straight"
$0D"barney_dragvent - lies on stomach, is dragged by the feet in that direction, moves with his hands for help"
$0D"dying_barney - lies on back, with chest raised up a little. Slowly lies down. Dead pose should start now"
$0D"dying_barneyidle - the pose of dying_barney, but without the lies down part"
$0D"dying_friend - is bended over on his knees over a person that's dying and stands up."
$0D"dying_friendidle - as dying friend, but without the stands up part"
$0D"c1a3_bidle - weird sequence, very short. stands up looks left-up."
$0D"c1a3_ventb - is pulled up into a shaft and dropped to the floor. Smashes a piece of the wall at the right side and swims into the shaft that's behind the created opening"
$0D"c1a3_emergeidle - lies on stomach, with left side slightly raised on left arm and knockels."
$0D"c1a3_emerge - crawls forward in several directions. Hardly usable unless you have the same architecture as the c1a3 level"
$0D"haulbarney - a dead barney is dragged away on the shoulders in that direction, facing down, and after a few meters dropped on his stomach"
$0D"intropush - pushes several buttons like in the introsequence when you first enter the doors at black mesa. Great for let him open locked doors."
$0D"fence - looks around, then fetches a fence in front of him, tries to pull but gets electricuted and dies, falls at his right/back"
$0D"sit1 - sits on chair, types, turns to the right, looks, turns back, types, shakes head. and so on. As in the first level when you enter the hall and there are messages for you but Barney can't find them in the computer"
$0D"almostidle - almost dead barney on stomach, slightly raised on right arm and knockels"
$0D"almost - as almostidle but gets pulled at right arm, and then dies, takes pose of lying_on_side, which should follow this one."
$0D"laseridle - a pose. Dead barney on stomach. left arm straight beside his head."
$0D"lasertop - a pose. Very streched barney in a Z form. Not very usable"
$0D"laserbottom - a pose. Very streched barney in a Z form. Not very usable"
$0D"barneyfallidle - standing up but is starting to fall backwards"
$0D"barneyfall - is forced backwards and falls into a wide shaft"
$0D"c3a2_draw - very typical draw of weapon followed by a step and a disarm. Not very usable"
$0D"unlatch - unlatches a lock with right arm"
$0D"retina - grabs eyescanner with both hands and looks in scanner"
$0D"relaxstand - a pose. Stands up with hands behind his back"
$0D"assassinated - like dieforward"
$0D"trackswitch - pulls down a lever like a trackswitch or a bombinitiator. lever is at chestheight"
$0D"pepsiswing - does a swing with left fist, 90 degrees"
$0D"pepsipush - does several actions to push in a piece of wall and falls through it"
$0D"buttonpush - pushes a simple button with left arm."
                Items =
   "idle1"
$0D"idle2"
$0D"idle3"
$0D"idle4"
$0D"walk"
$0D"run"
$0D"shootgun"
$0D"shootgun2"
$0D"draw"
$0D"disarm"
$0D"reload"
$0D"turnleft"
$0D"turnright"
$0D"laflinch"
$0D"raflinch"
$0D"llflinch"
$0D"rlflinch"
$0D"smlflinch"
$0D"cower_stand"
$0D"locked_door"
$0D"fall_loop"
$0D"barn_wave"
$0D"beat_grunt"
$0D"beat_gruntidle"
$0D"flashlight"
$0D"diesimple"
$0D"dieviolent"
$0D"diegutshot"
$0D"dieforward"
$0D"diebackward"
$0D"diecrump"
$0D"barnaclehit"
$0D"barnaclepull"
$0D"barnaclecrunch"
$0D"barnaclechew"
$0D"lying_on_back"
$0D"lying_on_side"
$0D"lying_on_stomach"
$0D"stuffed_in_vent"
$0D"standing_idle"
$0D"cprbarney"
$0D"cprbarneyrevive"
$0D"barney_dragvent"
$0D"dying_barney"
$0D"dying_barneyidle"
$0D"dying_friend"
$0D"dying_friendidle"
$0D"c1a3_bidle"
$0D"c1a3_ventb"
$0D"c1a3_emergeidle"
$0D"c1a3_emerge"
$0D"haulbarney"
$0D"intropush"
$0D"fence"
$0D"sit1"
$0D"almostidle"
$0D"almost"
$0D"laseridle"
$0D"lasertop"
$0D"laserbottom"
$0D"barneyfallidle"
$0D"barneyfall"
$0D"c3a2_draw"
$0D"unlatch"
$0D"retina"
$0D"relaxstand"
$0D"assassinated"
$0D"trackswitch"
$0D"pepsiswing"
$0D"pepsipush"
$0D"buttonpush"
        }
        qrk_sequences_big_mom:incl = { Typ="C" Txt="big_mom.mdl"
                Hint=
   "idle1 - stands there, swinging it's sack."
$0D"idle2 - a bit bolder than idle1, still at same position, swinging the sack."
$0D"walk - walks normal straight forward"
$0D"run - runs forward like a horse"
$0D"death - takes a hit and dies forward, lying at a side"
$0D"claw - inserts the 2 pointy legs up front into a creature in front of it"
$0D"spawn - pulls up sack and drops it again, like it ejects some creatures."
$0D"mortar - shoots mortars from shield"
$0D"flinch - takes hit and redraws a bit"
$0D"defend - pulls shield up to bullits from above/forward"
$0D"jump - same as defend"
$0D"angry1 - same as defend"
$0D"angry2 - smashes creature in front of it with forelegs"
$0D"angry3 - as angry2 but more wider movement"
$0D"breakwall - as angry3 but faster"
$0D"fall1 - does 2 steps forward fast and falls into deep shaft"
$0D"fall2 - does 2 steps forward fast and falls in lower area, not deep"
$0D"falldeath - falls forward and is dead, moves legs uncontrolled"
                items=
   "idle1"
$0D"idle2"
$0D"walk"
$0D"run"
$0D"death"
$0D"claw"
$0D"spawn"
$0D"mortar"
$0D"flinch"
$0D"defend"
$0D"jump"
$0D"angry1"
$0D"angry2"
$0D"angry3"
$0D"breakwall"
$0D"fall1"
$0D"fall2"
$0D"falldeath"
        }
        qrk_sequences_bigrat:incl = { Typ="C" Txt="Bigrat.mdl"
                Hint=
   "idle4 - just stays at it's spot, eating stuff that lies around, rising up some times"
$0D"idle5 - just stays at it's spot on it's 4 feet"
$0D"idle6 - like idle4 bit much lower to the ground"
$0D"idle7 - like idle5"
$0D"walk2 - walks slowly forward"
$0D"jump - jumps a leap forward. You can insert between 2 walkparts or as a last resort to reach a spot"
$0D"eat - eats at his 4 feet some stuff, perhaps a dead creature"
$0D"die1 - it rises up and dies with a twist in the body, drops on its back"
                items=
   "idle4"
$0D"idle5"
$0D"idle6"
$0D"idle7"
$0D"walk2"
$0D"jump"
$0D"eat"
$0D"die1"
        }
        qrk_sequences_bullsquid:incl = { Typ="C" Txt="Bullsquid.mdl"
                Hint=
   "walk - walks normal and gently forward"
$0D"run - runs fast forward"
$0D"suprisedhop - jumps in the air and slaps his feet (really funny one! :)"
$0D"flinchs - very short sequence where it takes a hit and collapses and recovers"
$0D"flinchb - takes hit and shakes his body from left to right fast. Also short"
$0D"turnleft - looks left, raises right leg"
$0D"turnright - same as turnleft but now for right side"
$0D"idle - just stands there, looking around, opening his red mouth"
$0D"whip - makes a 360 degrees rotation, whipping is tail to splash something"
$0D"bite - just bites something that's above/in front of it"
$0D"range - reaches out with it's mouth and bites"
$0D"look - looks right"
$0D"seecrab - looks right, gets excited like kermit from the muppets and makes a few celebration hops"
$0D"eat - bends over to place it's mouth on the ground to suck up eatable stuff"
$0D"inspectdown - looks down and scrapes the ground with it's left leg"
$0D"sniff - places gently it's red tentacles in the air in front of it"
$0D"die - just drops to the floor very fast. Dead"
$0D"die1 - shakes a little then smashes to the floor, 1 leg at either side, dead"
$0D"bulljump - shakes it's head to concentrate and then takes a large jump forward"
$0D"draggruntidle - has it's mouth straight in front of it on the ground."
$0D"draggrunt - position of draggruntidle but moving backwards. So you can use this one after draggruntidle"
$0D"scare - jumps forward and dives low and opens mouth widely"
$0D"squidfallidle - a falling pose, mouth tentacles move like in the wind that comes from below"
$0D"squidfall - jumps forward in a shaft and makes a looping in the air and lands on its feet some meters below"
                items=
   "walk"
$0D"run"
$0D"suprisedhop"
$0D"flinchs"
$0D"flinchb"
$0D"turnleft"
$0D"turnright"
$0D"idle"
$0D"whip"
$0D"bite"
$0D"range"
$0D"look"
$0D"seecrab"
$0D"eat"
$0D"inspectdown"
$0D"sniff"
$0D"die"
$0D"die1"
$0D"bulljump"
$0D"draggruntidle"
$0D"draggrunt"
$0D"scare"
$0D"squidfallidle"
$0D"squidfall"
        }
        qrk_sequences_chumtoad:incl = { Typ="C" Txt="Chumtoad.mdl"
                Hint=
   "idle - just stands on his 4 feet breathing, doing nothing."
$0D"idle2 - pats with left frontleg on something, shaking it's head"
$0D"idle3 - moans or something, at least opens it's mouth slowly for a cry."
$0D"flinch1 - takes hit and flies straight up into the air backlegs up, then returns on 4 feet"
$0D"flinch2 - takes hit and just ducks a little"
$0D"hop - hops forward fast"
$0D"swim - makes gentle swimmovements with all 4 legs"
$0D"die3 - shakes fast, raised up on backlegs and then drops to the floor, dead"
$0D"pdwiggle - lying at it's back tongue out of it's mouth moving all it's legs fast"
$0D"playdead1 - like pdwiggle but then suddely moves at its feet again"
$0D"playdead2 - turns on it's back to pdwiggle :) so playdead2 -> pdwiggle -> playdead1"
                items=
   "idle"
$0D"idle2"
$0D"idle3"
$0D"flinch1"
$0D"flinch2"
$0D"hop"
$0D"swim"
$0D"die3"
$0D"pdwiggle"
$0D"playdead1"
$0D"playdead2"
        }
        qrk_sequences_construction:incl = { Typ="C" Txt="Construction.mdl"
                Hint=
   "inspect_floor - slides in from the right, is on hands and knees and looks carefully at the floor"
$0D"c1a4_bottom - large sequence of movements with usage of the c1a4 level architecture. Hardly usable"
$0D"idle1 - stands straight up, looking ahead"
$0D"idle2 - as idle1 but looks also fast up and left, like he's paranoia"
$0D"idle3 - as idle1 but looks gently left and right"
$0D"walk - walks with funny small steps forward"
$0D"run - runs forward"
$0D"diesimple - just drops to the floor on his stomach, dead"
$0D"dieforward - slower than diesimple and also rolls on on it's back when on the floor"
$0D"diebackward - makes a 360 turn on right leg and falls down on his stomach, moves a little and is then dead."
$0D"dieviolent - takes a big hit in stomach, flies back and turns around in the air, falls down on back and rolls over on stomach. Dead"
$0D"diecrump - takes hit in stomach, collapses, falls down on the ground, lies down on right side, dead."
$0D"barnaclehit - as barney's barnaclehit: reaches for his throat."
$0D"barnaclepull - hangs in the air, moving his legs fast, reaching for his throat"
$0D"barnaclecrunch - hangs in the barnacle waving his legs gently"
$0D"barnaclechew - as barnaclecrunch but slower legmovement"
$0D"lying_on_back - a pose. Lies on back"
$0D"lying_on_side - a pose. Lies on right side"
$0D"lying_on_stomach - a pose. Lies on stomach"
                items=
   "inspect_floor"
$0D"c1a4_bottom"
$0D"idle1"
$0D"idle2"
$0D"idle3"
$0D"walk"
$0D"run"
$0D"diesimple"
$0D"dieforward"
$0D"diebackward"
$0D"dieviolent"
$0D"diecrump"
$0D"barnaclehit"
$0D"barnaclepull"
$0D"barnaclecrunch"
$0D"barnaclechew"
$0D"lying_on_back"
$0D"lying_on_side"
$0D"lying_on_stomach"
        }
        qrk_sequences_controller:incl = { Typ="C" Txt="Controller.mdl"
                Hint=
   "atack1 - hangs in the air and brings his hands together like a priest to shoot his weapon"
$0D"attack2 - hangs in the air and brings his hands together in a different way and opens his head a bit"
$0D"throw - hangs in the air and throws something with his left arm forward"
$0D"idle2 - hangs in the air and spreads arms and rotates 360 degrees"
$0D"block - hangs in the air and blocks a threat coming from beyond, like a volleyball player"
$0D"shoot - hangs in the air, spreads arms crosswise like a fakhir and opens his head widely to fire"
$0D"flinch1 - hangs in the air, takes small hit"
$0D"flinch2 - hangs in the air, takes big hit and rotates 360 degrees"
$0D"fall - hangs in the air not straight and rotates around his axe"
$0D"forward - makes swimming moves to go forward"
$0D"backward - swims backward"
$0D"up - swims up"
$0D"down - swims down"
$0D"right - moves arms to the right to go to the LEFT!"
$0D"left - moves arms to the left to go to the RIGHT!"
$0D"float - hangs still in the air"
$0D"walk - hangs still (used for scripted sequences entity's moveto action: walk)"
$0D"run - hangs still (used for scripted sequences entity's moveto action: run)"
$0D"die1 - falls from the sky, and smashes into the ground, head bursted open"
                items=
   "atack1"
$0D"attack2"
$0D"throw"
$0D"idle2"
$0D"block"
$0D"shoot"
$0D"flinch1"
$0D"flinch2"
$0D"fall"
$0D"forward"
$0D"backward"
$0D"up"
$0D"down"
$0D"right"
$0D"left"
$0D"float"
$0D"walk"
$0D"run"
$0D"die1"
        }
        qrk_sequences_crystal:incl = { Typ="C" Txt="Crystal.mdl"
                Hint=
   "spin - to let it rotate slowly around the vertical axis"
                items=
   "spin"
        }
        qrk_sequences_dead_osprey:incl = { Typ="C" Txt="Dead_Osprey.mdl"
                Hint=
   "fly - it flies like a normal osprey, with running proppellors"
$0D"crash - it crashes and totally is out of balance, like a crashed vehicle."
                items=
   "fly"
$0D"crash"
        }
        qrk_sequences_filecabinet:incl = { Typ="C" Txt="Filecabinet.mdl"
                Hint=
   "idle - just stands there. not moving"
$0D"headcrabbed - after a few seconds it falls on it's left side, like a force pushes it aside"
                items=
   "idle"
$0D"headcrabbed"
        }
        qrk_sequences_floater:incl = { Typ="C" Txt="Floater.mdl"
                Hint=
   "idle1 - just meditating in the sky."
                items=
   "idle1"
        }
        qrk_sequences_forklift:incl = { Typ="C" Txt="Forklift.mdl"
                Hint=
   "dummy - complete still pose of a forklift and a dude in it."
$0D"drive - wheels rotate and forklift shivers like it's driving."
$0D"drive2 - like drive but much slower. "
$0D"jockey - the forklift is moving all up and all down"
$0D"idle - same as jockey"
$0D"patha - it rides a certain path and then dissapears. Not very usable"
$0D"pathb - same as patha but different path."
                items=
   "dummy"
$0D"drive"
$0D"drive2"
$0D"jockey"
$0D"idle"
$0D"patha"
$0D"pathb"
        }
        qrk_sequences_friendly:incl = { Typ="C" Txt="Friendly.mdl"
                Hint=
   "idle1 - stands there, waving it's too long arms"
$0D"walk - walks forward, in a way only this creature can."
$0D"smallflinch - takes hit from the left and looks confused"
$0D"smallflinch2 - as smallflinch but now from the right"
$0D"attack - it raises up, fiddles with it's arms, but not really an attack"
$0D"doublewhip - first smashes with it's left arm, then with it's right arm"
$0D"diesimple - takes hit and just drops dead."
$0D"vomit - makes vomiting movements with whole body."
                items=
   "idle1"
$0D"walk"
$0D"smallflinch"
$0D"smallflinch2"
$0D"attack"
$0D"doublewhip"
$0D"diesimple"
$0D"vomit"
        }
        qrk_sequences_fungus:incl = { Typ="C" Txt="Fungus.mdl"
                Hint=
   "idle1 - it will breath through it's white head."
                items=
   "idle1"
        }
        qrk_sequences_garg:incl = { Typ="C" Txt="Garg.mdl"
                Hint=
   "idle3 - just stands straight up, breathing, doing nothing"
$0D"idle2 - opens it's mouth to shout loud, and shivers"
$0D"idle1 - shurgs and moves shoulders"
$0D"idle4 - looks left at floor and then right at floor"
$0D"walk - walks forward."
$0D"run - runs forward. These steps are rather large. "
$0D"shootflames1 - opens both 'hands' to shoot"
$0D"shootflames2 - is already shooting and keeps doing that. Let this follow shootflames1"
$0D"Attack - smashes a creature with both arms from right up to left"
$0D"stomp - stomps on the ground with left leg"
$0D"180left - looks left and returns in position. Rather fast"
$0D"180right - same as 180left but then right"
$0D"Flinchlight - catches a hit and shivers light. Very short"
$0D"Flinchheavy - heavily moves after it's hit"
$0D"die - takes 2 slow steps forward, then falls forward. Dead"
$0D"bitehead - takes a sudden duck forward to bite then it fits the bitten object with both hands/claws"
$0D"throwbody - picks up something with left claw and throws it away quickly"
$0D"smash - smashes something completely to pieces with it's left claw."
$0D"rollcar - picks up a car or something at the bottom and lifts it all up fast"
$0D"kickcar - kicks forward with left leg"
$0D"pushcar - pushes something forward about 2 steps"
$0D"bust - slams on something like a closed door"
                items=
   "idle3"
$0D"idle2"
$0D"idle1"
$0D"idle4"
$0D"walk"
$0D"run"
$0D"shootflames1"
$0D"shootflames2"
$0D"Attack"
$0D"stomp"
$0D"180left"
$0D"180right"
$0D"Flinchlight"
$0D"Flinchheavy"
$0D"die"
$0D"bitehead"
$0D"throwbody"
$0D"smash"
$0D"rollcar"
$0D"kickcar"
$0D"pushcar"
$0D"bust"
        }
        qrk_sequences_gasbag:incl = { Typ="C" Txt="Gasbag.mdl"
                Hint=
   "spin - just rotates around it's vertical axis"
$0D"squash - the bubblebody collapses and refolds"
                items=
   "spin"
$0D"squash"
        }
        qrk_sequences_gman:incl = { Typ="C" Txt="Gman.mdl"
                Hint=
   "idle1 - stands straight up, suitcase in right hand, breathing"
$0D"idlebrush - straighens his tie and brushes with left hand dust from his suit"
$0D"idlelook - looks left and right"
$0D"idle02 - like idle1"
$0D"open - looks up and seems to follow a fast moving plane"
$0D"stand - like idle1"
$0D"walk - walks straight forward. His suitcase is moving weird."
$0D"yes - stands and nodds"
$0D"no - stands and shakes his head"
$0D"bigno - moves left hand from right shoulder to left like NO! and shakes his head"
$0D"bigyes - points at speaker in front of him and nodds"
$0D"listen - like idle1"
$0D"lookdown - looks at his left, down"
$0D"lookdown2 - looks in front of him, down"
                items=
   "idle1"
$0D"idlebrush"
$0D"idlelook"
$0D"idle02"
$0D"open"
$0D"stand"
$0D"walk"
$0D"yes"
$0D"no"
$0D"bigno"
$0D"bigyes"
$0D"listen"
$0D"lookdown"
$0D"lookdown2"
        }
        qrk_sequences_hair:incl = { Typ="C" Txt="Hair.mdl"
                Hint=
   "spin - wave in the wind"
                items=
   "spin"
        }
        qrk_sequences_hassassin:incl = { Typ="C" Txt="Hassassin.mdl"
                Hint=
   "idle3 - stands there, weapon in right hand, carefully looking around"
$0D"idle1 - stands there"
$0D"idle2 - ducked down hands on weapon, fast looking around"
$0D"run - runs fast forward, pistol in right hand"
$0D"walk - walks gently forward, pistol in right hand"
$0D"shoot - kneeled down on right knee, shooting forward/up fast"
$0D"grenadethrow - ducked down on knees, throws something with left arm. Very fast sequence"
$0D"kick - Does a combi of 2 Tae kwondo kicks"
$0D"kickshort - performs a mae gheri (karate). a kick straight ahead."
$0D"death_during_run - at full speed forward dies, feet come loose from the ground, she slams into the ground. Dead"
$0D"die_backwards - takes hit in chest, flies backwards and falls on back. Dead"
$0D"die_simple - is kneeled down on right knee, takes hit in head, touches head and falls down on stomach. Dead"
$0D"jump - makes salto backwards. Lands on feet."
$0D"fly_up - keeps doing backwards salto's in the air. Doesn't land, so you can use this for a long fly"
$0D"fly_down - hangs in the air, left leg straight, right leg bowed, firing down"
$0D"fly_attack - same as fly_down"
$0D"landfromjump - lands on feet and ducks. Short sequence. shoot can follow this one"
                items=
   "idle3"
$0D"idle1"
$0D"idle2"
$0D"run"
$0D"walk"
$0D"shoot"
$0D"grenadethrow"
$0D"kick"
$0D"kickshort"
$0D"death_during_run"
$0D"die_backwards"
$0D"die_simple"
$0D"jump"
$0D"fly_up"
$0D"fly_down"
$0D"fly_attack"
$0D"landfromjump"
        }
        qrk_sequences_headcrab:incl = { Typ="C" Txt="Headcrab.mdl"
                Hint=
   "idle1 - sits on the ground, breathing"
$0D"idle2 - sits on the ground but waves forelegs up and down"
$0D"idle3 - sits on the ground and moves leftleg after rightleg like it's bored"
$0D"walk - walks slowly forward"
$0D"run - walks faster forward with forelegs up in the air"
$0D"angry - slams forelegs on the ground, raises up on backlegs and puts forelegs in the sky"
$0D"flinch - takes hit from the left and holds left foreleg up"
$0D"dieback - makes salto backwards and lands on its back. Dead"
$0D"180_left - makes a turn left"
$0D"180_right - makes a turn right"
$0D"jump - jumps straight up, like we all know so well from the game"
$0D"jump_variation1 - like jump but rotates more to the right"
$0D"jump_variation2 - like jump but rotates more to the left"
$0D"yaw_adjustments - sits on butt, forelegs around something, shivering"
$0D"headcrabbed#1 - idle1 then suddely jumps forward, holds on and grabs creature it has jumped on"
$0D"headcrabbed#2 - idle1 then jumps forward, lands on something that rotates to the right. there it stops"
$0D"headidle - sits on a head, doing nothing"
$0D"crashidle - sits on something moving"
$0D"crash - sits on something that moves into a wall, splatting the headcrab"
$0D"hstruggleidle - like crashidle but much slower"
$0D"hstruggle - has something in it's claws that rotates it 90 degrees down, like a pulled lever"
                items=
   "idle1"
$0D"idle2"
$0D"idle3"
$0D"walk"
$0D"run"
$0D"angry"
$0D"flinch"
$0D"dieback"
$0D"180_left"
$0D"180_right"
$0D"jump"
$0D"jump_variation1"
$0D"jump_variation2"
$0D"yaw_adjustments"
$0D"headcrabbed#1"
$0D"headcrabbed#2"
$0D"headidle"
$0D"crashidle"
$0D"crash"
$0D"hstruggleidle"
$0D"hstruggle"
        }
        qrk_sequences_hgrunt:incl = { Typ="C" Txt="Hgrunt.mdl"
                Hint=
   "walk1 - has weapon in both hands ready to shoot, and walks gently but carfull forward"
$0D"run - runs fast forward, slightly ducked."
$0D"victorydance - bends over a creature and shoots it from very close"
$0D"cower - kneels down on left knee and protects face with left hand, like when he has trown a handgrenade or seen one that is going to explode"
$0D"smflinch - takes hit from the front and head is pulled back fast and back"
$0D"leftlegsmflinch - takes hit in left leg that is pulled back and returns back"
$0D"rightlegsmflinsh - same as leftlegsmflinch but now with right leg"
$0D"rightarmflinch - takes hit in right arm that's pulled back"
$0D"leftarmflinch - like rightarmflinch but now with left arm"
$0D"launchgrenade - kneels down on right knee and fires 9mmAR grenade up/front"
$0D"throwgrenade - reaches in backpack for a grenade and trows it in front of him."
$0D"idle1 - stands there, weapon facing up, doing nothing, but carefully looking around"
$0D"idle2 - as walk1 but then not walking"
$0D"combatidle - like idle2 but now also looking over his weapon to aim better"
$0D"frontkick - performs a mae gheri, a kick forward at chest height with right foot"
$0D"crouching_idle - kneeled down on right knee, weapon in both hands, doing nothing"
$0D"crouching_wait - as crouching_idle but firing low"
$0D"crouching_mp5 - as crouching_wait but fires slowly and also straight ahead"
$0D"standing_mp5 - like crouching_mp5 but now standing up"
$0D"reload_mp5 - kneels down, reaches for new clip in backback, reloads weapon and restarts firing, standing up."
$0D"crouching_shotgun - like crouching_mp5, but firing speed as shotgun"
$0D"standing_shotgun - like standing_mp5 but firing speed as shotgun"
$0D"reload_shotgun - like reload_mp5"
$0D"advance_signal - waves with left arm from below to behind his shoulder vertically, while pointing his gun forward"
$0D"flank_signal - first moves left arm straight up, then back horizontally then to the left side."
$0D"retreat_signal - moves left arm from front slowly to up his shoulder then straight down."
$0D"drop_grenade - picks a grenade from his chestpack and drops it to the floor"
$0D"limpingwalk - walks slowly forward, is shot in left foot and left arm. weapon points down"
$0D"limpingrun - like run, but now not pointing a gun and left side is hurt badly"
$0D"180L - makes turn 180 degrees left"
$0D"180R - makes turn 180 degrees right"
$0D"strafeleft - steps left fast, still firing"
$0D"straferight - steps right fast, still firing"
$0D"dieback1 - shot in head, turns around and falls on stomach. Dead"
$0D"dieforward - takes a dive forward on it's stomach. Dead"
$0D"diesimple - dies the 'platoon'-way. Take hit, and fall on the ground on right side. dead."
$0D"diebackwards - takes hit and falls on back. Dead"
$0D"dieheadshot - is hit in head, falls down, dead on stomach"
$0D"diegutshot - is hit in stomach, looks at it, kneels down, and rolls on right side. Dead"
$0D"barnacled1 - is caught by a barnacle-tongue, and reaches for his throat with left arm."
$0D"barnacled2 - hangs in the air, legs moving fast, left hand on throat"
$0D"barnacled3 - half in barnacle, legs moving less fast"
$0D"barnacled4 - almost eaten, legs moving slowly"
$0D"dead_on_stomach - a pose. Lies on stomach with arms spread beneath his head"
$0D"deadstomach - same as dead_on_stomach"
$0D"deadside - a pose. Lies on left side"
$0D"deadsitting - a pose. Sits down, dead"
$0D"repel_jump - stands in plane, looks down, shoots and catches repel to go down. There it stops"
$0D"repel_repel - hangs on repel, firing to the right, down"
$0D"repel_shoot - as repel_repel, but firing up"
$0D"repel_land - lands on the ground, lets go repel. There it stops. Very short sequence"
$0D"repel_die - he dies while hanging in the air. stays hanging "
$0D"dragholeidle - lies on stomach, moves very slowly arms, legs and head."
$0D"draghole - as dragholeidle but is now dragged by the feet in that direction. Left leg hits holeborder and folds up, cracking the bones. Follows dragholeidle"
$0D"bustwall - flies back and falls on back. Like a large explosion took place right in front of him"
$0D"hoprail - places left hand on something and hops over it with both legs at the same time."
$0D"converse1 - stands with both arms crossed in front of his chest"
$0D"converse2 - like converse1, but then leaning against a wall with his back"
$0D"startleleft - follows converse1. Opens arms and looks to the left like he saw something there. There it stops. Short sequence"
$0D"startleright - follows convers2. Opens arms and looks to the right like he saw something there. There it stops. Short sequence"
$0D"divecover - takes a dive on his stomach, forward, and stands up."
$0D"difuse - kneeled down on left knee, leaning on right leg doing nothing, looking puzzeled"
$0D"corner1 - stands there just behind a corner, with the corner at his left side, looking just around the corner to the left"
$0D"corner2 - like corner1 but is not looking"
$0D"stone_toss - sits down on something low, grabs a stone from the floor, flips it up and looks at it, then stands up."
$0D"cliffdie - drops from high cliff and drops into something very deep. Dead"
$0D"diveaside_idle - like crouching_idle"
$0D"diveaside - shoots forward, then takes a dive on his stomach to the right to take cover, there he stands up"
$0D"kneeldive_idle - kneeled down on right knee, weapon pointing forward, doing nothing"
$0D"kneeldive - as kneeldive_idle but shoots 2 times, then dives to the left, again gets up on his knee facing the other direction as sequencestart."
$0D"WM_button - slams with left fist on button on the wall at headheight and looks "
$0D"WM_moatjump - jumps up on a higher platform on the right, then takes a few steps forward and takes a jump. Hardly usable though, unless you have architecture fitting this sequence"
$0D"bustwindow - smashes into something with the backside of his gun and aims then through the hole"
$0D"dragleft - drags something with his left hand while walking forward. looks at the dragged object"
$0D"dragright - same as dragleft but now hangs to the left, like it's really heavy"
$0D"trackwave - stands with his legs spread and waves with both arms above his head"
$0D"trackdive - dives away to the right and gets up"
$0D"flyback - flies back like he's hit by a truck in the chest, tries to get up"
$0D"impaled - is folded up, dead. Backpack is facing up, chest is horizontal, arms and legs and head are hanging down. Great for floating dead grunts in the water"
$0D"jumptracks - takes jump forward with both legs together"
$0D"pipetoss - like throwgrenade"
$0D"plunger - presses down lever with both hands"
                items=
   "walk1"
$0D"run"
$0D"victorydance"
$0D"cower"
$0D"smflinch"
$0D"leftlegsmflinch"
$0D"rightlegsmflinsh"
$0D"rightarmflinch"
$0D"leftarmflinch"
$0D"launchgrenade"
$0D"throwgrenade"
$0D"idle1"
$0D"idle2"
$0D"combatidle"
$0D"frontkick"
$0D"crouching_idle"
$0D"crouching_wait"
$0D"crouching_mp5"
$0D"standing_mp5"
$0D"reload_mp5"
$0D"crouching_shotgun"
$0D"standing_shotgun"
$0D"reload_shotgun"
$0D"advance_signal"
$0D"flank_signal"
$0D"retreat_signal"
$0D"drop_grenade"
$0D"limpingwalk"
$0D"limpingrun"
$0D"180L"
$0D"180R"
$0D"strafeleft"
$0D"straferight"
$0D"dieback1"
$0D"dieforward"
$0D"diesimple"
$0D"diebackwards"
$0D"dieheadshot"
$0D"diegutshot"
$0D"barnacled1"
$0D"barnacled2"
$0D"barnacled3"
$0D"barnacled4"
$0D"dead_on_stomach"
$0D"deadstomach"
$0D"deadside"
$0D"deadsitting"
$0D"repel_jump"
$0D"repel_repel"
$0D"repel_shoot"
$0D"repel_land"
$0D"repel_die"
$0D"dragholeidle"
$0D"draghole"
$0D"bustwall"
$0D"hoprail"
$0D"converse1"
$0D"converse2"
$0D"startleleft"
$0D"startleright"
$0D"divecover"
$0D"difuse"
$0D"corner1"
$0D"corner2"
$0D"stone_toss"
$0D"cliffdie"
$0D"diveaside_idle"
$0D"diveaside"
$0D"kneeldive_idle"
$0D"kneeldive"
$0D"WM_button"
$0D"WM_moatjump"
$0D"bustwindow"
$0D"dragleft"
$0D"dragright"
$0D"trackwave"
$0D"trackdive"
$0D"flyback"
$0D"impaled"
$0D"jumptracks"
$0D"pipetoss"
$0D"plunger"
        }
        qrk_sequences_holo:incl = { Typ="C" Txt="Holo.mdl"
                Hint=
   "walk - just walks gently forward"
$0D"longjump - makes 2 large steps forward (running) and jumps far, like a longjump."
$0D"troom_talkidle - stands up, with hands on her back."
$0D"troom_quadjump - runs and does 3 different jumps. Not very usable, unless you have the architecture that fits the jumps"
$0D"troom_intro - stands up, hands gently waving like she is teaching something."
$0D"quadtalk - like troom_talkidle"
$0D"cjump_hole - jumps up and lands higher on left leg and crouches into the pipe/hole she jumped up/into"
$0D"scharge - like troon_talkidle but after a few seconds she will point to something on her right then come back into startposition"
$0D"crouche_hole - just stands there, hands on her back."
$0D"jump_module - like scharge"
$0D"longjumptalk - like troon_talkidle"
$0D"healthkit - like scharge"
$0D"completed - like troom_talkidle"
$0D"target - stands up like troom_talkidle but streches left arm to the left to point at something, then puts it back on her back"
$0D"kickup - in the water, she goes to the bottom, then jumps up "
$0D"threadwater - slowly floating in the water, arms horizontal, legs slightly moving"
$0D"dive - dives into the water in front of here"
$0D"divetalk - like troom_talkidle"
$0D"aquaexit - don't expect a Lara Kroft sequence, it's just another troom_talkidle :("
$0D"train - like troom_talkidle"
$0D"crate - like troom_talkidle"
$0D"pull_box - like troom_talkidle"
$0D"crate_exit - like troom_talkidle"
$0D"bust_wall - like troom_talkidle but makes 3 gently 'hitch-hiking' moves with left arm"
$0D"ladder - like troom_talkidle but raises left arm"
                items=
   "walk"
$0D"longjump"
$0D"troom_talkidle"
$0D"troom_quadjump"
$0D"troom_intro"
$0D"quadtalk"
$0D"cjump_hole"
$0D"scharge"
$0D"crouche_hole"
$0D"jump_module"
$0D"longjumptalk"
$0D"healthkit"
$0D"completed"
$0D"target"
$0D"kickup"
$0D"threadwater"
$0D"dive"
$0D"divetalk"
$0D"aquaexit"
$0D"train"
$0D"crate"
$0D"pull_box"
$0D"crate_exit"
$0D"bust_wall"
$0D"ladder"
        }
        qrk_sequences_hornet:incl = { Typ="C" Txt="Hornet.mdl"
                Hint=
   "idle - doing nothing"$0D
                items=
   "idle"
        }
        qrk_sequences_houndeye:incl = { Typ="C" Txt="Houndeye.mdl"
                Hint=
   "idle1 - bows through right frontleg and taps ground with left front leg"
$0D"idle2 - stands there doing nothing but breathing"
$0D"idle3 - stands there and shakes shoulders "
$0D"run - runs fast forward"
$0D"die - just falls on it's left side. Dead. Short sequence"
$0D"die1 - falls on head forward and then on left side. Dead"
$0D"die2 - falls backwards and on left side. Dead"
$0D"die3 - same as die2 but then on right side."
$0D"attack - the fast shivering attack it does, swinging from right to left then releasing it's energy in centric circles (not included)"
$0D"flinch_small - takes hit and shakes head"
$0D"flinch_small2 - bends knees and comes back to stand. Short Sequence"
$0D"die_crumple - drops to the floor, right leg is folded under the body"
$0D"walk_limp - walks slowly, left leg is hurt"
$0D"walk2 - walks more slowly, feet for feet, backleg is hurt"
$0D"leaderlook - stands up on its backleg like a ballerina, looks around to see if all his troops are still there, then comes back to normal stand"
$0D"sleep - lies on it's right side, breathing but doing nothing"
$0D"gotosleep - stands, shivers shortly, then lies down on ground and takes position of sleep"
$0D"sleeptostand - jumps up from sleep to stand. Short Sequence"
$0D"madidle - shortly moves frontlegs back and forth apart from eachother"
$0D"madidle2 - shakes body, leaning on right leg, then streches all legs to raise a bit up then continues shaking"
$0D"madidle3 - makes 2 jumps up in the air"
$0D"inspect - turns head aside to get a concentrated look, then holds up left leg as in 'come closer, stranger'"
$0D"eat - looks down on the ground, then places body on the ground and moves it back and forth, then comes back to stand"
$0D"180l - makes turn left"
$0D"180r - makes turn right"
$0D"jumpback - jumps backwards"
$0D"wakefast - jumps up from sleep with a fast jump in the air"
$0D"whimper - looks away, down and shakes body like it's crying"
$0D"jumpwindow - takes a large jump forward and when it lands, it rotates 180 degrees"
                items=
   "idle1"
$0D"idle2"
$0D"idle3"
$0D"run"
$0D"die"
$0D"die1"
$0D"die2"
$0D"die3"
$0D"attack"
$0D"flinch_small"
$0D"flinch_small2"
$0D"die_crumple"
$0D"walk_limp"
$0D"walk2"
$0D"leaderlook"
$0D"sleep"
$0D"gotosleep"
$0D"sleeptostand"
$0D"madidle"
$0D"madidle2"
$0D"madidle3"
$0D"inspect"
$0D"eat"
$0D"180l"
$0D"180r"
$0D"jumpback"
$0D"wakefast"
$0D"whimper"
$0D"jumpwindow"
        }
        qrk_sequences_icky:incl = { Typ="C" Txt="Icky.mdl"
                Hint=
   "idle - hangs in the water, mouth open, and his legs move gently, tail waves gently."
$0D"swim - has angry look on his face, body waves to swim forward, mouth closed"
$0D"thrust - like swim but head is slightly raised."
$0D"die1 - rotates slowly in left side, shivers some times very fast and dies"
$0D"die2 - shivers, raises up and then hangs down in about 70 degrees angle"
$0D"smflinch - takes hit. Short sequence. Follows thrust"
$0D"bgflinch - takes hit and moves angry with body."
$0D"bellyup - rotates slowly on it's back as a dead fish"
$0D"bite_r - bites forward with head slightly rotated left"
$0D"bite_l - bites forward with a horizontal from right to left move."
$0D"srattack1 - puts his nails on his lefs into a creature and bites its head off"
$0D"rturn - makes a turnmove right"
$0D"lturn - makes a turnmove left"
$0D"180turn - makes a 180 degrees turn left"
$0D"hitcage - moves up and falls down. Weird sequence"
$0D"new_ickyjump - moves vertical, rotates around vertical axis and whippes with tail, makes then another move up and moves down horizontally. Weird sequence"
                items=
   "idle"
$0D"swim"
$0D"thrust"
$0D"die1"
$0D"die2"
$0D"smflinch"
$0D"bgflinch"
$0D"bellyup"
$0D"bite_r"
$0D"bite_l"
$0D"srattack1"
$0D"rturn"
$0D"lturn"
$0D"180turn"
$0D"hitcage"
$0D"new_ickyjump"
        }
        qrk_sequences_in_teleport:incl = { Typ="C" Txt="In_Teleport.mdl"
                Hint=
   "idle - it rotates around vertical axis. several squares move up and down"
                items=
   "idle"
        }
        qrk_sequences_islave:incl = { Typ="C" Txt="Islave.mdl"
                Hint=
   "idle1 - stands there and then it moves head to the left to let his left claw scratch his face"
$0D"idle2 - looks forward and raises up a little like it's suprised then continues looking"
$0D"idle3 - just stands there, breathing, doing nothing"
$0D"crouch - looks at his left hand, then kneels down on both keens and places claws to the floor, like he is kneeling down for a god"
$0D"walk1 - walks slowly forward"
$0D"walk2 - as walk1"
$0D"run1 - runs with large steps forward"
$0D"right - looks right"
$0D"left - looks left"
$0D"jump - makes step forward, then jumps forward"
$0D"stairsup - walks stairs, slowly"
$0D"attack1 - slaps creature with both claws"
$0D"zapattack1 - concentrates, then reaches forward with both claws. "
$0D"flinch2 - takes hit from the right. Short Sequence. "
$0D"laflinch - as flinch2 but a little longer"
$0D"raflinch - right arm is hit and pushed back"
$0D"llflinch - left leg is hit and bend for a short time"
$0D"rlflinch - as llflinch but with right leg"
$0D"dieheadshot - takes hit in head, reaches up and then drops to the ground on stomach. Dead"
$0D"diesimple - rolls on left side. Dead"
$0D"diebackward - falls on back. Dead"
$0D"dieforward - just drops to the floor on his stomach. Dead"
$0D"collar1 - reaches with both claws for his neck, moves body from left to right like he's strangled"
$0D"collar2 - grabs neck, and bends to the floor with whole body"
$0D"pushup - places both claws above his head and pushes, not hard though"
$0D"grab - has claws in front of him, tossing something between them"
$0D"updown - presses a lever from up to down position in front of him at chestheight, with right claw"
$0D"downup - raises up after crouch with both hands in the air like 'halliluya!'"
$0D"jibber - moves his right claw along his head like he tries to hit a fly"
$0D"jabber - stands straight up, claws in the air like Peggy Bundy, and moves them gently forward and backward."
                items=
   "idle1"
$0D"idle2"
$0D"idle3"
$0D"crouch"
$0D"walk1"
$0D"walk2"
$0D"run1"
$0D"right"
$0D"left"
$0D"jump"
$0D"stairsup"
$0D"attack1"
$0D"zapattack1"
$0D"flinch2"
$0D"laflinch"
$0D"raflinch"
$0D"llflinch"
$0D"rlflinch"
$0D"dieheadshot"
$0D"diesimple"
$0D"diebackward"
$0D"dieforward"
$0D"collar1"
$0D"collar2"
$0D"pushup"
$0D"grab"
$0D"updown"
$0D"downup"
$0D"jibber"
$0D"jabber"
        }
        qrk_sequences_kingpin:incl = { Typ="C" Txt="Kingpin.mdl"
                Hint=
   "idle - just stands there on his thick leg, waving with his forelegs"
$0D"walk - places his forelegs on the ground some place further away and then drags his body forward."
$0D"run - just waves with his think leg. "
                items=
   "idle"
$0D"walk"
$0D"run"
        }
        qrk_sequences_leech:incl = { Typ="C" Txt="Leech.mdl"
                Hint=
   "swim - just swims forward, waving it's body"
$0D"swim2 - like swim2 but larger waves"
$0D"attack - swims very fast"
$0D"hover - jumps up and down on it's side, like an alive fish outside the water"
$0D"leftturn - makes a leftturn move"
$0D"rightturn - makes a rightturn move"
$0D"death - takes hit and hangs upside down"
$0D"death_end - moves slowly back from vertical to horizontal position. Follows death"
                items=
   "swim"
$0D"swim2"
$0D"attack"
$0D"hover"
$0D"leftturn"
$0D"rightturn"
$0D"death"
$0D"death_end"
        }
        qrk_sequences_light:incl = { Typ="C" Txt="Light.mdl"
                Hint=
   "idle1 - waves in the wind, light out and on"
$0D"retract - pulls light back fast"
$0D"deploy - light comes slowly out of the plant to idle position"
$0D"hide - light is in. Follows retract and is followed by deploy"
                items=
   "idle1"
$0D"retract"
$0D"deploy"
$0D"hide"
        }
        qrk_sequences_loader:incl = { Typ="C" Txt="Loader.mdl"
                Hint=
   "idle - stands still, moves some bodyparts a little, and has a wooden crate in it's arms in front of it"
$0D"boxwalk - walks slowly forward with the crate in it's arms in front of it"
$0D"run2 - runs forward and has the crate hanging below it, about 256 units"
$0D"heroidle - as run2, but now standing still. Crate swings back and forth"
$0D"freeze - same as heroidle2"
$0D"herodie - walks several steps forward then stops. Left legs fall off and the machine drops to the ground. Crate hanging below it."
$0D"rampwalk - walks straight ahead, then turns to the right, walks several steps then turns again to the left and walks down a ramp. No box"
                items=
   "idle"
$0D"boxwalk"
$0D"run2"
$0D"heroidle"
$0D"freeze"
$0D"herodie"
$0D"rampwalk"
        }
        qrk_sequences_miniturret:incl = { Typ="C" Txt="Miniturret.mdl"
                Hint=
   "idle_off - is switched off, doesn't move."
$0D"fire - has opened and fires along it's gun"
$0D"spin - is opened up but doesn't move"
$0D"deploy - plops open upwards and opens up the gun"
$0D"retire - as deploy but very slowly"
$0D"die - fires in circles, up down and rotates 360 degrees."
                items=
   "idle_off"
$0D"fire"
$0D"spin"
$0D"deploy"
$0D"retire"
$0D"die"
        }
        qrk_sequences_nihilanth:incl = { Typ="C" Txt="Nihilanth.mdl"
                Hint= ""
                items=
   "attack1"
$0D"attack2"
$0D"throw"
$0D"block"
$0D"recharge"
$0D"float_open"
$0D"attack1_open"
$0D"attack2_open"
$0D"flinch1"
$0D"flinch2"
$0D"fall"
$0D"die1"
$0D"walk_f"
$0D"walk_b"
$0D"walk_u"
$0D"walk_d"
$0D"walk_r"
$0D"walk_l"
$0D"walk"
$0D"shoot"
        }
        qrk_sequences_osprey:incl = { Typ="C" Txt="Osprey.mdl"
                Hint=
   "rotor - proppellers rotate, it flies"
                items=
   "rotor"
        }
        qrk_sequences_out_teleport:incl = { Typ="C" Txt="Out_Teleport.mdl"
                Hint=
   "idle - it rotates around vertical axis. several squares move up and down"
                items=
   "idle"
        }
        qrk_sequences_pipe_bubbles:incl = { Typ="C" Txt="Pipe_Bubbles.mdl"
                Hint=
   "flow - the constant flowing of bubbles."
                items=
   "flow"
        }
        qrk_sequences_player:incl = { Typ="C" Txt="Player.mdl"
                Hint=
   "lookidle - stands there, looking around carefully like he arrives in a strange place for the first time. Right hand points forward as if it's holding a handgun"
$0D"idle - as lookidle but doesn't look"
$0D"deep_idle - as idle, but left arm is slightly more moving"
$0D"run2 - runs forward. right hand still holds handgun"
$0D"walk2handed - walks forward like RoboCop, right hand holds handgun"
$0D"2handshoot - stands up, and fires shotgun with both hands forward"
$0D"crawl - walks ducked forward, right hand holds handgun"
$0D"crouch_idle - as crawl, but doesn't walk"
$0D"jump - jumps up in the air, pulls up legs and lands on the floor again"
$0D"long_jump - does a large jump forward like a true Carl Lewis"
$0D"swim - swims gently with 2 legs and left arm. Right arm contains handgun"
$0D"treadwater - walks through water, left arm moves water away, right hand contains handgun"
$0D"run - runs in a weird way: only the legs move. Arms are glued to the body, straight down."
$0D"walk - like run, but then normal walk"
$0D"aim_2 - holds shotgun with both hands, pointing forward."
$0D"shoot_2 - like 2handshoot but stands more straight up"
$0D"aim_1 - like aim_2 but holds shotgun higher and looks over barrel"
$0D"shoot_1 - pose of aim_1 but shoots shotgun"
$0D"die_simple - drops to the floor on left side. Dead"
$0D"die_backwards1 - just falls backwards on his back. Dead"
$0D"die_backwards - makes salto mortale backwards, and lands on his back. Dead"
$0D"die_forwards - just drops to the floor forwards on his face. Dead"
$0D"headshot - takes large hit in head, and drops to the floor on right side. Dead"
$0D"die_spin - another backwards salto stunt around vertical bodyaxis and lands on left side on the floor. Dead"
$0D"gutshot - takes hit in stomach, kneels down, and falls on left side on the floor. Dead"
$0D"ref_aim_crowbar - stands straight up, holding crowbar above right shoulder with both hands, ready to jam"
$0D"ref_shoot_crowbar - hits something in front of him with crowbar in right hand. "
$0D"crouch_aim_crowbar - like ref_aim_crowbar but ducked down"
$0D"crouch_shoot_crowbar - like ref_shoot_crowbar but ducked down"
$0D"ref_aim_trip - stands, with both hands to fists in front of him, like M. Tyson does, but ofcourse holds a tripmine"
$0D"ref_shoot_trip - places tripmine on wall. "
$0D"crouch_aim_trip - like ref_aim_trip but ducked down"
$0D"crouch_shoot_trip - like ref_shoot_trip but ducked down"
$0D"ref_aim_onehanded - like aim_1"
$0D"ref_shoot_onehanded - like shoot_1"
$0D"crouch_aim_onehanded - like ref_aim_onehanded but ducked down"
$0D"crouch_shoot_onehanded - like ref_shoot_onehanded but ducked down"
$0D"ref_aim_python - as ref_aim_onehanded"
$0D"ref_shoot_python - pulls back something, like a rope"
$0D"crouch_aim_python - like crouch_aim_onehanded"
$0D"crouch_shoot_python - like crouch_shoot_onehanded"
$0D"ref_aim_shotgun - like aim_2"
$0D"ref_shoot_shotgun - like shoot_1"
$0D"crouch_aim_shotgun - like ref_aim_shotgun but ducked down"
$0D"crouch_shoot_shotgun - like ref_shoot_shotgun but ducked down"
$0D"ref_aim_gauss - like aim_1"
$0D"ref_shoot_gauss - like shoot_1 but larger pushback"
$0D"crouch_aim_gauss - like crouch_aim_shotgun"
$0D"crouch_shoot_gauss - like crouch_shoot_shotgun"
$0D"ref_aim_mp5 - like aim_1"
$0D"ref_shoot_mp5 - like shoot_1 but much faster (9mmAR)"
$0D"crouch_aim_mp5 - like crouch_aim_shotgun"
$0D"crouch_shoot_mp5 - like crouch_shoot_shotgun but much faster"
$0D"ref_aim_rpg - like aim_1 but looks more up instead of in front of him"
$0D"ref_shoot_rpg - like shoot_1 but shoots more up than in front of him and slower"
$0D"crouch_aim_rpg - like ref_aim_rpg but ducked down"
$0D"crouch_shoot_rpg - like ref_shoot_rpg but ducked down"
$0D"ref_aim_egon - like aim_1 but holds hands above eachother instead of behind eachother"
$0D"ref_shoot_egon - like ref_aim_egon"
$0D"crouch_aim_egon - like ref_aim_egon but ducked down"
$0D"crouch_shoot_egon - like ref_shoot_egon but ducked down"
$0D"ref_aim_squeak - like aim_1 but holds both hands closer to body"
$0D"ref_shoot_squeak - throws the snark with right hand on the floor in front of him"
$0D"crouch_aim_squeak - like ref_aim_squeak but ducked down"
$0D"crouch_shoot_squeak - like ref_shoot_squeak but ducked down"
$0D"ref_aim_hive - like idle"
$0D"ref_shoot_hive - like ref_aim_hive but shoots fast"
$0D"crouch_aim_hive - like ref_aim_hive but ducked down"
$0D"crouch_shoot_hive - like ref_shoot_hive but ducked down and shoots less fast"
$0D"ref_aim_bow - like aim_1"
$0D"ref_shoot_bow - almost as ref_aim_bow but with a small pushback with every shot"
$0D"crouch_aim_bow - like ref_aim_bow but ducked down"
$0D"crouch_shoot_bow - like ref_shoot_bow but ducked down"
$0D"deadback - a pose. Lying on back on floor. Dead"
$0D"deadsitting - a pose. Sitting down on floor, leaning with back to the wall, dead"
$0D"deadstomach - a pose. Lying on stomach on floor. Dead"
$0D"deadtable - a pose. Lying on stomach half on a table (right leg). Left leg and left arm hang down"
                items=
   "lookidle"
$0D"idle"
$0D"deep_idle"
$0D"run2"
$0D"walk2handed"
$0D"2handshoot"
$0D"crawl"
$0D"crouch_idle"
$0D"jump"
$0D"long_jump"
$0D"swim"
$0D"treadwater"
$0D"run"
$0D"walk"
$0D"aim_2"
$0D"shoot_2"
$0D"aim_1"
$0D"shoot_1"
$0D"die_simple"
$0D"die_backwards1"
$0D"die_backwards"
$0D"die_forwards"
$0D"headshot"
$0D"die_spin"
$0D"gutshot"
$0D"ref_aim_crowbar"
$0D"ref_shoot_crowbar"
$0D"crouch_aim_crowbar"
$0D"crouch_shoot_crowbar"
$0D"ref_aim_trip"
$0D"ref_shoot_trip"
$0D"crouch_aim_trip"
$0D"crouch_shoot_trip"
$0D"ref_aim_onehanded"
$0D"ref_shoot_onehanded"
$0D"crouch_aim_onehanded"
$0D"crouch_shoot_onehanded"
$0D"ref_aim_python"
$0D"ref_shoot_python"
$0D"crouch_aim_python"
$0D"crouch_shoot_python"
$0D"ref_aim_shotgun"
$0D"ref_shoot_shotgun"
$0D"crouch_aim_shotgun"
$0D"crouch_shoot_shotgun"
$0D"ref_aim_gauss"
$0D"ref_shoot_gauss"
$0D"crouch_aim_gauss"
$0D"crouch_shoot_gauss"
$0D"ref_aim_mp5"
$0D"ref_shoot_mp5"
$0D"crouch_aim_mp5"
$0D"crouch_shoot_mp5"
$0D"ref_aim_rpg"
$0D"ref_shoot_rpg"
$0D"crouch_aim_rpg"
$0D"crouch_shoot_rpg"
$0D"ref_aim_egon"
$0D"ref_shoot_egon"
$0D"crouch_aim_egon"
$0D"crouch_shoot_egon"
$0D"ref_aim_squeak"
$0D"ref_shoot_squeak"
$0D"crouch_aim_squeak"
$0D"crouch_shoot_squeak"
$0D"ref_aim_hive"
$0D"ref_shoot_hive"
$0D"crouch_aim_hive"
$0D"crouch_shoot_hive"
$0D"ref_aim_bow"
$0D"ref_shoot_bow"
$0D"crouch_aim_bow"
$0D"crouch_shoot_bow"
$0D"deadback"
$0D"deadsitting"
$0D"deadstomach"
$0D"deadtable"
        }
        qrk_sequences_protozoa:incl = { Typ="C" Txt="Protozoa.mdl"
                Hint=
   "orbit - rotates around a point in 3D space with constant X parameter."
                items=
   "orbit"
        }
        qrk_sequences_rip:incl = { Typ="C" Txt="Rip.mdl"
                Hint=
   "idle1 - slowly waves on the movement of water"
                items=
   "idle1"
        }
        qrk_sequences_roach:incl = { Typ="C" Txt="Roach.mdl"
                Hint=
   "run - it runs straight ahead"
                items=
   "run"
        }
        qrk_sequences_sat_globe:incl = { Typ="C" Txt="Sat_Globe.mdl"
                Hint=
   "orbit - rotates and lets the satellites spin"
                items=
   "orbit"
        }
        qrk_sequences_scientist:incl = { Typ="C" Txt="Scientist.mdl"
                Hint=
   "walk - just walks straight ahead."
$0D"walk_scared - like walk, but holds both arms in front of chest, shivering"
$0D"run - runs forward normally"
$0D"run1 - runs forward but holds both hands up in front of him, shaking his head like in 'No no no!!!'"
$0D"run2 - like run, but looks left"
$0D"180_Left - does a left turn move"
$0D"180_Right - does a right turn move"
$0D"flinch - takes hit, and steps back, ducks and holds hands on head"
$0D"flinch1 - just takes hit and moves head backwards. Stands straight up."
$0D"laflinch - left arm is hit and pulled back"
$0D"raflinch - same as laflinch but right arm"
$0D"llflinch - takes hit in left leg, bends legs a little and reaches with left hand for left knee"
$0D"rlflinch - as llflinch but right leg"
$0D"idle1 - just stands there, both arms straight down, breathing"
$0D"idle3 - stands up and looks up then in front of him"
$0D"idle4 - as idle3 but looks down"
$0D"idle5 - as idle3 but looks right"
$0D"idle6 - as idle3 but looks left"
$0D"idle7 - as idle1 but bends legs a little one at a time"
$0D"crouchstand - is ducked, hands on head and comes to stand"
$0D"crouch_idle - is bend over a little hands on both ears waiting for the death that comes"
$0D"crouch_idle2 - as crouch_idle but looks up then re-enters crouch_idle"
$0D"crouch_idle3 - as crouch_idle but moves elbowes shaky to express his fear"
$0D"panic - bends knees and looks right"
$0D"fear1 - holds both fists in front of his face, shakes rapidly and steps 1 step back"
$0D"fear2 - steps back, both arms in front of his fase to avoid attacker"
$0D"eye_wipe - as idle7 but rubbs his eyes with both hands"
$0D"pull_needle - pulls with left hand something out of his stomach"
$0D"return_needle - puts with left hand something in his stomach"
$0D"giveshot - pushes something into someone at chest height"
$0D"diesimple - falls on back/left. Dead"
$0D"dieforward - takes hit, swings arms from left to right, head down and falls forward. Dead"
$0D"dieforward1 - drops to the floor right/forward on right side"
$0D"diebackward - is pushed back by the hit and falls on back. Dead"
$0D"headshot - takes hit in head. Falls on back. Dead"
$0D"gutshot - takes hit in stomach. collapses and drops to floor forward. Dead"
$0D"lying_on_back - a pose. Lying on back. Dead"
$0D"lying_on_stomach - a pose. Lying on stomach. Dead"
$0D"dead_sitting - a pose. Sitting on floor, back against the wall. Dead"
$0D"dead_table1 - a pose. Sitting down on the floor, left leg resting on something, like a low table. Back against the wall"
$0D"dead_table2 - a pose. Lies with back on the floor, and left leg rests on a high table. Dead"
$0D"dead_table3 - a pose. Lies with stomach and right leg and right arm and head on table. Left leg and left arm hang down. Dead"
$0D"barnacled1 - reaches with both hands for his throat"
$0D"barnacled2 - hands on throat, hangs in the air, legs moving wild"
$0D"barnacled3 - is sucked up into the barnacle for half his body. Legs moving less wild"
$0D"barnacled4 - is sucked up into the barnacle almost. legs moving not that much"
$0D"console - is bend over to look at something, and touches it with right hand"
$0D"checktie - pulls down tie with right hand, and checks knod with left."
$0D"dryhands - switches on blower and holds hands below it to dry them."
$0D"tieshoe - places right foot on some bench and ties his right shoe"
$0D"whiteboard - looks up at something on the wall and writes on it"
$0D"studycart - bends over to press some buttons and comes back to stand and looks at his work"
$0D"lean - leans agains a table or something to get a close look"
$0D"pondering - places left hand at chin and right hand under his left elbow. "
$0D"pondering2 - looks up and looks from right to left, hands next to his body"
$0D"pondering3 - puts arms folded in front of his chest and looks straight ahead"
$0D"buysoda - grabs a dime out of his pocket, puts it into something, waits and then slams the machine with right fist"
$0D"pause - stands up totally frozen. Doesn't breath, doesn't move"
$0D"yes - nodds yes"
$0D"no - shakes head: no."
$0D"push_button - reaches forward and pushes button at waistheight with left hand"
$0D"converse1 - stands there and moves hands like he's talking to someone, telling how great he is"
$0D"converse2 - listens to someone, then nodds yes, then shrugs, "
$0D"retina - grabs both handles of the eyescanner and places his eyes in front of the scanner"
$0D"talkleft - stands straight up, looks forward, raises right hand and looks left"
$0D"talkright - as talkleft, but moves hands more and looks right"
$0D"deskidle - leans to the right on a desk with his right hand and looks at something and shakes head (the scientist when you enter black mesa, where barney is working on the computer)"
$0D"coffee - sits down with a cup of coffee in his hands in front of him"
$0D"francticbutton - stands and makes weird moves with right hand. Custom sequence, hardly usable"
$0D"startle - stands and suddely looks right, like he hears something"
$0D"sitlookleft - sits down and looks left"
$0D"sitlookright - as sitlookleft but looks right"
$0D"sitscared - sits down and folds arms in front of his chest"
$0D"sitting2 - sits down, looks at keyboard then at monitors in front of him and pulls back hands"
$0D"sitting3 - sits down and types on keyboard"
$0D"cprscientist - kneeled down and practises heartmassage on a lying creature"
$0D"cprscientistrevive - is kneeled down and after hearmassage he gave was succesfull, he stands up slowly and grabs hand of creature he just reincarnated and pulls that one to stand."
$0D"cowering_in_corner - sits down on floor slightly woonded and shakes head"
$0D"sstrugleidle - sits on floor and moves legs while hands are above his head. Seems like he is caught in a web or something"
$0D"sstrugle - is pushed back to the floor on his back, body shakes heavily then dies."
$0D"headcrabbed - is grabbed from behind by a headcrab, turns around, does some kung fu moves and is again caught by the headcrab and dies on right side on the floor."
$0D"c1a0_catwalkidle - stands there, arms slightly spread, and looks from left to right on monitors"
$0D"c1a0_catwalk - falls from ledge, but can grab something but slides down. Hardly usable unless your architecture meets the c1a0 levelpart this comes from"
$0D"ceiling_dangle - is pulled up over a ledge by the hands and dragged along"
$0D"ventpull1 - steps on ledge his hands are caught by a creature that's on a higher ledge and he is pulled onto that higher ledge"
$0D"ventpull2 - is dragged by feet"
$0D"ventpullidle1 - like ventpull1 but not pulled"
$0D"ventpullidle2 - lies on the floor and left arm hangs below over the ledge"
$0D"sitidle - sits on the floor, doing nothing"
$0D"sitstand - as sitidle, looks up and stands up. Follows sitidle"
$0D"keypad - stands, and presses some buttons with right hand, at weighst height"
$0D"panic1 - ducks and shivers"
$0D"1ookwindow - stands and looks through a window"
$0D"wave - waves with right arm"
$0D"pulldoor - pulls on locked door"
$0D"beatdoor - smashes with right fist on wall/door"
$0D"fallingloop - hangs in air horizontal, moving arms and legs while falling"
$0D"crawlwindow - hops and crawls through a window"
$0D"divewindow - dives through something, makes a salto and lands on back and stands up. A real stuntman"
$0D"locker_door - as pulldoor but has placed his left leg against the wall"
$0D"push_button2 - pushes a button with left hand at weighst height"
$0D"unlock_door - places arms above his head, and then unlocks a doorlock"
$0D"quicklook - stands and looks around /above"
$0D"handrailidle - leans on a rail/gate, doing nothing, looks forward"
$0D"handrail - as handrailidle but looks at his right and stands up. Follows handrailidle"
$0D"hanging_idle - hangs with both hands on a ledge moving his legs"
$0D"fall - as hanging_idle but slips away and falls into the deep shaft."
$0D"scientist_get_pulled - stands, is grabbed by the weighst and is pulled back into a shaft and dies"
$0D"hanging_idle2 - like hanging_idle"
$0D"fall_elevator - like fall, but falls faster"
$0D"scientist_idlewall - stands/sits on some ledge against the wall, looking to the left"
$0D"ickyjump_sci - walks slowly the is jammed into the air from something at his feet, flies through the sky and drops down into a shaft"
$0D"haulscientist - hangs over a shoulder of some creature. Dead"
$0D"c1a4_wounded_idle - sits on floor, is wounded on right hand looks at wound"
$0D"c1a4_dying_speech - as c1a4_wounded_idle but looks up and talks a little then grabs his chest and dies "
$0D"tentacle_grab - is pulled back by something, lands on floor on his stomach, tries to crawl away and is then pulled away again. Probably by a tentacle. Hardly usable because of heavy interaction with architecture."
$0D"helicack - looks up, puts hands in the air like he is pulling something then takes hit in stomach and dies"
$0D"windive - dives forward with a nice salto"
$0D"scicrashidle - weird sequence, like he's dancing :)"
$0D"scicrash - is pulled aside to the right"
$0D"onguard - stands there with shotgun in his hands looking left and right"
$0D"seeya - follows onguard. Sees something in front of him. Shoots it with gun and drops gun. Grabs it again and continues guarding"
$0D"rocketcrawl - sits on hands and knees and looks disorted left and right. (as in the game on top of the rocket)"
$0D"portal - types buttons on a panel on the left then moves to the right and types again several buttons"
$0D"gluonshow - presses button on the left, looks at it"
$0D"crouch - like crouch_idle3"
$0D"kneel - makes 1 step then kneels down next to something and looks at it"
                items=
   "walk"
$0D"walk_scared"
$0D"run"
$0D"run1"
$0D"run2"
$0D"180_Left"
$0D"180_Right"
$0D"flinch"
$0D"flinch1"
$0D"laflinch"
$0D"raflinch"
$0D"llflinch"
$0D"rlflinch"
$0D"idle1"
$0D"idle3"
$0D"idle4"
$0D"idle5"
$0D"idle6"
$0D"idle7"
$0D"crouchstand"
$0D"crouch_idle"
$0D"crouch_idle2"
$0D"crouch_idle3"
$0D"panic"
$0D"fear1"
$0D"fear2"
$0D"eye_wipe"
$0D"pull_needle"
$0D"return_needle"
$0D"giveshot"
$0D"diesimple"
$0D"dieforward"
$0D"dieforward1"
$0D"diebackward"
$0D"headshot"
$0D"gutshot"
$0D"lying_on_back"
$0D"lying_on_stomach"
$0D"dead_sitting"
$0D"dead_table1"
$0D"dead_table2"
$0D"dead_table3"
$0D"barnacled1"
$0D"barnacled2"
$0D"barnacled3"
$0D"barnacled4"
$0D"console"
$0D"checktie"
$0D"dryhands"
$0D"tieshoe"
$0D"whiteboard"
$0D"studycart"
$0D"lean"
$0D"pondering"
$0D"pondering2"
$0D"pondering3"
$0D"buysoda"
$0D"pause"
$0D"yes"
$0D"no"
$0D"push_button"
$0D"converse1"
$0D"converse2"
$0D"retina"
$0D"talkleft"
$0D"talkright"
$0D"deskidle"
$0D"coffee"
$0D"francticbutton"
$0D"startle"
$0D"sitlookleft"
$0D"sitlookright"
$0D"sitscared"
$0D"sitting2"
$0D"sitting3"
$0D"cprscientist"
$0D"cprscientistrevive"
$0D"cowering_in_corner"
$0D"sstrugleidle"
$0D"sstrugle"
$0D"headcrabbed"
$0D"c1a0_catwalkidle"
$0D"c1a0_catwalk"
$0D"ceiling_dangle"
$0D"ventpull1"
$0D"ventpull2"
$0D"ventpullidle1"
$0D"ventpullidle2"
$0D"sitidle"
$0D"sitstand"
$0D"keypad"
$0D"panic1"
$0D"1ookwindow"
$0D"wave"
$0D"pulldoor"
$0D"beatdoor"
$0D"fallingloop"
$0D"crawlwindow"
$0D"divewindow"
$0D"locker_door"
$0D"push_button2"
$0D"unlock_door"
$0D"quicklook"
$0D"handrailidle"
$0D"handrail"
$0D"hanging_idle"
$0D"fall"
$0D"scientist_get_pulled"
$0D"hanging_idle2"
$0D"fall_elevator"
$0D"scientist_idlewall"
$0D"ickyjump_sci"
$0D"haulscientist"
$0D"c1a4_wounded_idle"
$0D"c1a4_dying_speech"
$0D"tentacle_grab"
$0D"helicack"
$0D"windive"
$0D"scicrashidle"
$0D"scicrash"
$0D"onguard"
$0D"seeya"
$0D"rocketcrawl"
$0D"portal"
$0D"gluonshow"
$0D"crouch"
$0D"kneel"
        }
        qrk_sequences_scigun:incl = { Typ="C" Txt="Scigun.mdl"
                Hint=
   "idle - just points forward"
$0D"onguard - hangs down"
$0D"seeya - shoots"
                items=
   "idle"
$0D"onguard"
$0D"seeya"
        }
        qrk_sequences_sentry:incl = { Typ="C" Txt="Sentry.mdl"
                Hint=
   "idle_off - inactive gun."
$0D"fire - active gun, firing"
$0D"spin - same as fire"
$0D"deploy - switches open and points gun"
$0D"retire - as deploy but way slower"
$0D"die - falls over on a side on the floor."
                items=
   "idle_off"
$0D"fire"
$0D"spin"
$0D"deploy"
$0D"retire"
$0D"die"
        }
        qrk_sequences_skeleton:incl = { Typ="C" Txt="Skeleton.mdl"
                Hint=
   "s_onback - lying on back. Dead of course."
$0D"s_sitting - sits on floor, back against the wall"
                items=
   "s_onback"
$0D"s_sitting"
        }
        qrk_sequences_sphere:incl = { Typ="C" Txt="Sphere.mdl"
                Hint=
   "idle_off - it's closed, doing nothing"
$0D"fire - is opened and fires along"
$0D"deploy - opens up. followed by fire"
$0D"retire - like deploy"
                items=
   "idle_off"
$0D"fire"
$0D"deploy"
$0D"retire"
        }
        qrk_sequences_spiggot:incl = { Typ="C" Txt="Spiggot.mdl"
                Hint=
   "idle - just is there, doing nothing"
$0D"finalspiggot - dissapears"
$0D"spiggotidle - is moved to some place else shivering (?)"
                items=
   "idle"
$0D"finalspiggot"
$0D"spiggotidle"
        }
        qrk_sequences_spit:incl = { Typ="C" Txt="Spit.mdl"
                Hint=
   "idle - just swims by waving body"
                items=
   "idle"
        }
        qrk_sequences_stealth:incl = { Typ="C" Txt="Stealth.mdl"
                Hint=
   "idle1 - just flies, nothing moves"
                items=
   "idle1"
        }
        qrk_sequences_stukabat:incl = { Typ="C" Txt="Stukabat.mdl"
                Hint=
   "Land_ceiling - comes from flying position, spreads wings vertical and grabs ceiling with backclaw, and hangs on ceiling"
$0D"Land_ground - lands on the ground on his back claw and places wings on ground"
$0D"Attack_bomb - flies and moves wings more down like it's sending some energy down"
$0D"Attack_claw - it smashs a creature with his back claw"
$0D"Dive_cycler - just hangs in the air with his wings spread"
$0D"Death_fall_simpler - drops to the floor, wings spread, raises head and then it's dead."
$0D"Death_fall_violent - drops to the floor, wings spread, fights death with several moves but then dies"
$0D"fall_cycler - hangs in air and wings vertical, so it drops down"
$0D"Flinch_big - takes a hit and is pushed backwards"
$0D"Flinch_small - takes hit from the right in the 'head' but flies on"
$0D"Flying_cycler - like a flying bird, waving with his wings flying"
$0D"Flying_turn_left - makes left turn moves"
$0D"Flying_turn_right - makes right turn moves"
$0D"Hover - hangs still in the air, moving his wings fast and reaches down with his back claw"
$0D"Die_on_ground - is on floor sitting down, and dies, rolls on right side"
$0D"Flinch_on_ground - as die_on_ground but isn't dying, just taking a hit from the left. Is followed by Die_on_ground"
$0D"Eat_on_ground - as Flinch_on_ground but doesn't take hits but eats with 'head'/claw. "
$0D"Disply_fidget_on_ground - sits on floor, and is screaming loud"
$0D"Subtle_fidget_on_ground - just sits on floor and breaths"
$0D"Ground_walk - moves along on the floor in a funny way, placing his wings forward then dragging himself forward."
$0D"Subtle_fidget - just hangs on ceiling. Follows Land_ceiling"
$0D"Preen_fidget - as Subtle_fidget but opens right wing and it fiddles with the skin of it with his headclaw"
$0D"Swing_fidget - as Subtle_fidget but swings back and forth"
$0D"Take_off_from_land - takes off from land position to the sky. Followed by Flying_cycler"
                items=
   "Land_ceiling"
$0D"Land_ground"
$0D"Attack_bomb"
$0D"Attack_claw"
$0D"Dive_cycler"
$0D"Death_fall_simpler"
$0D"Death_fall_violent"
$0D"fall_cycler"
$0D"Flinch_big"
$0D"Flinch_small"
$0D"Flying_cycler"
$0D"Flying_turn_left"
$0D"Flying_turn_right"
$0D"Hover"
$0D"Die_on_ground"
$0D"Flinch_on_ground"
$0D"Eat_on_ground"
$0D"Disply_fidget_on_ground"
$0D"Subtle_fidget_on_ground"
$0D"Ground_walk"
$0D"Subtle_fidget"
$0D"Preen_fidget"
$0D"Swing_fidget"
$0D"Take_off_from_land"
        }
        qrk_sequences_teleporter_blue_sprites:incl = { Typ="C" Txt="Teleporter_Blue_Sprites.mdl"
                Hint=
   "orbit - rotates the purple flares"
                items=
   "orbit"
        }
        qrk_sequences_tentacle2:incl = { Typ="C" Txt="Tentacle2.mdl"
                Hint=
   "Pit_Idle - is into the pit, doesn't move"
$0D"rise_to_Temp1 - rises all up from the pit straight up"
$0D"Temp1_to_floor - slams nail down while retreats somewhat downwards"
$0D"Floor_idle - rests at position taken with Templ_to_floor. Breaths, but doesn't do a thing"
$0D"Floor_Fidget_Pissed - scrapes with nail over floor fron left to right"
$0D"Floor_Fidget_SmallRise - rises up from Floor_Idle position, and returns to that position"
$0D"Floor_Fidget_Wave - rises up from Floor_Idle position and pulls back then returns to Floor_Idle position"
$0D"Floor_Strike - pulls back and slams nail very hard on Floor_Idle position"
$0D"Floor_Tap - ticks with nail on Floor_Idle position"
$0D"Floor_Rotate - like Floor_Strike but jams harder"
$0D"Floor_Rear - is in the air and comes to horizontal position with nail, at height of Floor_Idle position, but doesn't touch Floor"
$0D"Floor_Rear_Idle - follows Floor_Rear, just hangs in air with nail, breathin"
$0D"Floor_To_Lev1 - jams nail onto Level1 that's just above Floor"
$0D"Lev1_Idle - like Floor_Rear_Idle"
$0D"Lev1_Fidget_Claw - just taps on Level1 with nail"
$0D"Lev1_Fidget_Shake - moves nail from left to right, slightly shaking head"
$0D"Lev1_Fidget_Snap - like Lev1_Fidget_Shake but suddenly breaks out to the left"
$0D"Lev1_Strike - hammers with nail hard on Level1"
$0D"Lev1_Tap - taps on Level1 with nail"
$0D"Lev1_Rotate - as Lev1_Strike"
$0D"Lev1_Rear - pulls back from Level1"
$0D"Lev1_Rear_Idle - follows Lev1_Rear, hangs in air with nail"
$0D"Lev1_To_Lev2 - raises 1 level up"
$0D"Lev2_Idle - hangs in air with nail on height of Level2"
$0D"Lev2_Fidget_Shake - puts nail up in the air and shakes body"
$0D"Lev2_Fidget_Swing - swings nail from right to left over Level2"
$0D"Lev2_Fidget_Tut - pulls back and forth with nail"
$0D"Lev2_Strike - hamers on level2 with nail, very hard"
$0D"Lev2_Tap - taps on Level2 with nail"
$0D"Lev2_Rotate - faster taps"
$0D"Lev2_Rear - pulls back from Level2"
$0D"Lev2_Rear_Idle - follows Lev2_Rear, hangs in air with nail"
$0D"Lev2_To_Lev3 - moves 1 level up"
$0D"Lev3_Idle - hangs in air with nail on level3"
$0D"Lev3_Fidget_Shake - shakes nail in air"
$0D"Lev3_Fidget_Side - looks left and looks right"
$0D"Lev3_Fidget_Swipe - hangs in air then does a one time jam with nail on level3"
$0D"Lev3_Strike - jams with nail on level3, not that hard as other levels"
$0D"Lev3_Tap - taps on level3"
$0D"Lev3_Rotate - as Lev3_Strike"
$0D"Lev3_Rear - pulls back from Level3, fast"
$0D"Lev3_Rear_Idle - follows Lev3_Rear, hangs in air with nail"
$0D"Lev1_Door_reach - down on level1, it reaches into a doorway"
$0D"Lev3_To_Engine - reaches higher to enginelevel, which is above level3"
$0D"Engine_Idle - hangs in air at enginelevel"
$0D"Engine_Sway - moves fast from left to right "
$0D"Engine_Swat - hammers with nail on enginelevel, and bumping with head on level3"
$0D"Engine_Bob - nodds yes with nail"
$0D"Engine_death1 - is on enginelevel, shivers then pulls back into pit. Dead"
$0D"Engine_death2 - as Engine_death1 but shivers way slower"
$0D"Engine_death3 - as Engine_death1, different shivering"
$0D"tentacle_grab_idle - frozen tentacle with nail on level1"
$0D"tentacle_grab - reaches for something into hallway, then grabs it and drags it into pit"
                items=
   "Pit_Idle"
$0D"rise_to_Temp1"
$0D"Temp1_to_floor"
$0D"Floor_idle"
$0D"Floor_Fidget_Pissed"
$0D"Floor_Fidget_SmallRise"
$0D"Floor_Fidget_Wave"
$0D"Floor_Strike"
$0D"Floor_Tap"
$0D"Floor_Rotate"
$0D"Floor_Rear"
$0D"Floor_Rear_Idle"
$0D"Floor_To_Lev1"
$0D"Lev1_Idle"
$0D"Lev1_Fidget_Claw"
$0D"Lev1_Fidget_Shake"
$0D"Lev1_Fidget_Snap"
$0D"Lev1_Strike"
$0D"Lev1_Tap"
$0D"Lev1_Rotate"
$0D"Lev1_Rear"
$0D"Lev1_Rear_Idle"
$0D"Lev1_To_Lev2"
$0D"Lev2_Idle"
$0D"Lev2_Fidget_Shake"
$0D"Lev2_Fidget_Swing"
$0D"Lev2_Fidget_Tut"
$0D"Lev2_Strike"
$0D"Lev2_Tap"
$0D"Lev2_Rotate"
$0D"Lev2_Rear"
$0D"Lev2_Rear_Idle"
$0D"Lev2_To_Lev3"
$0D"Lev3_Idle"
$0D"Lev3_Fidget_Shake"
$0D"Lev3_Fidget_Side"
$0D"Lev3_Fidget_Swipe"
$0D"Lev3_Strike"
$0D"Lev3_Tap"
$0D"Lev3_Rotate"
$0D"Lev3_Rear"
$0D"Lev3_Rear_Idle"
$0D"Lev1_Door_reach"
$0D"Lev3_To_Engine"
$0D"Engine_Idle"
$0D"Engine_Sway"
$0D"Engine_Swat"
$0D"Engine_Bob"
$0D"Engine_death1"
$0D"Engine_death2"
$0D"Engine_death3"
$0D"tentacle_grab_idle"
$0D"tentacle_grab"
        }
        qrk_sequences_tree:incl = { Typ="C" Txt="Tree.mdl"
                Hint=
   "idle1 - just swings it's nail from left to right in the wind. "
$0D"attack - picking with the nail forward from above."
                items=
   "idle1"
$0D"attack"
        }
        qrk_sequences_turret:incl = { Typ="C" Txt="Turret.mdl"
                Hint=
   "idle_off - totally switched off and sits back in it's hole"
$0D"fire - deployed turret firing allong with the big chaingun"
$0D"spin - should be spinning around but looks like firesequence"
$0D"deploy - the ejaction of the turret out of the hole and opening of the gun"
$0D"retire - like deploy but way slower"
$0D"die - goes bezerk, shooting on all sides. Keeps moving, so retire should follow this sequence"
                items=
   "idle_off"
$0D"fire"
$0D"spin"
$0D"deploy"
$0D"retire"
$0D"die"
        }
        qrk_sequences_uplant1:incl = { Typ="C" Txt="Uplant1.mdl"
                Hint=
   "idle1 - waves with the leaves in the wind/water"
                items=
   "idle1"
        }
        qrk_sequences_uplant2:incl = { Typ="C" Txt="Uplant2.mdl"
                Hint=
   "sway1 - gently waves in the wind/water"
$0D"sway2 - as sway 1 but moves differently"
$0D"sway3 - just hangs to the right like there is wind/water coming from the left"
                items=
   "sway1"
$0D"sway2"
$0D"sway3"
        }
        qrk_sequences_uplant3:incl = { Typ="C" Txt="Uplant3.mdl"
                Hint=
   "idle1 - swings back and forth"
                items=
   "idle1"
        }
        qrk_sequences_w_sqknest:incl = { Typ="C" Txt="W_Sqknest.mdl"
                Hint=
   "Walk - walks gently forward"
$0D"idle - stays at same position, bending legs from time to time"
                items=
   "Walk"
$0D"idle"
        }
        qrk_sequences_w_squeak:incl = { Typ="C" Txt="W_Squeak.mdl"
                Hint=
   "idle - totally not moving at all"
$0D"fidget - tries to impress his victim by lowering his body and back up in an increasing frequency"
$0D"jump - jumps up vertically, body stays horizontal"
$0D"run - runs fast forward."
                items=
   "idle"
$0D"fidget"
$0D"jump"
$0D"run"
        }
        qrk_sequences_zombie:incl = { Typ="C" Txt="Zombie"
                Hint=
   "Busting_through_wall - Busts through wall and lands flat on face"
$0D"Bust_window - Launches through window"
$0D"Getup - Gets up from flat on his face"
$0D"Falling - Falling loop animation"
$0D"Freak - Sits in chair spazzing out"
$0D"Freakdie - Dies in chair"
$0D"Haulzombie - Hauls dead bodies down a corridor"
$0D"Kick_punch_wall"
$0D"Slideidle - Has just been shot and is about to slump against wall"
$0D"Slidewall - Hits wall and slides down after being shot"
$0D"Soda - Messes with the soda machine then hits it"
$0D"Stand_up - Gets up after bursting through window"
$0D"Vent_c1a3a - Pulls guard through a vent, then swings him into a switch"
$0D"Zombie_pull_scientist - Pulls scientist through wall"
                Items=
   "walk"
$0D"pause"
$0D"idle1"
$0D"getup"
$0D"freak"
$0D"soda"
$0D"getup"
$0D"freak"
$0D"soda"
$0D"stand_up"
$0D"dieheadshot"
$0D"dieheadshot2"
$0D"deadwall"
$0D"vent_c1a3"
$0D"diebackward"
$0D"freakdie"
$0D"deadidle"
$0D"eatbody"
$0D"eatbodytable"
$0D"eatbodystand"
$0D"zombie_eating"
$0D"zombie_pull_scientist"
$0D"turnleft"
$0D"flinch"
$0D"flinchsmall"
$0D"slideidle"
$0D"turnright"
$0D"bigflinch"
$0D"attack1"
$0D"attack2"
$0D"ventclimb"
$0D"ventclimbidle"
$0D"diesimple"
$0D"laflinch"
$0D"raflinch"
$0D"llflinch"
$0D"rlflinch"
$0D"falling"
$0D"busting_through_wall"
$0D"eat_to_stand"
$0D"haulzombie"
$0D"ripdoor"
$0D"kick_punch_wall"
$0D"dieforward"
$0D"c2a3_snack_getup"
$0D"slidewall"
$0D"bust_window"
$0D"vent_zidle"
        }

        qrk_sequences_idle:form = {
                m_iszIdle: = { qrk_sequences_aflock = ! }
                m_iszIdle: = { qrk_sequences_agrunt = ! }
                m_iszIdle: = { qrk_sequences_archer = ! }
                m_iszIdle: = { qrk_sequences_baby_headcrab = ! }
                m_iszIdle: = { qrk_sequences_barnacle = ! }
                m_iszIdle: = { qrk_sequences_barney = ! }
                m_iszIdle: = { qrk_sequences_big_mom = ! }
                m_iszIdle: = { qrk_sequences_bigrat = ! }
                m_iszIdle: = { qrk_sequences_bullsquid = ! }
                m_iszIdle: = { qrk_sequences_chumtoad = ! }
                m_iszIdle: = { qrk_sequences_construction = ! }
                m_iszIdle: = { qrk_sequences_controller = ! }
                m_iszIdle: = { qrk_sequences_crystal = ! }
                m_iszIdle: = { qrk_sequences_dead_osprey = ! }
                m_iszIdle: = { qrk_sequences_filecabinet = ! }
                m_iszIdle: = { qrk_sequences_floater = ! }
                m_iszIdle: = { qrk_sequences_forklift = ! }
                m_iszIdle: = { qrk_sequences_friendly = ! }
                m_iszIdle: = { qrk_sequences_fungus = ! }
                m_iszIdle: = { qrk_sequences_garg = ! }
                m_iszIdle: = { qrk_sequences_gasbag = ! }
                m_iszIdle: = { qrk_sequences_gman = ! }
                m_iszIdle: = { qrk_sequences_hair = ! }
                m_iszIdle: = { qrk_sequences_hassassin = ! }
                m_iszIdle: = { qrk_sequences_headcrab = ! }
                m_iszIdle: = { qrk_sequences_hgrunt = ! }
                m_iszIdle: = { qrk_sequences_holo = ! }
                m_iszIdle: = { qrk_sequences_hornet = ! }
                m_iszIdle: = { qrk_sequences_houndeye = ! }
                m_iszIdle: = { qrk_sequences_icky = ! }
                m_iszIdle: = { qrk_sequences_in_teleport = ! }
                m_iszIdle: = { qrk_sequences_islave = ! }
                m_iszIdle: = { qrk_sequences_kingpin = ! }
                m_iszIdle: = { qrk_sequences_leech = ! }
                m_iszIdle: = { qrk_sequences_light = ! }
                m_iszIdle: = { qrk_sequences_loader = ! }
                m_iszIdle: = { qrk_sequences_miniturret = ! }
                m_iszIdle: = { qrk_sequences_nihilanth = ! }
                m_iszIdle: = { qrk_sequences_osprey = ! }
                m_iszIdle: = { qrk_sequences_out_teleport = ! }
                m_iszIdle: = { qrk_sequences_pipe_bubbles = ! }
                m_iszIdle: = { qrk_sequences_player = ! }
                m_iszIdle: = { qrk_sequences_protozoa = ! }
                m_iszIdle: = { qrk_sequences_rip = ! }
                m_iszIdle: = { qrk_sequences_roach = ! }
                m_iszIdle: = { qrk_sequences_sat_globe = ! }
                m_iszIdle: = { qrk_sequences_scientist = ! }
                m_iszIdle: = { qrk_sequences_scigun = ! }
                m_iszIdle: = { qrk_sequences_sentry = ! }
                m_iszIdle: = { qrk_sequences_skeleton = ! }
                m_iszIdle: = { qrk_sequences_sphere = ! }
                m_iszIdle: = { qrk_sequences_spiggot = ! }
                m_iszIdle: = { qrk_sequences_spit = ! }
                m_iszIdle: = { qrk_sequences_stealth = ! }
                m_iszIdle: = { qrk_sequences_stukabat = ! }
                m_iszIdle: = { qrk_sequences_teleporter_blue_sprites = ! }
                m_iszIdle: = { qrk_sequences_tentacle2 = ! }
                m_iszIdle: = { qrk_sequences_tree = ! }
                m_iszIdle: = { qrk_sequences_turret = ! }
                m_iszIdle: = { qrk_sequences_uplant1 = ! }
                m_iszIdle: = { qrk_sequences_uplant2 = ! }
                m_iszIdle: = { qrk_sequences_uplant3 = ! }
                m_iszIdle: = { qrk_sequences_w_sqknest = ! }
                m_iszIdle: = { qrk_sequences_w_squeak = ! }
                m_iszIdle: = { qrk_sequences_zombie = ! }
        }
        qrk_sequences_play:form = {
                m_iszPlay: = { qrk_sequences_aflock = ! }
                m_iszPlay: = { qrk_sequences_agrunt = ! }
                m_iszPlay: = { qrk_sequences_archer = ! }
                m_iszPlay: = { qrk_sequences_baby_headcrab = ! }
                m_iszPlay: = { qrk_sequences_barnacle = ! }
                m_iszPlay: = { qrk_sequences_barney = ! }
                m_iszPlay: = { qrk_sequences_big_mom = ! }
                m_iszPlay: = { qrk_sequences_bigrat = ! }
                m_iszPlay: = { qrk_sequences_bullsquid = ! }
                m_iszPlay: = { qrk_sequences_chumtoad = ! }
                m_iszPlay: = { qrk_sequences_construction = ! }
                m_iszPlay: = { qrk_sequences_controller = ! }
                m_iszPlay: = { qrk_sequences_crystal = ! }
                m_iszPlay: = { qrk_sequences_dead_osprey = ! }
                m_iszPlay: = { qrk_sequences_filecabinet = ! }
                m_iszPlay: = { qrk_sequences_floater = ! }
                m_iszPlay: = { qrk_sequences_forklift = ! }
                m_iszPlay: = { qrk_sequences_friendly = ! }
                m_iszPlay: = { qrk_sequences_fungus = ! }
                m_iszPlay: = { qrk_sequences_garg = ! }
                m_iszPlay: = { qrk_sequences_gasbag = ! }
                m_iszPlay: = { qrk_sequences_gman = ! }
                m_iszPlay: = { qrk_sequences_hair = ! }
                m_iszPlay: = { qrk_sequences_hassassin = ! }
                m_iszPlay: = { qrk_sequences_headcrab = ! }
                m_iszPlay: = { qrk_sequences_hgrunt = ! }
                m_iszPlay: = { qrk_sequences_holo = ! }
                m_iszPlay: = { qrk_sequences_hornet = ! }
                m_iszPlay: = { qrk_sequences_houndeye = ! }
                m_iszPlay: = { qrk_sequences_icky = ! }
                m_iszPlay: = { qrk_sequences_in_teleport = ! }
                m_iszPlay: = { qrk_sequences_islave = ! }
                m_iszPlay: = { qrk_sequences_kingpin = ! }
                m_iszPlay: = { qrk_sequences_leech = ! }
                m_iszPlay: = { qrk_sequences_light = ! }
                m_iszPlay: = { qrk_sequences_loader = ! }
                m_iszPlay: = { qrk_sequences_miniturret = ! }
                m_iszPlay: = { qrk_sequences_nihilanth = ! }
                m_iszPlay: = { qrk_sequences_osprey = ! }
                m_iszPlay: = { qrk_sequences_out_teleport = ! }
                m_iszPlay: = { qrk_sequences_pipe_bubbles = ! }
                m_iszPlay: = { qrk_sequences_player = ! }
                m_iszPlay: = { qrk_sequences_protozoa = ! }
                m_iszPlay: = { qrk_sequences_rip = ! }
                m_iszPlay: = { qrk_sequences_roach = ! }
                m_iszPlay: = { qrk_sequences_sat_globe = ! }
                m_iszPlay: = { qrk_sequences_scientist = ! }
                m_iszPlay: = { qrk_sequences_scigun = ! }
                m_iszPlay: = { qrk_sequences_sentry = ! }
                m_iszPlay: = { qrk_sequences_skeleton = ! }
                m_iszPlay: = { qrk_sequences_sphere = ! }
                m_iszPlay: = { qrk_sequences_spiggot = ! }
                m_iszPlay: = { qrk_sequences_spit = ! }
                m_iszPlay: = { qrk_sequences_stealth = ! }
                m_iszPlay: = { qrk_sequences_stukabat = ! }
                m_iszPlay: = { qrk_sequences_teleporter_blue_sprites = ! }
                m_iszPlay: = { qrk_sequences_tentacle2 = ! }
                m_iszPlay: = { qrk_sequences_tree = ! }
                m_iszPlay: = { qrk_sequences_turret = ! }
                m_iszPlay: = { qrk_sequences_uplant1 = ! }
                m_iszPlay: = { qrk_sequences_uplant2 = ! }
                m_iszPlay: = { qrk_sequences_uplant3 = ! }
                m_iszPlay: = { qrk_sequences_w_sqknest = ! }
                m_iszPlay: = { qrk_sequences_w_squeak = ! }
                m_iszPlay: = { qrk_sequences_zombie = ! }
        }

        qrk_speaker_message:form = {
                message: = { Typ="C" Txt="Groups" Hint="Plays a random sentence/sound from selected group"
                        Items =
   "C1A0_"
$0D"C1A1_"
$0D"C1A2_"
$0D"C1A3_"
$0D"C1A4_"
$0D"C2A1_"
$0D"C2A2_"
$0D"C2A4_"
$0D"C3A1_"
$0D"C3A2_"
$0D"CTR"
$0D"T"
$0D"NA"
$0D"EA"
$0D"ND"
$0D"ED"
$0D"NF"
$0D"NG"
$0D"NH"
$0D"EH"
$0D"WE"
$0D"DR"
$0D"DC"
$0D"DB"
$0D"WILD"
$0D"ROCKET"
$0D"FAR_WAR"
$0D"NEAR_WAR"
                }
        }
        qrk_ambient_generic_message:form = {
                message: = { Typ="C" Txt="InterCom"
                                Items =
   "!C1A0_START"
$0D"!C1A0_0"
$0D"!C1A0_1"
$0D"!C1A0_2"
$0D"!C1A0_3"
$0D"!C1A0_4"
$0D"!C1A0_5"
$0D"!C1A0_6"
$0D"!C1A0_7"
$0D"!C1A0_8"
$0D"!C1A0_9"
$0D"!C1A0_10"
$0D"!C1A0_11"
$0D"!C1A0_12"
$0D"!C1A0_13"
$0D"!C1A0_14"
$0D"!C1A0_15"
$0D"!C1A0_16"
$0D"!C1A0_17"
$0D"!C1A0_18"
$0D"!C1A0_19"
$0D"!C1A0_20"
$0D"!C1A0_21"
$0D"!C1A0_22"
$0D"!C1A1_0"
$0D"!C1A1_1"
$0D"!C1A1_2"
$0D"!C1A1_3"
$0D"!C1A1_4"
$0D"!C1A1_5"
$0D"!C1A1_6"
$0D"!C1A1_7"
$0D"!C1A1_8"
$0D"!C1A1_9"
$0D"!C1A1_10"
$0D"!C1A1_11"
$0D"!C1A2_0"
$0D"!C1A2_1"
$0D"!C1A2_2"
$0D"!C1A2_3"
$0D"!C1A2_4"
$0D"!C1A2_5"
$0D"!C1A2_6"
$0D"!C1A2_7"
$0D"!C1A2_8"
$0D"!C1A2_9"
$0D"!C1A2_10"
$0D"!C1A2_11"
$0D"!C1A3_0"
$0D"!C1A3_1"
$0D"!C1A3_2"
$0D"!C1A3_3"
$0D"!C1A3_4"
$0D"!C1A3_5"
$0D"!C1A3_6"
$0D"!C1A3_7"
$0D"!C1A3_8"
$0D"!C1A3_9"
$0D"!C1A3_10"
$0D"!C1A3_warn"
$0D"!C1A3_lock"
$0D"!C1A4_0"
$0D"!C1A4_1"
$0D"!C1A4_2"
$0D"!C1A4_3"
$0D"!C1A4_4"
$0D"!C1A4_5"
$0D"!C1A4_6"
$0D"!C1A4_7"
$0D"!C1A4_8"
$0D"!FUEL_OFF"
$0D"!C2A1_0"
$0D"!C2A1_1"
$0D"!C2A1_2"
$0D"!C2A1_3"
$0D"!C2A1_4"
$0D"!C2A1_5"
$0D"!C2A1_6"
$0D"!C2A1_7"
$0D"!C2A1_8"
$0D"!POWER_OFF"
$0D"!POWER_ON"
$0D"!C2A2_0"
$0D"!C2A2_1"
$0D"!C2A2_2"
$0D"!C2A2_3"
$0D"!C2A2_3"
$0D"!C2A2_4"
$0D"!C2A2_5"
$0D"!C2A2_6"
$0D"!C2A2_7"
$0D"!C2A2_launch"
$0D"!C2A4_0"
$0D"!C2A4_1"
$0D"!C2A4_2"
$0D"!C2A4_3"
$0D"!C2A4_4"
$0D"!C2A4_5"
$0D"!C2A4_6"
$0D"!C2A4_7"
$0D"!C2A4_8"
$0D"!C2A4_9"
$0D"!C2A4_10"
$0D"!C2A4_11"
$0D"!C2A4_12"
$0D"!C2A4_ster"
$0D"!C3A1_0"
$0D"!C3A1_1"
$0D"!C3A1_2"
$0D"!C3A1_3"
$0D"!C3A1_4"
$0D"!C3A1_5"
$0D"!C3A1_6"
$0D"!C3A1_7"
$0D"!C3A1_8"
$0D"!C3A1_9"
$0D"!C3A2_0"
$0D"!C3A2_1"
$0D"!C3A2_2"
$0D"!C3A2_3"
$0D"!C3A2_4"
$0D"!C3A2_5"
$0D"!C3A2_6"
$0D"!C3A2_7"
$0D"!C3A2_target"
$0D"!C3A2_portal"
$0D"!C3A2_core"
                }
                message: = { Typ="C" Txt="CountDown"
                        Items =
   "!CTR0"
$0D"!CTR1"
$0D"!CTR2"
$0D"!CTR3"
$0D"!CTR4"
$0D"!CTR5"
$0D"!CTR6"
$0D"!CTR7"
$0D"!CTR8"
$0D"!CTR9"
$0D"!CTR10"
$0D"!CTR11"
$0D"!CTR12"
$0D"!CTR13"
$0D"!CTR14"
$0D"!CTR15"
$0D"!CTR16"
$0D"!CTR17"
$0D"!CTR18"
$0D"!CTR19"
$0D"!CTR20"
                }
                message: = { Typ="C" Txt="Turrets"
                        Items =
   "!T0"
$0D"!T1"
$0D"!T2"
$0D"!T3"
$0D"!T4"
$0D"!T5"
                }
                message: = { Typ="C" Txt="Doors"
                        Items =
   "!NA0"
$0D"!NA1"
$0D"!NA2"
$0D"!NA3"
$0D"!NA4"
$0D"!NA5"
$0D"!NA6"
$0D"!NA7"
$0D"!NA8"
$0D"!NA9"
$0D"!NA10"
$0D"!NA11"
$0D"!NA12"
$0D"!NA13"
$0D"!NA14"
$0D"!NA15"
$0D"!NA16"
$0D"!NA17"
$0D"!NA18"
$0D"!EA0"
$0D"!EA1"
$0D"!EA2"
$0D"!EA3"
$0D"!EA4"
$0D"!EA5"
$0D"!EA6"
$0D"!EA7"
$0D"!EA8"
$0D"!ND0"
$0D"!ND1"
$0D"!ND2"
$0D"!ND3"
$0D"!ND4"
$0D"!ND5"
$0D"!ND6"
$0D"!ND7"
$0D"!ED0"
$0D"!ED1"
$0D"!ED2"
$0D"!ED3"
$0D"!ED4"
$0D"!ED5"
$0D"!ED6"
$0D"!NF0"
$0D"!NF1"
$0D"!NF3"
$0D"!EF0"
$0D"!EF1"
$0D"!EF3"
$0D"!NFIRE0"
$0D"!EFIRE0"
$0D"!NCHEM0"
$0D"!ECHEM0"
$0D"!NRAD0"
$0D"!ERAD0"
$0D"!NCON0"
$0D"!ECON0"
$0D"!NG0"
$0D"!NG1"
$0D"!NG2"
$0D"!NH0"
$0D"!NH1"
$0D"!EH0"
$0D"!EH1"
                }
                message: = { Typ="C" Txt="Warnings"
                        Items =
   "!WE0"
$0D"!WE1"
$0D"!WE2"
$0D"!WE3"
                }
                message: = { Typ="C" Txt="Danger"
                        Items =
   "!DR0"
$0D"!DR1"
$0D"!DR2"
$0D"!DR3"
$0D"!DR4"
$0D"!DC0"
$0D"!DC1"
$0D"!DC2"
$0D"!DC3"
$0D"!DC4"
$0D"!DB0"
$0D"!DB1"
$0D"!DB2"
$0D"!DB3"
                }
                message: = { Typ="C" Txt="Training Room"
                        Items =
   "!TR_A"
$0D"!TR_B"
                }
                message: = { Typ="C" Txt="Outdoor"
                        Items =
   "!WILD0"
$0D"!WILD1"
$0D"!WILD2"
$0D"!WILD3"
$0D"!WILD4"
$0D"!WILD5"
$0D"!WILD6"
$0D"!WILD7"
$0D"!WILD8"
$0D"!WILD9"
$0D"!WILD10"
$0D"!WILD11"
$0D"!WILD12"
                }
                message: = { Typ="C" Txt="Rocket"
                        Items =
   "!ROCKET0"
$0D"!ROCKET1"
$0D"!ROCKET2"
$0D"!ROCKET3"
$0D"!ROCKET4"
$0D"!ROCKET5"
$0D"!ROCKET6"
                }
                message: = { Typ="C" Txt="War Zone"
                        Items =
   "!FAR_WAR0"
$0D"!FAR_WAR1"
$0D"!FAR_WAR2"
$0D"!FAR_WAR3"
$0D"!FAR_WAR4"
$0D"!FAR_WAR5"
$0D"!FAR_WAR6"
$0D"!FAR_WAR7"
$0D"!FAR_WAR8"
$0D"!FAR_WAR9"
$0D"!FAR_WAR10"
$0D"!FAR_WAR11"
$0D"!FAR_WAR12"
$0D"!FAR_WAR13"
$0D"!FAR_WAR14"
$0D"!FAR_WAR15"
$0D"!FAR_WAR16"
$0D"!NEAR_WAR0"
$0D"!NEAR_WAR1"
$0D"!NEAR_WAR2"
$0D"!NEAR_WAR3"
$0D"!NEAR_WAR4"
$0D"!NEAR_WAR5"
$0D"!NEAR_WAR6"
$0D"!NEAR_WAR7"
$0D"!NEAR_WAR8"
$0D"!NEAR_WAR9"
$0D"!NEAR_WAR10"
$0D"!NEAR_WAR11"
$0D"!NEAR_WAR12"
                }
        }

//
// Half-Life entity forms
//
        worldspawn:form = {
                message: = { Txt="&"  Hint="Map Description / Title" }
                skyname: = { Typ="C" Txt="&"  Hint="environment map (cl_skyname)"
                        Items =  "2desert"$0D"alien1"$0D"alien2"$0D"alien3"$0D"black"$0D"city"$0D"cliff"$0D"desert"$0D"dusk"$0D"morning"$0D"neb1"$0D"neb2"$0D"neb6"$0D"neb7"$0D"night"$0D"space"$0D"xen8"$0D"xen9"$0D"xen10"
                }
                sounds: = { Txt="&" Hint="CD track to play" }
                light: = { Txt="&"  Hint="Default light level" }
                WaveHeight: = { Txt="&"  Hint="Default Wave Height" }
                MaxRange: = { Txt="&" Hint="Max viewable distance" }
                chaptertitle: = { Txt="&"  Hint="Chapter Title Message" }
                startdark: = { Typ="C" Txt="&" Hint="Level Fade In"
                        Items="No"
                           $0D"Yes"
                        Values="0"$0D"1"
                }
                gametitle: = { Typ="C" Txt="&" Hint="Display game title"
                        Items="No"
                           $0D"Yes"
                        Values="0"$0D"1"
                }
                newunit: = { Typ="C" Txt="&" Hint="New Level Unit"
                        Items = "No, keep current"
                             $0D"Yes, clear previous levels"
                        Values = "0"$0D"1"
                }
                mapteams: = { Txt="&" Hint="Map Team List (like 'hgrunt;scientist')" }
                defaultteam: = { Typ = "C" Txt="&"
                        items = "Fewest Players"
                             $0D"First Team"
                        values ="0"$0D"1"
                }
                mapversion: = { Hint="Set this to a value of '220',"$0D"if you want QuArK to write in WorldCraft 3.3 .MAP format" }
//              wad: = { Txt="&" }
                t_wie_settings = !
                t_op4_worldspawn_settings = !
                t_dmc_worldspawn_settings = !
        }
        ambient_generic:form = {
                Help =  "To play a wav through the streaming code (for very large, one-shot wavs)"
                     $0D"use * in front of the name. For instance, ambienc/*speak2.wav would stream"
                     $0D"speak2.wav. Streaming sounds are loaded in segments from the disk, played,"
                     $0D"and flushed from memory."$0D
                     $0D"To play any sentence from SENTENCES.TXT, replace the path/filename.wav"
                     $0D"with ! followed by the sentence name. For instance, !NA1 plays the sentence"
                     $0D"named NA1."$0D
                     $0D"All the specifics from VOLSTART to CSPINUP are various pitch, volume,"
                     $0D"and low frequency pitch oscillation settings that are overridden by the"
                     $0D"dynamic preset setting. In general, don't use these. The incremental"
                     $0D"spin-up count may be used as follows: Each time the ambient is triggered,"
                     $0D"its pitch will rise from 'start pitch' to 'pitch' by this many increments."
                     $0D"So, a setting of '3' means that the pitch of the ambient will rise from"
                     $0D"'start pitch' to 'pitch' in three presses (ie: three triggers)."
                t_targetname = !
                message: = {
                    t_soundbrowser = !
                    Hint="Path/filename.wav of WAV, or sentence name with prefixed !" 
                }
                message: = {
                        Typ = "B"
                        Txt = "(Lists)"
                        Cap = "Sentences"
                        form = "qrk_ambient_generic_message:form"
                        Hint = "Lists of sentences from SENTENCES.TXT, with prefixed !"
                }
                health: = { txt="&" Hint="Volume (10 = loudest, default 0)" }
                preset: = { Typ="C" Txt="&" Hint="Dynamic Presets"
                         Items ="(none)"
                             $0D"Huge Machine"
                             $0D"Big Machine"
                             $0D"Machine"
                             $0D"Slow Fade in"
                             $0D"Fade in"
                             $0D"Quick Fade in"
                             $0D"Slow Pulse"
                             $0D"Pulse"
                             $0D"Quick pulse"
                             $0D"Slow Oscillator"
                             $0D"Oscillator"
                             $0D"Quick Oscillator"
                             $0D"Grunge pitch"
                             $0D"Very low pitch"
                             $0D"Low pitch"
                             $0D"High pitch"
                             $0D"Very high pitch"
                             $0D"Screaming pitch"
                             $0D"Oscillate spinup/down"
                             $0D"Pulse spinup/down"
                             $0D"Random pitch"
                             $0D"Random pitch fast"
                             $0D"Incremental Spinup"
                             $0D"Alien"
                             $0D"Bizzare"
                             $0D"Planet X"
                             $0D"Haunted"
                        Values =""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D"20"$0D"21"$0D"22"$0D"23"$0D"24"$0D"25"$0D"26"$0D"27"
                }
                volstart: = { Txt="&" Hint="Start Volume" }
                fadein: = { Txt="&" Hint="Fade in time (0-100)" }
                fadeout: = { Txt="&" Hint="Fade out time (0-100)" }
                pitch: = { Txt="&" Hint="Pitch (> 100 = higher)" }
                pitchstart: = { Txt="&" Hint="Start Pitch" }
                spinup: = { Txt="&" Hint="Spin up time (0-100)" }
                spindown: = { Txt="&" Hint="Spin down time (0-100)" }
                lfotype: = { Txt="&" Hint="LFO type 0)off 1)sqr 2)tri 3)rnd" }
                lforate: = { Txt="&" Hint="LFO rate (0-1000)" }
                lfomodpitch: = { Txt="&" Hint="LFO mod pitch (0-100)" }
                lfomodvol: = { Txt="&" Hint="LFO mod vol (0-100)" }
                cspinup: = { Txt="&" Hint="Incremental spinup count" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Play Everywhere" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Small Radius" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Medium Radius" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Large Radius" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Start Silent" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Not Toggled" }
        }

        ammo_357:form = { t_ammo = ! }
        ammo_9mmAR:form = { t_ammo = ! }
        ammo_9mmbox:form = { t_ammo = ! }
        ammo_9mmclip:form = { t_ammo = ! }
        ammo_ARgrenades:form = { t_ammo = ! }
        ammo_buckshot:form = { t_ammo = ! }
        ammo_crossbow:form = { t_ammo = ! }
        ammo_gaussclip:form = { t_ammo = ! }
        ammo_rpgclip:form = { t_ammo = ! }
        ammo_glockclip:form = { t_ammo = ! }
        ammo_mp5clip:form = { t_ammo = ! }
        ammo_mp5grenades:form = { t_ammo = ! }

        weapon_357:form = { t_weapon = ! }
        weapon_9mmAR:form = { t_weapon = ! }
        weapon_9mmhandgun:form = { t_weapon = ! }
        weapon_crossbow:form = {
                t_weapon = !
                sequence: = { Typ="C" txt="&"
                        Items = "Lay flat"
                             $0D"Lay aslant"
                        Values = "0"$0D"1"
                }
        }
        weapon_crowbar:form = { t_weapon = ! }
        weapon_egon:form = { t_weapon = ! }
        weapon_gauss:form = { t_weapon = ! }
        weapon_handgrenade:form = { t_weapon = ! }
        weapon_hornetgun:form = { t_weapon = ! }
        weapon_rpg:form = { t_weapon = ! }
        weapon_satchel:form = { t_weapon = ! }
        weapon_shotgun:form = { t_weapon = ! }
        weapon_snark:form = { t_weapon = ! }
        weapon_tripmine:form = {
                bbox = '-16 -16 -5 16 16 27'
                t_weapon = !
        }
        weapon_glock:form = { t_weapon = ! }
        weapon_mp5:form = { t_weapon = ! }
        weapon_python:form = { t_weapon = ! }

        weaponbox:form = {
                bbox = '-16 -16 0 16 16 32'
                Help =  "Weapon/ammo container"$0D
                     $0D"Fields entered are assumed to be ammo types, and the values of those fields"
                     $0D"are assumed to be the amount of ammo. Use the ammo names below..."$0D
                     $0D"9mm (glock/mp5 bullets)"
                     $0D"357 (python bullets)"
                     $0D"ARgrenades (m203 grenades)"
                     $0D"buckshot (shotgun ammo)"
                     $0D"bolts (crossbow)"
                     $0D"rockets (RPG)"
                     $0D"uranium (gauss/egon)"
                     $0D"Hand Grenade"
                     $0D"Satchel Charge"
                     $0D"Trip Mine"
                     $0D"Snarks"
                9mm: = {Txt="&"}
                357: = {Txt="&"}
                ARgrenades: = {Txt="&"}
                buckshot: = {Txt="&"}
                bolts: = {Txt="&"}
                rockets: = {Txt="&"}
                uranium: = {Txt="&"}
                Hand Grenade: = {Txt="&"}
                Satchel Charge: = {Txt="&"}
                Trip Mine: = {Txt="&"}
                Snarks: = {Txt="&"}
        }

        item_airtank:form = { t_item = ! }
        item_antidote:form = { t_item = ! }
        item_battery:form = { t_item = ! t_rendermode = ! }
        item_healthkit:form = { t_item = ! }
        item_longjump:form = { t_item = ! }
        item_security:form = { t_item = ! }
        item_suit:form = {
                t_item = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Short Logon" Hint="Skips all the HEV status-check announcements" }
                t_op4_body_settings = !
        }
        world_items:form = {
                t_weapon = !
                type: = { Typ="C" txt="&"
                        Items = "Battery"
                             $0D"Antidote"
                             $0D"Security Card"
                             $0D"Suit"
                        Values = "44"$0D"42"$0D"43"$0D"45"
                }
        }

        env_beam:form = {
                t_renderfx = !
                t_targetname = !
                LightningStart: = { Txt="&"  Hint="Start Entity" }
                LightningEnd: = { Txt="&"  Hint="Ending Entity" }
                Radius: = { Txt="&" Hint="Radius" }
                renderamt: = { Txt="&" Hint="Brightness (1 - 255)" }
                rendercolor: = { Txt="&" Hint="Beam Color (R G B)" }
                life: = { Txt="&" Hint="Life (seconds 0 = infinite)" }
                BoltWidth: = { Txt="&" Hint="Width of beam (pixels*0.1 0-255)" }
                NoiseAmplitude: = { Txt="&" Hint="Amount of noise (0-255)" }
                texture: = { Txt="&"  Hint="Sprite Name (sprites/laserbeam.spr)"
                    typ="C"
                    items=
   "bolt1.spr"
$0D"laserbeam.spr"
$0D"lgtning.spr"
$0D"plasma.spr"
$0D"smoke.spr"
$0D"xbeam1.spr"
$0D"xbeam2.spr"
$0D"xbeam3.spr"
$0D"xbeam4.spr"
$0D"xbeam5.spr"
$0D"xenobeam.spr"
$0D"zbeam1.spr"
$0D"zbeam2.spr"
$0D"zbeam3.spr"
$0D"zbeam4.spr"
$0D"zbeam5.spr"
$0D"zbeam6.spr"
                    values=
   "sprites/bolt1.spr"          // Lightning Bolt (anim)
$0D"sprites/laserbeam.spr"      // Thick Laser Beam
$0D"sprites/lgtning.spr"        // Electric Lightning Beam (anim)
$0D"sprites/plasma.spr"         // Plasma Beam (anim)
$0D"sprites/smoke.spr"          // Smoke Beam (anim)
$0D"sprites/xbeam1.spr"         // Beam
$0D"sprites/xbeam2.spr"         // Beam
$0D"sprites/xbeam3.spr"         // Beam
$0D"sprites/xbeam4.spr"         // Beam
$0D"sprites/xbeam5.spr"         // Beam
$0D"sprites/xenobeam.spr"       // Beam Large Yellow
$0D"sprites/zbeam1.spr"         // Beam
$0D"sprites/zbeam2.spr"         // Beam
$0D"sprites/zbeam3.spr"         // Beam
$0D"sprites/zbeam4.spr"         // Beam
$0D"sprites/zbeam5.spr"         // Beam
$0D"sprites/zbeam6.spr"         // Beam

//***************
//                              Values =
//      "sprites/320_logo.spr"$0D
//      "sprites/320_pain.spr"$0D
//      "sprites/320_train.spr"$0D
//      "sprites/320hud1.spr"$0D
//      "sprites/320hud2.spr"$0D
//      "sprites/320hud3.spr"$0D
//      "sprites/320hud4.spr"$0D
//      "sprites/640_logo.spr"$0D
//      "sprites/640_pain.spr"$0D
//      "sprites/640_train.spr"$0D
//      "sprites/640hud1.spr"$0D
//      "sprites/640hud2.spr"$0D
//      "sprites/640hud3.spr"$0D
//      "sprites/640hud4.spr"$0D
//      "sprites/640hud5.spr"$0D
//      "sprites/640hud6.spr"$0D
//      "sprites/640hud7.spr"$0D
//      "sprites/640hud8.spr"$0D
//      "sprites/640hud9.spr"$0D
//      "sprites/aexplo.spr"$0D         // Explosion
//      "sprites/agrunt1.spr"$0D        // AlienGrunt (anim)
//      "sprites/animglow01.spr"$0D     // Glow (anim)
//      "sprites/arrow1.spr"$0D         // Up-pointing arrow x 2
//      "sprites/b-tele1.spr"$0D        // Blue teleport (anim)
//      "sprites/ballsmoke.spr"$0D      // Smoke (anim)
//      "sprites/bexplo.spr"$0D         // Explosion (anim)
//      "sprites/bhit.spr"$0D           // Tiny Sparkle (Blood?) (anim)
//      "sprites/bigspit.spr"$0D        // Spit (anim)
//      "sprites/blast.spr"$0D          // Explosion (anim)
//      "sprites/blood.spr"$0D          // Tiny Sparkle (Blood?) (anim)
//      "sprites/blooddrop.spr"$0D      // Tiny Sparkle (Blood?) (anim)
//      "sprites/bloodspray.spr"$0D     // Large blood spray (anim)
//      "sprites/blueflare1.spr"$0D     // LensFlare Large Blue
//      "sprites/blueflare2.spr"$0D     // LensFlare Small Blue
//      "sprites/bluejet1.spr"$0D       // Jetstream blue (anim)
//      "sprites/bm1.spr"$0D            // Bubbles? (anim)
//      "sprites/bolt1.spr"$0D          // Lightning Bolt (anim)
//      "sprites/bubble.spr"$0D         // Air-Bubble (for Water)
//      "sprites/c-tele1.spr"$0D        // Yellow teleport (anim)
//      "sprites/cexplo.spr"$0D         // Explosion (anim)
//      "sprites/cnt1.spr"$0D           // Green teleport? (anim)
//      "sprites/crosshairs.spr"$0D
//      "sprites/d-tele1.spr"$0D        // Red/Yellow teleport (anim)
//      "sprites/dexplo.spr"$0D         // Explosion (anim)
//      "sprites/dot.spr"$0D            // White small dot
//      "sprites/e-tele1.spr"$0D        // Orange teleport (anim)
//      "sprites/eexplo.spr"$0D         // Explosion (anim)
//      "sprites/enter1.spr"$0D         // Orange/Green teleport (anim)
//      "sprites/exit1.spr"$0D          // Green/Yellow teleport (anim)
//      "sprites/explode1.spr"$0D       // Explosion (anim)
//      "sprites/explode2.spr"$0D       // Explosion (anim)
//      "sprites/fexplo.spr"$0D         // Explosion (anim)
//      "sprites/fexplo1.spr"$0D        // Explosion (anim)
//      "sprites/fire.spr"$0D           // Fire (candle?) (anim)
//      "sprites/flare1.spr"$0D         // LensFlare Large
//      "sprites/flare2.spr"$0D         // LensFlare Oval
//      "sprites/flare3.spr"$0D         // LensFlare Medium
//      "sprites/flare4.spr"$0D         // Blinking LensFlare Yellow (anim)
//      "sprites/flare5.spr"$0D         // Blinking LensFlare Yellow (anim)
//      "sprites/flare6.spr"$0D         // Sparkling LensFlare Green (anim)
//      "sprites/gargeye1.spr"$0D       // Red Eye of Garg-Alien
//      "sprites/gexplo.spr"$0D         // Explosion (anim)
//      "sprites/glow01.spr"$0D         // LensFlare Large
//      "sprites/glow02.spr"$0D         // LensFlare Large
//      "sprites/glow03.spr"$0D         // LensFlare Large
//      "sprites/glow04.spr"$0D         // LensFlare Large
//      "sprites/glow05.spr"$0D         // black
//      "sprites/gwave1.spr"$0D         // Red/Yellow Alienlike Fire (anim)
//      "sprites/hexplo.spr"$0D         // Explosion (anim)
//      "sprites/hotglow.spr"$0D        // LensFlare Large Orange
//      "sprites/laserbeam.spr"$0D      // Thick Laser Beam
//      "sprites/laserdot.spr"$0D       // RPG Laserdot
//      "sprites/lgtning.spr"$0D        // Electric Lightning Beam (anim)
//      "sprites/logo.spr"$0D           // HALF-LIFE/Valve/Sierra logos (anim)
//      "sprites/mommablob.spr"$0D      // Blob? (anim)
//      "sprites/mommaspit.spr"$0D      // Spit (anim)
//      "sprites/mommaspout.spr"$0D     // Spit (anim)
//      "sprites/moths.spr"$0D          // Tiny Sparkle (moths?) (anim)
//      "sprites/mushroom.spr"$0D       // Explosion (anim)
//      "sprites/muz1.spr"$0D           // MuzzleFlash (anim)
//      "sprites/muz2.spr"$0D           // MuzzleFlash
//      "sprites/muz3.spr"$0D           // MuzzleFlash
//      "sprites/muz4.spr"$0D           // MuzzleFlash
//      "sprites/muz5.spr"$0D           // MuzzleFlash
//      "sprites/muz6.spr"$0D           // MuzzleFlash
//      "sprites/muz7.spr"$0D           // MuzzleFlash
//      "sprites/muz8.spr"$0D           // MuzzleFlash
//      "sprites/muzzleflash.spr"$0D    // MuzzleFlash (anim)
//      "sprites/muzzleflash1.spr"$0D   // MuzzleFlash (anim)
//      "sprites/muzzleflash2.spr"$0D   // MuzzleFlash (anim)
//      "sprites/muzzleflash3.spr"$0D   // MuzzleFlash
//      "sprites/nhth1.spr"$0D          // Energy Bolt (anim)
//      "sprites/oriented.spr"$0D       // eh?
//      "sprites/plasma.spr"$0D         // Plasma Beam (anim)
//      "sprites/poison.spr"$0D         // Poison Cloud (anim)
//      "sprites/portal1.spr"$0D        // Portal teleport (anim)
//      "sprites/redflare1.spr"$0D      // LensFlare Large
//      "sprites/redflare2.spr"$0D      // LensFlare Small
//      "sprites/richo1.spr"$0D         // MuzzleFlash
//      "sprites/richo2.spr"$0D         // Missile Smoke (anim)
//      "sprites/rjet1.spr"$0D          // Rocket Exhaust (anim)
//      "sprites/rope.spr"$0D           // Rope
//      "sprites/sdrip1.spr"$0D         // WaterDrop (anim)
//      "sprites/shockwave.spr"$0D      // Shockwave
//      "sprites/small_logo.spr"$0D     // HALF-LIFE/Valve/Sierra logos Small (anim)
//      "sprites/smoke.spr"$0D          // Smoke Beam (anim)
//      "sprites/spark1.spr"$0D         // Electrical Sparkle (anim)
//      "sprites/spotlight01.spr"$0D    // Spotlight
//      "sprites/spotlight02.spr"$0D    // Spotlight
//      "sprites/spotlight03.spr"$0D    // black
//      "sprites/spotlight04.spr"$0D    // black
//      "sprites/steam1.spr"$0D         // Steam Puff (anim)
//      "sprites/stmbal1.spr"$0D        // Steam Ball (anim)
//      "sprites/streak.spr"$0D         // Shockwave
//      "sprites/tele1.spr"$0D          // Orange teleport (anim)
//      "sprites/tinyspit.spr"$0D       // Spit (anim)
//      "sprites/vp_parallel.spr"$0D    // eh?
//      "sprites/vp_parallel_oriented.spr"$0D // eh?
//      "sprites/wallpuff.spr"$0D       // WallScar
//      "sprites/wdrip2.spr"$0D         // WaterDrops (anim)
//      "sprites/white.spr"$0D          // white
//      "sprites/wsplash3.spr"$0D       // WaterSplash (anim)
//      "sprites/wxplo1.spr"$0D         // WaterExplosion (anim)
//      "sprites/xbeam1.spr"$0D         // Beam
//      "sprites/xbeam2.spr"$0D         // Beam
//      "sprites/xbeam3.spr"$0D         // Beam
//      "sprites/xbeam4.spr"$0D         // Beam
//      "sprites/xbeam5.spr"$0D         // Beam
//      "sprites/xenobeam.spr"$0D       // Beam Large Yellow
//      "sprites/xffloor.spr"$0D        // Fire Large (anim)
//      "sprites/xfire.spr"$0D          // Fire Puff (anim)
//      "sprites/xfire2.spr"$0D         // Fire Explosion Ball (anim)
//      "sprites/xfireball3.spr"$0D     // Fire Ball (anim)
//      "sprites/xflare1.spr"$0D        // LensFlare large (anim)
//      "sprites/xflare2.spr"$0D        // Foggy LensFlare Large (anim)
//      "sprites/xflare3.spr"$0D        // Fuzzy LensFlare Large (anim)
//      "sprites/xsmoke1.spr"$0D        // Smoke Ball (anim)
//      "sprites/xsmoke3.spr"$0D        // Smoke Steam Dense (anim)
//      "sprites/xsmoke4.spr"$0D        // Smoke Puff (anim)
//      "sprites/xspark1.spr"$0D        // Foggy Sparkle Blue (anim)
//      "sprites/xspark2.spr"$0D        // Sparkle (anim)
//      "sprites/xspark3.spr"$0D        // Sparkling (anim)
//      "sprites/xspark4.spr"$0D        // Foggy Sparkle Yellow (anim)
//      "sprites/xssmke1.spr"$0D        // Smoke Steam Light (anim)
//      "sprites/yelflare1.spr"$0D      // LensFlare Large
//      "sprites/yelflare2.spr"$0D      // LensFlare Small
//      "sprites/zbeam1.spr"$0D         // Beam
//      "sprites/zbeam2.spr"$0D         // Beam
//      "sprites/zbeam3.spr"$0D         // Beam
//      "sprites/zbeam4.spr"$0D         // Beam
//      "sprites/zbeam5.spr"$0D         // Beam
//      "sprites/zbeam6.spr"$0D         // Beam
//      "sprites/zerogxplode.spr"       // Explosion (anim)
//***************
                }
                TextureScroll: = { Txt="&" Hint="Texture Scroll Rate (0-100)" }
                framerate: = { Txt="&" Hint="Frames per 10 seconds" }
                framestart: = { Txt="&" Hint="Starting Frame" }
                StrikeTime: = { Txt="&" Hint="Strike again time (secs)" }
                damage: = { Txt="&" Hint="Damage / second" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start On" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Toggle" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Random Strike" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Ring" }
                spawnflags: = { Txt="&" Typ="X16" Cap="StartSparks" }
                spawnflags: = { Txt="&" Typ="X32" Cap="EndSparks" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Decal End" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Shade Start" }
                spawnflags: = { Txt="&" Typ="X256" Cap="Shade End" }
        }
        env_beverage:form = {
                bbox = '-4 -4 -4 4 4 4'
                t_targetname = !
                health: = { Txt="&" Hint="Capacity" }
                skin: = { Typ="C" Txt="&" Hint="Beverage Type"
                        Items = "Coca-Cola"
                             $0D"Sprite"
                             $0D"Diet Coke"
                             $0D"Orange"
                             $0D"Surge"
                             $0D"Moxie"
                             $0D"Random"
                        Values ="0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"
                }
                t_angles = !
        }
        env_blood:form = {
                t_targetname = !
                color: = { Typ="C" Txt="&" Hint="Blood Color"
                        Items = "Red (Human)"
                             $0D"Yellow (Alien)"
                        Values = "0"$0D"1"
                }
                amount: = { Txt="&" Hint="Amount of blood (damage to simulate)" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Random Direction" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Blood Stream" }
                spawnflags: = { Txt="&" Typ="X4" Cap="On Player" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Spray decals" }
                t_angles = !
        }
        env_bubbles:form = {
                t_targetname = !
                density: = { Txt="&" Hint="Bubble density" }
                frequency: = { Txt="&" Hint="Bubble frequency" }
                current: = { Txt="&" Hint="Speed of Current" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start Off" }
                t_brushentity = !
        }
        env_explosion:form = {
                t_targetname = !
                iMagnitude: = { Txt="&" Hint="Magnitude" }
                spawnflags: = { Txt="&" Typ="X1" Cap="No Damage" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Repeatable" }
                spawnflags: = { Txt="&" Typ="X4" Cap="No Fireball" }
                spawnflags: = { Txt="&" Typ="X8" Cap="No Smoke" }
                spawnflags: = { Txt="&" Typ="X16" Cap="No Decal" }
                spawnflags: = { Txt="&" Typ="X32" Cap="No Sparks" }
        }
        env_fade:form = {
                t_targetname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Fade From" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Modulate" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Activator Only" }
                duration: = { Txt="&" Hint="Duration (seconds)" }
                holdtime: = { Txt="&" Hint="Hold Fade (seconds)" }
                renderamt: = { Txt="&" Hint="Fade Alpha" }
                rendercolor: = { Txt="&" Hint="Fade Color (R G B)" }
                t_jb_env_fade = !
        }
        env_funnel:form = {
                t_targetname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Reverse" }
        }
        env_global:form = {
                Help =  "Changes global state variable when triggered."
                     $0D"Make this entity the target of a trigger. When that trigger fires, the global state will be set according to the trigger mode."
                     $0D"If the trigger mode is set to toggle, it will toggle the existing global state."
                     $0D"All global states default to 'off', so you must set the initial state to 'on' if you need it to be on at first."
                     $0D"Only multisource entities can read global states. You must set the global state field on the multisource to the name of the global state."
                     $0D"This can be used to have a button in one BSP enable a door / machine / whatever in another BSP."
                t_targetname = !
                globalstate: = { Txt="&"  Hint="Global State to Set" }
                triggermode: = {TYp="C" Txt="&" Hint="Trigger Mode"
                        Items = "On"
                             $0D"Off"
                             $0D"Toggle"
                             $0D"Dead"
                        Values = "1"$0D"0"$0D"3"$0D"2"
                }
                initialstate: = {Typ="C" Txt="&" Hint="Initial State"
                        Items = "Off"
                             $0D"On"
                             $0D"Dead"
                        Values = "0"$0D"1"$0D"2"
                }
                spawnflags: = { Txt="&" Typ="X1" Cap="Set Initial State"
                        Hint=   "This must be enabled for the initial state to be set."
                             $0D"This is here mostly to allow global entities to be killed by the trigger"
                             $0D"without being affected by some initial state."
                }
        }
        env_glow:form = {
                bbox = '-4 -4 -4 4 4 4'
                t_targetname = !
                model: = { 
                    t_spritebrowser = !
                    Hint="path/filename of sprite (Typically 'sprites/flare1.spr')"
                }
                model: = { Typ="C" Txt="(List)"  Hint="A list with common Half-Life sprites."
                        Items =
   "flare1"
$0D"flare2"
$0D"flare3"
$0D"flare4"
$0D"flare5"
$0D"flare6"
$0D"glow01"
$0D"glow02"
$0D"glow03"
$0D"glow04"
$0D"glow05"
$0D"hotglow"
$0D"spotlight01"
$0D"spotlight02"
$0D"spotlight03"
$0D"spotlight04"
$0D"xflare1"
$0D"xflare2"
$0D"xflare3"
$0D"yelflare1"
$0D"yelflare2"
                        Values =
   "sprites/flare1.spr"
$0D"sprites/flare2.spr"
$0D"sprites/flare3.spr"
$0D"sprites/flare4.spr"
$0D"sprites/flare5.spr"
$0D"sprites/flare6.spr"
$0D"sprites/glow01.spr"
$0D"sprites/glow02.spr"
$0D"sprites/glow03.spr"
$0D"sprites/glow04.spr"
$0D"sprites/glow05.spr"
$0D"sprites/hotglow.spr"
$0D"sprites/spotlight01.spr"
$0D"sprites/spotlight02.spr"
$0D"sprites/spotlight03.spr"
$0D"sprites/spotlight04.spr"
$0D"sprites/xflare1.spr"
$0D"sprites/xflare2.spr"
$0D"sprites/xflare3.spr"
$0D"sprites/yelflare1.spr"
$0D"sprites/yelflare2.spr"
                }
                scale: = { Txt="&" Hint="Sprite Scale" }
                t_rendermode = !
                t_spirit_movewith = !
        }
        env_laser:form = {
                t_targetname = !
                LaserTarget: = { Txt="&"  Hint="Target of Laser" }
                renderamt: = { Txt="&" Hint="Brightness (1 - 255)" }
                rendercolor: = { Txt="&" Hint="Beam Color (R G B)" }
                width: = { Txt="&" Hint="Width of beam (pixels*0.1 0-255)" }
                NoiseAmplitude: = { Txt="&" Hint="Amount of 'graphical-noise' (0-255)" }
                texture: = { Txt="&"  Hint="Sprite Name (sprites/laserbeam.spr)" }
                EndSprite: = { Txt="&" Hint="End Sprite" }
                TextureScroll: = { Txt="&" Hint="Texture Scroll Rate (0-100)" }
                framestart: = { Txt="&" Hint="Starting Frame" }
                damage: = { Txt="&" Hint="Damage / second" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start On" }
                spawnflags: = { Txt="&" Typ="X16" Cap="StartSparks" }
                spawnflags: = { Txt="&" Typ="X32" Cap="EndSparks" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Decal End" }
                t_renderfx = !
                t_angles = !
        }
        env_message:form = {
                Help = "HUD text message"
                t_targetname = !
                t_target = !
                message: = { Txt="&" Hint="Message name (names exist in TITLES.TXT)" }
                message: = {
                        Typ = "B"
                        Txt = "(Lists)"
                        Cap = "Messages"
                        form = "qrk_env_message_message:form"
                        Hint = "Lists of message names from TITLES.TXT"
                }
                spawnflags: = { Txt="&" Typ="X1" Cap="Play Once" }
                spawnflags: = { Txt="&" Typ="X2" Cap="All Clients" }
                messagesound: = { t_soundbrowser = ! Hint="path/filename of WAV" }
                messagevolume: = { Txt="&" Hint="Volume 0-10" }
                messageattenuation: = { Typ="C" Txt="&"
                        Items = "Small Radius"
                             $0D"Medium Radius"
                             $0D"Large  Radius"
                             $0D"Play Everywhere"
                        Values = "0"$0D"1"$0D"2"$0D"3"
                }
        }
        env_model:form = {
            Help = "Spirit of Half-Life"
            t_targetname = !
            model: = { t_modelbrowser = ! hint="Model name" }
            skin: = { txt="&" hint="Skin" }
            body: = { txt="&" hint="Body" }

            m_iszSequence_On: = { txt="&" hint="Sequence when on" }
            m_iAction_On: = { txt="&" typ="C" hint="Behaviour when on"
//              choices = (
//                  "0": "Freeze when sequence ends"
//                 ,"1": "Loop"
//                 ,"2": "Change state when sequence ends"
//              )
                items =                               // Delete this, once QuArK 6.2 is out of the way
                    "Freeze when sequence ends"       //
                 $0D"Loop"                            //
                 $0D"Change state when sequence ends" //
                values =                              //
                    "0"                               //
                 $0D"1"                               //
                 $0D"2"                               //
            }
            m_iszSequence_Off: = { txt="&" hint="Sequence when off" }
            m_iAction_Off: = { txt="&" typ="C" hint="Behaviour when off"
//              choices = (
//                  "0": "Freeze when sequence ends"
//                 ,"1": "Loop"
//                 ,"2": "Change state when sequence ends"
//              )
                items =                               // Delete this, once QuArK 6.2 is out of the way
                    "Freeze when sequence ends"       //
                 $0D"Loop"                            //
                 $0D"Change state when sequence ends" //
                values =                              //
                    "0"                               //
                 $0D"1"                               //
                 $0D"2"                               //
            }
            spawnflags: = { typ="X1" txt="&" cap="Initially Off" }
            spawnflags: = { typ="X2" txt="&" cap="Drop to Floor" }
            t_rendermode = !
            t_spirit_movewith = !
            t_angles = !
        }
        env_rain:form = {
            Help = "Spirit of Half-Life"
            t_targetname = !
            angles: = { txt="&" hint="Pitch Yaw Roll (Y Z X)" }
            m_dripSpeed: = { txt="&" hint="Drip Speed" }
            m_dripSize: = { txt="&" hint="Drip Width" }
            m_brightness: = { txt="&" hint="Drip Brightness (1 - 255)" }
            rendercolor: = { txt="&" hint="Drip Color (R G B)" }
            rendercolor: = { Typ="L 3" Txt="&" Hint="Click here to pick the drip color" }
            m_burstSize: = { txt="&" hint="Number of drips (per update)" }
            m_flUpdateTime: = { txt="&" hint="Time between updates" }
            texture: = { t_spritebrowser = ! hint="Drip Sprite (sprites/rain.spr)" }
            spawnflags: = { txt="&" typ="X1" hint="Start Off" }
        }
        env_render:form = {
                Help =  "Set the render parameters you wish to trigger, and make this entity the target of a trigger."
                     $0D"When that trigger fires, all of its parameters will be copied to all of its targets."
                     $0D"This can be used to make a door/wall fade out, begin pulsing, become partially translucent, etc."
                     $0D"If you only want to copy renderfx for instance, you can disable the other parameters with the flags."
                     $0D"You could have several of these that target each other for some evolving effect."
                     $0D"Can be applyed to monsters!"
                t_target = !
                t_targetname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="No Renderfx" }
                spawnflags: = { Txt="&" Typ="X2" Cap="No Renderamt" }
                spawnflags: = { Txt="&" Typ="X4" Cap="No Rendermode" }
                spawnflags: = { Txt="&" Typ="X8" Cap="No Rendercolor" }
                t_rendermode = !
        }
        env_shake:form = {
                Help = "This will cause the screen to shake, possibly to simulate an earthquake or some other seismic event."
                t_targetname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="GlobalShake" }
                spawnflags: = { Txt="&" Typ="X2" Cap="DisruptControl" Hint="(Probably does not work)" }
                spawnflags: = { Txt="&" Typ="X4" Cap="In Air" Hint="(Probably does not work)" }
                amplitude: = { Txt="&" Hint="Amplitude 0-16" }
                radius: = { Txt="&" Hint="Effect radius" }
                duration: = { Txt="&" Hint="Duration (seconds)" }
                frequency: = { Txt="&" Hint="0.1 = jerk, 255.0 = rumble" }
        }
        env_shooter:form = {
                t_gibshooter = !
                shootmodel: = { Typ="C" Txt="&" Hint="Gib Model or Sprite (models/?????.mdl, sprites/?????.spr)"
                        Items =
   "agibs"
$0D"big_momgibs"
$0D"bonegibs"
$0D"bookgibs"
$0D"cactusgibs"
$0D"catwalkgibs"
$0D"ceilinggibs"
$0D"chromegibs"
$0D"cindergibs"
$0D"cindergibs_green"
$0D"cindergibs_yellow"
$0D"computergibs"
$0D"concrete_gibs"
$0D"concretegibs"
$0D"fleshgibs"
$0D"garbagegibs"
$0D"gib_b_bone"
$0D"gib_b_gib"
$0D"gib_hgrunt"
$0D"gib_legbone"
$0D"gib_lung"
$0D"gib_skull"
$0D"glassgibs"
$0D"hgibs"
$0D"islave_gibs1"
$0D"mechgibs"
$0D"med_crategibs"
$0D"metalgibs"
$0D"metalplategibs"
$0D"metalplategibs_dark"
$0D"metalplategibs_green"
$0D"mil_crategibs"
$0D"office_gibs"
$0D"osprey_bodygibs"
$0D"osprey_enginegibs"
$0D"osprey_tailgibs"
$0D"rockgibs"
$0D"stickygib"
$0D"stickygibpink"
$0D"tech_crategibs"
$0D"webgibs"
$0D"wetfloorsign_gibs"
$0D"woodgibs"
$0D"zombiegibs1"
                        Values =
   "models/agibs.mdl"
$0D"models/big_momgibs.mdl"
$0D"models/bonegibs.mdl"
$0D"models/bookgibs.mdl"
$0D"models/cactusgibs.mdl"
$0D"models/catwalkgibs.mdl"
$0D"models/ceilinggibs.mdl"
$0D"models/chromegibs.mdl"
$0D"models/cindergibs.mdl"
$0D"models/cindergibs_green.mdl"
$0D"models/cindergibs_yellow.mdl"
$0D"models/computergibs.mdl"
$0D"models/concrete_gibs.mdl"
$0D"models/concretegibs.mdl"
$0D"models/fleshgibs.mdl"
$0D"models/garbagegibs.mdl"
$0D"models/gib_b_bone.mdl"
$0D"models/gib_b_gib.mdl"
$0D"models/gib_hgrunt.mdl"
$0D"models/gib_legbone.mdl"
$0D"models/gib_lung.mdl"
$0D"models/gib_skull.mdl"
$0D"models/glassgibs.mdl"
$0D"models/hgibs.mdl"
$0D"models/islave_gibs1.mdl"
$0D"models/mechgibs.mdl"
$0D"models/med_crategibs.mdl"
$0D"models/metalgibs.mdl"
$0D"models/metalplategibs.mdl"
$0D"models/metalplategibs_dark.mdl"
$0D"models/metalplategibs_green.mdl"
$0D"models/mil_crategibs.mdl"
$0D"models/office_gibs.mdl"
$0D"models/osprey_bodygibs.mdl"
$0D"models/osprey_enginegibs.mdl"
$0D"models/osprey_tailgibs.mdl"
$0D"models/rockgibs.mdl"
$0D"models/stickygib.mdl"
$0D"models/stickygibpink.mdl"
$0D"models/tech_crategibs.mdl"
$0D"models/webgibs.mdl"
$0D"models/wetfloorsign_gibs.mdl"
$0D"models/woodgibs.mdl"
$0D"models/zombiegibs1.mdl"
                }
                shootsounds: = { Typ="C" Txt="&" Hint="Material Sound"
                        Items = "None"
                             $0D"Glass"
                             $0D"Wood"
                             $0D"Metal"
                             $0D"Flesh"
                             $0D"Concrete"
                        Values = "-1"$0D"0"$0D"1"$0D"2"$0D"3"$0D"4"
                }
                scale: = { Txt="&" Hint="Gib Sprite Scale" }
                skin: = { Txt="&" Hint="Gib Skin" }
                t_rendermode = !
        }
        env_sound:form = {
                Help =  "Sets the DSP type for an area."
                     $0D"Any player within range will hear sounds processed by the specified DSP effect."
                     $0D"Once a player passes through a DSP radius, his dsp settings 'sticks' to him until he passes through another DSP radius."
                     $0D"It is possible to reset the DSP setting to 'off' by placing a dsp entity that has a roomtype value of 0."
                     $0D"If two DSP entity radius' intersect, the entity closest to the player will set his DSP effect."
                radius: = { Txt="&" Hint="Radius" }
                roomtype: = { Typ="C" Txt="&" Hint="Room Type"
                       Items =
   "Normal (off)"
$0D"Generic"
$0D"Metal Small"
$0D"Metal Medium"
$0D"Metal Large"
$0D"Tunnel Small"
$0D"Tunnel Medium"
$0D"Tunnel Large"
$0D"Chamber Small"
$0D"Chamber Medium"
$0D"Chamber Large"
$0D"Bright Small"
$0D"Bright Medium"
$0D"Bright Large"
$0D"Water 1"
$0D"Water 2"
$0D"Water 3"
$0D"Concrete Small"
$0D"Concrete Medium"
$0D"Concrete Large"
$0D"Big 1"
$0D"Big 2"
$0D"Big 3"
$0D"Cavern Small"
$0D"Cavern Medium"
$0D"Cavern Large"
$0D"Weirdo 1"
$0D"Weirdo 2"
$0D"Weirdo 3"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D"20"$0D"21"$0D"22"$0D"23"$0D"24"$0D"25"$0D"26"$0D"27"$0D"28"
                }
        }
        env_spark:form = {
                MaxDelay: = { Txt="&" Hint="Max Delay" }
                targetname: = { Txt="&"  Hint="Name" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Toggle" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Start ON" }
                t_angles = !
        }
        env_sprite:form = {
                t_targetname = !
                framerate: = { Txt="&" Hint="Framerate" }
                altenatemodel: = { Typ="EP" DefExt="spr" BasePath="$Game" CutPath="$Game\?" DirSep="/" }
                model: = { Typ="EP" DefExt="spr" BasePath="$Game" CutPath="$Game\?" DirSep="/" }
                model: = { Typ="C" Txt="(List)" Hint="Common Half-Life sprites."
                        Items =
   "320_logo"
$0D"320_pain"
$0D"320_train"
$0D"320hud1"
$0D"320hud2"
$0D"320hud3"
$0D"320hud4"
$0D"640_logo"
$0D"640_pain"
$0D"640_train"
$0D"640hud1"
$0D"640hud2"
$0D"640hud3"
$0D"640hud4"
$0D"640hud5"
$0D"640hud6"
$0D"640hud7"
$0D"640hud8"
$0D"640hud9"
$0D"aexplo"
$0D"agrunt1"
$0D"animglow01"
$0D"arrow1"
$0D"b-tele1"
$0D"ballsmoke"
$0D"bexplo"
$0D"bhit"
$0D"bigspit"
$0D"blast"
$0D"blood"
$0D"blooddrop"
$0D"bloodspray"
$0D"blueflare1"
$0D"blueflare2"
$0D"bluejet1"
$0D"bm1"
$0D"bolt1"
$0D"bubble"
$0D"c-tele1"
$0D"cexplo"
$0D"cnt1"
$0D"crosshairs"
$0D"d-tele1"
$0D"dexplo"
$0D"dot"
$0D"e-tele1"
$0D"eexplo"
$0D"enter1"
$0D"exit1"
$0D"explode1"
$0D"explode2"
$0D"fexplo"
$0D"fexplo1"
$0D"fire"
$0D"flare1"
$0D"flare2"
$0D"flare3"
$0D"flare4"
$0D"flare5"
$0D"flare6"
$0D"gargeye1"
$0D"gexplo"
$0D"glow01"
$0D"glow02"
$0D"glow03"
$0D"glow04"
$0D"glow05"
$0D"gwave1"
$0D"hexplo"
$0D"hotglow"
$0D"laserbeam"
$0D"laserdot"
$0D"lgtning"
$0D"logo"
$0D"mommablob"
$0D"mommaspit"
$0D"mommaspout"
$0D"moths"
$0D"mushroom"
$0D"muz1"
$0D"muz2"
$0D"muz3"
$0D"muz4"
$0D"muz5"
$0D"muz6"
$0D"muz7"
$0D"muz8"
$0D"muzzleflash"
$0D"muzzleflash1"
$0D"muzzleflash2"
$0D"muzzleflash3"
$0D"nhth1"
$0D"oriented"
$0D"plasma"
$0D"poison"
$0D"portal1"
$0D"redflare1"
$0D"redflare2"
$0D"richo1"
$0D"richo2"
$0D"rjet1"
$0D"rope"
$0D"sdrip1"
$0D"shockwave"
$0D"small_logo"
$0D"smoke"
$0D"spark1"
$0D"spotlight01"
$0D"spotlight02"
$0D"spotlight03"
$0D"spotlight04"
$0D"steam1"
$0D"stmbal1"
$0D"streak"
$0D"tele1"
$0D"tinyspit"
$0D"vp_parallel"
$0D"vp_parallel_oriented"
$0D"wallpuff"
$0D"wdrip2"
$0D"white"
$0D"wsplash3"
$0D"wxplo1"
$0D"xbeam1"
$0D"xbeam2"
$0D"xbeam3"
$0D"xbeam4"
$0D"xbeam5"
$0D"xenobeam"
$0D"xffloor"
$0D"xfire"
$0D"xfire2"
$0D"xfireball3"
$0D"xflare1"
$0D"xflare2"
$0D"xflare3"
$0D"xsmoke1"
$0D"xsmoke3"
$0D"xsmoke4"
$0D"xspark1"
$0D"xspark2"
$0D"xspark3"
$0D"xspark4"
$0D"xssmke1"
$0D"yelflare1"
$0D"yelflare2"
$0D"zbeam1"
$0D"zbeam2"
$0D"zbeam3"
$0D"zbeam4"
$0D"zbeam5"
$0D"zbeam6"
$0D"zerogxplode"
                        Values =
   "sprites/320_logo.spr"
$0D"sprites/320_pain.spr"
$0D"sprites/320_train.spr"
$0D"sprites/320hud1.spr"
$0D"sprites/320hud2.spr"
$0D"sprites/320hud3.spr"
$0D"sprites/320hud4.spr"
$0D"sprites/640_logo.spr"
$0D"sprites/640_pain.spr"
$0D"sprites/640_train.spr"
$0D"sprites/640hud1.spr"
$0D"sprites/640hud2.spr"
$0D"sprites/640hud3.spr"
$0D"sprites/640hud4.spr"
$0D"sprites/640hud5.spr"
$0D"sprites/640hud6.spr"
$0D"sprites/640hud7.spr"
$0D"sprites/640hud8.spr"
$0D"sprites/640hud9.spr"
$0D"sprites/aexplo.spr"
$0D"sprites/agrunt1.spr"
$0D"sprites/animglow01.spr"
$0D"sprites/arrow1.spr"
$0D"sprites/b-tele1.spr"
$0D"sprites/ballsmoke.spr"
$0D"sprites/bexplo.spr"
$0D"sprites/bhit.spr"
$0D"sprites/bigspit.spr"
$0D"sprites/blast.spr"
$0D"sprites/blood.spr"
$0D"sprites/blooddrop.spr"
$0D"sprites/bloodspray.spr"
$0D"sprites/blueflare1.spr"
$0D"sprites/blueflare2.spr"
$0D"sprites/bluejet1.spr"
$0D"sprites/bm1.spr"
$0D"sprites/bolt1.spr"
$0D"sprites/bubble.spr"
$0D"sprites/c-tele1.spr"
$0D"sprites/cexplo.spr"
$0D"sprites/cnt1.spr"
$0D"sprites/crosshairs.spr"
$0D"sprites/d-tele1.spr"
$0D"sprites/dexplo.spr"
$0D"sprites/dot.spr"
$0D"sprites/e-tele1.spr"
$0D"sprites/eexplo.spr"
$0D"sprites/enter1.spr"
$0D"sprites/exit1.spr"
$0D"sprites/explode1.spr"
$0D"sprites/explode2.spr"
$0D"sprites/fexplo.spr"
$0D"sprites/fexplo1.spr"
$0D"sprites/fire.spr"
$0D"sprites/flare1.spr"
$0D"sprites/flare2.spr"
$0D"sprites/flare3.spr"
$0D"sprites/flare4.spr"
$0D"sprites/flare5.spr"
$0D"sprites/flare6.spr"
$0D"sprites/gargeye1.spr"
$0D"sprites/gexplo.spr"
$0D"sprites/glow01.spr"
$0D"sprites/glow02.spr"
$0D"sprites/glow03.spr"
$0D"sprites/glow04.spr"
$0D"sprites/glow05.spr"
$0D"sprites/gwave1.spr"
$0D"sprites/hexplo.spr"
$0D"sprites/hotglow.spr"
$0D"sprites/laserbeam.spr"
$0D"sprites/laserdot.spr"
$0D"sprites/lgtning.spr"
$0D"sprites/logo.spr"
$0D"sprites/mommablob.spr"
$0D"sprites/mommaspit.spr"
$0D"sprites/mommaspout.spr"
$0D"sprites/moths.spr"
$0D"sprites/mushroom.spr"
$0D"sprites/muz1.spr"
$0D"sprites/muz2.spr"
$0D"sprites/muz3.spr"
$0D"sprites/muz4.spr"
$0D"sprites/muz5.spr"
$0D"sprites/muz6.spr"
$0D"sprites/muz7.spr"
$0D"sprites/muz8.spr"
$0D"sprites/muzzleflash.spr"
$0D"sprites/muzzleflash1.spr"
$0D"sprites/muzzleflash2.spr"
$0D"sprites/muzzleflash3.spr"
$0D"sprites/nhth1.spr"
$0D"sprites/oriented.spr"
$0D"sprites/plasma.spr"
$0D"sprites/poison.spr"
$0D"sprites/portal1.spr"
$0D"sprites/redflare1.spr"
$0D"sprites/redflare2.spr"
$0D"sprites/richo1.spr"
$0D"sprites/richo2.spr"
$0D"sprites/rjet1.spr"
$0D"sprites/rope.spr"
$0D"sprites/sdrip1.spr"
$0D"sprites/shockwave.spr"
$0D"sprites/small_logo.spr"
$0D"sprites/smoke.spr"
$0D"sprites/spark1.spr"
$0D"sprites/spotlight01.spr"
$0D"sprites/spotlight02.spr"
$0D"sprites/spotlight03.spr"
$0D"sprites/spotlight04.spr"
$0D"sprites/steam1.spr"
$0D"sprites/stmbal1.spr"
$0D"sprites/streak.spr"
$0D"sprites/tele1.spr"
$0D"sprites/tinyspit.spr"
$0D"sprites/vp_parallel.spr"
$0D"sprites/vp_parallel_oriented.spr"
$0D"sprites/wallpuff.spr"
$0D"sprites/wdrip2.spr"
$0D"sprites/white.spr"
$0D"sprites/wsplash3.spr"
$0D"sprites/wxplo1.spr"
$0D"sprites/xbeam1.spr"
$0D"sprites/xbeam2.spr"
$0D"sprites/xbeam3.spr"
$0D"sprites/xbeam4.spr"
$0D"sprites/xbeam5.spr"
$0D"sprites/xenobeam.spr"
$0D"sprites/xffloor.spr"
$0D"sprites/xfire.spr"
$0D"sprites/xfire2.spr"
$0D"sprites/xfireball3.spr"
$0D"sprites/xflare1.spr"
$0D"sprites/xflare2.spr"
$0D"sprites/xflare3.spr"
$0D"sprites/xsmoke1.spr"
$0D"sprites/xsmoke3.spr"
$0D"sprites/xsmoke4.spr"
$0D"sprites/xspark1.spr"
$0D"sprites/xspark2.spr"
$0D"sprites/xspark3.spr"
$0D"sprites/xspark4.spr"
$0D"sprites/xssmke1.spr"
$0D"sprites/yelflare1.spr"
$0D"sprites/yelflare2.spr"
$0D"sprites/zbeam1.spr"
$0D"sprites/zbeam2.spr"
$0D"sprites/zbeam3.spr"
$0D"sprites/zbeam4.spr"
$0D"sprites/zbeam5.spr"
$0D"sprites/zbeam6.spr"
$0D"sprites/zerogxplode.spr"
                }
                scale: = { Txt="&" Hint="Scale" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start on" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Play Once" }
                t_rendermode = !
                t_angles = !
                t_spirit_movewith = !
        }
        env_state:form = {
            Help = "Spirit of Half-Life"
            t_targetname = !
            t_master = !
            target: = { txt="&" hint="Target (always)" }
            noise1: = { txt="&" hint="Target (when on)" }
            noise2: = { txt="&" hint="Target (when off)" }
            turnontime: = { txt="&" hint="Time taken to turn on" }
            turnofftime: = { txt="&" hint="Time taken to turn off" }
            onmode: = { txt="&" typ="C" hint="Action when turned on"
//              choices = (
//                   "0": "Send Toggle"
//                  ,"1": "Send On"
//                  ,"2": "Send Off"
//                  ,"3": "Send Kill"
//                  ,"4": "Do nothing"
//              )
                items =                               // Delete this, once QuArK 6.2 is out of the way
                        "Send Toggle"                 //
                     $0D"Send On"                     //
                     $0D"Send Off"                    //
                     $0D"Send Kill"                   //
                     $0D"Do nothing"                  //
                values =                              //
                        "0"                           //
                     $0D"1"                           //
                     $0D"2"                           //
                     $0D"3"                           //
                     $0D"4"                           //
            }
            offmode: = { txt="&" typ="C" hint="Action when turned off"
//              choices = (
//                   "0": "Send Toggle"
//                  ,"1": "Send On"
//                  ,"2": "Send Off"
//                  ,"3": "Send Kill"
//                  ,"4": "Do nothing"
//              )
                items =                               // Delete this, once QuArK 6.2 is out of the way
                        "Send Toggle"                 //
                     $0D"Send On"                     //
                     $0D"Send Off"                    //
                     $0D"Send Kill"                   //
                     $0D"Do nothing"                  //
                values =                              //
                        "0"                           //
                     $0D"1"                           //
                     $0D"2"                           //
                     $0D"3"                           //
                     $0D"4"                           //
            }
            spawnflags: = { txt="&" typ="X1" cap="Start On" }
            spawnflags: = { txt="&" typ="X2" cap="Debug Mode" }
        }

        func_breakable:form = {
                t_targetname = !
                t_breakable = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Only Trigger" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Touch" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Pressure" }
                spawnflags: = { Txt="&" Typ="X256" Cap="Instant Crowbar" }
                t_rendermode = !
                t_angles = !
                t_spirit_movewith = !
                t_brushentity = !
        }
        func_button:form = {
                t_targetname = !
                t_target = !
                t_globalname = !
                speed: = { Txt="&" Hint="Speed" }
//                netname: = { Txt="&"  Hint="Target Path" }
                health: = { Txt="&"  Hint="Health (shootable if > 0)" }
                lip: = { Txt="&"  Hint="Lip" }
                t_master = !
                sounds: = { Typ = "C" Txt="&" Hint="Sounds"
                        Items = "(none)"
                             $0D"Big zap & Warmup"
                             $0D"Access Denied"
                             $0D"Access Granted"
                             $0D"Quick Combolock"
                             $0D"Power Deadbolt 1"
                             $0D"Power Deadbolt 2"
                             $0D"Plunger"
                             $0D"Small zap"
                             $0D"Keycard Sound"
                             $0D"Buzz"
                             $0D"Buzz Off"
                             $0D"Lightswitch"
                        Values = ""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"14"
                }
                wait: = { Txt="&"  Hint="Delay before reset (-1 = Stays pressed)" }
                delay: = { Txt="&" Hint="Delay before trigger" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Don't move" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Toggle" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Sparks" }
                spawnflags: = { Txt="&" Typ="X256" Cap="Touch Activates" }
                t_buttondoorsnds = !
                t__minlight = !
                t_rendermode = !
                t_angles = !
                t_spirit_movewith = !
                t_tfc_settings = !
                t_brushentity = !
        }
        func_conveyor:form = {
                Help =  "The angle only specifies which way to push,"
                     $0D"not the way the texture moves. It should be"
                     $0D"controlled in the polys face-properties."
                t_targetname = !
                t_globalname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="No Push" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Not Solid" }
                speed: = { Txt="&" Hint="Conveyor Speed" }
                t__minlight = !
                t_rendermode = !
                t_angles = !
                t_brushentity = !
        }
        func_door:form = { t_door = ! }
        func_door_rotating:form =
        {
                distance: = { Txt="&" Hint="Distance (deg)" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Reverse Dir" }
                spawnflags: = { Txt="&" Typ="X16" Cap="One-Way" }
                spawnflags: = { Txt="&" Typ="X64" Cap="X Axis" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Y Axis" }
                t_door = !
        }
        func_friction:form = {
                modifier: = { Txt="&" Hint="Percentage of standard (0 - 100)" }
                t_rendermode = !
                t_brushentity = !
        }
        func_guntarget:form = {
                t_targetname = !
                t_globalname = !
                speed: = { Txt="&" Hint="Speed (units per second)" }
                target: = { Txt="&"  Hint="First stop target" }
                message: = { Txt="&"  Hint="Fire on damage" }
                health: = { Txt="&" Hint="Damage to Take" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start On" }
                t__minlight = !
                t_rendermode = !
                t_brushentity = !
        }
        func_healthcharger:form = {
                t_globalname = !
                dmdelay: = { Txt="&" Hint="Deathmatch recharge delay" }
                t__minlight = !
                t_rendermode = !
                t_brushentity = !
        }
        func_illusionary:form = {
                t_targetname = !
                skin: = {Typ="C" Txt="&" Hint="Contents Type - Make it act like a water-brush."
//                  choices = (
//                         "0": "0 (none)"
//                      , "-1": "-1 (Empty)"
//                    //, "-2": "-2 (Solid)"
//                      , "-3": "-3 (Water)"
//                    //, "-4": "-4 (Slime)"
//                    //, "-5": "-5 (Lava)"
//                    //, "-6": "-6 (Sky)"
//                      , "-7": "-7 (Water) Volumetric Light"
//                      ,"-17": "-17 (Zero-G)"
//                      ,"-18": "-18 (Hover-Field)"
//                      ,"-19": "-19 (Fog effect)"
//                  )
                    items =                                 // Delete this, once QuArK 6.2 is out of the way
                             "0 (none)"                     //
                          $0D"-1 (Empty)"                   //
                        //$0D"-2 (Solid)"                   //
                          $0D"-3 (Water)"                   //
                        //$0D"-4 (Slime)"                   //
                        //$0D"-5 (Lava)"                    //
                        //$0D"-6 (Sky)"                     //
                          $0D"-7 (Water) Volumetric Light"  //
                          $0D"-17 (Zero-G)"                 //
                          $0D"-18 (Hover-Field)"            //
                          $0D"-19 (Fog effect)"             //
                    values =                                //
                          $0D "0"                           //
                          $0D "-1"                          //
                        //$0D "-2"                          //
                          $0D "-3"                          //
                        //$0D "-4"                          //
                        //$0D "-5"                          //
                        //$0D "-6"                          //
                          $0D "-7"                          //
                          $0D "-17"                         //
                          $0D "-18"                         //
                          $0D "-19"                         //
                }
                t__minlight = !
                t_rendermode = !
                t_spirit_movewith = !
                t_brushentity = !
        }
        func_ladder:form = {
                Help =  "Use a func_illusionary to put the textures on."
                     $0D"And a brush with the CLIP texture on, can be use so the player can just walk through the ladder."
                t_targetname = !
                t_spirit_movewith = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Silent" }
        }
        func_monsterclip:form = {
                t_targetname = !
        }
        func_mortar_field:form = {
                Help =  "When this object is triggered, heavy 'birds' fall down from the sky!"
                     $0D"(Check Half-Life level C2A5G.BSP)"
                t_targetname = !
                m_flSpread: = { Txt="&" Hint="Spread Radius" }
                m_iCount: = { Txt="&" Hint="Repeat Count" }
                m_fControl: = {Typ="C" Txt="&" Hint="Targeting"
                        Items = "Random"
                             $0D"Activator"
                             $0D"Table"
                        Values = "0"$0D"1"$0D"2"
                }
                m_iszXController: = { Txt="&"  Hint="X Controller (targetname of a momentary_rot_button" }
                m_iszYController: = { Txt="&"  Hint="Y Controller (targetname of a momentary_rot_button" }
        }
        func_pendulum:form = {
                t_targetname = !
                t_globalname = !
                speed: = { Txt="&" Hint="Speed" }
                distance: = { Txt="&" Hint="Distance (deg)" }
                damp: = { Txt="&" Hint="Damping (0-1000)" }
                dmg: = { Txt="&" Hint="Damage inflicted when blocked" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start ON" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Passable" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Auto-return" }
                spawnflags: = { Txt="&" Typ="X64" Cap="X Axis" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Y Axis" }
                t__minlight = !
                t_rendermode = !
                t_angles = !
                t_spirit_movewith = !
                t_brushentity = !
        }
        func_plat:form = {
                t_targetname = !
                t_globalname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Toggle" }
                height: = { Txt="&" Hint="Travel altitude (can be negative)" }
                speed: = { Txt="&" Hint="Travel speed" }
                t_platsound = !
                t_globalname = !
                t__minlight = !
                t_rendermode = !
                t_brushentity = !
        }
        func_platrot:form = {
                t_targetname = !
                t_globalname = !
                speed: = { Txt="&" Hint="Speed of rotation" }
                height: = { Txt="&" Hint="Travel altitude (can be negative)" }
//              sounds: = {Typ="C" Txt="&" Hint="Sound group"
//                      Items = "(none)"
//                           $0D"Base fast"
//                           $0D"Chain Slow"
//                      Values =""$0D"1"$0D"2"
//              }
                spawnflags: = { Txt="&" Typ="X1" Cap="Toggle" }
                spawnflags: = { Txt="&" Typ="X64" Cap="X Axis" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Y Axis" }
                rotation: = { Txt="&" Hint="Spin amount" }
                t_platsound = !
                t__minlight = !
                t_rendermode = !
                t_angles = !
                t_brushentity = !
        }
        func_pushable:form = {
                t_targetname = !
                t_breakable = !
                size: = { Typ="C" Txt="&" Hint="Hull Size"
                        Items = "Point size"
                             $0D"Player size"
                             $0D"Big Size"
                             $0D"Player duck"
                        Values = "0"$0D"1"$0D"2"$0D"3"
                }
                spawnflags: = { Txt="&" Typ="X128" Cap="Breakable" }
                friction: = { Txt="&" Hint="Friction (0-400)" }
                buoyancy: = { Txt="&" Hint="Buoyancy" }
                t__minlight = !
                t_rendermode = !
                t_brushentity = !
        }
        func_recharge:form = {
                t_globalname = !
                dmdelay: = { txt="&" Hint="Deathmatch recharge delay" }
                t__minlight = !
                t_rendermode = !
                t_brushentity = !
        }
        func_rot_button:form = {
                t_globalname = !
                speed: = { Txt="&" Hint="Speed" }
                t_targetname = !
                t_target = !
                changetarget: = { Txt="&"  Hint="ChangeTarget Name (changetarget will change the button's target's TARGET field to the button's changetarget.)" }
                t_master = !
                health: = { Txt="&"  Hint="Health (shootable if > 0)" }
                sounds: = { Typ="C" Txt="&" Hint="Sounds"
                        Items = "Squeaky"
                             $0D"Squeaky Pneumatic"
                             $0D"Ratchet Groan"
                             $0D"Clean Ratchet"
                             $0D"Gas Clunk"
                        Values = "21"$0D"22"$0D"23"$0D"24"$0D"25"
                }
                wait: = { Txt="&"  Hint="Delay before reset (-1 = Stays pressed)" }
                delay: = { Txt="&" Hint="Delay before trigger" }
                distance: = { Txt="&" Hint="Distance (deg)" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Not solid" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Reverse Dir" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Toggle" }
                spawnflags: = { Txt="&" Typ="X64" Cap="X Axis" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Y Axis" }
                spawnflags: = { Txt="&" Typ="X256" Cap="Touch Activates" }
                t__minlight = !
                t_angles = !
                t_rendermode = !
                t_tfc_settings = !
                t_brushentity = !
        }
        func_rotating:form = {
                t_targetname = !
                t_globalname = !
                speed: = { Txt="&" Hint="Rotation Speed" }
                volume: = { Txt="&" Hint="Volume (10 = loudest)" }
                fanfriction: = { Txt="&" Hint="Friction percentage (0 - 100)" }
                sounds: = { Typ="C" Txt="&" Hint="Fan Sounds"
                        Items = "No Sound"
                             $0D"Fast Whine"
                             $0D"Slow Rush"
                             $0D"Medium Rickety"
                             $0D"Fast Beating"
                             $0D"Slow Smooth"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"
                }
                message: = { t_soundbrowser = !  Hint="Path/filename.wav of WAV" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start ON" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Reverse Direction" }
                spawnflags: = { Txt="&" Typ="X4" Cap="X Axis" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Y Axis" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Acc/Dec" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Fan Pain" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Not Solid" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Small Radius" }
                spawnflags: = { Txt="&" Typ="X256" Cap="Medium Radius" }
                spawnflags: = { Txt="&" Typ="X512" Cap="Large Radius" }
                spawnorigin: = { Txt="&" Hint="X Y Z - Move here after lighting" }
                dmg: = { Txt="&" Hint="Damage inflicted when blocked" }
                t__minlight = !
                t_rendermode = !
                t_angles = !
                t_spirit_movewith = !
                t_brushentity = !
        }
        func_tank:form = {
                bullet: = { Typ="C" Txt="&" Hint="Bullets"
                        Items = "(none)"
                             $0D"9mm"
                             $0D"MP5"
                             $0D"12mm"
                        Values =""$0D"1"$0D"2"$0D"3"
                }
                t_tank = !
        }
        func_tankcontrols:form = {
                t_target = !
                t_spirit_movewith = !
        }
        func_tanklaser:form = {
                laserentity: = { Txt="&"  Hint="env_laser Entity" }
                t_tank = !
        }
        func_tankmortar:form = {
                iMagnitude: = { Txt="&" Hint="Explosion Magnitude" }
                t_tank = !
        }
        func_tankrocket:form = { t_tank = ! }
        func_trackautochange:form = {
                t_trackchange = !
                t__minlight = !
        }
        func_trackchange:form = {
                t_trackchange = !
                t__minlight = !
        }
        func_tracktrain:form = {
                t_targetname = !
                target: = { Txt="&" Hint="First stop target" }
                t_globalname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="No Pitch (X-rot)" }
                spawnflags: = { Txt="&" Typ="X2" Cap="No User Control" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Passable" }
                sounds: = { Typ="C" Txt="&" Hint="Sound"
                        Items = "(none)"
                             $0D"Rail 1"
                             $0D"Rail 2"
                             $0D"Rail 3"
                             $0D"Rail 4"
                             $0D"Rail 6"
                             $0D"Rail 7"
                        Values = ""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"
                }
                wheels: = { Txt="&" Hint="Distance between the wheels" }
                height: = { Txt="&" Hint="Height above track" }
                startspeed: = { Txt="&" Hint="Initial speed" }
                speed: = { Txt="&" Hint="Speed (units per second)" }
                dmg: = { Txt="&" Hint="Damage on crush" }
                volume: = { Txt="&" Hint="Volume (10 = loudest)" }
                bank: = { Txt="&" Hint="Bank angle on turns" }
                t__minlight = !
                t_rendermode = !
        }
        func_train:form = {
                t_targetname = !
                target: = { Txt="&"  Hint="First stop target" }
                t_globalname = !
                movesnd: = { Typ="C" Txt="&" Hint="Move Sound"
                         Items = "No Sound"
                             $0D"big elev 1"
                             $0D"big elev 2"
                             $0D"tech elev 1"
                             $0D"tech elev 2"
                             $0D"tech elev 3"
                             $0D"freight elev 1"
                             $0D"freight elev 2"
                             $0D"heavy elev"
                             $0D"rack elev"
                             $0D"rail elev"
                             $0D"squeek elev"
                             $0D"odd elev 1"
                             $0D"odd elev 2"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"
                }
                stopsnd: = { Typ="C" Txt="&" Hint="Stop Sound"
                        Items = "No Sound"
                             $0D"big elev stop1"
                             $0D"big elev stop2"
                             $0D"freight elev stop"
                             $0D"heavy elev stop"
                             $0D"rack stop"
                             $0D"rail stop"
                             $0D"squeek stop"
                             $0D"quick stop"
                        Values ="0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"
                }
//              sounds: = { Typ="C" Txt="&" Hint="Sound"
//                      Items = "(none)"
//                           $0D"Train Sounds"
//                           $0D"Plat sounds"
//                      Values = ""$0D"1"$0D"2"
//              }
                speed: = { Txt="&" Hint="Speed (units per second)" }
                avelocity: = { hint="Angular Velocity (y z x)" }
                dmg: = { Txt="&" Hint="Damage on crush" }
                skin: = { Txt="&" Hint="Contents" }
                volume: = { Txt="&" Hint="Sound Volume 0.0 - 1.0" }
                //  spawnflags: = { Txt="&" Typ="X1" Cap="Wait to re-trigger" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Not solid" }
                t__minlight = !
                t_rendermode = !
        }
        func_traincontrols:form = {
                target: = { Txt="&" Hint="Train Name" }
        }
        func_wall:form = {
                t_targetname = !
                t_globalname = !
                t__minlight = !
                t_rendermode = !
                t_spirit_movewith = !
                t_brushentity = !
        }
        func_wall_toggle:form = {
                spawnflags: = { Txt="&" Typ="X1" Cap="Starts Invisible" }
//              (func_wall:form) = !
                t_targetname = !
                t_globalname = !
                t__minlight = !
                t_rendermode = !
                t_spirit_movewith = !
                t_brushentity = !
        }
        func_water:form = {
                spawnflags: = { Txt="&" Typ="X1" Cap="Starts Open" }
                spawnflags: = { Txt="&" Typ="X256" Cap="Use Only" }
                skin: = { Typ="C" Txt="&" Hint="Contents"
                         Items = "Water"
                              $0D"Slime"
                              $0D"Lava"
                        Values = "-3"$0D"-4"$0D"-5"
                }
                WaveHeight: = { Txt="&" Hint="Wave Height" }
                t_door = !
        }

        info_alias:form = {
            help = "Spirit of Half-Life"$0D
$0D"An alias makes itself an 'alternative name' for an entity."
$0D"To refer to an entity through the alternative name, use the"
$0D"alias name preceeded by a *."
$0D""
$0D"For example, suppose you set up an info_alias entity called"
$0D"'myalias'. 'Myalias' targets a light called 'redlight'."
$0D"Suppose a you set up a @func_trigger field targetting"
$0D"'*myalias', so that when you walk through the func_trigger"
$0D"field, redlight gets turned on and off. So far, info_alias"
$0D"seems to be like a @trigger_relay. However, you can also"
$0D"set up a switch which targets 'myalias', to turn it off..."
$0D""
$0D"This is a very powerful entity, but is probably only useful"
$0D"for experienced mappers. Use with caution."
            t_targetname = !
            target: = { txt="&" hint="Reference while On" }
            netnametarget: = { txt="&" hint="Reference while Off" }
            spawnflags: = { txt="&" typ="X1" cap="Start On" }
            spawnflags: = { txt="&" typ="X2" cap="Debug Mode" }
        }
        info_group:form = {
            help = "Spirit of Half-Life"$0D
$0D"An info_group acts similarly to an @info_alias, except that"
$0D"it has several 'members' which are are accessed by"
$0D"'mygroup.membername'."
$0D""
$0D" These members are set up just like the targets of a"
$0D"@multi_manager- except that they'll contain an entity"
$0D"reference instead of a delay time."
$0D""
$0D"If you set up its 'target' field to refer to an info_alias"
$0D"entity, then when an info_group is triggered, it will"
$0D"change that info_alias entity to target the group."
$0D""
$0D"This is a very powerful entity, but is probably only useful"
$0D"for experienced mappers. Use with caution."
            t_targetname = !
            target: = { txt="&" hint="Alias to change when fired" }
            spawnflags: = { txt="&" typ="X2" cap="Debug Mode" }
        }

        info_player_start:form =
        {
                Help = "This entity defines the single player starting point"
                t_player = !
        }
        info_player_start2:form =
        {
                Help = "This entity defines the single player starting point when returning from a level"
                t_player = !
        }
        info_player_coop:form =
        {
                Help = "This entity sets the cooperative multiplayer start points"
                t_player = !
        }
        info_player_deathmatch:form =
        {
                Help = "This entity sets the deathmatch multiplayer start points"
                t_player = !
                t_target = !
                t_master = !
        }
        info_null:form = {
                Help = "Spotlight target"
                t_targetname = !
        }
        info_node:form =
        {
                Help = "AI node"
                bbox = '-24 -24 -4 24 24 4'
//                hinttype: = { Typ="C" Txt="&"
//                        Items = "(none)"
//                             $0D"World:Door"
//                             $0D"World:Window"
//                             $0D"World:Button"
//                             $0D"World:Machinery"
//                             $0D"World:Ledge"
//                             $0D"World:Light Source"
//                             $0D"World:Heat Source"
//                             $0D"World:Blinking Light"
//                             $0D"World:Bright Colors"
//                             $0D"World:Human Blood Decal"
//                             $0D"World:Alien Blood Decal"
//                             $0D"Stuka:Ceiling Perch"
//                             $0D"Stuka:Landing spot"
//                        Values = ""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"300"$0D"301"
//                }
//                activity: = { Typ="C" Txt="&"
//                        Items = "(none)"
//                             $0D"Eat"
//                             $0D"Inspect Ground"
//                             $0D"Inspect Wall"
//                        Values = ""$0D"35"$0D"45"$0D"46"
//                }
        }
        info_node_air:form =
        {
                Help = "AI air node"$0D
                    $0D"This is used for flying creatures such as the Alien Controller"
                bbox = '-32 -32 0 32 32 64'
        }
        infodecal:form = {
                Help = "The angle of the brush-texture, that the infodecal are applied on, should face the player."
                t_targetname = !
                texture: = { Typ="ET" Txt="&" Hint="Texture name of decal" }
        }
        info_bigmomma:form = {
                Help = "Big Mamma Node"
                bbox = '-24 -24 0 24 24 16'
                t_targetname = !
                t_target = !
                t_killtarget = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Run To Node" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Wait Indefinitely" }
                radius: = { Txt="&" Hint="Radius" }
                reachdelay: = { Txt="&" Hint="Wait after approach" }
                reachtarget: = { Txt="&" Hint="Fire on approach" }
                reachsequence: = { Txt="&" Hint="Sequence on approach" }
                health: = { Txt="&" Hint="Health on approach" }
                presequence: = { Txt="&" Hint="Sequence before approach" }
        }
        info_intermission:form = {
                Help = "Intermission Spot"
                target: = { Txt="&" Hint="Points to a info_target entity" }
                t_angles = !
        }
        info_landmark:form = {
                Help =  "Transition Landmark"$0D
                     $0D"A landmark defines a point in space as reference to match up level transitions"
                     $0D"when going from one level to another."
                     $0D"Both levels must have the same point of reference"
                t_targetname = !
        }
        info_target:form = {
                Help = "Beam Target"
                t_targetname = !
                t_spirit_movewith = !
        }
        info_teleport_destination:form = {
                Help = "Teleport destination"
                t_player = !
                t_targetname = !
        }

        light:form = {
                t_target = !
                t_targetname = !
                t_light = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Initially dark" }
                t_lightentity = !
        }
        light_environment:form = {
                pitch: = { Txt="&" Hint="Pitch" }
                _light: = { Txt="&" Hint="Brightness (R G B intensity)" }
                _light: = { Typ="L 4" Txt="&" Hint="Click here to pick the color" }
                t_angles = !
                t_lightentity = !
        }
        light_spot:form = {
                t_targetname = !
                t_target = !
                _cone: = { Txt="&" Hint="Inner (bright) Radius" }
                _cone2: = { Txt="&" Hint="Outer (fading) Radius" }
                pitch: = { Txt="&" Hint="Pitch" }
                _sky: = { Typ="C" Txt="&" Hint="Is Sky"
                        Items = "No"
                             $0D"Yes"
                        Values = "0"$0D"1"
                }
                spawnflags: = { Txt="&" Typ="X1" Cap="Initially dark" }
                t_light = !
                t_angles = !
                t_lightentity = !
        }

        monstermaker:form = {
                bbox = '-16 -16 -16 16 16 16'
                t_targetname = !
                target: = { Txt="&" Hint="Target On Release" }
                monstertype: = { Typ="C" Txt="&" Hint="Monster Type (I hope these are the correct names)"
                        Items =
   "monster_alien_controller"
$0D"monster_alien_grunt"
$0D"monster_alien_slave"
$0D"monster_barnacle"
$0D"monster_bigmomma"
$0D"monster_bullchicken"
$0D"monster_cockroach"
$0D"monster_flyer_flock"
$0D"monster_gargantua"
$0D"monster_headcrab"
$0D"monster_houndeye"
$0D"monster_ichthyosaur"
$0D"monster_leech"
$0D"monster_nihilanth"
$0D"monster_tentacle"
$0D"monster_barney"
$0D"monster_gman"
$0D"monster_grunt_repel"
$0D"monster_human_assassin"
$0D"monster_human_grunt"
$0D"monster_scientist"
$0D"monster_sitting_scientist"
$0D"monster_zombie"
$0D"monster_barney_dead"
$0D"monster_hevsuit_dead"
$0D"monster_hgrunt_dead"
$0D"monster_scientist_dead"
$0D"monster_furniture"
$0D"monster_apache"
$0D"monster_osprey"
$0D"monster_miniturret"
$0D"monster_sentry"
$0D"monster_turret"
$0D"monster_satchelcharge"
$0D"monster_tripmine"
$0D"monster_handgrenade"
                }
                netname: = { Txt="&"  Hint="Children's Name" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start ON" }
//                spawnflags: = { Txt="&" Typ="X2" Cap="PVS On/Off" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Cyclic" }
                spawnflags: = { Txt="&" Typ="X8" Cap="MonsterClip" }
                monstercount: = { Txt="&" Hint="How many monsters the monstermaker can create ( -1 = unlimited )" }
                delay: = { Txt="&"
                        Hint="If delay is -1, new monster will be made when last monster dies."
                          $0D"else, delay is how often ( seconds ) a new monster will be dookied out."
                }
                m_imaxlivechildren: = { Txt="&"
                        Hint="Maximum number of live children allowed at one time. (New ones will not be made until one dies)"
                          $0D"-1 no limit"
                }
                t_angles = !
                t_svc_monstermaker = !
        }
        monster_alien_controller:form = { t_monster = ! bbox = '-16 -16 0 16 16 72' }
        monster_alien_grunt:form = {
                t_monster = !
                bbox = '-32 -32 0 32 32 64'
                t_squadmonster = !
        }
        monster_alien_slave:form = {
                bbox = '-16 -16 0 16 16 72'
                spawnflags: = { Txt="&" Typ="X64" Cap="IgnorePlayer" }
                t_monster = !
                t_squadmonster = !
        }
        monster_apache:form = {
                bbox = '-360 -360 -172 360 360 8'
                spawnflags: = { Txt="&" Typ="X8" Cap="NoWreckage" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Start Inactive" }
                t_monster = !
        }
        monster_babycrab:form = { bbox = '-16 -16 0 16 16 36' }
        monster_barnacle:form = { bbox = '-16 -16 -36 16 16 0' }
        monster_barney:form = {
                t_monster = !
                t_talkmonster = !
                bbox = '-16 -16 0 16 16 72'
                Barney: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Sentences..."
                        Form = "qrk_use_sentence_barney:form"
                        Hint = "List of use/unuse sentences for Barney"
                }
                t_op4_suspicious = !
                t_svc_monster_barney = !
        }
        monster_barney_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                pose: = { Typ="C" Txt="&" Hint="Pose"
                        Items =  "On back"
                              $0D"On side"
                              $0D"On stomach"
                        Values = "0"$0D"1"$0D"2"
                }
                t_rendermode = !
                t_angles = !
        }
        monster_bigmomma:form = {
                t_monster = !
                bbox = '-95 -95 0 95 95 190'
                netname: = { Txt="&" Hint="First node" }
        }
        monster_bloater:form = {
                Help = "This monster does not have any AI"
                bbox = '-32 -32 0 32 32 64'
        }
        monster_bullchicken:form = { t_monster = ! bbox = '-32 -32 0 32 32 64' }
        monster_cockroach:form = { t_monster = ! bbox = '-3 -3 0 3 3 3' }
        monster_flyer:form = { t_monster = ! bbox = '-16 -16 0 16 16 16' }
        monster_flyer_flock:form = {
                t_monster = !
                bbox = '-16 -16 0 16 16 16'
                iFlockSize: = { Txt="&" Hint="Flock Size" }
                flFlockRadius: = { Txt="&" Hint="Flock Radius" }
        }
        monster_furniture:form = {
                t_monster = !
                model: = { t_modelbrowser = ! Hint="path/filename of model" }
                model: = { Typ="C" Txt="Gib-models" Hint="path/filename of model" t_gibs_mdl = ! }
        }
        monster_gargantua:form = { t_monster = ! bbox = '-32 -32 0 32 32 128' }
        monster_generic:form = {
                bbox = '-16 -16 -36 16 16 36'
                spawnflags: = { Txt="&" Typ="X4" Cap="Not solid" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Head Controller" }
                model: = { t_modelbrowser = ! Hint="Model" }
                body: = { Txt="&" Hint="Body" }
                t_monster = !
        }
        monster_gman:form = { t_monster = ! bbox = '-16 -16 0 16 16 72'}
        monster_grunt_repel:form = { t_monster = ! bbox = '-16 -16 0 16 16 72'
                t_svc_monster_grunt_repel = !
        }
        monster_handgrenade:form = { t_weapon = ! t_targetx = ! }
        monster_headcrab:form = { t_monster = ! bbox = '-16 -16 0 16 16 36' }
        monster_hevsuit_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                pose: = { Typ="C" Txt="&" Hint="Pose"
                        Items =  "On back"
                              $0D"Seated"
                              $0D"On stomach"
                              $0D"On Table"
                        Values = "0"$0D"1"$0D"2"$0D"3"
                }
                t_rendermode = !
                t_angles = !
        }
        monster_hgrunt_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                pose: = { Typ="C" Txt="&" Hint="Pose"
                        Items =  "On stomach"
                              $0D"On side"
                              $0D"Seated"
                        Values = "0"$0D"1"$0D"2"
                }
                body: = { Typ="C" Txt="&" Hint="Body"
                        Items =  "Grunt with Gun"
                              $0D"Commander with Gun"
                              $0D"Grunt no Gun"
                              $0D"Commander no Gun"
                        Values = "0"$0D"1"$0D"2"$0D"3"
                }
                t_rendermode = !
                t_angles = !
        }
        monster_houndeye:form = {
                t_monster = !
                bbox = '-16 -16 0 16 16 36'
                t_squadmonster = !
        }
        monster_human_assassin:form = { t_monster = ! bbox = '-16 -16 0 16 16 72' }
        monster_human_grunt:form = {
                t_monster = !
                bbox = '-16 -16 0 16 16 72'
                t_squadmonster = !
                weapons: = { Typ="C" Txt="&" Hint="Weapons"
                        Items = "9mmAR"
                             $0D"9mmAR + HG"
                             $0D"9mmAR + GL"
                             $0D"Shotgun"
                             $0D"Shotgun + HG"
                        Values = "1"$0D"3"$0D"5"$0D"8"$0D"10"
                }
        }
        monster_ichthyosaur:form = { t_monster = ! bbox = '-32 -32 0 32 32 64' }
        monster_leech:form = {
                t_monster = !
                bbox = '-6 -6 0 6 6 6'
        }
        monster_miniturret:form = {
                bbox = '-16 -16 -32 16 16 32'
                orientation: = {Typ="C" Txt="&" Hint="Orientation"
                        Items = "Floor Mount"
                             $0D"Ceiling Mount"
                        Values = "0"$0D"1"
                }
                spawnflags: = { Txt="&" Typ="X32" Cap="Autostart" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Start Inactive" }
                t_monster = !
                t_tfc_turret = !
                t_flf_turret = !
        }
        monster_nihilanth:form = { t_monster = ! bbox = '-192 -192 0 192 192 384' }
        monster_osprey:form = {
                bbox = '-480 -480 -112 480 480 24'
                spawnflags: = { Txt="&" Typ="X64" Cap="Start Inactive" }
                t_monster = !
                t_svc_monster_osprey = !
        }
        monster_rat:form = {
                Help = "This monster does not have any AI"
                bbox = '-6 -6 0 6 6 6'
        }
        monster_satchel:form = { t_weapon = ! }
        monster_scientist:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_talkmonster = !
                Scientist: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Sentences..."
                        Form = "qrk_use_sentence_scientist:form"
                        Hint = "List of use/unuse sentences for Scientist"
                }
                t_scientistbody = !
                t_op4_scientist_settings = !
        }
        monster_scientist_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                t_scientistbody = !
                pose: = { Typ="C" Txt="&" Hint="Pose"
                        Items = "On back"
                             $0D"On Stomach"
                             $0D"Sitting"
                             $0D"Hanging"
                             $0D"Table1"
                             $0D"Table2"
                             $0D"Table3"
                        Values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"
                }
                t_rendermode = !
                t_angles = !
        }
        monster_sentry:form = {
                bbox = '-16 -16 0 16 16 72'
                spawnflags: = { Txt="&" Typ="X32" Cap="Autostart" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Start Inactive" }
                t_monster = !
                t_tfc_turret = !
        }
        monster_sitting_scientist:form = {
                t_monster = !
                bbox = '-14 -14 22 14 14 72'
                t_op4_suspicious = !
                t_scientistbody = !
        }
        monster_snark:form = { bbox = '-16 -16 0 16 16 36' }
        monster_tentacle:form = {
                t_monster = !
                bbox = '-32 -32 0 32 32 64'
                sweeparc: = { Txt="&" Hint="Sweep Arc" }
                sound: = { Typ="C" Txt="&" Hint="Tap Sound"
                        Items = "None"
                             $0D"Silo"
                             $0D"Dirt"
                             $0D"Water"
                        Values = "-1"$0D"0"$0D"1"$0D"2"
                }
                t_op4_tentacle3_settings = !
        }
        monster_tripmine:form = {
                bbox = '-8 -8 -8 8 8 8'
                spawnflags: = { Txt="&" Typ="X1" Cap="Instant On" }
                t_monster = !
        }
        monster_turret:form = {
                bbox = '-32 -32 -32 32 32 32'
                orientation: = {Typ="C" Txt="&" Hint="Orientation"
                        Items = "Floor Mount"
                             $0D"Ceiling Mount"
                        Values = "0"$0D"1"
                }
                spawnflags: = { Txt="&" Typ="X32" Cap="Autostart" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Start Inactive" }
                t_monster = !
                t_tfc_turret = !
                t_flf_turret = !
        }
        monster_zombie:form = { t_monster = ! bbox = '-16 -16 0 16 16 72'}

        path_corner:form = {
                t_targetname = !
                target: = { Txt="&"  Hint="Next stop target" }
                message: = { Txt="&"  Hint="Fire on Pass (targetname of object to trigger when this point is passed)" }
                wait: = { Txt="&" Hint="Wait here (secs)" }
                speed: = { Txt="&" Hint="New Train Speed" }
                yaw_speed: = { Txt="&" Hint="New Train rot. Speed" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Wait for retrigger" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Teleport" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Fire once" }
                t_angles = !
                t_dod_cam = !
        }
        path_track:form = {
                Help = "When a path_track is triggered, it swaps its 'target' and 'altpath' values"
                t_targetname = !
                target: = { Txt="&"  Hint="Next stop target" }
                altpath: = { Txt="&"  Hint="Branch Path" }
                message: = { Txt="&"  Hint="Fire on Pass (targetname of object to trigger when this point is passed)" }
                netname: = { Txt="&"  Hint="Fire on Dead End" }
                speed: = { Txt="&" Hint="New Train Speed" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Disabled" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Fire once" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Branch Reverse" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Disable train" }
                t_angles = !
        }


        trigger_auto:form = {
                Help = "This trigger fires its targets when the level starts"
                t_targetx = !
                globalstate: = { Txt="&" Hint="Global State to Read" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove On fire" Hint="Remove trigger once it is activated" }
                triggerstate: = {Typ="C" Txt="&" Hint="Trigger State"
                        Items = "Off"
                             $0D"On"
                             $0D"Toggle"
                        Values = "0"$0D"1"$0D"2"
                }
        }
        trigger_autosave:form = {
                t_trigger = !
        }
        trigger_camera:form = {
                t_targetname = !
                t_targetx = !
                wait: = { Txt="&" Hint="Hold time" }
                moveto: = { Txt="&"  Hint="Path Corner" }
                speed: = { Txt="&" Hint="Initial Speed" }
                acceleration: = { Txt="&" Hint="Acceleration units/sec^2" }
                deceleration: = { Txt="&" Hint="Stop Deceleration units/sec^2" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start At Player" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Follow Player" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Freeze Player" }
        }
        trigger_cdaudio:form = {
                t_targetname = !
                health: = { TYp="C" Txt="&" Hint="Track #"
                        Items =
   "Stop"
$0D"Track 1"
$0D"Track 2"
$0D"Track 3"
$0D"Track 4"
$0D"Track 5"
$0D"Track 6"
$0D"Track 7"
$0D"Track 8"
$0D"Track 9"
$0D"Track 10"
$0D"Track 11"
$0D"Track 12"
$0D"Track 13"
$0D"Track 14"
$0D"Track 15"
$0D"Track 16"
$0D"Track 17"
$0D"Track 18"
$0D"Track 19"
$0D"Track 20"
$0D"Track 21"
$0D"Track 22"
$0D"Track 23"
$0D"Track 24"
$0D"Track 25"
$0D"Track 26"
$0D"Track 27"
$0D"Track 28"
$0D"Track 29"
$0D"Track 30"
                        Values = "-1"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D"20"$0D"21"$0D"22"$0D"23"$0D"24"$0D"25"$0D"26"$0D"27"$0D"28"$0D"29"$0D"30"
                }
        }

        trigger_changealias: = {
            help = "Spirit of Half-Life"$0D"This is a very powerful entity, but is probably only useful for experienced mappers. Use with caution."
            t_targetname = !
            target: = { hint="Alias to affect" }
            netname: = { hint="String to Set" }
            spawnflags: = { txt="&" typ="X1" cap="Resolve references"
                hint=
                   "If this is ticked, alias references in the 'String to Set' will be resolved before any changes are"
                $0D"applied. So, for example, suppose you set this entity up to affect an alias 'alias1', and to set alias1"
                $0D"to target '*myalias'."
                $0D""
                $0D"If 'Resolve references' is left unticked, then 'alias1' will change to refer to '*myalias'; that is,"
                $0D"in future any changes to 'myalias' will also change what 'alias1' refers to."
                $0D"By contrast, if 'Resolve references' is ticked, then 'alias1' will change to refer to whatever 'myalias'"
                $0D"is referring to at the time the trigger_changealias takes effect. Future changes to 'myalias' will"
                $0D"therefore not affect 'alias1'."
            }
            spawnflags: = { txt="&" typ="X2" cap="Debug Mode" }
        }

        trigger_changelevel:form = {
                t_targetname = !
                map: = { Txt="&" Hint="New map name" }
                landmark: = { Txt="&" Hint="info_landmark name" }
                changetarget: = { Txt="&" Hint="Change Target" }
                changedelay: = { Txt="&" Hint="Delay before change target" }
                spawnflags: = { Txt="&" Typ="X1" Cap="No Intermission" }
                spawnflags: = { Txt="&" Typ="X2" Cap="USE Only" }
        }
        trigger_changetarget:form = {
                Help = "This allows you to change the 'target' of the targeted entity to the value held in m_iszNewTarget"
                t_targetname = !
                t_targetx = !
                m_iszNewTarget: = { Txt="&" Hint="New Target" }
        }
        trigger_counter:form = {
                spawnflags: = { Txt="&" Typ="X1" Cap="No Message" }
                spawnflags: = { Txt="&" Typ="X2" Cap="N/A" }
                spawnflags: = { Txt="&" Typ="X4" Cap="N/A" }
                count: = { Txt="&" Hint="Count before activation" }
                t_trigger = !
        }
        trigger_endsection:form = {
                t_targetname = !
                section: = { Txt="&"  Hint="Section" }
                spawnflags: = { Txt="&" Typ="X1" Cap="USE Only" }
        }
        trigger_gravity:form = {
                gravity: = { Txt="&" Hint="Gravity (0.0-1.0)" }
//no code for it - t_trigger = !
        }
        trigger_hurt:form = {
                t_targetname = !
                t_target = !
                t_master = !
                dmg: = { Txt="&" Hint="Damage" }
                delay: = { Txt="&" Hint="Delay before trigger" }
                damagetype: = { Typ="C" Txt="&" Hint="Damage Type"
                        Items =
   "Generic"
$0D"Crush"
$0D"Bullet"
$0D"Slash"
$0D"Burn"
$0D"Freeze"
$0D"Fall"
$0D"Blast"
$0D"Club"
$0D"Shock"
$0D"Sonic"
$0D"Energy beam"
$0D"Drown"
$0D"Paralyse"
$0D"Nervegas"
$0D"Poison"
$0D"Radiation"
$0D"Drown (recover)"
$0D"Chemical"
$0D"Slow burn"
$0D"Slow freeze"
                        Values = "0"$0D"1"$0D"2"$0D"4"$0D"8"$0D"16"$0D"32"$0D"64"$0D"128"$0D"256"$0D"512"$0D"1024"$0D"16384"$0D"32768"$0D"65536"$0D"131072"$0D"262144"$0D"524288"$0D"1048576"$0D"2097152"$0D"4194304"
                }
                mixdamagetype: = {
                        Typ = "B"
                        Txt = "(Flags)"
                        Cap = "Mixed Dmg"
                        form = "qrk_trigger_hurt_damagetype:form"
                        Hint = "Mix damagetype"
                }
                spawnflags: = { Txt="&" Typ="X1" Cap="Target Once" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Start Off" }
                spawnflags: = { Txt="&" Typ="X8" Cap="No clients" }
                spawnflags: = { Txt="&" Typ="X16" Cap="FireClientOnly" }
                spawnflags: = { Txt="&" Typ="X32" Cap="TouchClientOnly" }
                t_spirit_movewith = !
                t_tfc_settings = !
                t_dod_t_triggerhurt = !
        }

        trigger_lightstyle:form = {
            help = "Spirit of Half-Life"$0D
                "Only affects dynamic lights."
            t_targetname = !
            t_target = !
            style: = { typ="C" hint="New Appearance"
//              choices = (
//              "0" : "On"
//             ,"13": "Off"
//             ,"10": "Fluorescent flicker"
//             ,"2" : "Slow, strong pulse"
//             ,"11": "Slow pulse, noblack"
//             ,"5" : "Gentle pulse"
//             ,"1" : "Flicker A"
//             ,"6" : "Flicker B"
//             ,"3" : "Candle A"
//             ,"7" : "Candle B"
//             ,"8" : "Candle C"
//             ,"4" : "Fast strobe"
//             ,"9" : "Slow strobe"
//             ,"12": "Underwater"
//             ,"14": "Slow Fade In"
//             ,"15": "Medium Fade In"
//             ,"16": "Fast Fade In"
//              )
                items =                                 // Delete this, once QuArK 6.2 is out of the way
                    "On"                                //
                 $0D"Off"                               //
                 $0D"Fluorescent flicker"               //
                 $0D"Slow, strong pulse"                //
                 $0D"Slow pulse, noblack"               //
                 $0D"Gentle pulse"                      //
                 $0D"Flicker A"                         //
                 $0D"Flicker B"                         //
                 $0D"Candle A"                          //
                 $0D"Candle B"                          //
                 $0D"Candle C"                          //
                 $0D"Fast strobe"                       //
                 $0D"Slow strobe"                       //
                 $0D"Underwater"                        //
                 $0D"Slow Fade In"                      //
                 $0D"Medium Fade In"                    //
                 $0D"Fast Fade In"                      //
                values =                                //
                    "0"                                 //
                 $0D"13"                                //
                 $0D"10"                                //
                 $0D"2"                                 //
                 $0D"11"                                //
                 $0D"5"                                 //
                 $0D"1"                                 //
                 $0D"6"                                 //
                 $0D"3"                                 //
                 $0D"7"                                 //
                 $0D"8"                                 //
                 $0D"4"                                 //
                 $0D"9"                                 //
                 $0D"12"                                //
                 $0D"14"                                //
                 $0D"15"                                //
                 $0D"16"                                //
            }
            pattern: = { hint="Custom Appearance" }
            m_iWait: = { hint="Hold time (-1 for permanent)" }
        }

        trigger_monsterjump:form = {
                t_targetname = !
                t_master = !
//hardcoded     speed: = { Txt="&" Hint="Jump Speed" }
//hardcoded     height: = { Txt="&" Hint="Jump Height" }
                t_angles = !
        }
        trigger_multiple:form = {
                wait: = { Txt="&" Hint="Delay before reset" }
                t_trigger = !
                t_fa_trigger_multiple_settings = !
                t_dod_trigger = !
        }
        trigger_once:form = {
                t_trigger = !
                t_dod_trigger = !
        }
        trigger_push:form = {
                spawnflags: = { Txt="&" Typ="X1" Cap="Once Only" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Start Off" }
                spawnflags: = { Txt="&" Typ="X4" Cap="N/A" }
                speed: = { Txt="&" Hint="Speed of push" }
                t_trigger = !
                t_angles = !
        }
        trigger_relay:form = {
                t_targetname = !
                t_targetx = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove On fire" }
                triggerstate: = {Typ="C" Txt="&" Hint="Trigger State"
                        Items = "Off"
                             $0D"On"
                             $0D"Toggle"
                        Values ="0"$0D"1"$0D"2"
                }
                t_dod_trigger = !
        }
        trigger_teleport:form = {
                t_trigger = !
                t_op4_teleport_settings = !
                t_dod_teleport = !
        }
        trigger_transition:form = {
                targetname: = { Txt="&" Hint="Landmark Name" }
        }

        // XEN includer
        xen_plants:incl = {
                t_targetname = !
                t_rendermode = !
                t_angles = !
        }
        xen_hair:form = {
                bbox = '-8 -8 0 8 8 32'
                spawnflags: = { Txt="&" Typ="X1" Cap="Sync Movement" }
                xen_plants = !
        }
        xen_plantlight:form = {
                bbox = '-48 -48 0 48 48 32'
                t_target = !
                xen_plants = !
        }
        xen_spore_large:form = {
                bbox = '-90 -90 0 90 90 220'
                xen_plants = !
        }
        xen_spore_medium:form = {
                bbox = '-40 -40 0 40 40 120'
                xen_plants = !
        }
        xen_spore_small:form = {
                bbox = '-16 -16 0 16 16 64'
                xen_plants = !
        }
        xen_tree:form = {
                bbox = '-24 -24 0 24 24 188'
                xen_plants = !
        }

        button_target:form = {
                t_target = !
                t_master = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Use Activates" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Start On" }
                t_rendermode = !
                t_angles = !
        }
        cycler:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                model: = { t_modelbrowser = ! Hint="Model" }
                t_rendermode = !
                bodygroup: = { Txt="&" Hint="Body Group" }
                t_angles = !
        }
        cycler_sprite:form = {
                bbox = '-8 -8 -8 8 8 8'
                t_targetname = !
                model: = { t_spritebrowser = ! Hint="Sprite" }
                framerate: = { Txt="&"  Hint="Frames per second" }
                t_rendermode = !
                t_angles = !
        }
        cycler_weapon:form = {
                t_monster = !
                bbox = '-16 -16 16 16 16 16'
                model: = { t_modelbrowser = ! Hint="model" }
        }
        cycler_wreckage:form = {
                t_targetname = !
                framerate: = { }
                model: = { t_spritebrowser = ! Hint="For instance 'sprites/fire.spr'" }
                scale: = { }
                spawnflags: = { Typ="X32" Cap="Toggle" }
                spawnflags: = { Typ="X64" Cap="Start ON" }
                t_rendermode = !
                t_angles = !
        }
        gibshooter:form = { t_gibshooter = !}
        momentary_door:form = { t_door = ! }
        momentary_rot_button:form = {
                t_targetname = !
                speed: = { Txt="&" Hint="Speed" }
                target: = { Txt="&" Hint="Targetname of an momentary_door entity" }
                // netname: = { Txt="&"  Hint="Target Path" }
                // Path Target overrides Targetted Object
                // health: = { Txt="&"  Hint="Health (shootable if > 0)" }
                t_master = !
                sounds: = { Typ="C" Txt="&" Hint="Sounds"
                        Items = "(none)"
                             $0D"Big zap & Warmup"
                             $0D"Access Denied"
                             $0D"Access Granted"
                             $0D"Quick Combolock"
                             $0D"Power Deadbolt 1"
                             $0D"Power Deadbolt 2"
                             $0D"Plunger"
                             $0D"Small zap"
                             $0D"Keycard Sound"
                             $0D"Squeaky"
                             $0D"Squeaky Pneumatic"
                             $0D"Ratchet Groan"
                             $0D"Clean Ratchet"
                             $0D"Gas Clunk"
                        Values =""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"21"$0D"22"$0D"23"$0D"24"$0D"25"
                }
                distance: = { Txt="&" Hint="Distance (deg)" }
                returnspeed: = { Txt="&" Hint="Auto-return speed" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Door Hack" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Not useable" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Auto Return" }
                spawnflags: = { Txt="&" Typ="X64" Cap="X Axis" }
                spawnflags: = { Txt="&" Typ="X128" Cap="Y Axis" }
                t__minlight = !
                t_rendermode = !
                t_angles = !
                t_tfc_settings = !
                t_brushentity = !
        }

        multi_alias:form = {
            help = "Spirit of Half-Life"$0D
$0D"A multi_alias is an @info_alias with more than one target."
$0D"It's mainly useful to group entities together, while still"
$0D"allowing them to have individual names."
$0D""
$0D"For example, suppose you have a set of lights in your"
$0D"level. Each one has its own lightswitch, which allows it to"
$0D"be switched on and off on its own. But later in the level,"
$0D"you want the power (i.e. all the lights) to go off. One way"
$0D"to do that would be to make a multi_alias which targets all"
$0D"the lights, and simply trigger what that alias refers to."

            t_targetname = !
        }

        multi_manager:form = {
                Help = "Controls and coordinates up to 16 indvidual targets."$0D
                    $0D"Any additional specifics entered are assumed to be targetnames of other objects"
                    $0D"in the same level, and the args of those specifics are assumed to be the delay"
                    $0D"value (time to wait before triggering) for the associated entity."$0D
                    $0D"Notice! To trigger the same target multiple times, you must suffix each one with"
                    $0D"a '#' and then something to make it unique. Example: Call 'mystuff' three times"
                    $0D"  mystuff#1    0.0"
                    $0D"  mystuff#2    1.0"
                    $0D"  mystuff#Q    2.0"
                    $0D""
                    $0D"If a master is given, then while the master is in any state but ON, the manager will ignore"
                    $0D"all signals. This won't prevent it from continuing a sequence that started while the master"
                    $0D"was ON, but it will prevent a new sequence from starting."

                t_targetname = !
                t_master = !
                spawnflags: = { Txt="&" Typ="X1" Cap="MultiThreaded" Hint="Starts a new multi_manager 'thread' whenever it is triggered."$0D"A default 'not multithreaded' multi_manager can not be triggered again when it is running."  }

                sep: = { Typ="S" txt="Spirit of Half-Life" }
                wait: = { hint="Time offset"$0D"How long to wait before starting the sequence. This delay is in addition to the offsets given for each individual target." }
                maxwait: = { hint="Max Time offset (Random)"$0D"If set, then each time it's triggered the manager will wait for a random length of time. The 'Time Offset' value is used as a minimum offset." }
                triggerstate: = {typ="C" hint="Trigger to send"$0D"Message sent to the targets. There's no way (currently) to have a different message be sent to each target."
//                  choices = (
//                       "0": "Toggle"
//                      ,"1": "On"
//                      ,"2": "Off"
//                      ,"3": "Kill"
//                      ,"4": "Same as input"
//                  )
                    items =                                 // Delete this, once QuArK 6.2 is out of the way
                        "Toggle"                            //
                     $0D"On"                                //
                     $0D"Off"                               //
                     $0D"Kill"                              //
                     $0D"Same as input"                     //
                    values =                                //
                        "0"                                 //
                     $0D"1"                                 //
                     $0D"2"                                 //
                     $0D"3"                                 //
                     $0D"4"                                 //
                }
                mode: = {typ="C" hint="Mode"
//                  choices = (
//                       "0": "Normal (time offset)"
//                      ,"1": "Choose one (weighted)"
//                      ,"2": "% chance for each"
//                  )
                    items =                                 // Delete this, once QuArK 6.2 is out of the way
                        "Normal (time offset)"              //
                     $0D"Choose one (weighted)"             //
                     $0D"% chance for each"                 //
                    values =                                //
                        "0"                                 //
                     $0D"1"                                 //
                     $0D"2"                                 //
                }
                spawnflags: = { typ="X2" cap="Loop" hint="When the sequence ends, start again from the beginning."$0D"You can stop the loop by toggling the manager a second time." }
                spawnflags: = { typ="X4" cap="Once only" hint="The manager will USE_KILL itself when the sequence is complete."$0D"In loop mode, the manager will only USE_KILL itself when told to stop the loop." }
        }

        watcher:form = {
            help = "Spirit of Half-Life"$0D
$0D"A watcher watches an entity, waiting for it to be in a"
$0D"given state. The default behaviour is for the watcher to be"
$0D"'On' if the watched entity is 'On', and to be 'Off' at all"
$0D"other times."
$0D""
$0D"The main use for a watcher is to fire another entity (the"
$0D"'entity to notify) each time the watcher's state changes."

            t_targetname = !
            m_iszWatch: = { hint="Entity to watch" }
            spawnflags: = { typ="X1"   cap="Send 'Toggle'"  hint="If this is enabled, the watcher will always notify its target with USE_TOGGLE, instead of sending ON or OFF." }
            spawnflags: = { typ="X2"   cap="Don't Send On"  hint="If this is enabled, the target won't be triggered when the watcher turns on." }
            spawnflags: = { typ="X4"   cap="Don't Send Off" hint="If this is enabled, the target won't be triggered when the watcher turns off." }
            spawnflags: = { typ="X8"   cap="NOT 'On'"       hint="Specifically watch this state" }
            spawnflags: = { typ="X16"  cap="'Off'"          hint="Specifically watch this state" }
            spawnflags: = { typ="X32"  cap="'Turn On'"      hint="Specifically watch this state" }
            spawnflags: = { typ="X64"  cap="'Turn Off'"     hint="Specifically watch this state" }
            spawnflags: = { typ="X128" cap="'In Use'"       hint="Specifically watch this state" }
            m_fLogic: = { typ="C" hint="Default state"
//              choices = (
//                "0": "On"
//               ,"1": "Off"
//              )
                items = "On"$0D"Off"  // Delete this, once QuArK 6.2 is out of the way
                values = "0"$0D"1"    //
            }
            target: = { hint="Entity to notify"$0D"This entity will be sent USE_ON or USE_OFF, as appropriate, whenever the watcher's state changes." }
        }

        multi_watcher:form = {
            help = "Spirit of Half-Life"$0D
$0D"A multi_watcher is like a normal @watcher, except that it"
$0D"watches up to 16 entities at once."
$0D""
$0D"The entity is probably most useful when used as a master"
$0D"for another entity- a versatile replacement for the"
$0D"@multisource, in a way. Note that if you need to handle a"
$0D"complex logical operation, you can make a multi_watcher"
$0D"which watches other multi_watchers."
$0D""
$0D"The list of watched entities is specified in the same way"
$0D"as the targets of a @multi_manager, except that the 'value'"
$0D"should be set to 0. (Future versions of Spirit may make use"
$0D"of the value, but for now it's ignored.)"
$0D""
$0D"This is a very powerful entity, but is probably only useful"
$0D"for experienced mappers."

            t_targetname = !
            spawnflags: = { typ="X1"   cap="Send 'Toggle'" hint="If this is enabled, the watcher will always notify its target with USE_TOGGLE, instead of sending ON or OFF." }
            spawnflags: = { typ="X8"   cap="NOT 'On'"      hint="Specifically watch this state" }
            spawnflags: = { typ="X16"  cap="'Off'"         hint="Specifically watch this state" }
            spawnflags: = { typ="X32"  cap="'Turn On'"     hint="Specifically watch this state" }
            spawnflags: = { typ="X64"  cap="'Turn Off'"    hint="Specifically watch this state" }
            spawnflags: = { typ="X128" cap="'In Use'"      hint="Specifically watch this state" }
            m_fLogic: = { typ="C" hint="Logical test"
//              choices = (
//               "0": "All (AND)"
//              ,"2": "Not all (NAND)"
//              ,"1": "At least one (OR)"
//              ,"3": "None (NOR)"
//              ,"4": "Exactly one (XOR)"
//              ,"5": "Any number but one (XNOR)"
//              )
                items =                             // Delete this, once QuArK 6.2 is out of the way
                    "All (AND)"                     //
                 $0D"Not all (NAND)"                //
                 $0D"At least one (OR)"             //
                 $0D"None (NOR)"                    //
                 $0D"Exactly one (XOR)"             //
                 $0D"Any number but one (XNOR)"     //
                values =                            //
                    "0"                             //
                 $0D"2"                             //
                 $0D"1"                             //
                 $0D"3"                             //
                 $0D"4"                             //
                 $0D"5"                             //
            }
            target: = { hint="Entity to notify"$0D"This entity will be sent USE_ON or USE_OFF, as appropriate, whenever the watcher's state changes." }
        }

        multisource:form = {
                Help =  "The multisource entity acts as an 'AND' gate."$0D
                     $0D"After creation, the multisource entity finds all entities that have targeted it."
                     $0D"It will not activate the target entity until all client buttons have been activated."
                     $0D"If a client button pops back, it is not considered to be activated."
                     $0D"The target will only be activated when all buttons are in their activated state."
                t_targetname = !
                t_target = !
                globalstate: = { Txt="&" Hint="Global State Master" }
        }
        player_loadsaved:form = {
                t_targetname = !
                duration: = { Txt="&" Hint="Fade Duration (seconds)" }
                holdtime: = { Txt="&" Hint="Hold Fade (seconds)" }
                renderamt: = { Txt="&" Hint="Fade Alpha" }
                rendercolor: = { Txt="&" Hint="Fade Color (R G B)" }
                messagetime: = { Txt="&" Hint="Show Message delay" }
                t_message = !
                loadtime: = { Txt="&" Hint="Reload delay" }
        }
        player_weaponstrip:form = {
                Help = "Strips player's weapons"
                t_targetname = !
        }

//
// Scripts
//
        scripted_sentence:form = {
                t_targetname = !
                t_targetx = !
                sentence: = { Txt="&" Hint="Sentence Name (in SENTENCES.TXT)" }
                Scientist: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Sentences..."
                        Form = "qrk_sentence_scientist:form"
                        Hint = "List of sentences for Scientist"
                }
                Barney: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Sentences..."
                        Form = "qrk_sentence_barney:form"
                        Hint = "List of sentences for Barney"
                }
                Human Grunt: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Sentences..."
                        Form = "qrk_sentence_human_grunt:form"
                        Hint = "List of sentences for Human Grunt"
                }
                G-Man: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Sentences..."
                        Form = "qrk_sentence_gman:form"
                        Hint = "List of sentences for G-Man"
                }
                Hologram: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Sentences..."
                        Form = "qrk_sentence_hologram:form"
                        Hint = "List of sentences for Hologram"
                }
                entity: = { Txt="&"  Hint="Speaker Entity" }
                duration: = { Txt="&" Hint="Sentence Time" }
                radius: = { Txt="&" Hint="Search Radius" }
                refire: = { Txt="&" Hint="Delay Before Refire" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Fire Once" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Followers Only" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Interrupt Speech" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Concurrent" }
                listener: = { Txt="&" Hint="Listener Entity" }
                volume: = { Txt="&" Hint="Volume 0-10" }
                attenuation: = { Typ="C" Txt="&" Hint="Sound Radius"
                        Items = "Small Radius"
                             $0D"Medium Radius"
                             $0D"Large  Radius"
                             $0D"Play Everywhere"
                        Values = "0"$0D"1"$0D"2"$0D"3"
                }
        }

        t_m_fMoveto:incl = {
                m_fMoveTo: = { Typ="C" Txt="&" Hint="Move to Position"
                        Items = "No"
                             $0D"Walk"
                             $0D"Run"
                             $0D"Instantaneous"
                             $0D"No - Turn to Face"
                        Values ="0"$0D"1"$0D"2"$0D"4"$0D"5"
                }
        }
        aiscripted_sequence:form = {
                t_targetname = !
                t_targetx = !
                m_iszEntity: = { Txt="&"
                        Hint="Target Monster (The entity's targetname or entity-classname,"
                          $0D"like 'monster_barney' to allow any barney do the sequence)"
                }
                m_iszIdle: = { Txt="&" Hint="NOTICE! This specific probably isn't needed for aiscripted_sequence. (Idle Animation)" } //We don't want this for aiscripted_sequence? m_iszIdle(string) : "Idle Animation" : ""
                Models: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Idle..."
                        Form = "qrk_sequences_idle:form"
                        Hint = "List of Idle sequences"
                }
                m_iszPlay: = { Txt="&" Hint="Action Animation" }
                Models: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Play..."
                        Form = "qrk_sequences_play:form"
                        Hint = "List of Play sequences"
                }
                m_flRadius: = { Txt="&" Hint="Search Radius" }
                m_flRepeat: = { Txt="&" Hint="Repeat Rate (in ms)" }
                t_m_fMoveTo = !
                m_iFinishSchedule: = {Typ="C" Txt="&" Hint="AI Schedule when done"
                        Items = "Default AI"
                             $0D"Ambush"
                        Values = "0"$0D"1"
                }
//Obsolete              spawnflags: = { Txt="&" Typ="X1" Cap="WaitTillSeen" }
//Obsolete              spawnflags: = { Txt="&" Typ="X2" Cap="Exit Agitated" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Repeatable"
                        Hint="This lets the sequence be triggered more than once." }
                spawnflags: = { Txt="&" Typ="X8" Cap="Leave Corpse"
                        Hint="If a character dies in a script with this flag set, it's animation is frozen in the"
                          $0D"last position, and a 'corpse' is left. Otherwise, dead characters will fade out." }
		t_angles = !
        }
        scripted_sequence:form = {
                t_targetname = !
                t_targetx = !
                m_iszEntity: = { Txt="&"
                        Hint="Target Monster (The entity's targetname or entity-classname,"
                          $0D"like 'monster_barney' to allow any barney do the sequence)"
                }
                m_iszIdle: = { Txt="&" Hint="Idle Animation" }
                Models: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Idle..."
                        Form = "qrk_sequences_idle:form"
                        Hint = "List of Idle sequences"
                }
                m_iszPlay: = { Txt="&" Hint="Action Animation" }
                Models: = {
                        Typ = "B"
                        Txt = "&"
                        Cap = "Play..."
                        Form = "qrk_sequences_play:form"
                        Hint = "List of Play sequences"
                }
                m_flRadius: = { Txt="&" Hint="Search Radius" }
                m_flRepeat: = { Txt="&" Hint="Repeat Rate ms" }
                t_m_fMoveTo = !
//Obsolete              spawnflags: = { Txt="&" Typ="X1" Cap="WaitTillSeen" }
//Obsolete              spawnflags: = { Txt="&" Typ="X2" Cap="Exit Agitated" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Repeatable"
                        Hint="This lets the sequence be triggered more than once." }
                spawnflags: = { Txt="&" Typ="X8" Cap="Leave Corpse"
                        Hint="If a character dies in a script with this flag set, it's animation is frozen in the"
                          $0D"last position, and a 'corpse' is left. Otherwise, dead characters will fade out." }
                spawnflags: = { Txt="&" Typ="X32" Cap="No Interruptions"
                        Hint="This means that the script will not stop for any reason, even if the player"
                          $0D"shoots the character, until the script completes." }
                spawnflags: = { Txt="&" Typ="X64" Cap="Override AI"
                        Hint="Sometimes a character's AI will keep them from playing a script because the"
                          $0D"character is fighting or something like that." }
                spawnflags: = { Txt="&" Typ="X128" Cap="No Script Movement"
                        Hint="This disables the code that tries to fixup the position of a character at"
                          $0D"the end of a script so the AI can properly take over. Only turn this on"
                          $0D"if the character jumps to a new position after playing the script." }
                t_op4_noresetentity_settings = !
                t_angles = !
        }
        speaker:form = {
                t_targetname = !
                preset: = { Typ="C" Txt="&" Hint="Announcement Presets"
                        Items = "(none)"
                             $0D"C1A0 Announcer"
                             $0D"C1A1 Announcer"
                             $0D"C1A2 Announcer"
                             $0D"C1A3 Announcer"
                             $0D"C1A4 Announcer"
                             $0D"C2A1 Announcer"
                             $0D"C2A2 Announcer"
                             $0D"C2A4 Announcer"
                             $0D"C3A1 Announcer"
                             $0D"C3A2 Announcer"
                                // 8: "C2A3 Announcer"
                                // 10: "C2A5 Announcer"
                        Values = ""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"9"$0D"11"$0D"12"
                }
                message: = { Txt="&" Hint="Sentence Group Name" }
                message: = {
                        Typ = "B"
                        Txt = "(Groups)"
                        Cap = "Push..."
                        form = "qrk_speaker_message:form"
                        Hint = "Lists of sentence-groups from SENTENCES.TXT"
                }
                health: = { Txt="&" Hint="Volume (10 = loudest)" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Start Silent" }
        }
        target_cdaudio:form = {
                t_targetname = !
                health: = { TYp="C" Txt="&" Hint="Track #"
                        Items =
   "Stop"
$0D"Track 1"
$0D"Track 2"
$0D"Track 3"
$0D"Track 4"
$0D"Track 5"
$0D"Track 6"
$0D"Track 7"
$0D"Track 8"
$0D"Track 9"
$0D"Track 10"
$0D"Track 11"
$0D"Track 12"
$0D"Track 13"
$0D"Track 14"
$0D"Track 15"
$0D"Track 16"
$0D"Track 17"
$0D"Track 18"
$0D"Track 19"
$0D"Track 20"
$0D"Track 21"
$0D"Track 22"
$0D"Track 23"
$0D"Track 24"
$0D"Track 25"
$0D"Track 26"
$0D"Track 27"
$0D"Track 28"
$0D"Track 29"
$0D"Track 30"
                        Values = "-1"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"$0D"19"$0D"20"$0D"21"$0D"22"$0D"23"$0D"24"$0D"25"$0D"26"$0D"27"$0D"28"$0D"29"$0D"30"
                }
                radius: = { Txt="&" Hint="Player Radius" }
        }

        game_counter:form = {
                Help="The game_counter counts triggers and fires when it reaches its limit."
                t_targetname = !
                t_targetx = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove on fire" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Reset on fire" }
                t_gamemaster = !
                frags: = { Txt="&" Hint="Initial value" }
                health: = { Txt="&" Hint="Limit value (Activates its targets when this value is hit)" }
        }
        game_counter_set:form = {
                Help="Sets the limit value of a game_counter"
                t_targetname = !
                t_target = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove on fire" }
                t_gamemaster = !
                frags: = { Txt="&" Hint="New limit value for the game_counter entity" }
        }
        game_end:form = {
                Help="The game_end entity ends the game when it is triggered"
                t_targetname = !
                t_gamemaster = !
        }
        game_player_equip:form = {
                Help="The game_player_equip allows you to set the default weapons/ammo/items that a player gets when he"
                  $0D"starts the level. If you have any of these entities in your level, the player will not get any weapons other"
                  $0D"than what you assign. If you only create a game_player_equip for one team (using a team master), the"
                  $0D"other team will start with HEV suits only."
                t_targetname = !
                master: = { Txt="&" Hint="Points to a game_team_master entity" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Use only" }
                weapon_357: = { Txt="&" Hint="Amount of item" }
                weapon_9mmAR: = { Txt="&" Hint="Amount of item" }
                weapon_9mmhandgun: = { Txt="&" Hint="Amount of item" }
                weapon_crossbow: = { Txt="&" Hint="Amount of item" }
                weapon_crowbar: = { Txt="&" Hint="Amount of item" }
                weapon_egon: = { Txt="&" Hint="Amount of item" }
                weapon_gauss: = { Txt="&" Hint="Amount of item" }
                weapon_handgrenade: = { Txt="&" Hint="Amount of item" }
                weapon_hornetgun: = { Txt="&" Hint="Amount of item" }
                weapon_rpg: = { Txt="&" Hint="Amount of item" }
                weapon_satchel: = { Txt="&" Hint="Amount of item" }
                weapon_shotgun: = { Txt="&" Hint="Amount of item" }
                weapon_snark: = { Txt="&" Hint="Amount of item" }
                weapon_tripmine: = { Txt="&" Hint="Amount of item" }
                ammo_357: = { Txt="&" Hint="Amount of item" }
                ammo_9mmAR: = { Txt="&" Hint="Amount of item" }
                ammo_9mmbox: = { Txt="&" Hint="Amount of item" }
                ammo_9mmclip: = { Txt="&" Hint="Amount of item" }
                ammo_ARgrenades: = { Txt="&" Hint="Amount of item" }
                ammo_buckshot: = { Txt="&" Hint="Amount of item" }
                ammo_crossbow: = { Txt="&" Hint="Amount of item" }
                ammo_gaussclip: = { Txt="&" Hint="Amount of item" }
                ammo_rpgclip: = { Txt="&" Hint="Amount of item" }
                item_airtank: = { Txt="&" Hint="Amount of item" }
                item_antidote: = { Txt="&" Hint="Amount of item" }
                item_battery: = { Txt="&" Hint="Amount of item" }
                item_healthkit: = { Txt="&" Hint="Amount of item" }
                item_longjump: = { Txt="&" Hint="Amount of item" }
                item_security: = { Txt="&" Hint="Amount of item" }
        }
        game_player_hurt:form = {
                Help="This entity is just like a trigger_hurt in most ways. It can be used to kill, damage, or heal players based"
                  $0D"on actions they perform (rather than their location in space like trigger_hurt). A simple example is to"
                  $0D"attach one of these to a button, and master it with a game_team_master. Anyone from the wrong team"
                  $0D"who presses the button, gets fried."
                t_targetname = !
                dmg: = { Txt="&" Hint="Damage to apply" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove on fire" }
                t_gamemaster = !
        }
        game_player_team:form = {
                t_targetname = !
                target: = { Txt="&" Hint="Must point to a game_team_master entity to use" }
                t_gamemaster = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove on fire" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Kill player" }
                spawnflags: = { Txt="&" Typ="X4" Cap="Gib player" }
        }
        game_score:form = {
                t_targetname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Allow negative" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Team points" }
                points: = { Txt="&" Hint="Points to add (+/-)" }
                t_gamemaster = !
        }
        game_team_master:form = {
                Help="The game_team_master acts as a team-based master or relay. It can replace the multisource master"
                  $0D"for any entity. It only allows the entity to activate when the activator's team matches the team index"
                  $0D"value."
                t_targetname = !
                t_targetx = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove on fire" }
                triggerstate: = { Typ="C"
                        items = "Off"
                             $0D"On"
                             $0D"Toggle"
                        values = "0"$0D"1"$0D"2"
                }
                teamindex: = { Txt="&" Hint="Team index (-1 = no team)" }
                t_gamemaster = !
        }
        game_team_set:form = {
                t_targetname = !
                t_targetx = !
                target: = { Txt="&" Hint="Points to a game_team_master entity" }
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove on fire" }
                t_gamemaster = !
        }
        game_text:form = {
                t_targetname = !
                t_target = !
                spawnflags: = { Txt="&" Typ="X1" Cap="To all players" }
                message: = { Txt="&" Hint="Message text" }
                x: = { Txt="&" Hint="X position (0.0 = left, 1.0 = right, -1 = center)" }
                y: = { Txt="&" Hint="Y position (0.0 = top, 1.0 = bottom, -1 = center)" }
                effect: = { Typ="C"
                        items = "Fade In/Out"
                             $0D"Credits"
                             $0D"Scan Out"
                        values = "0"$0D"1"$0D"2"
                }
                color: = { Txt="&" Hint="R G B" }
                color2: = { Txt="&" Hint="R G B" }
                fadein: = { Txt="&" Hint="Fade in time" }
                fadeout: = { Txt="&" Hint="Fade out time" }
                holdtime: = { Txt="&" Hint="Hold time" }
                fxtime: = { Txt="&" Hint="Scan time, if Effect = Scan Out" }
                channel: = { Typ="C" Hint="Text Channel"
                        items = "Channel 1"
                             $0D"Channel 2"
                             $0D"Channel 3"
                             $0D"Channel 4"
                        values = "1"$0D"2"$0D"3"$0D"4"
                }
                t_gamemaster = !
        }
        game_zone_player:form = {
                Help="The game_zone_player entity is used to fire targets based on player's location."
                t_targetname = !
                intarget: = { Txt="&" Hint="Targetname of an entity, that should be triggered for players thats inside the zone/brush" }
                outtarget: = { Txt="&" Hint="Targetname of an entity, that should be triggered for players thats outside the zone/brush" }
                incount: = { Txt="&" Hint="Points to a counter, which should be triggered for players thats inside the zone/brush" }
                outcount: = { Txt="&" Hint="Points to a counter, which should be triggered for players thats outside the zone/brush" }
                t_gamemaster = !
        }

//
// Team Fortress Classic
//
        info_tfdetect:form = {
                t_tfc_HTML = !
                impulse: = { Txt="Team scores" Typ="X128" Cap="Yes" Hint="If NO, its individual frags" }
                impulse: = { Txt="Autojoin team" Typ="X64" Cap="Yes" Hint="" }
                impulse: = { Txt="Class persistance" Typ="X2" Cap="Yes" Hint="" }
                impulse: = { Txt="Multiskin" Typ="X1" Cap="Yes" Hint="" }
                impulse: = { Txt="Cheat checking" Typ="X4" Cap="Yes" Hint="" }
                impulse: = { Txt="Respawn delay" Typ="X16" Cap="5,10,20 sec." Hint="_ _ = No respawn delay"$0D"X _ = 5 seconds"$0D"_ X = 10 seconds"$0D"X X = 20 seconds" }
                impulse: = { Txt="(Respawn delay)" Typ="X32" Cap="5,10,20 sec." Hint="_ _ = No respawn delay"$0D"X _ = 5 seconds"$0D"_ X = 10 seconds"$0D"X X = 20 seconds" }
//Not Implemented?      hook_out: = { Txt="Disallow hook" Cap="Yes, no hook" Typ="X1" Hint="" }
                number_of_teams: = { txt="Number of teams" Hint="Specifies for the info_tf_teamcheck entity,"$0D"how many teams this map has." }
                form1: = {
                        Typ = "B"
                        Txt = "Team 1"
                        Cap = "Push..."
                        form = "f_team1:form"
                        Hint = ""
                }
                form2: = {
                        Typ = "B"
                        Txt = "Team 2"
                        Cap = "Push..."
                        form = "f_team2:form"
                        Hint = ""
                }
                form3: = {
                        Typ = "B"
                        Txt = "Team 3"
                        Cap = "Push..."
                        form = "f_team3:form"
                        Hint = ""
                }
                form4: = {
                        Typ = "B"
                        Txt = "Team 4"
                        Cap = "Push..."
                        form = "f_team4:form"
                        Hint = ""
                }
                form5: = {
                        Typ = "B"
                        Txt = "Flaginfo Txts"
                        Cap = "Push..."
                        form = "f_status:form"
                        Hint = ""
                }
                team_broadcast: = { Txt="Choose team String" Hint="" }
                non_team_broadcast: = { Txt="Map help String" Hint="" }
                broadcast: = { Txt="Version String" Hint="E.q. 'TeamFortressClassic v1.0'"}
                message: = { Txt="Localcmds String" Hint="Commands that should be executed on the server, when stating the map" }
        }
        info_player_teamspawn:form = {
                t_tfc_HTML = !
                t_player = !
                t_netname = !
                t_team_no = !
                form1: = {
                        Typ = "B"
                        Txt = "Teamspawn"
                        Cap = "Push..."
                        form = "f_info_player_teamspawn:form"
                        Hint = ""
                }
                form2: = {
                        Typ = "B"
                        Txt = "Activation Criteria"
                        Cap = "Push..."
                        form = "f_teamspawn_activation_criteria:form"
                        Hint = ""
                }
                t_initial_state = !
                t_skill_level = !
                target: = { Txt="&" Hint="Trigger Targetname(s)" }
                killtarget: = { Txt="&" Hint="Kill Targetname(s)" }
        }
        info_tfgoal:form = {
                t_tfc_HTML = !
                bbox = '-8 -8 -8 8 8 8'
                t_netname = !
                t_tfc_mdl_skin = !
                noise: = { Txt="WAV-file" Hint="" }
                t_targetname = !
                t_targetx = !
                t_goalno_groupno = !
                goal_activation: = { Typ="X2048" Cap="Yes, when spawned" Txt="Drop to ground" }
                form1: = {
                        Typ = "B"
                        Txt = "Activation Criteria"
                        Cap = "Push..."
                        form = "f_info_activation_criteria:form"
                        Hint = ""
                }
                form2: = {
                        Typ = "B"
                        Txt = "Messages"
                        Cap = "Push..."
                        form = "f_infogoal_messages:form"
                        Hint = ""
                }
                form3: = {
                        Typ = "B"
                        Txt = "Item messages"
                        Cap = "Push..."
                        form = "f_status:form"
                        Hint = ""
                }
                form4: = {
                        Typ = "B"
                        Txt = "Activation Effects"
                        Cap = "Push..."
                        form = "f_info_activation_effects:form"
                        Hint = ""
                }
                form5: = {
                        Typ = "B"
                        Txt = "Activation Result"
                        Cap = "Push..."
                        form = "f_info_activation_result:form"
                        Hint = ""
                }
                deathtype: = { Txt="DeathMsg if Activation Kills" Hint="" }
                form6: = {
                        Typ = "B"
                        Txt = "Ammo/Armor/Health"
                        Cap = "Push..."
                        form = "f_ammo_armor_health_powerups:form"
                        Hint = ""
                }
                t_initial_state = !
                t_skill_level = !
                t_bbox = !
        }
        i_t_g:form = {
                t_tfc_HTML = !
                t_netname = !
                noise: = { Txt="WAV-file" Hint="" }
                t_targetname = !
                t_targetx = !
                t_goalno_groupno = !
                form1: = {
                        Typ = "B"
                        Txt = "Activation Criteria"
                        Cap = "Push..."
                        form = "f_info_activation_criteria:form"
                        Hint = ""
                }
                form2: = {
                        Typ = "B"
                        Txt = "Messages"
                        Cap = "Push..."
                        form = "f_infogoal_messages:form"
                        Hint = ""
                }
                form3: = {
                        Typ = "B"
                        Txt = "Item messages"
                        Cap = "Push..."
                        form = "f_status:form"
                        Hint = ""
                }
                form4: = {
                        Typ = "B"
                        Txt = "Activation Effects"
                        Cap = "Push..."
                        form = "f_info_activation_effects:form"
                        Hint = ""
                }
                form5: = {
                        Typ = "B"
                        Txt = "Activation Result"
                        Cap = "Push..."
                        form = "f_info_activation_result:form"
                        Hint = ""
                }
                deathtype: = { Txt="DeathMsg if Activation Kills" Hint="" }
                form6: = {
                        Typ = "B"
                        Txt = "Ammo/Armor/Health"
                        Cap = "Push..."
                        form = "f_ammo_armor_health_powerups:form"
                        Hint = ""
                }
                t_initial_state = !
                t_skill_level = !
        }
        item_tfgoal:form = {
                t_tfc_HTML = !
                bbox = '-8 -8 -8 8 8 8'
                t_netname = !
                t_tfc_mdl_skin = !
                noise: = { Txt="WAV-file" Hint="" }
                t_targetname = !
                t_targetx = !
                t_goalno_groupno = !
                goal_activation: = { Typ="X2048" Cap="Yes, when spawned" Txt="Drop to ground" }
                goal_activation: = { Typ="X4096" Cap="Yes, by dying player" Txt="Can be dropped" }
                goal_activation: = { Typ="X8192" Cap="Yes, when not carried" Txt="Is solid" }
                form1: = {
                        Typ = "B"
                        Txt = "Activation Criteria"
                        Cap = "Push..."
                        form = "f_item_activation_criteria:form"
                        Hint = ""
                }
                form2: = {
                        Typ = "B"
                        Txt = "Messages"
                        Cap = "Push..."
                        form = "f_itemgoal_messages:form"
                        Hint = ""
                }
                form3: = {
                        Typ = "B"
                        Txt = "Item messages"
                        Cap = "Push..."
                        form = "f_status:form"
                        Hint = ""
                }
                form4: = {
                        Typ = "B"
                        Txt = "Activation Effects"
                        Cap = "Push..."
                        form = "f_item_activation_effects:form"
                        Hint = ""
                }
                form5: = {
                        Typ = "B"
                        Txt = "Activation Result"
                        Cap = "Push..."
                        form = "f_item_activation_result:form"
                        Hint = ""
                }
                deathtype: = { Txt="DeathMsg if Activation Kills" Hint="" }
                form6: = {
                        Typ = "B"
                        Txt = "Ammo/Armor/Health"
                        Cap = "Push..."
                        form = "f_ammo_armor_health_powerups:form"
                        Hint = ""
                }
                t_initial_state = !
                t_skill_level = !
                t_bbox = !
        }
        info_tfgoal_timer:form = {
                t_tfc_HTML = !
                bbox = '-8 -8 -8 8 8 8'
                t_netname = !
//              mdl: = { Txt="MDL-file" Hint="" }
                noise: = { Txt="WAV-file" Hint="" }
                t_targetname = !
                t_targetx = !
                t_goalno_groupno = !
                search_time: = { Txt="Activation interval" Hint="" }
                goal_activation: = { Typ="X2048" Cap="Yes, when spawned" Txt="Drop to ground" }
                form2: = {
                        Typ = "B"
                        Txt = "Messages"
                        Cap = "Push..."
                        form = "f_infogoal_messages:form"
                        Hint = ""
                }
                form3: = {
                        Typ = "B"
                        Txt = "Flaginfo Txts"
                        Cap = "Push..."
                        form = "f_status:form"
                        Hint = ""
                }
                form4: = {
                        Typ = "B"
                        Txt = "Activation Effects"
                        Cap = "Push..."
                        form = "f_timer_activation_effects:form"
                        Hint = ""
                }
                form5: = {
                        Typ = "B"
                        Txt = "Activation Result"
                        Cap = "Push..."
                        form = "f_timer_activation_result:form"
                        Hint = ""
                }
                deathtype: = { Txt="DeathMsg if Activation Kills" Hint="" }
                form6: = {
                        Typ = "B"
                        Txt = "Ammo/Armor/Health"
                        Cap = "Push..."
                        form = "f_ammo_armor_health_powerups:form"
                        Hint = ""
                }
                t_initial_state = !
                t_skill_level = !
                t_bbox = !
        }
        item_armor1:form = {
                t_tfc_HTML = !
                t_armor = !
        }
        item_armor2:form = {
                t_tfc_HTML = !
                t_armor = !
        }
        item_armor3:form = {
                t_tfc_HTML = !
                t_armor = !
        }
        func_nogrenades:form = {
                t_tfc_HTML = !
                t_targetname = !
        }
        info_tf_teamcheck:form = {
                t_tfc_HTML = !
                t_targetname = !
                t_team_no = !
        }
        info_tf_teamset:form = {
                t_tfc_HTML = !
                t_targetname = !
                target: = { hint="Points to a info_tf_teamcheck, for which its team-no should change" }
                t_team_no = !
        }
        info_areadef:form = {
                t_tfc_HTML = !
                areaname: = { txt="Name of area" }
                mins: = { txt="minimum vertex (-1 -1 -1)" }
                maxs: = { txt="maximum vertex (+1 +1 +1)" }
        }

//
// Blue Shift
//

        env_warpball:form = {
            bbox = '-32 -32 -32 32 32 32'
            t_targetname = !
            t_target = !
            spawnflags: = { txt="&" typ="X1" cap="Remove On fire" hint="" }
            spawnflags: = { txt="&" typ="X2" cap="Kill Center" hint="" }
            radius: = { txt="&" hint="Beam Radius" }
            warp_target: = { txt="&" hint="Warp Target" }
        }
        item_helmet:form = {
            bbox = '-16 -16 0 16 16 36'
            t_weapon = !
            t_targetx = !
            t_rendermode = !
            sequence: = { txt="&" typ="C" hint="Orientation"
                items ="Vertical"$0D "Horizontal"$0D "Horizontal (Upside Down)"
                values=       "0"$0D          "1"$0D                        "2"
            }
        }
        item_armorvest:form = {
            bbox = '-16 -16 0 16 16 36'
            t_weapon = !
            t_targetx = !
            t_rendermode = !
            sequence: = { txt="&" typ="C" hint="Orientation"
                items ="Upright"$0D "Laying On Back"$0D "Laying On Front"$0D "Upright Leaning"
                values=      "0"$0D              "1"$0D               "2"$0D               "3"
            }
        }
        monster_rosenberg:form = {
            bbox = '-16 -16 0 16 16 72'
            t_monster = !
            t_talkmonster = !
            body: = { txt="&" typ="C" hint="Body"
                items ="Random"$0D "Glasses"$0D "Einstein"$0D "Luther"$0D "Dr. Rosenberg"
                values=    "-1"$0D       "0"$0D        "1"$0D      "2"$0D             "3"
            }
        }
        trigger_playerfreeze:form = {
            t_targetname = !
            t_targetx = !
        }

//
// Deathmatch Classic
//
        item_cells:form =
        {
          t_ammo = !
        }
        item_rockets:form =
        {
          t_ammo = !
        }
        item_shells:form =
        {
          t_ammo = !
        }
        item_spikes:form =
        {
          t_ammo = !
        }
        item_health:form =
        {
          bbox = '0 0 0 32 32 32'
          t_target = !
          spawnflags: =
          {
            txt = "&"
            typ = "X1"
            cap = "Rotten"
          }
          spawnflags: =
          {
            txt = "&"
            typ = "X2"
            cap = "Megahealth"
          }
        }
        item_artifact_envirosuit:form =
        {
          t_target = !
        }
        item_artifact_super_damage:form =
        {
          t_target = !
        }
        item_artifact_invulnerability:form =
        {
          t_target = !
        }
        item_artifact_invisibility:form =
        {
          t_target = !
        }
        item_armorInv:form =
        {
          bbox = '-16 -16 -24 16 16 32'
          t_target = !
        }
        item_armor2:form =
        {
          bbox = '-16 -16 -24 16 16 32'
          t_target = !
        }
        item_armor1:form =
        {
          bbox = '-16 -16 -24 16 16 32'
          t_target = !
        }
        weapon_supershotgun:form =
        {
          t_weapon = !
        }
        weapon_nailgun:form =
        {
          t_weapon = !
        }
        weapon_supernailgun:form =
        {
          t_weapon = !
        }
        weapon_grenadelauncher:form =
        {
          t_weapon = !
        }
        weapon_rocketlauncher:form =
        {
          t_weapon = !
        }
        weapon_lightning:form =
        {
          t_weapon = !
        }

//
// Half-Life Rally
//
        info_checkpoint:form =
        {
          wait: =
          {
            txt = "&"
            hint = "Number (0=Finish;1=Start/Finish)"
          }
        }

//
// Action Half-Life
//
        t_ahl_weapon:incl = {
                bbox = '-16 -16 0 16 16 32'
                t_targetname = !
                t_targetx = !
        }
        info_location:form =
        {
          bbox = '-4 -4 -4 4 4 4'
          t_targetname = !
          t_rendermode = !
          message: = { txt = "&" hint = "message" }
        }
        weapon_beretta:form        = { t_ahl_weapon=! }
        weapon_akimbob:form        = { t_ahl_weapon=! }
        weapon_anaconda:form       = { t_ahl_weapon=! }
        weapon_colt:form           = { t_ahl_weapon=! }
        weapon_akimcolt:form       = { t_ahl_weapon=! }
        weapon_de50:form           = { t_ahl_weapon=! }
        weapon_saa:form            = { t_ahl_weapon=! }
        weapon_akimsaa:form        = { t_ahl_weapon=! }
        weapon_knife:form          = { t_ahl_weapon=! }
        weapon_50cal:form          = { t_ahl_weapon=! }
        weapon_frag:form           = { t_ahl_weapon=! }
        weapon_handcannon:form     = { t_ahl_weapon=! }
        weapon_hkmp5:form          = { t_ahl_weapon=! }
        weapon_ithaca:form         = { t_ahl_weapon=! }
        weapon_m4:form             = { t_ahl_weapon=! }
        weapon_msg90:form          = { t_ahl_weapon=! }
        ammo_pistol:form           = { t_ahl_weapon=! }
        ammo_colt:form             = { t_ahl_weapon=! }
        ammo_de50:form             = { t_ahl_weapon=! }
        ammo_50cal:form            = { t_ahl_weapon=! }
        ammo_buckshot:form         = { t_ahl_weapon=! }
        ammo_m4:form               = { t_ahl_weapon=! }
        ammo_mp5clip:form          = { t_ahl_weapon=! }
        ammo_msg90:form            = { t_ahl_weapon=! }
        item_bandolier:form     = { bbox = '-16 -16 0 16 16 36' }
        item_flashlight:form    = { bbox = '-16 -16 0 16 16 36' }
        item_item_holster:form  = { bbox = '-16 -16 0 16 16 36' }
        item_laser:form         = { bbox = '-16 -16 0 16 16 36' }
        item_nightvision:form   = { bbox = '-16 -16 0 16 16 36' }
        item_silencer:form      = { bbox = '-16 -16 0 16 16 36' }
        item_stealth:form       = { bbox = '-16 -16 0 16 16 36' }
        item_vest:form          = { bbox = '-16 -16 0 16 16 36' }

//
// Counter-Strike
//
        t_cs_html:incl = {
                HTML = "http://www.counter-strike.net"
        }
        hostage_entity:form = {
                t_cs_html = !
                t_player = !
                model: = { txt="&" Hint="" }
                gravity: = { txt="&" Hint="" }
        }
        info_hostage_rescue:form = {
                t_cs_html = !
        }
        func_hostage_rescue:form = {
                t_cs_html = !
        }
        info_bomb_target:form = {
                t_cs_html = !
        }
        func_bomb_target:form = {
                t_cs_html = !
                t_target = !
        }
        func_buyzone:form = {
                team: = { Typ="C" Hint=""
                        items = "All teams"
                             $0D"Terrorist"
                             $0D"Counter-terrorist"
                        values ="0"$0D"1"$0D"2"
                }
        }
        info_vip_start:form = {
                t_player = !
        }
        armoury_entity:form = {
                bbox = '-16 -16 0 16 16 16'
                item: = { typ="C" hint="Item"
                        items=
   "weapon_mp5"
$0D"weapon_tmp"
$0D"weapon_p90"
$0D"weapon_mac10"
$0D"weapon_ak47"
$0D"weapon_sg552"
$0D"weapon_m4a1"
$0D"weapon_aug"
$0D"weapon_scout"
$0D"weapon_g3sg1"
$0D"weapon_awp"
$0D"weapon_m3"
$0D"weapon_xm1014"
$0D"weapon_m249"
$0D"weapon_flashbang"
$0D"weapon_hegrenade"
$0D"item_kevlar"
$0D"item_assaultsuit"
$0D"weapon_smokegrenade"
                        values= "0"$0D "1"$0D "2"$0D "3"$0D "4"$0D "5"$0D "6"$0D "7"$0D "8"$0D "9"
                            $0D"10"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"$0D"18"
                }
                count: = { txt="&" Hint="Count" }
        }
        info_map_parameters:form = {
                buying: = { typ="C" hint="Weapon_Buying"
                        items="Both teams can buy guns"
                           $0D"Only CT's can buy guns"
                           $0D"Only T's can buy guns"
                           $0D"Neither CT's nor T's can buy guns"
                        values="0"$0D"1"$0D"2"$0D"3"
                }
                bombradius: = { txt="&" hint="Bomb Radius" }
        }
        func_vehiclecontrols:form = {
                t_target = !
        }
	func_vehicle:form = {
                spawnflags: = { Txt="&" Typ="X1" Cap="No Pitch (X-rot)" }
                spawnflags: = { Txt="&" Typ="X2" Cap="No User Control" }
                spawnflags: = { Txt="&" Typ="X8" Cap="Passable" }
		sounds: = { Typ="C" Txt="&" Hint="Sound"
                        Items = "(none)"
                             $0D"Car 1"
                             $0D"Car 2"
                             $0D"Truck 1"
                             $0D"Truck 2"
                             $0D"Boat 1"
                             $0D"Boat 2"
			Values = ""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"
		}
		length: = { Txt="&" Hint="Length of the vehicle" }
		width: = { Txt="&" Hint="Width of the vehicle" }
		height: = { Txt="&" Hint="Height above track" }
		startspeed: = { Txt="&" Hint="Initial speed" }
		acceleration: = { Txt="&" Hint="Acceleration (1-10)" }
		speed: = { Txt="&" Hint="Speed (units per second)" }
		dmg: = { Txt="&" Hint="Damage on crush" }
		volume: = { Txt="&" Hint="Volume (10 = loudest)" }
		bank: = { Txt="&" Hint="Bank angle on turns" }
		t__minlight = !
		t_rendermode = !
                t_angles = !
	}

//
// Jailbreak
//
        trigger_jail_release:form = {
                t_targetname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="No default sounds" }
        }
        trigger_jail:form = {
                spawnflags: = { Txt="&" Typ="X1" Cap="In jail" }
        }
        trigger_armory:form = {
                spawnflags: = { Txt="&" Typ="X1" Cap="In armory" }
        }
        jail_team_master:form = {
                t_targetname = !
                t_targetx = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Remove On fire" }
                spawnflags: = { Txt="&" Typ="X1024" Cap="Is free" }
                spawnflags: = { Txt="&" Typ="X2048" Cap="In jail" }
                spawnflags: = { Txt="&" Typ="X4096" Cap="On deathrow" }
                spawnflags: = { Txt="&" Typ="X8192" Cap="In armory" }
                spawnflags: = { Txt="&" Typ="X16384" Cap="Not in armory" }

                triggerstate: = { Typ="C" Txt="&" Hint="Trigger State"
                        Items = "On"
                             $0D"Off"
                             $0D"Toggle"
                        Values = "1"$0D"0"$0D"2"
                }
                teamindex: = { Txt="&" Hint="Team Index (-1 = no team)" }
        }
        jail_execute:form = {
                spawnflags: = { Txt="&" Typ="X1" Cap="Leave Body" }
                spawnflags: = { Txt="&" Typ="X2" Cap="No default sound" }
                executedelay: = { Txt="&" Hint="Execution Delay" }
                master: = { Txt="&" Hint="(Team) Master" }
        }
        info_player_jail:form = {
                t_player = !
                master: = { Txt="&" Hint="(Team) Master" }
        }

//
// Science & Industry
//
        info_administrator:form = {
                t_si_team = !
        }
        info_scientist_start:form = {
                t_si_team = !
                model: = { Hint="Model" }
                t_player = !
        }
        info_sidetect:form = {
            t_target = !
            t_angles = !
            mclscis: = { txt="&" hint="Number MCL Scientists" }
            afdscis: = { txt="&" hint="Number AFD Scientists" }
        }

    item_resource:form =
    {
      bbox = '-16 -16 0 16 16 36'
      t_weapon = !
      t_target = !
      spawnflags: =
      {
        txt = "&"
        typ = "X1"
        cap = "Only Trigger"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X2"
        cap = "Touch"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X4"
        cap = "Pressure"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X8"
        cap = "Don't respawn"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X16"
        cap = "Drop Resource"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X32"
        cap = "Stolen Resource"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X64"
        cap = "Random Body"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X128"
        cap = "Scaled Body"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X256"
        cap = "Random Skins"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X512"
        cap = "Radius Damage"
      }
      spawnflags: =
      {
        txt = "&"
        typ = "X1024"
        cap = "Shell Glow Effect"
      }
      netname: =
      {
        txt = "&"
        hint = "Description"
      }
      message: =
      {
        txt = "&"
        hint = "Pickup Message"
      }
      icon: =
      {
        txt = "&"
        hint = "Carry Icon"
        typ = "C"
        items = "Scientist"$0D"Generic"$0D"Cash"$0D"Crystal"$0D"Top Secret"$0D
         "CD"$0D"Wrench"$0D"Briefcase"$0D"Binary"$0D"Wine Bottle"$0D"Painting"
        values = "1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D
         "11"
      }
      model: =
      {
        txt = "&"
        hint = "World Model"
      }
      noise: =
      {
        txt = "&"
        hint = "Carry Model"
      }
      noise1: =
      {
        txt = "&"
        hint = "View Model"
      }
      body: =
      {
        txt = "&"
        hint = "Body/MaxBodies"
      }
      skin: =
      {
        txt = "&"
        hint = "Skin/MaxSkins"
      }
      team: =
      {
        txt = "&"
        hint = "Team"
        typ = "C"
        items = "Unaligned (No Team)"$0D"MCL (Blue)"$0D"AFD (Green)"
        values = "-1"$0D"0"$0D"1"
      }
      cash: =
      {
        txt = "&"
        hint = "Cash Stored"
        typ = "C"
        items = "No cash"$0D"Minor ($1,000)"$0D"Medium ($5,000)"$0D"Good ($10,"
         "000)"$0D"Major ($25,000)"
        values = "0"$0D"1000"$0D"5000"$0D"10000"$0D"25000"
      }
      research: =
      {
        txt = "&"
        hint = "Research Stored"
        typ = "C"
        items = "No research"$0D"Small (30 sec of research)"$0D"Medium (1 min "
         "of research)"$0D"Large (2 min of research)"$0D"Major (3 min of resea"
         "rch)"
        values = "0"$0D"50"$0D"100"$0D"200"$0D"300"
      }
      spawndelay: =
      {
        txt = "&"
        hint = "Delay Spawn Time"
        typ = "C"
        items = "Don't delay"$0D"Short (1 minute)"$0D"Medium (2 minutes)"$0D"L"
         "ong (5 minutes)"
        values = "0"$0D"60"$0D"120"$0D"300"
      }
      replacetime: =
      {
        txt = "&"
        hint = "Replacement Time"
        typ = "C"
        items = "Instant"$0D"Very Quick (15 seconds)"$0D"Short (30 seconds)"$0D
         "Medium (1 minutes)"$0D"Long (2 minutes)"$0D"Very Long (5 minutes)"
        values = "0"$0D"15"$0D"30"$0D"60"$0D"120"$0D"300"
      }
      timelimit: =
      {
        txt = "&"
        hint = "Delivery Time Limit"
        typ = "C"
        items = "No time limit"$0D"Very Quick (15 seconds)"$0D"Short (30 secon"
         "ds)"$0D"Medium (1 minutes)"$0D"Long (2 minutes)"
        values = "0"$0D"15"$0D"30"$0D"60"$0D"120"
      }
      timeeffect: =
      {
        txt = "&"
        hint = "Effect of missed Time limit"
        typ = "C"
        items = "Cancels effect"$0D"25% effect"$0D"50% effect"$0D"75% effect"$0D
         "100% effect (no change)"
        values = "0"$0D"25"$0D"50"$0D"75"$0D"100"
      }
      importance: =
      {
        txt = "&"
        hint = "Importance"
        typ = "C"
        items = "Insignificant"$0D"Minor"$0D"Medium"$0D"Major"$0D"Critical"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"
      }
      dmg: =
      {
        txt = "&"
        hint = "End-Timer Damage"
      }
      dmgperiodic: =
      {
        txt = "&"
        hint = "Periodic Carry Damage"
      }
      damagetype: =
      {
        txt = "&"
        hint = "Damage Type"
        typ = "C"
        items = "GENERIC"$0D"CRUSH"$0D"BULLET"$0D"SLASH"$0D"BURN"$0D"FREEZE"$0D
         "FALL"$0D"BLAST"$0D"CLUB"$0D"SHOCK"$0D"SONIC"$0D"ENERGYBEAM"$0D"DROWN"
         $0D"PARALYSE"$0D"NERVEGAS"$0D"POISON"$0D"RADIATION"$0D"DROWNRECOVER"$0D
         "CHEMICAL"$0D"SLOWBURN"$0D"SLOWFREEZE"
        values = "0"$0D"1"$0D"2"$0D"4"$0D"8"$0D"16"$0D"32"$0D"64"$0D"128"$0D"2"
         "56"$0D"512"$0D"1024"$0D"16384"$0D"32768"$0D"65536"$0D"131072"$0D"262"
         "144"$0D"524288"$0D"1048576"$0D"2097152"$0D"4194304"
      }
      carryspeed: =
      {
        txt = "&"
        hint = "Carry Speed"
        typ = "C"
        items = "100% (normal)"$0D"90%"$0D"80%"$0D"70% (scientist carrying spe"
         "ed)"$0D"60%"
        values = "100"$0D"90"$0D"80"$0D"70"$0D"60"
      }
    }

        weapon_briefcase:form      = { t_weapon = ! }
        weapon_colt:form           = { t_weapon = ! }
        weapon_357:form            = { t_weapon = ! }
        weapon_shotgun:form        = { t_weapon = ! }
        weapon_rpg:form            = { t_weapon = ! }
        weapon_gauss:form          = { t_weapon = ! }
        weapon_crossbow:form       = { t_weapon = ! }
        weapon_tripmine:form       = { t_weapon = ! }
        weapon_satchel:form        = { t_weapon = ! }
        weapon_handgrenade:form    = { t_weapon = ! }
        weapon_transistor:form     = { t_weapon = ! }
        weapon_vomit:form          = { t_weapon = ! }
        weapon_mindray:form        = { t_weapon = ! }
        weapon_tommygun:form       = { t_weapon = ! }
        weapon_snUZI:form          = { t_weapon = ! }
        weapon_rocketpistol:form   = { t_weapon = ! }
        weapon_fleshgrenade:form   = { t_weapon = ! }
        weapon_grapple:form        = { t_weapon = ! }
        weapon_cloak:form          = { t_weapon = ! }
        weapon_generic:form        = { t_weapon = ! }
        weapon_experimental:form   = { t_weapon = ! }

        ammo_snUZI:form                 = { t_ammo = ! }
        ammo_rocketpistol:form          = { t_ammo = ! }

        func_tech_breakable:form = {
            netname: = { txt="&" hint="Description" }
            spawnflags: = { txt="&" typ="X1" cap="Only Trigger" hint="" }
            spawnflags: = { txt="&" typ="X2" cap="Touch" hint="" }
            spawnflags: = { txt="&" typ="X4" cap="Pressure" hint="" }
            spawnflags: = { txt="&" typ="X8" cap="Don't Respawn" hint="" }
            spawnflags: = { txt="&" typ="X256" cap="Instant Crowbar" hint="" }
            message: = { txt="&" hint="Destroy Message" }
            t_si_team = !
            cost: = { txt="&" typ="C" hint="Replacement Cost"
                items ="No replacement cost"$0D "Cheap ($1,000)"$0D "Medium ($5,000)"$0D "Costly ($10,000)"$0D "Expensive ($25,000)"$0D "Critical ($100,000)"
                values=                  "0"$0D           "1000"$0D            "5000"$0D            "10000"$0D               "25000"$0D              "100000"
            }
            replacetime: = { txt="&" typ="C" hint="Replacement Time"
                items ="Very Quick (30 seconds)"$0D "Short (1 minute)"$0D "Medium (2 minutes)"$0D "Long (5 minutes)"
                values=                     "30"$0D               "60"$0D                "120"$0D              "300"
            }
            addcash: = { txt="&" typ="C" hint="Contributed Cash Production"
                items ="No cash production"$0D "$5/second"$0D "$10/second"$0D "$15/second"$0D "$30/second"$0D "$60/second"
                values=                 "0"$0D         "5"$0D         "10"$0D         "15"$0D         "30"$0D         "60"
            }
            addresearch: = { txt="&" typ="C" hint="Contributed Research"
                items ="No research"$0D "Fourth of a scientist"$0D "Half a scientist"$0D "One scientist"$0D "Two scientists"
                values=          "0"$0D                    "25"$0D               "50"$0D           "100"$0D            "200"
            }
            lostresearch: = { txt="&" typ="C" hint="Research Stored"
                items ="No research stored"$0D "10%"$0D "25%"$0D "50%"$0D "75%"$0D "100%"
                values=                 "0"$0D  "10"$0D  "25"$0D  "50"$0D  "75"$0D  "100"
            }
            importance: = { txt="&" typ="C" hint="Importance"
                items ="Insignificant"$0D "Minor"$0D "Medium"$0D "Major"$0D "Critical"
                values=            "0"$0D     "1"$0D      "2"$0D     "3"$0D        "4"
            }
            techtype: = { txt="&" typ="C" hint="Technology Type"
                items ="Generic"$0D "Computer"$0D "Cloning"$0D "Replicators"$0D "Implant Machinery"$0D "Communications"$0D "Coffee/Candy Machine"
                values=      "0"$0D        "1"$0D       "2"$0D           "3"$0D                 "4"$0D              "5"$0D                    "6"
            }
            t_breakable = !
            t_rendermode = !
            t__minlight = !
        }

//
// Classic CTF
//
        t_cctf:incl = {
                model: = { Txt="&" Hint="" }
                gravity: = { Txt="&" Hint="" }
                message: = { Txt="&" Hint="" }
        }
        ctf_redflag:form = { t_cctf = ! }
        ctf_redspawn:form = {
                t_cctf = !
                t_player = !
        }
        ctf_blueflag:form = { t_cctf = ! }
        ctf_bluespawn:form = {
                t_cctf = !
                t_player = !
        }
        ctf_healthrune:form = { t_cctf = ! }
        ctf_shieldrune:form = { t_cctf = ! }
        ctf_damagerune:form = { t_cctf = ! }
        ctf_speedrune:form = { t_cctf = ! }
        ctf_spiritrune:form = { t_cctf = ! }
        ctf_smallbattery:form = { t_cctf = ! }
        ctf_medbattery:form = { t_cctf = ! }
        ctf_largebattery:form = { t_cctf = ! }
        ctf_normmedkit:form = { t_cctf = ! }
        ctf_largemedkit:form = { t_cctf = ! }

//
// War In Europe
//
        t_wie_ammo:incl = { bbox = '-16 -16 0 16 16 32' }

        info_player_team1:form = { t_player = ! }
        info_player_team2:form = { t_player = ! }
        ammo_mg42:form = { t_wie_ammo = ! }
        ammo_mp40:form = { t_wie_ammo = ! }
        ammo_bar:form = { t_wie_ammo = ! }
        ammo_mauser:form = { t_wie_ammo = ! }
        ammo_sniper:form = { t_wie_ammo = ! }
        ammo_m1:form = { t_wie_ammo = ! }
        ammo_tommy:form = { t_wie_ammo = ! }

//
// Opposing Force
//
        ammo_556:form = { t_op4_ammo = ! }
        ammo_762:form = { t_op4_ammo = ! }
        ammo_spore:form = {
                bbox = '-16 -16 -16 16 16 16'
                t_op4_ammo = !
        }

        env_blowercannon:form = {
                t_targetname = !
                t_target = !
                delay: = { Txt="&" Hint="Delay" }
                zoffset: = { Txt="&" Hint="Z Offset" }
                weaptype: = { Typ="C" Hint="Weapon Type" Txt="&"
                        items = "Spore (Rocket)"
                             $0D"Spore (Grenade)"
                             $0D"Shock Beam"
                             $0D"Displacer Ball"
                        values = "1"$0D"2"$0D"3"$0D"4"
                }
                firetype: = { Typ="C" Hint="Fire Type" Txt="&"
                        items = "Toggle On/Off"
                             $0D"Fire When Triggered"
                        values = "1"$0D"2"
                }
        }
        env_electrified_wire:form = {
                t_targetname = !
                segments: = { Txt="&" Hint="Segments" }
                sparkfrequency: = { Txt="&" Hint="Spark Frequency" }
                bodysparkfrequency: = { Txt="&" Hint="Body Spark Frequency" }
                lightningfrequency: = { Txt="&" Hint="Lightning Frequency" }
                xforce: = { Txt="&" Hint="X Force" }
                yforce: = { Txt="&" Hint="Y Force" }
                zforce: = { Txt="&" Hint="Z Force" }
                disable: = { Typ="C" Hint="Disable Use" Txt="&"
                        items = "Not Disabled"
                             $0D"Disabled"
                        values = "0"$0D"1"
                }
                endingmodel: = { Typ="C" Txt="&" Hint="Ending Model"
                        t_op4_wirerope_mdl = !
                }
                bodymodel: = { Typ="C" Txt="&" Hint="Body Model"
                        t_op4_wirerope_mdl = !
                }

        }
        env_rope:form = {
                segments: = { Txt="&" Hint="Segments" }
                disable: = { Typ="C" Hint="Disable Use" Txt="&"
                        items = "Not Disabled"
                             $0D"Disabled"
                        values = "0"$0D"1"
                }
                endingmodel: = { Typ="C" Txt="&" Hint="Ending Model"
                        t_op4_wirerope_mdl = !
                }
                bodymodel: = { Typ="C" Txt="&" Hint="Body Model"
                        t_op4_wirerope_mdl = !
                }
        }
        env_spritetrain:form = {
                t_targetname = !
                target: = { Txt="&" Hint="First stop target" }
                model: = { Txt="&" Hint="Sprite Name" }
                speed: = { Txt="&" Hint="Speed (units per second)" }
                scale: = { Txt="&" Hint="Sprite Scale" }
        }
        func_op4mortarcontroller:form = {
                t_target = !
                mortar_axis: = { Typ="C" Hint="Axis" Txt="&"
                        items = "Vertical"
                             $0D"Horizontal"
                        values = "0"$0D"1"
                }
        }

        t_BaseTankOF:incl = {
                t_targetname = !
                t_target = !
                t_rendermode = !
                t_globalname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Active" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Only Direct" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Controllable" }
                master: = { Txt="&" Hint="(Team) Master" }

                yawrate: = { Txt="&" Hint="Yaw rate" }
                yawrange: = { Txt="&" Hint="Yaw range" }
                yawtolerance: = { Txt="&" Hint="Yaw tolerance" }
                pitchrate: = { Txt="&" Hint="Pitch rate" }
                pitchrange: = { Txt="&" Hint="Pitch range" }
                pitchtolerance: = { Txt="&" Hint="Pitch tolerance" }
                barrel: = { Txt="&" Hint="Barrel Length" }
                barrely: = { Txt="&" Hint="Barrel Horizontal" }
                barrelz: = { Txt="&" Hint="Barrel Vertical" }
                spritesmoke: = { Txt="&" Hint="Smoke Sprite" }
                spriteflash: = { Txt="&" Hint="Flash Sprite" }
                spritescale: = { Txt="&" Hint="Sprite scale" }
                rotatesound: = { Txt="&" Hint="Rotate Sound" }
                firerate: = { Txt="&" Hint="Rate of Fire" }
                bullet_damage: = { Txt="&" Hint="Damage Per Bullet" }
                persistence: = { Txt="&" Hint="Firing persistence" }
                firespread: = { Typ="C" Hint="Bullet accuracy" Txt="&"
                        items = "Perfect Shot"
                             $0D"Small cone"
                             $0D"Medium cone"
                             $0D"Large cone"
                             $0D"Extra-large cone"
                        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"
                }
                minRange: = { Txt="&" Hint="Minmum target range" }
                maxRange: = { Txt="&" Hint="Maximum target range" }
                t__minlight = !
                enemytype: = { Typ="C" Hint="Enemy Type" Txt="&"
                        items = "Player"
                             $0D"Ally"
                             $0D"Random"
                        values = "0"$0D"1"$0D"2"
                }
        }
        func_tank_of:form = {
                bullet: = { Typ="C" Hint="Bullets" Txt="&"
                        items = "None"
                             $0D"9mm"
                             $0D"MP5"
                             $0D"12mm"
                        values = "0"$0D"1"$0D"2"$0D"3"
                }
                t_BaseTankOf = !
        }
        func_tankcontrols_of:form = {
                target: = { Txt="&" Hint="Tank entity name" }
        }
        func_tanklaser_of:form = {
                laserentity: = { Txt="&" Hint="env_laser Entity" }
                t_BaseTankOf = !
        }
        func_tankrocket_of:form = {
                t_BaseTankOf = !
        }
        func_tankmortar_of:form = {
                iMagnitude: = { Txt="&" Hint="Explosion Magnitude" }
                t_BaseTankOf = !
        }
        info_displacer_xen_target:form = {
                t_targetname = !
                bbox = '-4 -4 -4 4 4 4'
        }
        info_displacer_earth_target:form = {
                t_targetname = !
                bbox = '-4 -4 -4 4 4 4'
        }
        info_pitworm_steam_lock:form = {
                t_targetname = !
                t_target = !
        }

        item_generic:form = {
                t_op4_weapon = !
                model: = { Txt="&" Hint="Model" }
                sequencename: = { Txt="&" Hint="Sequence Name" }
                skin: = { Txt="&" Hint="Skin" }
                body: = { Txt="&" Hint="Body" }
        }
        item_nuclearbomb:form = {
                bbox = '-16 -16 0 16 16 16'
                t_op4_weapon = !
                initialstate: = { Txt="&" Hint="Initial State" }
                wait: = { Txt="&" Hint="Wait" }
        }
        monster_alien_babyvoltigore:form = {
                t_monster = !
                bbox = '-40 -40 0 40 40 64'
                t_squadmonster = !
        }
        monster_alien_voltigore:form = {
                t_monster = !
                bbox = '-80 -80 0 80 80 90'
                t_squadmonster = !
        }
        monster_alien_slave_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                pose: = { Typ="C" Hint="Pose" Txt="&"
                        items = "On Stomach"
                        values = "0"
                }
        }
        monster_assassin_repel:form = { t_monster = ! bbox = '-16 -16 0 16 16 72' }
        monster_blkop_apache:form = {
                bbox = '-360 -360 -172 360 360 8'
                spawnflags: = { Txt="&" Typ="X8" Cap="NoWreckage" }
                spawnflags: = { Txt="&" Typ="X64" Cap="Start Inactive" }
                t_monster = !
        }
        monster_blkop_osprey:form = {
                bbox = '-480 -480 -112 480 480 24'
                spawnflags: = { Txt="&" Typ="X64" Cap="Start Inactive" }
                t_monster = !
        }
        monster_cleansuit_scientist:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_talkmonster = !
                t_scientistbody = !
        }
        monster_cleansuit_scientist_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                t_scientistbody = !
                pose: = { Typ="C" Hint="Pose" Txt="&"
                        items = "On back"
                             $0D"On Stomach"
                             $0D"Sitting"
                             $0D"Hanging"
                             $0D"Table1"
                             $0D"Table2"
                             $0D"Table3"
                             $0D"Hi Mike!"
                             $0D"Dead Against Wall"
                        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"
                }
                t_rendermode = !
        }
        monster_sitting_cleansuit_scientist:form = {
                bbox = '-14 -14 22 14 14 72'
                t_monster = !
                t_scientistbody = !
        }
        monster_drillsergeant:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_talkmonster = !
        }
        monster_geneworm:form = { t_monster = ! bbox = '-95 -95 0 95 95 190' }
        monster_gonome:form = { t_monster = ! bbox = '-16 -16 0 16 16 72' }
        monster_gonome_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                pose:form = { Typ="C" Hint="Pose" Txt="&"
                        items = "On Stomach"
                             $0D"On Back"
                             $0D"On Side"
                        values = "0"$0D"1"$0D"2"
                }
                t_rendermode = !
        }
        monster_houndeye_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                pose:form = { Typ="C" Hint="Pose" Txt="&"
                        items = "Just plain dead"
                        values = "0"
                }
        }

        monster_grunt_ally_repel:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_squadmonster = !
                weapons: = { Typ="C" Hint="Weapons" Txt="&"
                        items = "9mmAR"
                             $0D"9mmAR + HG"
                             $0D"9mmAR + GL"
                             $0D"Shotgun"
                             $0D"Shotgun + HG"
                             $0D"Saw"
                        values = "1"$0D"3"$0D"5"$0D"8"$0D"10"$0D"16"
                }
                head: = { Typ="C" Hint="Heads" Txt="&"
                        items = "Default"
                             $0D"Gas Mask"
                             $0D"Beret"
                             $0D"Ops Mask"
                             $0D"Bandana White"
                             $0D"Bandana Black"
                        values = "-1"$0D"0"$0D"1"$0D"2"$0D"3"$0D"4"
                }
        }
        monster_human_grunt_ally:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_squadmonster = !
                weapons: = { Typ="C" Hint="Weapons" Txt="&"
                        items = "None"
                             $0D"9mmAR"
                             $0D"9mmAR + HG"
                             $0D"9mmAR + GL"
                             $0D"Shotgun"
                             $0D"Shotgun + HG"
                             $0D"Saw"
                        values = "0"$0D"1"$0D"3"$0D"5"$0D"8"$0D"10"$0D"16"
                }
                head: = { Typ="C" Hint="Heads" Txt="&"
                        items = "Default"
                             $0D"Gas Mask"
                             $0D"Beret"
                             $0D"Ops Mask"
                             $0D"Bandana White"
                             $0D"Bandana Black"
                             $0D"MP"
                             $0D"Major"
                             $0D"Beret (Black)"
                        values = "-1"$0D"0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"
                }
        }
        monster_human_grunt_ally_dead:form = {
                t_targetname = !
                pose: = { Typ="C" Hint="Pose" Txt="&"
                        items = "On stomach"
                             $0D"On side"
                             $0D"Seated"
                             $0D"Dead On Back"
                             $0D"Dead On Stomach"
                             $0D"Head Crabbed"
                        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"
                }
                weapons: = { Typ="C" Hint="Weapons" Txt="&"
                        items = "None"
                             $0D"9mmAR"
                             $0D"Shotgun"
                             $0D"Saw"
                        values = "0"$0D"1"$0D"8"$0D"16"
                }
                head: = { Typ="C" Hint="Heads" Txt="&"
                        items = "Gas Mask"
                             $0D"Beret"
                             $0D"Ops Mask"
                             $0D"Bandana White"
                             $0D"Bandana Black"
                             $0D"MP"
                        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"
                }
                t_rendermode = !
        }
        monster_human_medic_ally:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_squadmonster = !
                weapons: = { Typ="C" Hint="Weapons" Txt="&"
                        items = "None"
                             $0D"Desert Eagle"
                             $0D"9mm Handgun"
                             $0D"Hypodermic Needle"
                        values = "0"$0D"1"$0D"2"$0D"4"
                }
                head: = { Typ="C" Hint="Heads" Txt="&"
                        items = "Random"
                             $0D"White"
                             $0D"Black"
                        values = "-1"$0D"0"$0D"1"
                }
        }
        monster_human_torch_ally:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_squadmonster = !
                weapons: = { Typ="C" Hint="Weapons" Txt="&"
                        items = "Desert Eagle"
                             $0D"Blow Torch"
                        values = "1"$0D"2"
                }
        }
        monster_male_assassin:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_squadmonster = !
                weapons: = { Typ="C" Hint="Weapons" Txt="&"
                        items = "None"
                             $0D"9mmAR"
                             $0D"9mmAR + HG"
                             $0D"9mmAR + GL"
                             $0D"Sniper Rifle"
                        values = "0"$0D"1"$0D"3"$0D"5"$0D"8"
                }
                head: = { Typ="C" Hint="Heads" Txt="&"
                        items = "Random"
                             $0D"Ski Mask White"
                             $0D"Ski Mask Black"
                             $0D"Night Goggles"
                        values = "-1"$0D"0"$0D"1"$0D"2"
                }
                standgroundrange: = { Txt="&" Hint="Stand Ground Range" }
        }
        monster_op4loader:form = {
                bbox = '-16 -16 -36 16 16 36'
                spawnflags: = { Txt="&" Typ="X4" Cap="Not solid" }
                t_monster = !
                t_rendermode = !
        }
        monster_otis:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_talkmonster = !
                bodystate: = { Typ="C" Hint="bodystate" Txt="&"
                        items = "Random"
                             $0D"Gun Holstered"
                             $0D"Gun Drawn"
                             $0D"Donut"
                        values = "-1"$0D"0"$0D"1"$0D"3"
                }
                head: = { Typ="C" Hint="Heads" Txt="&"
                        items = "Random"
                             $0D"Bald Head"
                             $0D"Head with hair"
                        values = "-1"$0D"0"$0D"1"
                }
                t_op4_suspicious = !
        }
        monster_otis_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                pose: = { Typ="C" Hint="Pose" Txt="&"
                        items = "On back"
                             $0D"On side"
                             $0D"On stomach"
                             $0D"Stuffed in Vent"
                             $0D"Dead Sitting"
                        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"
                }
                t_rendermode = !
        }
        monster_pitdrone:form = {
                bbox = '-24 -24 0 24 24 32'
                t_monster = !
                initammo: = { Txt="&" Hint="Initial Ammo" }
        }
        monster_pitworm:form = { t_monster = ! bbox = '-16 -16 0 16 16 32' }
        monster_pitworm_up:form = { t_monster = ! bbox = '-95 -95 0 95 95 190' }
        monster_shockroach:form = { t_monster = ! bbox = '-16 -16 0 16 16 36' }
        monster_zombie_barney:form = { t_monster = ! bbox = '-16 -16 0 16 16 72' }
        monster_zombie_soldier:form = { t_monster = ! bbox = '-16 -16 0 16 16 72' }

        monster_zombie_soldier_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                pose: = { Typ="C" Hint="Pose" Txt="&"
                        items = "On back"
                             $0D"On stomach"
                        values = "0"$0D"1"
                }
        }
        monster_recruit:form = { t_monster = ! t_talkmonster = ! bbox = '-16 -16 0 16 16 72' }
        monster_skeleton_dead:form = {
                bbox = '-16 -16 0 16 16 72'
                t_targetname = !
                pose: = { Typ="C" Hint="Pose" Txt="&"
                        items = "On back"
                             $0D"Seated"
                             $0D"Against Wall"
                             $0D"On stomach"$0D
                        values = "0"$0D"1"$0D"2"$0D"3"
                }
                t_rendermode = !
        }
        monster_shocktrooper:form = {
                bbox = '-16 -16 0 16 16 72'
                t_monster = !
                t_squadmonster = !
                weapons: = { Typ="C" Hint="Weapons" Txt="&"
                        items = "9mmAR"
                             $0D"9mmAR + HG"
                             $0D"9mmAR + GL"
                             $0D"Shotgun"
                             $0D"Shotgun + HG"
                        values = "1"$0D"3"$0D"5"$0D"8"$0D"10"
                }
        }
        op4mortar:form = {
                t_targetname = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Active" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Line of Sight" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Can Control" }
                mortar_velocity: = { Txt="&" Hint="Velocity" }
                h_min: = { Txt="&" Hint="Horiz MIN" }
                h_max: = { Txt="&" Hint="Horiz MAX" }
                mindist: = { Txt="&" Hint="Min Target Dist" }
                maxdist: = { Txt="&" Hint="Max Target Dist" }
                enemytype: = { Typ="C" Hint="Enemy Type" Txt="&"
                        items = "Player"
                             $0D"Ally"
                             $0D"Random"
                        values = "0"$0D"1"$0D"2"
                }
                firedelay: = { Txt="&" Hint="Fire Rate" }
        }
        pitworm_gibshooter:form = { t_gibshooter = ! }
        trigger_geneworm_hit:form = {
                t_targetname = !
                t_target = !
                spawnflags: = { Txt="&" Typ="X1" Cap="Target Once" }
                spawnflags: = { Txt="&" Typ="X2" Cap="Start Off" }
                spawnflags: = { Txt="&" Typ="X8" Cap="No clients" }
                spawnflags: = { Txt="&" Typ="X16" Cap="Fire Client Only" }
                spawnflags: = { Txt="&" Typ="X32" Cap="Touch Client Only" }
                master: = { Txt="&" Hint="Master" }
                delay: = { Txt="&" Hint="Delay before trigger" }
        }
        trigger_playerfreeze:form = {
                t_targetname = !
                t_targetx = !
        }
        trigger_xen_return:form = {
                t_trigger = !
        }

        weapon_displacer:form = { t_op4_weapon = ! }
        weapon_eagle:form = { t_op4_weapon = ! }
        weapon_grapple:form = { t_op4_weapon = ! }
        weapon_knife:form = { t_op4_weapon = ! }
        weapon_m249:form = { t_op4_weapon = ! }
        weapon_pipewrench:form = { t_op4_weapon = ! }
        weapon_shockrifle:form = { t_op4_weapon = ! }
        weapon_sniperrifle:form = { t_op4_weapon = ! }
        weapon_sporelauncher:form = { t_op4_weapon = ! }
        weapon_penguin:form = { t_op4_weapon = ! }

// Opposing Force CTF

        t_op4_ctfattr:incl = {
                goal_no: = { Typ="C" Hint="Team"
                        items = "Black Mesa"
                             $0D"Opposing Force"
                        values = "1"$0D"2"
                }
                goal_min: = { txt="&" Hint="Min bounds" }
                goal_max: = { txt="&" Hint="Max bounds" }
                bbox = '-16 -16 0 16 16 72'
        }
        t_op4_ctfitem:incl = {
                spawnflags: = { txt="&" typ="X4" Cap="Random Spawn" }
                team: = { Typ="C" Hint="Team"
                        items = "Random"
                             $0D"Black Mesa"
                             $0D"Opposing Force"
                        values = "0"$0D"1"$0D"2"
                }
                bbox = '-16 -16 0 16 16 36'
        }

        item_ctfflag:form = {
                t_op4_ctfattr = !
                skin: = { Typ="C" Hint="Skin"
                        items = "Black Mesa"
                             $0D"Opposing Force"
                        values = "1"$0D"2"
                }
                model: = { txt="&" hint="models/flag.mdl" }
        }
        item_ctfbase:form = {
                t_op4_ctfattr = !
                skin: = { Typ="C" Hint="Skin"
                        items = "Default"
                        values = "0"
                }
                model: = { txt="&" hint="models/civ_stand.mdl" }
        }
        info_ctfspawn:form = {
                t_player=!
                team_no: = { Typ="C" Hint="Team"
                        items = "Random"
                             $0D"Black Mesa"
                             $0D"Opposing Force"
                        values = "0"$0D"1"$0D"2"
                }
        }
        info_ctfdetect:form = {
                flagreturntime:         = { txt="&" hint="Flag Return Time" }
                basedefenddist:         = { txt="&" hint="Base Defend Distance" }
                defendcarriertime:      = { txt="&" hint="Defend Carrier Time" }
                captureassisttime:      = { txt="&" hint="Capture Assist Time" }
                poweruprespawntime:     = { txt="&" hint="Powerup Respawn Time" }
                score_icon_namebm:      = { txt="&" hint="Non-Flag Black Mesa icon" }
                score_icon_nameof:      = { txt="&" hint="Non-Flag Opposing Force icon" }
                map_score_max:          = { txt="&" hint="Maximum Map Team Score" }
        }

        item_ctflongjump:form = { t_op4_ctfitem = ! }
        item_ctfportablehev:form = { t_op4_ctfitem = ! }
        item_ctfregeneration:form = { t_op4_ctfitem = ! }
        item_ctfaccelerator:form = { t_op4_ctfitem = ! }
        item_ctfbackpack:form = { t_op4_ctfitem = ! }

        info_ctfspawn_powerup:form = {
                bbox = '-16 -16 0 16 16 36'
                team_no: = { Typ="C" Hint="Team"
                        items = "Random"
                             $0D"Black Mesa"
                             $0D"Opposing Force"
                        values = "0"$0D"1"$0D"2"
                }
        }
        trigger_ctfgeneric:form = {
                t_targetname = !
                t_target = !
                team_no: = { Typ="C" Hint="Team"
                        items = "Both Teams"
                             $0D"Black Mesa Only"
                             $0D"Opposing Force Only"
                        values = "0"$0D"1"$0D"2"
                }
                trigger_delay: = { txt="&" hint="Re-activate delay" }
                score: = { txt="&" hint="Player Score" }
                team_score: = { txt="&" hint="Team Score" }
                triggerstate: = { typ="C" hint="Trigger State"
                        items = "Off"
                             $0D"On"
                             $0D"Toggle"
                        values = "0"$0D"1"$0D"2"
                }
        }

//
// The Assignment
//
        info_start_assassin:form = { t_player = ! }
        info_start_suit:form = { t_player = ! }
        info_start_militia:form = { t_player = ! }
        info_start_salina:form = { t_player = ! }
        team_suit_buy:form = { t_player = ! }
        team_salina_buy:form = { t_player = ! }
        item_resource_1:form = { t_player = ! }
        item_resource_2:form = { t_player = ! }
        item_resource_3:form = { t_player = ! }
        item_resource_4:form = { t_player = ! }
        func_door_suit:form = { t_door = ! }
        func_door_salina:form = { t_door = ! }
        item_special_suit:form = { t_player = ! }
        item_special_salina:form = { t_player = ! }
        info_capture_suit:form = { t_player = ! }
        info_capture_salina:form = { t_player = ! }

///
/// Sabaneta 2050
///
//      info_game_sabaneta:form = { Help = "This entity verifies if the map is for SB2050" }
//      info_map_rush:form = { Help = "This entity defines if the map is for rush mode" }
//      info_player_observer:form = { Help = "This entity defines the player spawn starting point,"$0D"when he connects to the map. (The black room, with the rotating SB2050)" }
//      info_player_team1:form = { t_player = ! }
//      info_player_team2:form = { t_player = ! }
//      presidente_uno:form = { t_player = ! }
//      presidente_dos:form = { t_player = ! }

//
// Kanonball
//
        info_kb_deathmatch:form =
        {
            bbox = '-16 -16 -36 16 16 36'
            description: = { txt="&" hint="Name of Position" }
            position: = { txt="&" hint="Position Code" }
            side: = { txt="&" Typ="C" Hint="Team"
                items="Red"
                   $0D"Blue"
                values="1"$0D"2"
            }
        }
        team_goal:form =
        {
            mode: = { txt="&" Typ="C" Hint="Team"
                items="Red"
                   $0D"Blue"
                values="1"$0D"2"
            }
        }
        ball_launcher:form =
        {
            bbox = '-4 -4 -4 4 4 4'
            launchspeed: = { txt="&" hint="Speed at which the ball is launched" }
            launchangle: = { txt="&" hint="Angle offset at which the ball is launched" }
        }
        crowd:form =
        {
            side: = { txt="&" Typ="C" Hint="Team to cheer for"
                items="Red"
                   $0D"Blue"
                values="1"$0D"2"
            }
            volume: = { txt="&" hint="Cheer volume (0-100)" }
        }

//
// FireArms
//
        fa_team_goal:form = {
                t_targetname=!
                t_target=!
                spawnflags: = { txt="&" Typ="X1" Cap="Once Only" }
                team: = { txt="&" typ="C" hint="Team/Item Applies To"
                        items="Either Team"
                           $0D"Red Force"
                           $0D"Blue Force"
                        values="-1"$0D"1"$0D"2"
                }
                message: = { Txt="&" hint="Activation Message" }
                dmg: = { txt="&" typ="C" hint="Goal Effect"
                        items="Nothing"
                           $0D"Respawn Team"
                        values="0"$0D"1"
                }
                frags: = { txt="&" hint="Team Point Gain (+/-)" }
                impulse: = {txt="&" typ="C" hint="Point Gain Given To"
                        items="All Team Members"
                           $0D"Just Activator"
                        values="0"$0D"1"
                }
                health: = { txt="&" typ="C" hint="Reset Team Items?"
                        items="No"
                           $0D"Yes"
                        values="0"$0D"1"
                }
                speed: = {txt="&" hint="Reinforcement Gain (+/-)" }
        }
        fa_team_item:form = {
                t_targetname=!
                t_target=!
                team: = {txt="&" typ="C" hint="Owner"
                        items="Either team"
                           $0D"Red Force"
                           $0D"Blue Force"
                        values="-1"$0D"1"$0D"2"
                }
                impulse: = {txt="&" typ="C" hint="Carrier Death Placement"
                        items="At Item Spawn Point"
                           $0D"Where Carrier Dies"
                        values="0"$0D"1"
                }
                message: = {txt="&" hint="Item Name" }
                model: = {txt="&" hint="Item Model to Use"}
                noise3: = {txt="&" hint="Carrier Killed Target" }
                noise: = {txt="&" hint="Pickup Sound" }
                noise1: = {txt="&" hint="Drop Sound" }
                noise2: = {txt="&" hint="Capture Sound" }
        }
        fa_parachute:form = {
                t_targetname=!
                t_target=!
                bbox = '-8 -8 -8 8 8 8'
        }
        info_firearms_detect:form = {
                title: = {txt="&" hint="Map Title" }
                impulse: = {txt="&" hint="Red maxplayer Factor" }
                dmg: = {txt="&" hint="Blue maxplayer Factor" }
        }
        fa_push_point:form = {
                t_targetname=!
                t_target=!
                message: = {txt="&" hint="Point Description" }
                dmg: = {txt="&" typ="C" hint="Default Owner"
                        items="None"
                           $0D"Red Force"
                           $0D"Blue Force"
                        values="0"$0D"1"$0D"2"
                }
                noise: = {txt="&" hint="This Flag" }
                noise1: = {txt="&" hint="Next Flag" }
                noise2: = {txt="&" hint="Previous Flag" }
                noise3: = {txt="&" hint="Win Target" }
        }
        fa_push_flag:form = {
                t_targetname=!
                t_target=!
                bbox = '-8 -8 -16 8 8 16'
        }
        fa_sd_object:form = {
                t_targetname=!
                t_target=!
                message: = { txt="&" hint="Object Description" }
                team: = { txt="&" typ="C" hint="Team That Can Destroy"
                        items="Either team"
                           $0D"Red Force"
                           $0D"Blue Force"
                        values="0"$0D"1"$0D"2"
                }
                health: = { txt="&" hint="Health" }
                impulse: = { txt="&" typ="C" hint="Destroyed With"
                        items="Anything"
                           $0D"Claymore Only"
                        values="0"$0D"1"
                }
                speed: = { txt="&" hint="Respawn Time (sec)" }
        }
	item_bandage:form = {t_item=!}
	item_claymore:form = {t_item=!}
	item_flashbang:form = {t_item=!}
	item_frag:form = {t_item=!}
	item_stg24:form = {t_item=!}
	ammo_ak47:form = {t_ammo=!}
	ammo_anaconda:form = {t_ammo=!}
	ammo_aug:form = {t_ammo=!}
	ammo_benelli:form = {t_ammo=!}
	ammo_ber92f:form = {t_ammo=!}
	ammo_ber93r:form = {t_ammo=!}
	ammo_coltgov:form = {t_ammo=!}
	ammo_desert:form = {t_ammo=!}
	ammo_g36e:form = {t_ammo=!}
	ammo_g3a3:form = {t_ammo=!}
	ammo_m11:form = {t_ammo=!}
	ammo_m16:form = {t_ammo=!}
	ammo_m4:form = {t_ammo=!}
	ammo_m60:form = {t_ammo=!}
	ammo_m79:form = {t_ammo=!}
	ammo_m82:form = {t_ammo=!}
	ammo_mp5a5:form = {t_ammo=!}
	ammo_mp5k:form = {t_ammo=!}
	ammo_psg1:form = {t_ammo=!}
	ammo_saiga:form = {t_ammo=!}
        ammobox:form = {
                bbox = '-34 -25 0 34 25 36'
                t_targetname=!
                delay:          = { txt="&" hint="Delay between ammo" }
                damage:         = { txt="&" hint="Damage before exploding" }
                respawntime:    = { txt="&" hint="Seconds before respawn" }
        }
	weapon_ak47:form = {t_weapon=!}
	weapon_anaconda:form = {t_weapon=!}
	weapon_aug:form = {t_weapon=!}
	weapon_benelli:form = {t_weapon=!}
	weapon_ber92f:form = {t_weapon=!}
	weapon_ber92f:form = {t_weapon=!}
	weapon_claymore:form = {t_weapon=!}
	weapon_coltgov:form = {t_weapon=!}
	weapon_desert:form = {t_weapon=!}
	weapon_flashbang:form = {t_weapon=!}
	weapon_g36e:form = {t_weapon=!}
	weapon_g3a3:form = {t_weapon=!}
	weapon_frag:form = {t_weapon=!}
	weapon_knife:form = {t_weapon=!}
	weapon_m11:form = {t_weapon=!}
	weapon_m16:form = {t_weapon=!}
	weapon_m4:form = {t_weapon=!}
	weapon_m60:form = {t_weapon=!}
	weapon_m79:form = {t_weapon=!}
	weapon_m82:form = {t_weapon=!}
	weapon_mp5a5:form = {t_weapon=!}
	weapon_mp5k:form = {t_weapon=!}
	weapon_psg1:form = {t_weapon=!}
	weapon_saiga:form = {t_weapon=!}
	weapon_stg24:form = {t_weapon=!}
        weapon_mc51:form = {t_weapon=!}
        weapon_famas:form = {t_weapon=!}

//
// Desert Crisis
//
	info_player_upko:form = { t_player=! }
	info_player_usa:form = { t_player=! }
	info_player_sotd:form = { t_player=! }
//        func_vehicle:form = { t_targetname=! }
	func_wheel:form = {
		t_target=!
		wheeltype: = {txt="&" typ="C" hint="WheelType"
                        items=  "Front driver-side"
                             $0D"Front passenger-side"
                             $0D"Rear driver-side"
                             $0D"Rear passenger-side"
			values="0"$0D"1"$0D"2"$0D"3"
		}
	}

//
// The Sherman Project
//
	info_teamstart:form = {
		bbox = '-16 -16 -36 16 16 36'
		t_tsp_teamid=!
		teammodel: = {txt="&" typ="C" hint="Choose player model for team"
                        items=  "Swat Green"
                             $0D"Swat Blue"
                             $0D"Swat Black"
                             $0D"Delta Blue"
                             $0D"Delta Green"
                             $0D"Urban Terror Skimask Blue"
                             $0D"Urban Terror Skimask Tan"
                             $0D"Outdoor Terror Greasepaint Green"
                             $0D"Outdoor Terror Greasepaint Black"
                             $0D"Civilian"
			values=	"0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"
		}
		weaponpref: = {txt="&" hint="Specialist preference" }
		movedelay: = {txt="&" hint="How long before player can move" }
	}
	info_capturezone:form = {
		t_tsp_teamid=!
		duration: = {txt="&" hint="Duration (seconds)" }
		itemid: = {txt="&" typ="C" hint="Choose item that activates me"
                        items=  "Bomb Detonator"
                             $0D"Secret Files"
                             $0D"Key"
                             $0D"Insert cool item here"
			values=	"0"$0D"1"$0D"2"$0D"3"
		}
	}
	info_roundwin:form = {
		t_tsp_teamid=!
		t_targetname=!
	}
	info_captureitem:form = {
		t_tsp_teamid=!
		model: = {txt="&" hint="Model" }
		itemid: = {txt="&" typ="C" hint="Choose an item"
                        items=  "Bomb Detonator"
                             $0D"Secret Files"
                             $0D"Key"
                             $0D"Insert cool item here"
			values=	"0"$0D"1"$0D"2"$0D"3"
		}
		message: = {txt="&" hint="Text Message" }
		t_target=!
	}
	info_areaname:form = {
		targetname: = {txt="&" hint="Area Name" }
		message: = {txt="&" hint="Optional .wav (path/file)" }
		t_rendermode=!
	}

//
// Arg! The Pirates Strike Back
//
        t_arg_html:incl = {
                HTML = "http://www.planethalflife.com/arg/"
        }

        info_player_deathmatch:form = {
                t_arg_html = !
                Help = "This entity sets the deathmatch multiplayer start points"
                t_player = !
                t_target = !
                t_master = !
        }
        weapon_longsword:form      = { t_weapon = ! t_arg_html = ! }
        weapon_tucan:form          = { t_weapon = ! t_arg_html = ! }
        weapon_bsword:form         = { t_weapon = ! t_arg_html = ! }
        weapon_cocogrenade:form    = { t_weapon = ! t_arg_html = ! }

        weapon_whiskey:form = {
                t_arg_html = !
                t_weapon = !
                sequence: = { Typ="C" Txt="&" Hint="Placement"
                        Items = "Normal (flat)"
                             $0D"Realistic (tilted)"
                        Values = "0"$0D"1"
                }
        }

        weapon_tdagger:form = {
                t_arg_html = !
                t_weapon = !
                sequence: = { Typ="C" Txt="&" Hint="Placement"
                        Items = "Normal (flat)"
                             $0D"Realistic (tilted)"
                        Values = "0"$0D"1"
                }
        }
        weapon_fishingrod:form     = { t_weapon = ! t_arg_html = ! }
        weapon_ndagger:form        = { t_weapon = ! t_arg_html = ! }
        weapon_mop:form            = { t_weapon = ! t_arg_html = ! }
        weapon_flute:form          = { t_weapon = ! t_arg_html = ! }

        weaponbox:form = {
                t_arg_html = !
                bbox = '-16 -16 0 16 16 32'
                color = '0 128 0'
        }

        world_items:form = {
                t_arg_html = !
                t_weapon = !
                type: = { Typ="C" txt="&"
                        Items = "Battery"
                             $0D"Antidote"
                             $0D"Security Card"
                             $0D"Suit"
                        Values = "44"$0D"42"$0D"43"$0D"45"
                }
        }

//
// Sven-Coop
//
        squadmaker:form = {
            t_svc_HTML = !
            bbox = '-16 -16 -16 16 16 16'
            t_Targetname = !
            t_Angles = !
            t_rendermode = !
            target:    = { txt="&" hint="Target On Release" }
            monstertype:    = { txt="&" hint="Monster Type" }
            netname:    = { txt="&" hint="Childrens' Name" }
            spawnflags:    = { txt="&" typ="X1" cap="Start ON" hint="" }
            spawnflags:    = { txt="&" typ="X4" cap="Cyclic" hint="" }
            spawnflags:    = { txt="&" typ="X8" cap="MonsterClip" hint="" }
            spawnflags:    = { txt="&" typ="X16" cap="Prisoner" hint="" }
            spawnflags:    = { txt="&" typ="X128" cap="WaitForScript" hint="" }
            monstercount:    = { txt="&" hint=" monster count " }
            respawn_as_playerally:    = { typ="C" txt="&" hint="Make Player Allys"
                items =
                       "NO"
                    $0D"YES"
                values =
                       "0"
                    $0D"1"
            }
            delay:    = { txt="&" hint="Frequency" }
            m_imaxlivechildren:    = { txt="&" hint="Max live children" }
            weapons:    = { typ="C" txt="&" hint="HumanGrunt Weapons"
                items =
                       "9mmAR"
                    $0D"9mmAR + HG"
                    $0D"9mmAR + GL"
                    $0D"Shotgun"
                    $0D"Shotgun + HG"
                values =
                       "1"
                    $0D"3"
                    $0D"5"
                    $0D"8"
                    $0D"10"
            }
            change_rendermode:    = { typ="C" txt="&" hint="Override Render Mode"
                items =
                       "No"
                    $0D"Yes"
                values =
                       "0"
                    $0D"1"
            }
            new_model:    = { txt="&" hint="Model name" }
            new_body:    = { txt="&" hint="Body (-1 off)" }
            trigger_target:    = { txt="&" hint="TriggerTarget" }
            trigger_condition:    = { typ="C" txt="&" hint="Trigger Condition"
                items =
                       "No Trigger"
                    $0D"See Player, Mad at Player"
                    $0D"Take Damage"
                    $0D"50% Health Remaining"
                    $0D"Death"
                    $0D"Hear World"
                    $0D"Hear Player"
                    $0D"Hear Combat"
                    $0D"See Player Unconditional"
                    $0D"See Player, Not In Combat"
                values =
                       "0"
                    $0D"1"
                    $0D"2"
                    $0D"3"
                    $0D"4"
                    $0D"7"
                    $0D"8"
                    $0D"9"
                    $0D"10"
                    $0D"11"
            }
            notsolid:    = { typ="C" txt="&" hint="Not Solid (-1 Monster Standard)"
                items =
                       "Standard"
                    $0D"No"
                    $0D"Yes"
                values =
                       "-1"
                    $0D"0"
                    $0D"1"
            }
            gag:    = { typ="C" txt="&" hint="Gag (-1 Monster Standard)"
                items =
                       "Standard"
                    $0D"No"
                    $0D"Yes"
                values =
                       "-1"
                    $0D"0"
                    $0D"1"
            }
            is_squad_leader:    = { typ="C" txt="&" hint="Squad Leader"
                items =
                       "No"
                    $0D"Yes"
                values =
                       "0"
                    $0D"1"
            }
            squadname:    = { txt="&" hint="Squadname" }
        }
        trigger_random:form = {
            t_svc_HTML = !
            t_Targetname = !
            target_count:    = { txt="&" hint="Target Count" }
            target1:    = { txt="&" hint="Target1" }
            target2:    = { txt="&" hint="Target2" }
            target3:    = { txt="&" hint="Target3" }
            target4:    = { txt="&" hint="Target4" }
            target5:    = { txt="&" hint="Target5" }
        }
        trigger_random_time:form = {
            t_svc_HTML = !
            t_Targetname = !
            spawnflags:    = { txt="&" typ="X1" cap="Start On" hint="" }
            target_count:    = { txt="&" hint="Target Count" }
            target1:    = { txt="&" hint="Target1" }
            target2:    = { txt="&" hint="Target2" }
            target3:    = { txt="&" hint="Target3" }
            target4:    = { txt="&" hint="Target4" }
            target5:    = { txt="&" hint="Target5" }
            min_delay:    = { txt="&" hint="Minimum Random Delay 0=off" }
            max_delay:    = { txt="&" hint="Maximum Random Delay 0=off" }
        }
        weapon_uzi:form = {
            t_svc_HTML = !
            t_Weapon = !
            t_Targetx = !
        }

//
//  Front Line Force
//
        t_flf_html:incl = {
                HTML = "http://www.planethalflife.com/frontline/"
        }
        info_player_attacker:form =
        {
                t_flf_html = !
                bbox = '-16 -16 -36 16 16 36'
                Help = "This entity defines the FLF Attacker starting point."
                t_player = !
        }
        info_player_defender:form =
        {
                t_flf_html = !
                bbox = '-16 -16 -36 16 16 36'
                Help = "This entity defines the FLF Defender starting point."
                t_player = !
        }
        info_player_observer:form =
        {
                t_flf_html = !
                Help = "Introduction camera player sees when he first joins the map.  Place several of these close to capture points as they will automatically point themselves towards the nearest one.."
        }
        info_frontline:form =
        {
                t_flf_html = !
                Help = "This entity defines the FLF Info such as round time etc."
                roundtime:      = {txt="&" hint="Round Time (Minutes) Min is 30 secs (.5)" }
                warmuptime:     = {txt="&" hint="Warm-up time (Seconds) Min is 5, Max is 90" }
                arespawntime:   = {txt="&" hint="Attacker Respawn time (Seconds) Min is 5, Max is 30" }
                drespawntime:   = {txt="&" hint="Defender Respawn time (Seconds) Min is 10, Max is 35" }
                weather:        = {txt="&" typ="C" hint="Weather Conditions"
                        items = "Normal"$0D"Winter"
                        values= "0"     $0D"1"
                }
        }
        capture_point:form =
        {
                t_flf_html = !
                bbox            = '-16 -16 -16 16 16 16'
                Help            = "Capture Point (atena, radio etc.)"
                t_target        = !
                model:          = {txt="&" hint="Location of the model used in the capure point.  Could also be 'models/mainframe.mdl'" }
                pointname:      = {txt="&" hint="'West' will appear in game as 'Captureing West Point' 'Warehouse' will appear in game as 'Captureing Warehouse Point'" }
                capturetime:    = {txt="&" hint="Time to Capture (Seconds) Min time is 5" }
        }
        secondary_point:form =
        {
                t_flf_html = !
                bbox            = '-16 -16 -16 16 16 16'
                Help            = "2ndary Capture Point"
                t_target        = !
                model:          = {txt="&" hint="Location of the model used in the capure point.  Could also be 'models/mainframe.mdl'" }
                pointname:      = {txt="&" hint="Point name" }
                capturetime:    = {txt="&" hint="Time to Capture (Seconds)" }
        }

//
// Turbo
//
        t_tbo_html:incl = {
                HTML = "http://www.halflife.net/randomnine/"
        }

        dropship_message:form =
        {
                t_tbo_html = !
                t_targetname = !
                t_target = !
                message: = { txt="&" hint="Message Name" }
        }
        func_holoteleport:form =
        {
                t_tbo_html = !
                t_globalname = !
                t_targetname = !
                t_target = !
                t_rendermode = !

                sounds: = { txt="&" typ="C" hint="Sounds"
                        Items = "(none)"
                             $0D"Big zap & Warmup"
                             $0D"Access Denied"
                             $0D"Access Granted"
                             $0D"Quick Combolock"
                             $0D"Power Deadbolt 1"
                             $0D"Power Deadbolt 2"
                             $0D"Plunger"
                             $0D"Small zap"
                             $0D"Keycard Sound"
                             $0D"Buzz"
                             $0D"Buzz Off"
                             $0D"Light Switch"
                        Values =""$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D"11"$0D"14"
                }
                spawnflags: = { typ="X256" cap="Touch Activates" txt="&" }
                t__minlight = !
        }
// Conflicts with Half-Life Rally info_checkpoint
//      info_checkpoint:form =
//      {
//              t_tbo_html = !
//              t_target = !
//              wait: = { txt="&" hint="Number (0=F;1=S/F)" }
//      }

//
// Day of Defeat 3.0
//
        t_dod_cpmaster:incl = {
            spawn_cp_master: = { txt="&" hint="Master Control Point " }
            spawn_cp_neutral: = { txt="&" typ="C" hint="Active if neutral?"
                items ="No"$0D "Yes"
                values= "0"$0D   "1"
            }
            spawn_cp_incontrol: = { txt="&" typ="C" hint="Active if in control?"
                items ="No"$0D "Yes"
                values= "0"$0D   "1"
            }
            spawn_cp_notincontrol: = { txt="&" typ="C" hint="Active if not in control?"
                items ="No"$0D "Yes"
                values= "0"$0D   "1"
            }
        }
        dod_camera:form = {
            t_targetx = !
            t_targetname = !
//            (f_dod_cam:form) = !
            zoomlevel: = { txt="&" hint="Zoom FOV (scope=20, binoc=50, normal=90)" } // Delete this, once QuArK 6.2 is out of the way
            cam_overlay: = { txt="&" typ="C"                                         //
                items = "normal"                                                     //
                     $0D"Scope (20)"                                                 //
                     $0D"Binoculars (50)"                                            //
                     $0D"Widescreen (110)"                                           //
                values = "0"$0D"1"$0D"2"$0D"3"                                       //
            }                                                                        //
            subtitle: = { typ="&" hint="Subtitle" }                                  //


            wait: = { txt="&" hint="Hold time" }
            moveto: = { txt="&" hint="Path Corner" }
            spawnflags: = { txt="&" typ="X1" cap="Start At Player" hint="" }
            spawnflags: = { txt="&" typ="X2" cap="Follow Player" hint="" }
            spawnflags: = { txt="&" typ="X4" cap="Freeze Player" hint="" }
            speed: = { txt="&" hint="Initial Speed" }
            acceleration: = { txt="&" hint="Acceleration units/sec^2" }
            deceleration: = { txt="&" hint="Stop Deceleration units/sec^2" }
            teambound: = { txt="&" typ="C" hint="Team that is bound to"
                items ="Allies"$0D "Axis"$0D "Both"
                values=     "1"$0D    "2"$0D    "3"
            }
        }
        info_player_allies:form = {
            bbox = '-16 -16 -36 16 16 36'
            t_master = !
            t_dod_cpmaster = !
        }
        info_player_axis:form = {
            bbox = '-16 -16 -36 16 16 36'
            t_master = !
            t_dod_cpmaster = !
        }
        info_player_observer:form = {
            bbox = '-16 -16 -36 16 16 36'
            t_master = !
            t_dod_cpmaster = !
        }
        dod_object:form = {
            t_targetname = !
            t_target = !
            t_spirit_movewith = !
            model: = { txt="&" hint="Model" }
            object_name: = { txt="&" hint="Objects Name" }
            object_owner: = { txt="&" typ="C" hint="Team that can pick up"
                items ="Both"$0D "Allies"$0D "Axis"
                values=   "0"$0D      "1"$0D    "2"
            }
            object_group: = { txt="&" hint="Group Name" }
            object_takesound: = { txt="&" hint="Sound when taken" }
            object_capsound: = { txt="&" hint="Sound when captured" }
            object_dropsound: = { txt="&" hint="Sound when dropped" }
            object_returnsound: = { txt="&" hint="Sound when returned" }
            object_carryspeed: = { txt="&" hint="Carry speed (this*speed)" }
            object_resetontouch: = { txt="&" typ="C" hint="Reset on touch"
                items ="No"$0D "Yes"
                values= "0"$0D   "1"
            }
            object_resettime: = { txt="&" hint="Reset time (secs, max. 600)" }
            object_cappoints: = { txt="&" hint="Points to capturer" }
            object_otherpoints: = { txt="&" hint="Points for teammates" }
            object_donetarget: = { txt="&" hint="Target When Complete" }
            object_player_sprite: = { txt="&" hint="Sprite to show above player if carried" }
            object_hud_sprite: = { txt="&" hint="Sprite to show on HUD if carried" }
            master: = { txt="&" hint="Master" }
        }
        dod_object_goal:form = {
            t_targetname = !
            t_target = !
            t_spirit_movewith = !
            spawnflags: = { txt="&" typ="X1" cap="Dont Multicap" hint="" }
            spawnflags: = { txt="&" typ="X2" cap="Cap once per round" hint="" }
            capobj_group: = { txt="&" hint="Group Name" }
            capobj_donetarget: = { txt="&" hint="Target When Complete" }
            capobj_hud_sprite: = { txt="&" hint="Sprite to show on HUD if in zone without object" }
            master: = { txt="&" hint="Master" }
        }
        dod_score_ent:form = {
            t_targetname = !
            t_target = !
            team: = { txt="&" typ="C" hint="For Team"
                items ="Both"$0D "Allies"$0D "Axis"
                values=   "0"$0D      "1"$0D    "2"
            }
            score_points: = { txt="&" hint="Points" }
            score_resetitemtime: = { txt="&" hint="Reset Items Time (0 = none)" }
            score_resetplayerstime: = { txt="&" hint="Reset Players Time (0 = none)" }
            noise: = { txt="&" hint="Reset Group (blank for all)" }
            noise2: = { txt="&" typ="C" hint="End game?"
                items ="No"$0D "Yes"
                values= "0"$0D   "1"
            }
            message: = { txt="&" hint="Message" }
            score_nextmap: = { txt="&" hint="Move to Next Map" }
            score_nextmapdelay: = { txt="&" hint="Change level delay ( 0 = none )" }
        }
        dod_control_point_master:form = {
            t_targetname = !
            t_target = !
            point_give_delay_time: = { txt="&" hint="Time between point gives ( seconds )" }
            allies_capture_target: = { txt="&" hint="Target when allies capture" }
            axis_capture_target: = { txt="&" hint="Target when axis capture" }
            master: = { txt="&" hint="Master" }
            cpm_group: = { txt="&" hint="Group Name" }
        }
        dod_location:form = {
            t_spirit_movewith = !
            t_master = !
            location_name: = { txt="&" hint="Name of this location" }
        }
        dod_control_point:form = {
            t_targetname = !
            t_target = !
            t_spirit_movewith = !
            spawnflags: = { txt="&" typ="X1" cap="Hide Control Point on HUD" hint="" }
            point_name: = { txt="&" hint="Control Point Name" }
            point_can_allies_touch: = { txt="&" typ="C" hint="Can Allies Touch This Point?"
                items ="Yes"$0D "No"
                values=  "0"$0D  "1"
            }
            point_can_axis_touch: = { txt="&" typ="C" hint="Can Axis Touch This Point?"
                items ="Yes"$0D "No"
                values=  "0"$0D  "1"
            }
            point_pointvalue: = { txt="&" hint="Time based points value" }
            point_points_for_cap: = { txt="&" hint="Points given to capturer" }
            point_default_owner: = { txt="&" typ="C" hint="Default Owner of the control point"
                items ="Neither"$0D "Allies"$0D "Axis"
                values=      "0"$0D      "1"$0D    "2"
            }
            point_axis_capsound: = { txt="&" hint="Sound Made when Axis captures" }
            point_allies_capsound: = { txt="&" hint="Sound Made when Allies captures" }
            point_resetsound: = { txt="&" hint="Sound Made when point resets" }
            point_allies_model: = { txt="&" hint="Model when allies capture" }
            point_axis_model: = { txt="&" hint="Model when axis capture" }
            point_reset_model: = { txt="&" hint="Model when point reset" }
            point_allies_target: = { txt="&" hint="Target when allies capture" }
            point_axis_target: = { txt="&" hint="Target when axis capture" }
            point_reset_target: = { txt="&" hint="Target when point reset" }
            point_win_string: = { txt="&" hint="String to Show when capped (vars)" }
            point_group: = { txt="&" hint="Group Name" }
            point_index: = { txt="&" hint="Index of this point ( unique )" }
        }
        dod_trigger_sandbag:form = {
            t_targetname = !
            t_target = !
            t_spirit_movewith = !
            t_master = !
            sandbag_range: = { txt="&" hint="Degrees in either direction" }
        }
        dod_capture_area:form = {
            t_targetname = !
            t_target = !
            t_spirit_movewith = !
            t_master = !
            area_allies_cancap: = { txt="&" typ="C" hint="Can Allies Cap?"
                items ="Yes"$0D "No"
                values=  "1"$0D  "0"
            }
            area_axis_cancap: = { txt="&" typ="C" hint="Can Axis Cap?"
                items ="Yes"$0D "No"
                values=  "1"$0D  "0"
            }
            area_allies_numcap: = { txt="&" hint="Number of Allies to cap" }
            area_axis_numcap: = { txt="&" hint="Number of Axis to cap" }
            area_time_to_cap: = { txt="&" hint="Time to cap (sec)" }
            area_allies_startcap: = { txt="&" hint="Target when allies start capture" }
            area_allies_breakcap: = { txt="&" hint="Target when allies cap is broken" }
            area_allies_endcap: = { txt="&" hint="Target when allies complete capture" }
            area_axis_startcap: = { txt="&" hint="Target when axis start capture" }
            area_axis_breakcap: = { txt="&" hint="Target when axis cap is broken" }
            area_axis_endcap: = { txt="&" hint="Target when axis complete capture" }
            area_hud_sprite: = { txt="&" hint="Sprite to show on HUD" }
            area_object_group: = { txt="&" hint="Requires Object from this group:" }
        }
        dod_point_relay:form = {
            t_targetname = !
            t_target = !
            dod_relay_team: = { txt="&" typ="C" hint="Relay triggers point with which team"
                items ="Allies"$0D "Axis"$0D "Reset Point"
                values=     "1"$0D    "2"$0D           "0"
            }
        }
        dod_round_timer:form = {
            t_targetname = !
            t_target = !
            spawnflags: = { txt="&" typ="X1" cap="Shown On HUD" hint="" }
            spawnflags: = { txt="&" typ="X2" cap="Start Off" hint="" }
            master: = { txt="&" hint="Master" }
            round_timer_length: = { txt="&" hint="Timer Length( in seconds )" }
        }
        weapon_30cal:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_amerknife:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_bar:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_colt:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_garand:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_gerknife:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_gewehr:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_kar:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_luger:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_m1carbine:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_mg34:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_mg42:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_mp40:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_mp44:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_spade:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_spring:form = {
            t_weapon = !
            t_targetx = !
        }
        weapon_thompson:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_30cal:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_bar:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_colt:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_garand:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_gewehr:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_kar:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_luger:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_m1carbine:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_mg34:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_MG42:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_mp40:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_mp44:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_spring:form = {
            t_weapon = !
            t_targetx = !
        }
        ammo_thompson:form = {
            t_weapon = !
            t_targetx = !
        }

//
// BuzzyBots
//
        npc_skrunk:form =
        {
          team: =
          {
            txt = "&"
            hint = "Team"
            typ = "C"
            items = "Qbe"$0D"Bahl"$0D"Pyra"
            values = "1"$0D"2"$0D"3"
          }
        }
        object_beacon:form =
        {
          timer: =
          {
            txt = "&"
            hint = "Countdown time"
          }
          submodel: =
          {
            txt = "&"
            hint = "Model"
            typ = "C"
            items = "Standard"$0D"Second one"$0D"Third one"
            values = "0"$0D"1"$0D"2"
          }
          team: =
          {
            txt = "&"
            hint = "Team"
            typ = "C"
            items = "Red"$0D"Blue"
            values = "0"$0D"1"
          }
        }
        object_superchip:form =
        {
          submodel: =
          {
            txt = "&"
            hint = "Model"
            typ = "C"
            items = "Standard"$0D"Second one"$0D"Third one"
            values = "0"$0D"1"$0D"2"
          }
        }
        info_player_red:form =
        {
          t_player = !
        }
        info_player_blue:form =
        {
          t_player = !
        }
        info_player_observer:form =
        {
          t_player = !
        }
        func_base:form =
        {
          team: =
          {
            txt = "&"
            hint = "Team"
            typ = "C"
            items = "Red"$0D"Blue"
            values = "0"$0D"1"
          }
        }
        info_chip:form =
        {
        }
        monster_bbturret:form =
        {
          bbox = '-16 -16 -32 16 16 32'
          orientation: =
          {
            txt = "&"
            hint = "Orientation"
            typ = "C"
            items = "Floor Mount"$0D"Ceiling Mount"
            values = "0"$0D"1"
          }
          spawnflags: =
          {
            txt = "&"
            typ = "X32"
            cap = "Autostart"
          }
          spawnflags: =
          {
            txt = "&"
            typ = "X64"
            cap = "Start Inactive"
          }
          team: =
          {
            txt = "&"
            hint = "Team"
            typ = "C"
            items = "Red"$0D"Blue"
            values = "0"$0D"1"
          }
          t_monster = !
    }
  }
}


