QQRKSRC1
// FAKK2 definition file for Quark

//$Header$
// ----------- REVISION HISTORY ------------
//$Log$
//

{
  QuArKProtected = "1"
  Description = "Base FAKK2 data"
  Default forms.qctx =
  {
    dup arenafilemaker:form =
    {
      help = "put one in your map to create an .arena script automatically"
      bots: =
      {
        Txt = "&"
        Hint = "bots that are default for this map"
      }
      longname: =
      {
        Txt = "&"
        Hint = "This name will be shown in StarTrek-EF"
      }
      fraglimit: =
      {
        Txt = "&"
        Typ = "EF1"
        Hint = "default fraglimit for map"
      }
      type: =
      {
        Txt = "&"
        Hint = "ffa tourney etc."
      }
    }
  }
  FAKK2 setup.qctx =
  {
    Game = "FAKK2"
    HTML = "help/index.html"
    Palette = $0000000F0F0F1F1F1F2F2F2F3F3F3F4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B
     $9BABABABBBBBBBCBCBCBDBDBDBEBEBEB634B235B431F533F1F4F3B1B47371B3F2F173B2B
     $173327132F23132B1F13271B0F23170F1B130B170F0B130F070F0B075F5F6F5B5B675B53
     $5F574F5B534B534F474B473F433F3B3B3B3737332F2F2F2B2B2727272323231B1B1B1717
     $171313138F77537B6343735B3B674F2FCF974BA77B3B8B672F6F5327EB9F27CB8B23AF77
     $1F93631B774F175B3B0F3F270B231707A73B2B9F2F23972B1B8B27137F1F0F73170B6717
     $075713004B0F00430F003B0F00330B002B0B00230B001B07001307007B5F4B7357436B53
     $3F674F3B5F4737574333533F2F4B372B4333273F2F2337271B2F2317271B131F170F170F
     $0B0F0B076F3B175F3717532F17432B17372313271B0F1B130B0F0B07B35B4FBF7B6FCB9B
     $93D7BBB7CBD7DFB3C7D39FB7C387A7B77397A75B879B47778B2F677F17536F134B670F43
     $5B0B3F5307374B072F3F072733001F2B00171F000F1300070B0000008B5757834F4F7B47
     $477343436B3B3B6333335B2F2F572B2B4B23233F1F1F331B1B2B13131F0F0F130B0B0B07
     $07000000979F7B8F9773878B6B7F8363777B5F7373576B6B4F6363475B5B434F4F3B4343
     $3337372B2F2F2323231B1717130F0F0B9F4B3F9343378B3B2F7F3727772F236B2B1B6323
     $17571F134F1B0F43170B37130B2B0F071F0B071707000B0000000000777BCF6F73C3676B
     $B76363A75B5B9B53578F4B4F7F4747733F3F673737572F2F4B27273F231F2F1B1723130F
     $170B07079BAB7B8F9F6F8797637B8B5773834B6777435F6F3B5767334B5B273F4F1B3743
     $132F3B0B232F071B23001317000B0F0000FF0023E70F3FD31B53BB275FA72F5F8F335F7B
     $33FFFFFFFFFFD3FFFFA7FFFF7FFFFF53FFFF27FFEB1FFFD717FFBF0FFFAB07FF9300EF7F
     $00E36B00D35700C74700B73B00AB2B009B1F008F17007F0F007307005F00004700002F00
     $001B0000EF00003737FFFF00000000FF2B2B231B1B1713130FEB977FC373539F57337B3F
     $1BEBD3C7C7AB9BA78B77876B579F5B53
    ShaderFiles: =
    {
      shaders/shaderlist.txt =
      {
        Data = "// Created by QuArK"$0D0A"// All shaders are extracted to a si"
         "ngle file called 'quark.shader'"$0D0A"quark"$0D0A
      }
      shaders/shaderlist.txt =
      {
        Data = "// Created by QuArK"$0D0A"// No shader in this map"$0D0A
      }
    }
    TextureFlags:form =
    {
      Style = "5"
      Reset: =
      {
        Cap = "Reset to default"
        Typ = "B"
        Hint = "Reset all flags to the texture's default"
        Delete: =
        {
          Flags = ""
          Contents = ""
          Value = ""
        }
      }
      Contents: =
      {
        Cap = "detail"
        Typ = "X134217728"
        Hint = "for small, detail brushes that Q3MAP can ignore"
      }
    }
  }
  NewFiles.qtx =
  {
    ToolBox = "New files..."
    Root = "FAKK2 file types.qtxfolder"
    FAKK2 file types.qtxfolder =
    {
      Pk3.pk3 =
      {
      }
    }
  }
  walltex:incl =
  {
    tex = "eden/basicwall"
  }
  floortex:incl =
  {
    tex = "eden/floortile"
  }
  ceiltex:incl =
  {
    tex = "eden/edenfloor"
  }
  NewMap:incl =
  {
    Game = "FAKK2"
    Root = "worldspawn:b"
  worldspawn:b =
  {
    farplane_cull = "1"
    Border walls:g =
    {
      East wall:p =
      {
        west:f =
        {
          v = '256 -80 -96 256 -208 -96 256 -80 32'
          tex = "eden/basicwall"
        }
// Maleficus: gotta show all those newbie mappers how to caulk! :)
// Its best to caulk ALL unseen faces! This reduces compile times, and the size
// of the .bsp file
        east:f =
        {
          v = '272 0 272 272 128 272 272 0 400'
          tex = "common/caulk"
        }
        south:f =
        {
          v = '432 -192 272 560 -192 272 432 -192 400'
          tex = "common/caulk"
        }
        north:f =
        {
          v = '432 192 272 304 192 272 432 192 400'
          tex = "common/caulk"
        }
        down:f =
        {
          v = '432 0 -96 560 0 -96 432 -128 -96'
          tex = "common/caulk"
        }
        up:f =
        {
          v = '432 0 96 560 0 96 432 128 96'
          tex = "common/caulk"
        }
      }
      West wall:p =
      {
        west:f =
        {
          v = '-272 0 272 -272 -128 272 -272 0 400'
          tex = "common/caulk"
        }
        east:f =
        {
          v = '-256 -192 -96 -256 -64 -96 -256 -192 32'
          tex = "eden/basicwall"
        }
        south:f =
        {
          v = '432 -192 272 560 -192 272 432 -192 400'
          tex = "common/caulk"
        }
        north:f =
        {
          v = '432 192 272 304 192 272 432 192 400'
          tex = "common/caulk"
        }
        down:f =
        {
          v = '432 0 -96 560 0 -96 432 -128 -96'
          tex = "common/caulk"
        }
        up:f =
        {
          v = '432 0 96 560 0 96 432 128 96'
          tex = "common/caulk"
        }
      }
      North wall:p =
      {
        west:f =
        {
          v = '-256 0 272 -256 -128 272 -256 0 400'
          tex = "common/caulk"
        }
        east:f =
        {
          v = '256 0 272 256 128 272 256 0 400'
          tex = "common/caulk"
        }
        south:f =
        {
          v = '-256 192 -96 -128 192 -96 -256 192 32'
          tex = "eden/basicwall"
        }
        north:f =
        {
          v = '432 208 272 304 208 272 432 208 400'
          tex = "common/caulk"
        }
        down:f =
        {
          v = '432 0 -96 560 0 -96 432 -128 -96'
          tex = "common/caulk"
        }
        up:f =
        {
          v = '432 0 96 560 0 96 432 128 96'
          tex = "common/caulk"
        }
      }
      South wall:p =
      {
        west:f =
        {
          v = '-256 0 272 -256 -128 272 -256 0 400'
          tex = "common/caulk"
        }
        east:f =
        {
          v = '256 0 272 256 128 272 256 0 400'
          tex = "common/caulk"
        }
        south:f =
        {
          v = '432 -208 272 560 -208 272 432 -208 400'
          tex = "common/caulk"
        }
        north:f =
        {
          v = '0 -192 -96 -128 -192 -96 0 -192 32'
          tex = "eden/basicwall"
        }
        down:f =
        {
          v = '432 0 -96 560 0 -96 432 -128 -96'
          tex = "common/caulk"
        }
        up:f =
        {
          v = '432 0 96 560 0 96 432 128 96'
          tex = "common/caulk"
        }
      }
      Sky:p =
      {
        west:f =
        {
          v = '-256 0 272 -256 -128 272 -256 0 400'
          tex = "common/caulk"
        }
        east:f =
        {
          v = '256 0 272 256 128 272 256 0 400'
          tex = "common/caulk"
        }
        south:f =
        {
          v = '432 -192 272 560 -192 272 432 -192 400'
          tex = "common/caulk"
        }
        north:f =
        {
          v = '432 192 272 304 192 272 432 192 400'
          tex = "common/caulk"
        }
        down:f =
        {
          v = '432 0 96 560 0 96 432 -128 96'
          tex = "eden/edenfloor"
        }
        up:f =
        {
          v = '432 0 112 560 0 112 432 128 112'
          tex = "common/caulk"
        }
      }
      Floor:p =
      {
        west:f =
        {
          v = '-256 0 272 -256 -128 272 -256 0 400'
          tex = "common/caulk"
        }
        east:f =
        {
          v = '256 0 272 256 128 272 256 0 400'
          tex = "common/caulk"
        }
        south:f =
        {
          v = '432 -192 272 560 -192 272 432 -192 400'
          tex = "common/caulk"
        }
        north:f =
        {
          v = '432 192 272 304 192 272 432 192 400'
          tex = "common/caulk"
        }
        down:f =
        {
          v = '432 0 -112 560 0 -112 432 -128 -112'
          tex = "common/caulk"
        }
        up:f =
        {
          v = '432 0 -96 560 0 -96 432 128 -96'
          tex = "eden/floortile"
        }
      }
    }
    info_player_start:e =
    {
      origin = "-144 0 -64"
      angle = "360"
    }
    light:e =
    {
      _color = "1 1 1"
      light = "300"
      angle = "360"
      origin = "0 0 0"
    }
  }
}

  Toolbox Folders.qtx =
  {
    Toolbox = "New map items..."
    Root = "FAKK2 Entities.qtxfolder"
    FAKK2 Entities.qtxfolder =
    {
      ;desc = "Created from entities.def"
      func_* entities.qtxfolder =
      {
        func_beam:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_door:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_earthquake:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_emitter:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_explodeobject:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_exploder:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_explodingwall:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_fallingrock:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_fulcrum:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_group:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_horizontalpipe:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_monkeybars:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_multi_exploder:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_pushobject:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_rain:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_randomspawn:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_remove:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_respawn:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_rope:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_rope_base:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_rope_piece:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_rotatingdoor:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_runthrough:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_sinkobject:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_spawn:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_spawnchain:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_spawnoutofsight:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_supplywater:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_teleportdest:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_throwobject:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_useanim:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_useobject:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
      info_* entities.qtxfolder =
      {
        info_grav_pathnode:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_notnull:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_null:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_pathnode:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_deathmatch:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_intermission:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_start:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_waypoint:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      misc_* entities.qtxfolder =
      {
        misc_model:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      other entities.qtxfolder =
      {
        detail:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        light:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        worldspawn:b =
        {
        }
      }
      portal_* entities.qtxfolder =
      {
        portal_camera:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        portal_surface:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      script_* entities.qtxfolder =
      {
        script_door:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        script_model:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        script_object:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        script_origin:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        script_skyorigin:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
      sound_* entities.qtxfolder =
      {
        sound_randomspeaker:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        sound_speaker:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      trigger_* entities.qtxfolder =
      {
        trigger_camerause:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_changelevel:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_damagetargets:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_exit:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_givepowerup:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_hurt:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_multiple:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_music:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_once:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_push:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_pushany:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_pushobject:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_relay:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        trigger_reverb:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_secret:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_setvariable:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_teleport:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_use:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_useonce:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
    }
  }
  Entity Forms.fctx =
  {
    func_beam:form =
    {
      help = "This creates a beam effect from the origin to the target's origi"
       "n. If no"$0D"target is specified, uses angles and projects beam out fr"
       "om there."$0D22"model"$22" Specifies the model to use as the beam"$0D22
       "overlap"$22" Specifies the amount of overlap each beam link should hav"
       "e. Use this to fill"$0D"in the cracks when using electric on beams. (D"
       "efault is 0)"$0D22"minoffset"$22" Minimum amount of electrical variati"
       "on (Default is 0)"$0D22"maxoffset"$22" Maximum amount of electrical va"
       "riation (Default is 5)"$0D22"color"$22" Vector specifiying the red,gre"
       "en, and blue components. (Default is "$22"1 1 1"$22")"$0D22"alpha"$22" "
       "Alpha of the beam (Default is 1.0)"$0D22"damage"$22" Amount of damage "
       "the beam inflicts if beam hits someone (Default is 0)"$0D22"angles"$22
       " Sets the angle of the beam if no target is specified."$0D22"life"$22" "
       "Sets the life of the beam for use with the persist spawnflag.  This is"
       " how long a beam will"$0D"be displayed."$0D22"numsegments"$22" Number "
       "of segments in a beam (Default is 4)"$0D22"delay"$22" Delay between be"
       "am updates.  (i.e. slows the effect of the beam down)"$0D22"shader"$22
       " Set the shader of the beam"$0D22"scale"$22" Set the width of the beam"
       $0D"START_ON  - Starts the beam on"$0D"PERSIST   - Keeps the last few b"
       "eams around and fades them out over the life of the beam"$0D"WAVE     "
       " - Make the beam follow a sin wave pattern"$0D"NOISE     - Use a more "
       "computationally expensive random effect, but the results are smoother"$0D
       "If the model field is not set, then a renderer generated beam will be "
       "created"$0D"using the color, minoffset, maxoffset, scale, and subdivis"
       "ions fields"$0D"If the targetname is set, it will use the target speci"
       "fied as the endpoint of the beam"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_ON"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "PERSIST"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "WAVE"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOISE"
      }
    }
    func_rotatingdoor:form =
    {
      help = "if two doors touch, they are assumed to be connected and operate"
       " as a unit."$0D"TOGGLE causes the door to wait in both the start and e"
       "nd states for a trigger event."$0D"DOOR_DONT_LINK is for when you have"
       " two doors that are touching but you want to operate independently."$0D
       "START_OPEN causes the door to move to its destination when spawned, an"
       "d operate in reverse.  It is used to temporarily or permanently close "
       "off an area when triggered (not usefull for touch or takedamage doors)"
       "."$0D"OPEN_DIRECTION indicates which direction to open when START_OPEN"
       " is set."$0D"AUTO_OPEN causes the door to open when a player is near i"
       "nstead of waiting for the player to use the door."$0D"TARGETED door is"
       " only operational from triggers or script"$0D22"message"$22"        is"
       " printed when the door is touched if it is a trigger door and it hasn'"
       "t been fired yet"$0D22"openangle"$22"    how wide to open the door"$0D
       $22"angle"$22"            determines the opening direction.  point towa"
       "rd the middle of the door (away from the hinge)"$0D22"targetname"$22" "
       "   if set, no touch field will be spawned and a remote button or trigg"
       "er field activates the door."$0D22"health"$22"            if set, door"
       " must be shot open"$0D22"time"$22"            move time (0.3 default)"$0D
       $22"wait"$22"            wait before returning (3 default, -1 = never r"
       "eturn)"$0D22"dmg"$22"                damage to inflict when blocked (0"
       " default)"$0D22"key"$22"          The item needed to open this door (d"
       "efault nothing)"$0D22"sound_stop"$22"        Specify the sound that pl"
       "ays when the door stops moving (default global door_stop)"$0D22"sound_"
       "move"$22"        Specify the sound that plays when the door opens or c"
       "loses (default global door_moving)"$0D22"sound_message"$22"    Specify"
       " the sound that plays when the door displays a message"$0D22"sound_loc"
       "ked"$22"       Specify the sound that plays when the door is locked"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "OPEN_DIRECTION"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DOOR_DONT_LINK"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "TOGGLE"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "AUTO_OPEN"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "TARGETED"
      }
    }
    func_door:form =
    {
      help = "if two doors touch, they are assumed to be connected and operate"
       " as a unit."$0D"TOGGLE causes the door to wait in both the start and e"
       "nd states for a trigger event."$0D"DOOR_DONT_LINK is for when you have"
       " two doors that are touching but you want to operate independently."$0D
       "START_OPEN causes the door to move to its destination when spawned, an"
       "d operate in reverse.  It is used to temporarily or permanently close "
       "off an area when triggered (not usefull for touch or takedamage doors)"
       "."$0D"OPEN_DIRECTION indicates which direction to open when START_OPEN"
       " is set."$0D"AUTO_OPEN causes the door to open when a player is near i"
       "nstead of waiting for the player to use the door."$0D"TARGETED door is"
       " only operational from triggers or script"$0D22"message"$22"        is"
       " printed when the door is touched if it is a trigger door and it hasn'"
       "t been fired yet"$0D22"angle"$22"            determines the opening di"
       "rection.  point toward the middle of the door (away from the hinge)"$0D
       $22"targetname"$22"    if set, no touch field will be spawned and a rem"
       "ote button or trigger field activates the door."$0D22"health"$22"     "
       "       if set, door must be shot open"$0D22"speed"$22"            move"
       " speed (100 default)"$0D22"time"$22"            move time (1/speed def"
       "ault, overides speed)"$0D22"wait"$22"            wait before returning"
       " (3 default, -1 = never return)"$0D22"lip"$22"                lip rema"
       "ining at end of move (8 default)"$0D22"dmg"$22"                damage "
       "to inflict when blocked (0 default)"$0D22"key"$22"          The item n"
       "eeded to open this door (default nothing)"$0D22"sound_stop"$22"       "
       " Specify the sound that plays when the door stops moving (default glob"
       "al door_stop)"$0D22"sound_move"$22"        Specify the sound that play"
       "s when the door opens or closes (default global door_moving)"$0D22"sou"
       "nd_message"$22"    Specify the sound that plays when the door displays"
       " a message"$0D22"sound_locked"$22"       Specify the sound that plays "
       "when the door is locked"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DOOR_DONT_LINK"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "TOGGLE"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "AUTO_OPEN"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "TARGETED"
      }
    }
    script_door:form =
    {
      help = "if two doors touch, they are assumed to be connected and operate"
       " as a unit."$0D"TOGGLE causes the door to wait in both the start and e"
       "nd states for a trigger event."$0D"DOOR_DONT_LINK is for when you have"
       " two doors that are touching but you want to operate independently."$0D
       "START_OPEN causes the door to move to its destination when spawned, an"
       "d operate in reverse.  It is used to temporarily or permanently close "
       "off an area when triggered (not usefull for touch or takedamage doors)"
       "."$0D"OPEN_DIRECTION indicates which direction to open when START_OPEN"
       " is set."$0D"AUTO_OPEN causes the door to open when a player is near i"
       "nstead of waiting for the player to use the door."$0D"TARGETED door is"
       " only operational from triggers or script"$0D22"message"$22"        is"
       " printed when the door is touched if it is a trigger door and it hasn'"
       "t been fired yet"$0D22"angle"$22"            determines the opening di"
       "rection.  point toward the middle of the door (away from the hinge)"$0D
       $22"targetname"$22"    if set, no touch field will be spawned and a rem"
       "ote button or trigger field activates the door."$0D22"health"$22"     "
       "       if set, door must be shot open"$0D22"speed"$22"            move"
       " speed (100 default)"$0D22"time"$22"            move time (1/speed def"
       "ault, overides speed)"$0D22"wait"$22"            wait before returning"
       " (3 default, -1 = never return)"$0D22"dmg"$22"                damage t"
       "o inflict when blocked (0 default)"$0D22"key"$22"          The item ne"
       "eded to open this door (default nothing)"$0D22"initthread"$22"   code "
       "to execute to setup the door (optional)"$0D22"openthread"$22"   code t"
       "o execute when opening the door (required)"$0D"The openthread should s"
       "end the "$22"dooropened"$22" event to the door, when it is completely "
       "open"$0D22"closethread"$22"  code to execute when closing the door (re"
       "quired)"$0D"The closethread should send the "$22"doorclosed"$22" event"
       " to the door, when it is completely closed"$0D22"sound_stop"$22"      "
       "  Specify the sound that plays when the door stops moving (default glo"
       "bal door_stop)"$0D22"sound_move"$22"        Specify the sound that pla"
       "ys when the door opens or closes (default global door_moving)"$0D22"so"
       "und_message"$22"    Specify the sound that plays when the door display"
       "s a message"$0D22"sound_locked"$22"       Specify the sound that plays"
       " when the door is locked"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DOOR_DONT_LINK"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "TOGGLE"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "AUTO_OPEN"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "TARGETED"
      }
    }
    func_earthquake:form =
    {
      help = "Causes an earthquake"$0D22"duration"$22" is the duration of the "
       "earthquake.  Default is 0.8 seconds."$0D22"magnitude"$22" severity of "
       "the quake.  Default 1.0"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "NO_RAMPUP"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NO_RAMPDOWN"
      }
    }
    func_exploder:form =
    {
      help = "Spawns an explosion when triggered.  Triggers any targets."$0D22
       "dmg"$22" specifies how much damage to cause. Default indicates 120."$0D
       $22"key"$22" The item needed to activate this. (default nothing)"$0D22"t"
       "hread"$22" name of thread to trigger.  This can be in a different scri"
       "pt file as well\"$0D"by using the '::' notation."
      bbox = '0 0 0 8 8 8'
    }
    func_multi_exploder:form =
    {
      help = "Spawns an explosion when triggered.  Triggers any targets."$0D"s"
       "ize of brush determines where explosions will occur."$0D22"dmg"$22" sp"
       "ecifies how much damage to cause from each explosion. (Default 120)"$0D
       $22"delay"$22" delay before exploding (Default 0 seconds)"$0D22"duratio"
       "n"$22" how long to explode for (Default 1 second)"$0D22"wait"$22" time"
       " between each explosion (default 0.25 seconds)"$0D22"random"$22" rando"
       "m factor (default 0.25)"$0D22"key"$22" The item needed to activate thi"
       "s. (default nothing)"$0D22"thread"$22" name of thread to trigger.  Thi"
       "s can be in a different script file as well\"$0D"by using the '::' not"
       "ation."$0D22"health"$22" makes the object damageable"$0D22"scale"$22" "
       "set the maximum size for spawned debris and explosions."$0D"MULTI_USE "
       "allows the func_multi_exploder to be used more than once"$0D"RANDOM_TI"
       "ME adjusts the wait between each explosion by the random factor"$0D"VI"
       "SIBLE allows you to make the trigger visible"$0D"RANDOM_SCALE scale ex"
       "plosions randomly. size will be between 0.25 and 1 times scale"
      spawnflags: =
      {
        typ = "X1"
        cap = "MULTI_USE"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "RANDOM_TIME"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "VISIBLE"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "RANDOM_SCALE"
      }
    }
    func_explodeobject:form =
    {
      help = "Spawns different kinds of debris when triggered.  Triggers any t"
       "argets."$0D"size of brush determines where explosions and debris will "
       "be spawned."$0D22"dmg"$22" specifies how much damage to cause from eac"
       "h explosion. (Default 120)"$0D22"delay"$22" delay before exploding (De"
       "fault 0 seconds)"$0D22"duration"$22" how long to explode for (Default "
       "1 second)"$0D22"wait"$22" time between each explosion (default 0.25 se"
       "conds)"$0D22"random"$22" random factor (default 0.25)"$0D22"health"$22
       " if specified, object must be damaged to trigger"$0D22"key"$22" The it"
       "em needed to activate this. (default nothing)"$0D22"severity"$22" how "
       "violent the debris should be ejected from the object( default 1.0 )"$0D
       $22"debrismodel"$22" What kind of debris to spawn (default nothing)"$0D
       $22"amount"$22" how much debris to spawn for each explosion (default 4)"
       $0D22"thread"$22" name of thread to trigger.  This can be in a differen"
       "t script file as well\"$0D"by using the '::' notation."$0D22"health"$22
       " makes the object damageable"$0D22"scale"$22" set the maximum size for"
       " spawned debris and explosions"$0D"MULTI_USE allows the func_explodeob"
       "ject to be used more than once"$0D"RANDOM_TIME adjusts the wait betwee"
       "n each explosion by the random factor"$0D"VISIBLE allows you to make t"
       "he trigger visible"$0D"RANDOM_SCALE scale explosions and debris random"
       "ly. size will be between 0.25 and 1 times scale"$0D"NO_EXPLOSIONS, if "
       "checked no explosions will be created"$0D"METAL_DEBRIS automatically s"
       "pawn metal debris, no need for debrismodel to be set"$0D"ROCK_DEBRIS a"
       "utomatically spawn rock debris, no need for debrismodel to be set"$0D"N"
       "OTSOLID debris is not solid"$0D"other valid tiki files include:"$0D"ob"
       "j_debris_glass1-4.tik"$0D"obj_debris_wood1-4.tik"
      spawnflags: =
      {
        typ = "X1"
        cap = "MULTI_USE"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "RANDOM_TIME"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "VISIBLE"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "RANDOM_SCALE"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NO_EXPLOSIONS"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "METAL_DEBRIS"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "ROCK_DEBRIS"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "NOTSOLID"
      }
    }
    info_grav_pathnode:form =
    {
      help = $22"radius"$22" Radius of the effect of the pull (Default is 256)"
       $0D22"speed"$22"  Speed of the pull (Use negative for a repulsion) (Def"
       "ault is 100)"$0D"Set HEADNODE to signify the head of the path."$0D"Set"
       " FORCE if you want un-fightable gravity ( i.e. can't go backwards )"$0D
       "Set PULL_UPWARDS if you want the gravnodes to pull you upwards also"
      bbox = '-16 -16 0 16 16 32'
      spawnflags: =
      {
        typ = "X1"
        cap = "HEADNODE"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "FORCE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "PULL_UPWARDS"
      }
    }
    light:form =
    {
      help = "Non-displayed light. If it targets another entity it will become"
       " a spot light"$0D"if "$22"LINEAR"$22" is set, it will be a linear ligh"
       "t"$0D"if "$22"NO_ENTITIES"$22" is set, this light will only effect the"
       " world, not entities"$0D"if "$22"ENTITY_TRACE"$22" is set, a trace is "
       "done betwee the light and the entity.\"$0D"The light is only added if "
       "the trace is clear"$0D22"no_entity_light"$22" - this light will not ef"
       "fect entities, just the world"$0D22"light"$22" - the intensity of the "
       "light, default 300"$0D22"color"$22" - the color of the light"$0D22"fal"
       "loff"$22" - if linear, specify the linear falloff (defaults to 1)"$0D22
       "radius"$22" - make this a spot light of the given radius"$0D22"angles"$22
       " - make this a spot light centered on angles"$0D22"spot_angle"$22" - i"
       "f this is a spot light, what angle to use (default 45)"$0D22"entity_tr"
       "ace"$22" - trace between the entity and the light"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "LINEAR"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NO_ENTITIES"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "ENTITY_TRACE"
      }
    }
    detail:form =
    {
      help = "Used to fake detail brushes, convenient for grouping"
    }
    func_group:form =
    {
      help = "Used to group brushes together just for editor convenience."
    }
    func_remove:form =
    {
      help = "Used for lighting and such"
    }
    misc_model:form =
    {
      help = $22"model"$22"     arbitrary .tik file to display"
      bbox = '0 0 0 0 0 0'
    }
    info_null:form =
    {
      help = "Used as a positional target for spotlights, etc."
      bbox = '-4 -4 -4 4 4 4'
    }
    info_notnull:form =
    {
      help = "Used as a positional target for lightning."
      bbox = '-4 -4 -4 4 4 4'
    }
    func_explodingwall:form =
    {
      help = "Blows up on activation or when attacked"$0D22"explosions"$22"   "
       "   number of explosions to spawn ( default 1 )"$0D22"land_angles"$22" "
       "    The angles you want this piece to\"$0D"orient to when it lands on "
       "the ground"$0D22"land_radius"$22"     The distance of the ground the p"
       "iece\"$0D"should be when on the ground ( default 16 )"$0D22"anglespeed"
       $22"      Speed at which pieces rotate ( default 100 ) \"$0D"if RANDOMA"
       "NGLES ( default is 600 )"$0D22"key"$22"             The item needed to"
       " activate this. (default nothing)"$0D22"base_velocity"$22"   The speed"
       " that the debris will have when triggered.  (default 0 0 280)"$0D22"ra"
       "ndom_velocity"$22" The variation of the velocity. x & y will be from -"
       "n < X,Y < n and z is 0 <= Z < n.  (default 140 140 140)"$0D"IF RANDOMA"
       "NGLES is set, object randomly spins while in the air."$0D"IF LANDSHATT"
       "ER is set, object shatters when it hits the ground."$0D"IF TWOSTAGE is"
       " set, object can be shattered once it lands on the ground."$0D"IF ACCU"
       "MALATIVE is set, damage is accumlative not threshold"$0D"IF INVISIBLE "
       "is set, these are invisible and not solid until triggered"$0D"If NOT_P"
       "LAYERS is set, the trigger does not respond to players"$0D"If MONSTERS"
       " is set, the trigger will respond to monsters"$0D"If PROJECTILES is se"
       "t, the trigger will respond to projectiles (rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X1"
        cap = "RANDOMANGLES"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "LANDSHATTER"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "INVISIBLE"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "ACCUMALATIVE"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "TWOSTAGE"
      }
    }
    trigger_teleport:form =
    {
      help = "Touching this entity will teleport players to the targeted objec"
       "t."$0D22"key"$22"                        The item needed to activate t"
       "his. (default nothing)"$0D22"teleportthread"$22"        The thread tha"
       "t is run when the player is teleported"$0D"If NOT_PLAYERS is set, the "
       "teleporter does not teleport players"$0D"If NOT_MONSTERS is set, the t"
       "eleporter does not teleport monsters"$0D"If NOT_PROJECTILES is set, th"
       "e teleporter does not teleport projectiles (rockets, grenades, etc.)"$0D
       "If NO_EFFECTS is set, the special effect will not happen and the telep"
       "ort will be instant"
      spawnflags: =
      {
        typ = "X1"
        cap = "VISIBLE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_PROJECTILES"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "NO_EFFECTS"
      }
    }
    func_teleportdest:form =
    {
      help = "Point trigger_teleport at these."
      bbox = '-32 -32 0 32 32 8'
    }
    func_useanim:form =
    {
      help = "This object allows you to place the player into a specific anima"
       "tion for the"$0D"purposes of using an object within the world."$0D"Thi"
       "s object should point at a func_useanimdest which contains specific"$0D
       "information about how the player is supposed to be posed."$0D22"count"$22
       " - how many times this should trigger (default -1, infinite)"$0D22"thr"
       "ead"$22" - thread to fire when used"$0D22"triggertarget"$22" - what to"
       " trigger when used."$0D22"delay"$22" - how long it takes to be re-trig"
       "gered ( default 3 seconds )"$0D22"key"$22" - item needed to activate t"
       "his"$0D"VISIBLE - if this is checked the trigger itself will be visibl"
       "e"$0D"TOUCHABLE - if this is set we can activate the trigger by standi"
       "ng in it."$0D"CONTINUOUS - if this is checked the thing will re-trigge"
       "r continously, otherwise"$0D"it waits until the player has left the tr"
       "igger field."
      spawnflags: =
      {
        typ = "X1"
        cap = "VISIBLE"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "TOUCHABLE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "CONTINUOUS"
      }
    }
    func_useobject:form =
    {
      help = "Allows you to setup a special object that places the player into"
       " a specific state"$0D"sequence.  Primarily used for levers and cranks."
       $0D"Object starts out in the "$22"start"$22" animation, when used the f"
       "ollowing occurs:"$0D"It is determined whether or not the player is in "
       "the right position to activate"$0D"the object, if it is, the player is"
       " moved to the exact offset and angle specified"$0D"by "$22"offset"$22" "
       "and "$22"yaw_offset"$22".  The right position is determined by a dot p"
       "roduct"$0D"with "$22"offset"$22" and "$22"yaw_offset"$22".  The "$22"c"
       "one"$22" parameter controls the cone in which the"$0D"object can be tr"
       "iggered. Once the player is in the right position, the player is place"
       "d"$0D"into "$22"state"$22" and the "$22"move"$22" animation is played."
       " Once the player animation ends, the"$0D22"move_thread"$22" will be ca"
       "lled.  If the use button is continued to be held down and count"$0D"is"
       " not finite, the animation will be continued to be played until the us"
       "e key is held"$0D"down.  Once the use key is let go, the "$22"stop"$22
       " animation will be played on the lever and"$0D"the "$22"stop_thread"$22
       " will be called."$0D22"activate"$22" - turns the useobject on"$0D22"de"
       "activate"$22" - turns the useobject off"$0D22"offset"$22" - vector off"
       "set of where the player should stand"$0D22"state"$22" - state to go in"
       "to when used"$0D22"state_backwards"$22" - what state to use when rever"
       "sing the object"$0D22"yaw_offset"$22" - what direction the player shou"
       "ld be facing when using the object"$0D22"cone"$22" - the cone in which"
       " the object can be used"$0D22"count"$22" - how many times this should "
       "trigger (default -1, infinite)"$0D22"move_thread"$22" - thread that is"
       " fired when the object has cycled one animation"$0D22"stop_thread"$22" "
       "- thread that is fired when the object has finished animating"$0D22"re"
       "set_thread"$22" - thread that is fired when the object is resetting it"
       "self"$0D22"reset_time"$22" - the time it takes for the object to reset"
       ", (default 0, it doesn't)"$0D22"triggertarget"$22" - target to trigger"
       " when finished animating, if reset_time is set, target"$0D"will be fir"
       "ed again when resetting"$0D22"damage_type"$22" - if set, can be trigge"
       "red by using a weapon to activate it.  If set to "$22"all"$22","$0D"an"
       "y damage will activate it."$0D"MULTI-STATE - the object has two differ"
       "ent states and must be used each time to set the state"$0D"when multi "
       "state is active, the reset_thread is called instead of stop_thread.  A"
       "ll UseObjects"$0D"have two states on and off.  When reset_time is set,"
       " the object will automatically return to the"$0D"off state after a pre"
       "set amount of time.  When multi-state is set this must be done manuall"
       "y."
      spawnflags: =
      {
        typ = "X1"
        cap = "MULTI"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "STATE"
      }
    }
    info_waypoint:form =
    {
      help = "Used as a positioning device for objects"
      bbox = '-8 -8 -8 8 8 8'
    }
    func_monkeybars:form =
    {
      help = "Monkey bars"
    }
    func_horizontalpipe:form =
    {
      help = "Horizontal pipe that play can crawl upside down on."
    }
    func_pushobject:form =
    {
      help = "Pushable object"$0D22"dmg"$22" how much damage to cause when blo"
       "cked.  (default 2)"$0D22"pushsound"$22" Sound to play when object is p"
       "ushed (default is none)"
    }
    func_fallingrock:form =
    {
      help = "Creates a rock that, when triggered, begins falling and bounces "
       "along a path"$0D"specified by targetname.  Use info_waypoint for the p"
       "ath."$0D22"targetname"$22" the path to follow."$0D22"dmg"$22" how much"
       " damage to cause creatures it hits (default 20)."$0D22"speed"$22" how "
       "fast to move (default 200)."$0D22"wait"$22" how long to wait before fa"
       "lling when triggered (default 0)."$0D22"noise"$22" sound to play when "
       "rock touches the world"$0D"AUTO_RESET - when done falling, automatical"
       "ly return to the start"$0D"NO_RANDOMNESS - don't use any randomness wh"
       "en making the rocks fall"$0D"REMOVE_ON_GROUND - remove the rocks when "
       "done"
      spawnflags: =
      {
        typ = "X1"
        cap = "AUTO_RESET"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NO_RANDOMNESS"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "REMOVE_ON_GROUND"
      }
    }
    func_supplywater:form =
    {
      help = "Creates a trigger than when touched gives the player water over "
       "a continuous time"$0D22"wait"$22" - how long to wait before re-trigger"
       "ing ( default 0.1 seconds )"$0D22"amount"$22" - how much water to give"
       " player on each trigger ( default 1 unit )"$0D22"maxwater"$22" - what "
       "the maximum amount of water this supply should charge the player to ( "
       "default 50 )"$0D"If NOT_PLAYERS is set, the trigger does not respond t"
       "o players"$0D"If MONSTERS is set, the trigger will respond to monsters"
       $0D"If PROJECTILES is set, the trigger will respond to projectiles (roc"
       "kets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    func_emitter:form =
    {
      help = $22"emitter"$22" - Name of emitter to use."
    }
    func_rain:form =
    {
      help = "This creates a raining effect in the brush"$0D22"emitter"$22" - "
       "Name of emitter to use for the rain."
    }
    info_pathnode:form =
    {
      help = "FLEE marks the node as a safe place to flee to.  Actor will be r"
       "emoved when it reaches a flee node and is not visible to a player."$0D
       "DUCK marks the node as a good place to duck behind during weapon fire."
       $0D"COVER marks the node as a good place to hide behind during weapon f"
       "ire."$0D"DOOR marks the node as a door node.  If an adjacent node has "
       "DOOR marked as well, the actor will only use the path if the door in b"
       "etween them is unlocked."$0D"JUMP marks the node as one to jump from w"
       "hen going to the node specified by target."$0D22"target"$22" the pathn"
       "ode to jump to."
      bbox = '-24 -24 0 24 24 32'
      spawnflags: =
      {
        typ = "X1"
        cap = "FLEE"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "DUCK"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "COVER"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DOOR"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "JUMP"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "LADDER"
      }
    }
    func_throwobject:form =
    {
      help = "This is an object you can pickup and throw at people"
      bbox = '-16 -16 0 16 16 32'
    }
    info_player_start:form =
    {
      help = "The normal starting point for a level."$0D22"angle"$22" - the di"
       "rection the player should face"$0D22"thread"$22" - the thread that sho"
       "uld be called when spawned at this position"
      bbox = '-16 -16 0 16 16 96'
    }
    info_player_deathmatch:form =
    {
      help = "potential spawning position for deathmatch games"$0D22"angle"$22
       " - the direction the player should face"$0D22"thread"$22" - the thread"
       " that should be called when spawned at this position"
      bbox = '-16 -16 0 16 16 96'
    }
    info_player_intermission:form =
    {
      help = "viewing point in between deathmatch levels"
      bbox = '-16 -16 0 16 16 96'
    }
    portal_surface:form =
    {
      help = "The portal surface nearest this entity will show a view from the"
       " targeted portal_camera, or a mirror view if untargeted."
      bbox = '-8 -8 -8 8 8 8'
    }
    portal_camera:form =
    {
      help = "The target for a portal_surface.  You can set either angles or t"
       "arget another entity to determine the direction of view."$0D22"roll"$22
       " an angle modifier to orient the camera around the target vector;"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "slowrotate"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "fastrotate"
      }
    }
    func_rope:form =
    {
      help = "The rope is defined by a bounding box.  The top of the box denot"
       "es the top of the rope and"$0D"the bottom of the rope is denoted by th"
       "e bottom of the box.  The width of the box determines"$0D"the trigger "
       "field in which the player will hang on to the rope when grabbing it."$0D
       $22"ropeshader"$22" : Name of the shader to use to render the rope (def"
       "ault is "$22"ropeshader"$22")"
    }
    func_rope_piece:form =
    {
      help = "Rope Piece - A single piece of a rope"$0D"WIGGLE : Makes this pi"
       "ece of the rope wiggle about randomly. Only does this while not attach"
       "ed."$0D"ATT_WIGGLE : Makes this piece of the rope wiggle around even w"
       "hile attached. WIGGLE must also be marked for this to work."$0D22"targ"
       "et"$22" : the "$22"targetname"$22" of the next piece in the rope. This"
       " should be blank if it's the last piece in the rope."$0D"If a non-rope"
       "_piece entity is targeted, it will attach itself to it."$0D22"targetna"
       "me"$22" : used for the previous piece in the rope to find and link to "
       "this piece of the rope."$0D22"target2"$22" : the targetname of the ent"
       "ity to attach this piece of the rope to."$0D"Any piece of a rope can b"
       "e attached to something and be triggered at any time to detach it."$0D
       "Triggering the base of an attached rope will detach all attached point"
       "s on that rope."$0D22"wigglemove"$22" : the amount of force the random"
       " wiggling has."$0D"Default = 32"$0D22"wiggletime"$22" : number of seco"
       "nds between each time the rope wiggles."$0D"Default = 0.5"$0D"All othe"
       "r settings are set in the rope's rope_base entity."
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "WIGGLE"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "ATT_WIGGLE"
      }
    }
    func_rope_base:form =
    {
      help = "Rope Base - the main control and top end attachment entity for r"
       "opes"$0D"This entity is the point to where ropes attach their top end."
       " It's a stationary point entity."$0D"All setting for the whole rope ar"
       "e specified through this entity."$0D"If you want/need to trigger a rop"
       "e to do something, then this is the entity to trigger."$0D"Trying to t"
       "rigger a rope_piece will do nothing."$0D"START_STILL : Specifies that "
       "the whole rope will be completely stationary untill it is either trigg"
       "ered, or grabbed."$0D22"targetname"$22" : The name that the rope is tr"
       "iggered with."$0D22"target"$22" : The "$22"targetname"$22" of the firs"
       "t rope_piece in the rope."$0D22"piecelength"$22" : The distance betwee"
       "n each piece of the rope."$0D"Default = 24"$0D22"piecemodel"$22" : The"
       " model to use for the rope pieces."$0D22"ropedampener"$22" : Horizonta"
       "l velocity dampener for the rope."$0D"Default = 0.8"$0D22"stiffness"$22
       " : Movement restricter on the amount that the rope can flex and bend."$0D
       "Valid values are from -1 (no restriction) to 1 (tried to be perfectly "
       "straight."$0D"The position of the first rope piece determines what dir"
       "ection the rope is pushed from the base of the rope."$0D"Default = -1"$0D
       $22"strength"$22" : How strongly a stiff rope goes to position."$0D"Def"
       "ault = 1;"$0D22"attachmodel"$22" : name of a model to attach onto this"
       " piece of rope"$0D22"ropeshader"$22" : Name of the shader to use to re"
       "nder the rope (default is "$22"ropeshader"$22")"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_STILL"
      }
    }
    script_object:form =
    {
      spawnflags: =
      {
        typ = "X1"
        cap = "NOT_SOLID"
      }
    }
    script_model:form =
    {
      bbox = '0 0 0 0 0 0'
      spawnflags: =
      {
        typ = "X1"
        cap = "NOT_SOLID"
      }
    }
    script_origin:form =
    {
      help = "Used as an alternate origin for objects.  Bind the object to the"
       " script_origin"$0D"in order to simulate changing that object's origin."
      bbox = '-8 -8 -8 8 8 8'
    }
    script_skyorigin:form =
    {
      help = "Used to specify the origin of a portal sky"
    }
    func_spawn:form =
    {
      help = $22"modelname"$22" The name of the TIKI file you wish to spawn. ("
       "Required)"$0D22"spawntargetname"$22" This will be the targetname of th"
       "e spawned model. (default is null)"$0D22"spawntarget"$22" This will be"
       " the target of the spawned model. (default is null)"$0D22"pickup_threa"
       "d"$22" passed on to the spawned model"$0D22"key"$22"       The item ne"
       "eded to activate this. (default nothing)"$0D22"attackmode"$22" Attacki"
       "ng mode of the spawned actor (default 0)"
      bbox = '-8 -8 -8 8 8 8'
    }
    func_randomspawn:form =
    {
      help = "Randomly spawns an entity.  The time between spawns is determine"
       "d by min_time and max_time"$0D"The entity can be turned off and on by "
       "triggering it"$0D22"modelname"$22"   The name of the TIKI file you wis"
       "h to spawn. (Required)"$0D22"key"$22"         The item needed to activ"
       "ate this. (default nothing)"$0D22"min_time"$22" The minimum time betwe"
       "en spawns (default 0.2 seconds)"$0D22"max_time"$22" The maximum time b"
       "etween spawns (default 1 seconds)"$0D"START_OFF - spawn is off by defa"
       "ult"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OFF"
      }
    }
    func_respawn:form =
    {
      help = "When the thing that is spawned is killed, this func_respawn will"
       " get"$0D"triggered."$0D22"modelname"$22"   The name of the TIKI file y"
       "ou wish to spawn. (Required)"$0D22"key"$22"         The item needed to"
       " activate this. (default nothing)"
      bbox = '-8 -8 -8 8 8 8'
    }
    func_spawnoutofsight:form =
    {
      help = "Will only spawn something out of sight of its targets."$0D22"mod"
       "elname"$22"   The name of the TIKI file you wish to spawn. (Required)"$0D
       $22"spawntargetname"$22" This will be the targetname of the spawned mod"
       "el. (default is null)"$0D22"spawntarget"$22" This will be the target o"
       "f the spawned model. (default is null)"$0D22"key"$22"         The item"
       " needed to activate this. (default nothing)"
      bbox = '-8 -8 -8 8 8 8'
    }
    func_spawnchain:form =
    {
      help = "Tries to spawn something out of the sight of players.  If it fai"
       "ls, it will"$0D"trigger its targets."$0D22"modelname"$22"   The name o"
       "f the TIKI file you wish to spawn. (Required)"$0D22"spawntargetname"$22
       " This will be the targetname of the spawned model. (default is null)"$0D
       $22"spawntarget"$22" This will be the target of the spawned model. (def"
       "ault is null)"$0D22"key"$22"         The item needed to activate this."
       " (default nothing)"
      bbox = '-8 -8 -8 8 8 8'
    }
    func_fulcrum:form =
    {
      help = "This creates a fulcrum that when you stand on it, it will rotate"
       " due to"$0D"the weight exerted it will start rotating, when not standi"
       "ng on it, it"$0D"will return to its rest position."$0D22"speed"$22" - "
       "set the speed at which the fulcrum will operate (default is 48)"$0D22"r"
       "esetspeed"$22" - speed at whcih fulcrum resets, (default speed * 0.002"
       ")"$0D22"dampening"$22" - dampen constant (default 0.95)"$0D22"limit"$22
       " - limit the movement of the fulcrum (default 90 degrees)"$0D22"moveso"
       "und"$22" - sound to be played while fulcrum is moving"$0D"X_AXIS_ONLY "
       "- only adjust the X axis"$0D"Y_AXIS_ONLY - only adjust the Y axis"
      spawnflags: =
      {
        typ = "X1"
        cap = "X_AXIS_ONLY"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "Y_AXIS_ONLY"
      }
    }
    func_runthrough:form =
    {
      help = "This is a trigger field that the player can run through and spaw"
       "n tiki models"$0D"at that position.  Used for releasing chaff from gra"
       "ss or butterflys from"$0D"flower gardens"$0D22"speed"$22" - speed at w"
       "hich you have to be moving to trigger ( default 100 )"$0D22"delay"$22" "
       "- time between triggering ( default 0.1 )"$0D22"chance"$22" - chance t"
       "hat the trigger will spawn something( default 0.5 )"$0D22"lip"$22" - h"
       "ow far below the surface of the trigger we should spawn these things ("
       " default 3 )"$0D22"offset"$22" - vector offset oriented along velocity"
       " vector( default "$22"0 0 0"$22" )"$0D22"spawnmodel"$22" - thing to sp"
       "awn when triggered"
    }
    func_sinkobject:form =
    {
      help = "This creates an object which gradually sinks downward when stepp"
       "ed on."$0D22"delay"$22" - delay between when object starts reacting to"
       "wards weight (default 0 seconds)"$0D22"speed"$22" - set the speed at w"
       "hich sinkobject sinks (default is 50)"$0D22"resetspeed"$22" - speed at"
       " which sinkobject resets its position, (default speed * 0.1)"$0D22"dam"
       "pening"$22" - dampening constant to mitigate acceleration (default 0.9"
       "5)"$0D22"limit"$22" - limit the movement of the sinkobject how far dow"
       "n it should go (default 1000 units)"$0D22"resetdelay"$22" - time betwe"
       "en player gets off platform, and platform starts resetting itself."$0D
       $22"sinksound"$22" - sound to be played while platform is sinking."$0D22
       "resetsound"$22" - sound to be played while platform is resetting."$0D22
       "active"$22" - make the sink object active"$0D22"notactive"$22" - make "
       "the sink object not active"$0D"FALLAWAY - the sink object will progres"
       "sively fall down faster and faster"$0D"NO_RESET - the sink object will"
       " not reset, only move downward"
      spawnflags: =
      {
        typ = "X2"
        cap = "FALLAWAY"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NO_RESET"
      }
    }
    trigger_multiple:form =
    {
      help = "Variable sized repeatable trigger.  Must be targeted at one or m"
       "ore entities."$0D"If "$22"health"$22" is set, the trigger must be kill"
       "ed to activate each time."$0D"If "$22"delay"$22" is set, the trigger w"
       "aits some time after activating before firing."$0D22"thread"$22" name "
       "of thread to trigger.  This can be in a different script file as well\"
       $0D"by using the '::' notation."$0D"if "$22"angle"$22" is set, the trig"
       "ger will only fire when someone is facing the"$0D"direction of the ang"
       "le."$0D22"cone"$22" the cone in which a directed trigger can be trigge"
       "red (default 60 degrees)"$0D22"wait"$22" : Seconds between triggerings"
       ". (.2 default)"$0D22"cnt"$22" how many times it can be triggered (infi"
       "nite default)"$0D22"triggerable"$22" turn trigger on"$0D22"nottriggera"
       "ble"$22" turn trigger off"$0D"If NOT_PLAYERS is set, the trigger does "
       "not respond to players"$0D"If MONSTERS is set, the trigger will respon"
       "d to monsters"$0D"If PROJECTILES is set, the trigger will respond to p"
       "rojectiles (rockets, grenades, etc.)"$0D"set "$22"message"$22" to text"
       " string"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_once:form =
    {
      help = "Variable sized trigger. Triggers once, then removes itself."$0D"Y"
       "ou must set the key "$22"target"$22" to the name of another object in "
       "the"$0D"level that has a matching"$0D"If "$22"health"$22" is set, the "
       "trigger must be killed to activate it."$0D"If "$22"delay"$22" is set, "
       "the trigger waits some time after activating before firing."$0D22"targ"
       "etname"$22".  If "$22"health"$22" is set, the trigger must be killed t"
       "o activate."$0D22"thread"$22" name of thread to trigger.  This can be "
       "in a different script file as well\"$0D"by using the '::' notation."$0D
       "if "$22"killtarget"$22" is set, any objects that have a matching "$22"t"
       "arget"$22" will be"$0D"removed when the trigger is fired."$0D"if "$22"a"
       "ngle"$22" is set, the trigger will only fire when someone is facing th"
       "e"$0D"direction of the angle."$0D22"cone"$22" the cone in which a dire"
       "cted trigger can be triggered (default 60 degrees)"$0D22"key"$22" The "
       "item needed to activate this. (default nothing)"$0D22"triggerable"$22" "
       "turn trigger on"$0D22"nottriggerable"$22" turn trigger off"$0D"If NOTO"
       "UCH is set, trigger will not respond to touch"$0D"If NOT_PLAYERS is se"
       "t, the trigger does not respond to players"$0D"If MONSTERS is set, the"
       " trigger will respond to monsters"$0D"If PROJECTILES is set, the trigg"
       "er will respond to projectiles (rockets, grenades, etc.)"$0D"set "$22"m"
       "essage"$22" to text string"
      spawnflags: =
      {
        typ = "X1"
        cap = "NOTOUCH"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_relay:form =
    {
      help = "This fixed size trigger cannot be touched, it can only be fired "
       "by other events."$0D"It can contain killtargets, targets, delays, and "
       "messages."$0D"If NOT_PLAYERS is set, the trigger does not respond to e"
       "vents triggered by players"$0D"If MONSTERS is set, the trigger will re"
       "spond to events triggered by monsters"$0D"If PROJECTILES is set, the t"
       "rigger will respond to events triggered by projectiles (rockets, grena"
       "des, etc.)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_secret:form =
    {
      help = "Secret counter trigger.  Automatically sets and increments scrip"
       "t variables \"$0D"level.total_secrets and level.found_secrets."$0D"set"
       " "$22"message"$22" to text string"$0D22"key"$22" The item needed to ac"
       "tivate this. (default nothing)"$0D"if "$22"angle"$22" is set, the trig"
       "ger will only fire when someone is facing the"$0D"direction of the ang"
       "le."$0D22"cone"$22" the cone in which a directed trigger can be trigge"
       "red (default 60 degrees)"$0D22"thread"$22" name of thread to trigger. "
       " This can be in a different script file as well \"$0D"by using the '::"
       "' notation.  (defaults to "$22"global/universal_script.scr::secret"$22
       ")"$0D22"triggerable"$22" turn trigger on"$0D22"nottriggerable"$22" tur"
       "n trigger off"$0D"If NOTOUCH is set, trigger will not respond to touch"
       $0D"If NOT_PLAYERS is set, the trigger does not respond to players"$0D"I"
       "f MONSTERS is set, the trigger will respond to monsters"$0D"If PROJECT"
       "ILES is set, the trigger will respond to projectiles (rockets, grenade"
       "s, etc.)"
      spawnflags: =
      {
        typ = "X1"
        cap = "NOTOUCH"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_setvariable:form =
    {
      help = "Sets a variable specified by "$22"variable"$22" and "$22"value"$22
       "."$0D"Variable is assumed to be of the "$22"global"$22" variety unless"
       " LEVEL is set."$0D"Variable sized trigger. Triggers once by default."$0D
       "You must set the key "$22"target"$22" to the name of another object in"
       " the"$0D"level that has a matching"$0D22"variable"$22" - variable to s"
       "et"$0D22"value"$22" - value to set in variable, value can also be one "
       "of the following reserved\"$0D"tokens."$0D"- "$22"increment"$22" - add"
       " one to the variable"$0D"- "$22"decrement"$22" - subtract one from the"
       " variable"$0D"- "$22"toggle"$22" - if 1, then zero.  If zero then 1."$0D
       "If "$22"health"$22" is set, the trigger must be killed to activate it."
       $0D"If "$22"delay"$22" is set, the trigger waits some time after activa"
       "ting before firing."$0D22"targetname"$22".  If "$22"health"$22" is set"
       ", the trigger must be killed to activate."$0D22"thread"$22" name of th"
       "read to trigger.  This can be in a different script file as well\"$0D"b"
       "y using the '::' notation."$0D"if "$22"killtarget"$22" is set, any obj"
       "ects that have a matching "$22"target"$22" will be"$0D"removed when th"
       "e trigger is fired."$0D"if "$22"angle"$22" is set, the trigger will on"
       "ly fire when someone is facing the"$0D"direction of the angle."$0D22"c"
       "one"$22" the cone in which a directed trigger can be triggered (defaul"
       "t 60 degrees)"$0D22"key"$22" The item needed to activate this. (defaul"
       "t nothing)"$0D22"triggerable"$22" turn trigger on"$0D22"nottriggerable"
       $22" turn trigger off"$0D"If NOTOUCH is set, trigger will not respond t"
       "o touch"$0D"if LEVEL is set, variable will be a level variable otherwi"
       "se it will be a game variable"$0D"If NOT_PLAYERS is set, the trigger d"
       "oes not respond to players"$0D"If MONSTERS is set, the trigger will re"
       "spond to monsters"$0D"If PROJECTILES is set, the trigger will respond "
       "to projectiles (rockets, grenades, etc.)"$0D"set "$22"message"$22" to "
       "text string"
      spawnflags: =
      {
        typ = "X1"
        cap = "NOTOUCH"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "LEVEL"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_push:form =
    {
      help = "Pushes entities as if they were caught in a heavy wind."$0D22"sp"
       "eed"$22" indicates the rate that entities are pushed (default 1000)."$0D
       $22"angle"$22" indicates the direction the wind is blowing (-1 is up, -"
       "2 is down)"$0D22"key"$22" The item needed to activate this. (default n"
       "othing)"$0D22"target"$22" if target is set, then a velocity will be ca"
       "lculated based on speed"$0D22"triggerable"$22" turn trigger on"$0D22"n"
       "ottriggerable"$22" turn trigger off"$0D"If NOT_PLAYERS is set, the tri"
       "gger does not push players"$0D"If NOT_MONSTERS is set, the trigger wil"
       "l not push monsters"$0D"If NOT_PROJECTILES is set, the trigger will no"
       "t push projectiles (rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_PROJECTILES"
      }
    }
    trigger_pushany:form =
    {
      help = "Pushes entities as if they were caught in a heavy wind."$0D22"sp"
       "eed"$22" indicates the rate that entities are pushed (default 1000)."$0D
       $22"angles"$22" indicates the direction of the push"$0D22"key"$22" The "
       "item needed to activate this. (default nothing)"$0D22"target"$22" if t"
       "arget is set, then a velocity will be calculated based on speed"$0D22"t"
       "riggerable"$22" turn trigger on"$0D22"nottriggerable"$22" turn trigger"
       " off"$0D"If NOT_PLAYERS is set, the trigger does not push players"$0D"I"
       "f NOT_MONSTERS is set, the trigger will not push monsters"$0D"If NOT_P"
       "ROJECTILES is set, the trigger will not push projectiles (rockets, gre"
       "nades, etc.)"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_PROJECTILES"
      }
    }
    sound_speaker:form =
    {
      help = "play a sound when it is used"$0D"AMBIENT-ON specifies an ambient"
       " sound that starts on"$0D"AMBIENT-OFF specifies an ambient sound that "
       "starts off"$0D"TOGGLE specifies that the speaker toggles on triggering"
       $0D"if (AMBIENT-?) is not set, then the sound is sent over explicitly t"
       "his creates more net traffic"$0D22"volume"$22" how loud 0-4 (1 default"
       " full volume, ambients do not respond to volume)"$0D22"noise"$22" soun"
       "d to play"$0D22"channel"$22" channel on which to play sound\"$0D"(0 au"
       "to, 1 weapon, 2 voice, 3 item, 4 body, 8 don't use PHS) (voice is defa"
       "ult)"$0D22"key"$22" The item needed to activate this. (default nothing"
       ")"$0D22"thread"$22" name of thread to trigger.  This can be in a diffe"
       "rent script file as well\"$0D"by using the '::' notation."$0D"Normal s"
       "ounds play each time the target is used."$0D"Ambient Looped sounds hav"
       "e a volume 1, and the use function toggles it on/off."$0D"If NOT_PLAYE"
       "RS is set, the trigger does not respond to players"$0D"If MONSTERS is "
       "set, the trigger will respond to monsters"$0D"If PROJECTILES is set, t"
       "he trigger will respond to projectiles (rockets, grenades, etc.)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "AMBIENT"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "ON"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "AMBIENT"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "OFF"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X256"
        cap = "PROJECTILES"
      }
      spawnflags: =
      {
        typ = "X512"
        cap = "TOGGLE"
      }
    }
    sound_randomspeaker:form =
    {
      help = "play a sound at random times"$0D22"mindelay"$22" minimum delay b"
       "etween sound triggers (default 3)"$0D22"maxdelay"$22" maximum delay be"
       "tween sound triggers (default 10)"$0D22"chance"$22" chance that sound "
       "will play when fired (default 1)"$0D22"volume"$22" how loud 0-4 (1 def"
       "ault full volume)"$0D22"noise"$22" sound to play"$0D22"channel"$22" ch"
       "annel on which to play sound\"$0D"(0 auto, 1 weapon, 2 voice, 3 item, "
       "4 body, 8 don't use PHS) (voice is default)"$0D22"key"$22"          Th"
       "e item needed to activate this. (default nothing)"$0D"Normal sounds pl"
       "ay each time the target is used."$0D"If NOT_PLAYERS is set, the trigge"
       "r does not respond to players"$0D"If MONSTERS is set, the trigger will"
       " respond to monsters"$0D"If PROJECTILES is set, the trigger will respo"
       "nd to projectiles (rockets, grenades, etc.)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_changelevel:form =
    {
      help = "When the player touches this, he gets sent to the map listed in "
       "the "$22"map"$22" variable."$0D"Unless the NO_INTERMISSION flag is set"
       ", the view will go to the info_intermission"$0D"spot and display stats"
       "."$0D22"spawnspot"$22"  name of the spawn location to start at in next"
       " map."$0D22"key"$22"          The item needed to activate this. (defau"
       "lt nothing)"$0D22"thread"$22" This defaults to "$22"LevelComplete"$22" "
       "and should point to a thread that is called just"$0D"before the level "
       "ends."$0D22"triggerable"$22" turn trigger on"$0D22"nottriggerable"$22" "
       "turn trigger off"$0D"If NOT_PLAYERS is set, the trigger does not respo"
       "nd to players"$0D"If MONSTERS is set, the trigger will respond to mons"
       "ters"$0D"If PROJECTILES is set, the trigger will respond to projectile"
       "s (rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X1"
        cap = "NO_INTERMISSION"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_use:form =
    {
      help = "Activates targets when 'used' by an entity"$0D22"key"$22"       "
       "   The item needed to activate this. (default nothing)"$0D22"thread"$22
       " name of thread to trigger.  This can be in a different script file as"
       " well\"$0D"by using the '::' notation."$0D22"triggerable"$22" turn tri"
       "gger on"$0D22"nottriggerable"$22" turn trigger off"$0D"If NOT_PLAYERS "
       "is set, the trigger does not respond to players"$0D"If MONSTERS is set"
       ", the trigger will respond to monsters"
      spawnflags: =
      {
        typ = "X1"
        cap = "VISIBLE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
    }
    trigger_useonce:form =
    {
      help = "Activates targets when 'used' by an entity, but only once"$0D22"k"
       "ey"$22"          The item needed to activate this. (default nothing)"$0D
       $22"thread"$22" name of thread to trigger.  This can be in a different "
       "script file as well\"$0D"by using the '::' notation."$0D22"triggerable"
       $22" turn trigger on"$0D22"nottriggerable"$22" turn trigger off"$0D"If "
       "NOT_PLAYERS is set, the trigger does not respond to players"$0D"If MON"
       "STERS is set, the trigger will respond to monsters"
      spawnflags: =
      {
        typ = "X1"
        cap = "VISIBLE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
    }
    trigger_hurt:form =
    {
      help = $22"damage"$22" amount of damage to cause. (default 10)"$0D22"key"
       $22"          The item needed to activate this. (default nothing)"$0D22
       "damagetype"$22" what kind of damage should be given to the player. (de"
       "fault CRUSH)"$0D22"triggerable"$22" turn trigger on"$0D22"nottriggerab"
       "le"$22" turn trigger off"$0D"If NOT_PLAYERS is set, the trigger does n"
       "ot hurt players"$0D"If NOT_MONSTERS is set, the trigger does not hurt "
       "monsters"$0D"If PROJECTILES is set, the trigger will hurt projectiles "
       "(rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_damagetargets:form =
    {
      help = $22"damage"$22" amount of damage to cause. If no damage is specif"
       "ied, objects\"$0D"are damaged by the current health+1"$0D22"key"$22"  "
       "        The item needed to activate this. (default nothing)"$0D"if a t"
       "rigger_damagetargets is shot at and the SOLID flag is set,\"$0D"the da"
       "mage is passed on to the targets"$0D22"triggerable"$22" turn trigger o"
       "n"$0D22"nottriggerable"$22" turn trigger off"$0D"If NOT_PLAYERS is set"
       ", the trigger does not hurt players"$0D"If NOT_MONSTERS is set, the tr"
       "igger does not hurt monsters"$0D"If PROJECTILES is set, the trigger wi"
       "ll hurt projectiles (rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X1"
        cap = "SOLID"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_camerause:form =
    {
      help = "Activates 'targeted' camera when 'used'"$0D"If activated, toggle"
       "s through cameras"$0D22"key"$22"          The item needed to activate "
       "this. (default nothing)"$0D22"thread"$22" name of thread to trigger.  "
       "This can be in a different script file as well\"$0D"by using the '::' "
       "notation."$0D22"triggerable"$22" turn trigger on"$0D22"nottriggerable"$22
       " turn trigger off"$0D"If NOT_PLAYERS is set, the trigger does not resp"
       "ond to players"$0D"If MONSTERS is set, the trigger will respond to mon"
       "sters"
      spawnflags: =
      {
        typ = "X1"
        cap = "VISIBLE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
    }
    trigger_exit:form =
    {
      help = "When the player touches this, an exit icon will be displayed in "
       "his hud."$0D"This is to inform him that he is near an exit."$0D22"trig"
       "gerable"$22" turn trigger on"$0D22"nottriggerable"$22" turn trigger of"
       "f"
    }
    trigger_music:form =
    {
      help = "Variable sized repeatable trigger to change the music mood."$0D"I"
       "f "$22"delay"$22" is set, the trigger waits some time after activating"
       " before firing."$0D22"current"$22" can be used to set the current mood"
       $0D22"fallback"$22" can be used to set the fallback mood"$0D22"altcurre"
       "nt"$22" can be used to set the current mood of the opposite face, if m"
       "ultiFaceted"$0D22"altfallback"$22" can be used to set the fallback moo"
       "d of the opposite face, if multiFaceted"$0D22"edgeTriggerable"$22" tri"
       "gger only fires when entering a trigger"$0D22"multiFaceted"$22" if 1, "
       "then trigger is North/South separate triggerable\"$0D"if 2, then trigg"
       "er East/West separate triggerable"$0D22"thread"$22" name of thread to "
       "trigger.  This can be in a different script file as well\"$0D"by using"
       " the '::' notation."$0D22"wait"$22" : Seconds between triggerings. (1."
       "0 default)"$0D22"cnt"$22" how many times it can be triggered (infinite"
       " default)"$0D22"oneshot"$22" make this a one time trigger"$0D22"trigge"
       "rable"$22" turn trigger on"$0D22"nottriggerable"$22" turn trigger off"$0D
       "If NOT_PLAYERS is set, the trigger does not respond to players"$0D"If "
       "MONSTERS is set, the trigger will respond to monsters"$0D"If PROJECTIL"
       "ES is set, the trigger will respond to projectiles (rockets, grenades,"
       " etc.)"$0D"NORMAL, ACTION, SUSPENSE, MYSTERY, and SURPRISE are the moo"
       "ds that can be triggered"
      spawnflags: =
      {
        typ = "X1"
        cap = "NORMAL"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "ACTION"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "SUSPENSE"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "MYSTERY"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "SURPRISE"
      }
    }
    trigger_reverb:form =
    {
      help = "Variable sized repeatable trigger to change the reverb level in "
       "the game"$0D"If "$22"delay"$22" is set, the trigger waits some time af"
       "ter activating before firing."$0D22"reverbtype"$22" what kind of rever"
       "b should be used"$0D22"reverblevel"$22" how much of the reverb effect "
       "should be applied"$0D22"altreverbtype"$22" what kind of reverb should "
       "be used"$0D22"altreverblevel"$22" how much of the reverb effect should"
       " be applied"$0D22"edgeTriggerable"$22" trigger only fires when enterin"
       "g a trigger"$0D22"multiFaceted"$22" if 1, then trigger is North/South "
       "separate triggerable\"$0D"if 2, then trigger East/West separate trigge"
       "rable"$0D22"thread"$22" name of thread to trigger.  This can be in a d"
       "ifferent script file as well\"$0D"by using the '::' notation."$0D22"wa"
       "it"$22" : Seconds between triggerings. (1.0 default)"$0D22"cnt"$22" ho"
       "w many times it can be triggered (infinite default)"$0D22"oneshot"$22" "
       "make this a one time trigger"$0D22"triggerable"$22" turn trigger on"$0D
       $22"nottriggerable"$22" turn trigger off"$0D"If NOT_PLAYERS is set, the"
       " trigger does not respond to players"$0D"If MONSTERS is set, the trigg"
       "er will respond to monsters"$0D"If PROJECTILES is set, the trigger wil"
       "l respond to projectiles (rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_pushobject:form =
    {
      help = "Special trigger that can only be triggered by a push object."$0D
       $22"triggername"$22" if set, trigger only responds to objects with a ta"
       "rgetname the same as triggername."$0D22"cnt"$22" how many times it can"
       " be triggered (default 1, use -1 for infinite)"
    }
    trigger_givepowerup:form =
    {
      help = "Variable sized repeatable trigger to give a powerup to the playe"
       "r"$0D22"oneshot"$22" makes this triggerable only once"$0D22"powerupnam"
       "e"$22" sets the name of the powerup to give to the player"$0D"If NOT_P"
       "LAYERS is set, the trigger does not respond to players"$0D"If MONSTERS"
       " is set, the trigger will respond to monsters"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
    }
    worldspawn:form =
    {
      help = "Only used for the world."$0D22"soundtrack"$22" the soundtrack to"
       " use on the map"$0D22"gravity"$22"     800 is default gravity"$0D22"sk"
       "ipthread"$22" thread that is activated to skip this level (if cinemati"
       "c)"$0D22"nextmap"$22"    map to goto when player exits"$0D22"message"$22
       "     text to print at user logon"$0D22"script"$22"        script to ru"
       "n on start of map"$0D22"watercolor"$22" view color when underwater"$0D
       $22"wateralpha"$22" view alpha when underwater"$0D22"lavacolor"$22"  vi"
       "ew alpha when in lava"$0D22"lavaalpha"$22"  view alpha when in lava"$0D
       $22"farplane_color"$22" color to fade to when the far clip plane is on"$0D
       $22"farplane_cull"$22" whether or not the far plane should cull, defaul"
       "t is yes"$0D22"farplane"$22"   distance from the viewer that the far c"
       "lip plane is"$0D22"ambientlight"$22" ambient lighting to be applied to"
       " all entities"$0D22"ambient"$22"    ambient lighting to be applied to "
       "all entities, use _color to specify color"$0D22"suncolor"$22"   color "
       "of the sun in the level"$0D22"sunlight"$22"   intensity of the sun in "
       "the level"$0D22"sundirection"$22" direction of the sun in the level"$0D
       $22"sunflare"$22"   worldspace position of the sun flare"$0D22"sunflare"
       "_inportalsky"$22" whether or not the flare is in the portal sky"$0D22"l"
       "ightmapdensity"$22" default lightmap density to be used for all surfac"
       "es"$0D22"skyalpha"$22"   initial value of the sky's alpha, defaults to"
       " 1"
      spawnflags: =
      {
        typ = "X1"
        cap = "CINEMATIC"
      }
    }
  }
}
