QQRKSRC1
// Call of Duty 1 Entities file for Quark

//$Header$
// ----------- REVISION HISTORY ------------
//$Log$
//

{
  QuArKProtected = "1"
  Description = "Call of Duty Entities"

  Toolbox Folders.qtx =
  {
    Toolbox = "New map items..."
    Root = "CoD (Call of Duty) Entities.qtxfolder"
    CoD (Call of Duty) Entities.qtxfolder =
    {
      ;desc = "Created from CoD.def"
      func_* entities.qtxfolder =
      {
        func_bobbing:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Makes things bob, normally on the Z axis."
        }
        func_cullgroup:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Used to group brushes for culling in the portal-basedrender"
           "er."
        }
        func_door:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Normal type door."
        }
        func_door_rotating:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Rotating type door."
        }
        func_group:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Used to group brushes together for editor convenience."
        }
        func_pendulum:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Swinging pendulum."
        }
        func_rotating:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "To make things rotate."
        }
        func_static:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Can be used for conditional walls and models."
        }
      }
      info_* entities.qtxfolder =
      {
        info_grenade_hint:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "AI will try to get a grenade to go through this point."
        }
        info_notnull:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for things like jumppad targets."
        }
        info_notnull_big:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "info_notnull with a bigger box for ease of positioning."
        }
        info_null:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for things like spotlights, etc."
        }
        info_player_start:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "equivelant to info_player_deathmatch."
        }
        info_vehicle_node:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for vehicle path."
        }
        info_vehicle_node_rotate:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used to rotate vehicle."
        }
      }
      item_* entities.qtxfolder =
      {
        item_ammo_stielhandgranate_closed:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "MODEL FOR RADIANT ONLY - DO NOT USE"
        }
        item_ammo_stielhandgranate_open:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "MODEL FOR RADIANT ONLY - DO NOT USE"
        }
        item_health:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "MODEL FOR RADIANT ONLY - DO NOT USE"
        }
        item_health_large:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "MODEL FOR RADIANT ONLY - DO NOT USE"
        }
        item_health_small:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "MODEL FOR RADIANT ONLY - DO NOT USE"
        }
      }
      misc_* entities.qtxfolder =
      {
        misc_mg42:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for weapon settings."
        }
        misc_model:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for model settings."
        }
        misc_portal_camera:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for camera settings, used with misc_portal_surface."
        }
        misc_portal_surface:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used with misc_portal_camera."
        }
        misc_turret:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for creating a turret."
        }
      }
      mp_* entities.qtxfolder =
      {
        mp_target_location:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for setting a target."
        }
      }
      node_* entities.qtxfolder =
      {
        node_balcony:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for balcony settings."
        }
        node_concealment_crouch:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for concealment crouch settings."
        }
        node_concealment_prone:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for concealment prone settings."
        }
        node_concealment_stand:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for concealment stand settings."
        }
        node_cover_crouch:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Cover is valid against enemies from this direction."
        }
        node_cover_left:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Cover is valid against enemies from this direction."
        }
        node_cover_prone:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Cover is valid against enemies from this direction."
        }
        node_cover_right:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Cover is valid against enemies from this direction."
        }
        node_cover_stand:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Cover is valid against enemies from this direction."
        }
        node_cover_wide_left:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Wide cover is valid against enemies from this direction."
        }
        node_cover_wide_right:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Wide cover is valid against enemies from this direction."
        }
        node_negotiation_begin:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Contributes to node's animation navigation data."
        }
        node_negotiation_end:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Contributes to node's animation navigation data."
        }
        node_pathnode:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for node's path settings."
        }
        node_reacquire:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for node's reacquire settings."
        }
        node_scripted:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for node's animation settings."
        }
        node_stack:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for node's stack settings."
        }
      }
      other entities.qtxfolder =
      {
        corona:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for corona settings."
        }
        light:e =
        {
          light = "300"
          _color = "1 1 1"
          angles = "0 0 0"
          origin = "0 0 0"
          ;desc = "Used for Non-displayed light settings."
        }
        worldspawn:b =
        {
          ;desc = "World entity."
        }
      }
      props_* entities.qtxfolder =
      {
        props_skyportal:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for sky fogged settings."
        }
      }
      script_* entities.qtxfolder =
      {
        script_brushmodel:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Used for script brushmodel settings."
        }
        script_model:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for script model settings."
        }
        script_origin:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for script origin settings."
        }
        script_vehicle:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Used for script vehicle settings."
        }
      }
      trigger_* entities.qtxfolder =
      {
        trigger_damage:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Trigger that responds to taking damage."
        }
        trigger_friendlychain:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Forces any touching entity to be considered on the targeted"
           " friendly chain."
        }
        trigger_hurt:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Any entity that touches this will be hurt."
        }
        trigger_lookat:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Just for debugging level - dont use"
        }
        trigger_multiple:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Can be triggered more than once."
        }
        trigger_once:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "Can only be triggered once."
        }
        trigger_use:b =
        {
          angle = "360"
          ;incl = "defpoly"
          ;desc = "When activated will use its target."
        }
      }
      SPweapons_* entities.qtxfolder =
      {
        weapon_30cal:e =
        {
          model = "xmodel/weapon_browning30cal"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Browning 30cal"
        }
        weapon_BAR:e =
        {
          model = "xmodel/weapon_bar"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Bar"
        }
        weapon_bren:e =
        {
          model = "xmodel/weapon_bren"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Bren"
        }
        weapon_colt:e =
        {
          model = "xmodel/weapon_colt45"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Colt 45"
        }
        weapon_enfield:e =
        {
          model = "xmodel/weapon_enfield"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Enfield"
        }
        weapon_fg42:e =
        {
          model = "xmodel/weapon_FG42"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP FG 42"
        }
        weapon_fraggrenade:e =
        {
          model = "xmodel/weapon_MK2FragGrenade"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP MK2 Frag Grenade"
        }
        weapon_kar98k:e =
        {
          model = "xmodel/weapon_kAr98"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP kAr 98"
        }
        weapon_kar98k_pavlov:e =
        {
          model = "xmodel/weapon_kAr98"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP kAr 98 Pavlov"
        }
        weapon_kar98k_scoped:e =
        {
          model = "xmodel/weapon_kar98scoped"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP kAr 98 Scoped"
        }
        weapon_luger:e =
        {
          model = "xmodel/weapon_luger"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Luger"
        }
        weapon_m1carbine:e =
        {
          model = "xmodel/weapon_M1Carbine"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP M1 Carbine"
        }
        weapon_m1garand:e =
        {
          model = "xmodel/weapon_M1Garand"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP M1 Garand"
        }
        weapon_mk1britishfrag:e =
        {
          model = "xmodel/weapon_british_handgrenade"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP mk1 British hand grenade"
        }
        weapon_mosinnagant:e =
        {
          model = "xmodel/weapon_mosinnagant"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Mosinnagant"
        }
        weapon_mosinnagantsniper:e =
        {
          model = "xmodel/weapon_mosinnagantscoped"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Mosinnagant sniper"
        }
        weapon_mp40:e =
        {
          model = "xmodel/weapon_MP40"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP MP40"
        }
        weapon_mp44:e =
        {
          model = "xmodel/weapon_mp44"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP MP44"
        }
        weapon_panzerfaust:e =
        {
          model = "xmodel/weapon_panzerfaust"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Panzerfaust"
        }
        weapon_ppsh:e =
        {
          model = "xmodel/weapon_ppsh"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP ppsh"
        }
        weapon_russiangrenade:e =
        {
          model = "xmodel/weapon_russian_handgrenade"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Russian hand grenade"
        }
        weapon_springfield:e =
        {
          model = "xmodel/weapon_springfield"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Springfield"
        }
        stalingrad_ammo:e =
        {
          model = "xmodel/viewmodel_ammo"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Springfield ammo"
        }
        weapon_sten:e =
        {
          model = "xmodel/weapon_sten"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Sten"
        }
        weapon_stielhandgranate:e =
        {
          model = "xmodel/weapon_nebelhandgrenate"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Nebel hand grenate"
        }
        weapon_thompson:e =
        {
          model = "xmodel/weapon_thompson"
          angle = "360"
          origin = "0 0 0"
          ;desc = "SP Thompson"
        }
      }
      MPweapons_* entities.qtxfolder =
      {
        mpweapon_30cal:e =
        {
          model = "xmodel/weapon_browning30cal"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Browning 30cal"
        }
        mpweapon_bar:e =
        {
          model = "xmodel/weapon_bar"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Bar"
        }
        mpweapon_bren:e =
        {
          model = "xmodel/weapon_bren"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Bren"
        }
        mpweapon_colt:e =
        {
          model = "xmodel/weapon_colt45"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Colt 45"
        }
        mpweapon_enfield:e =
        {
          model = "xmodel/weapon_enfield"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Enfield"
        }
        mpweapon_fg42:e =
        {
          model = "xmodel/weapon_FG42"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP FG 42"
        }
        mpweapon_fraggrenade:e =
        {
          model = "xmodel/weapon_MK2FragGrenade"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP MK2 Frag Grenade"
        }
        mpweapon_kar98k:e =
        {
          model = "xmodel/weapon_kAr98"
          angle = "360"
          origin = "0 0 0"
          ;desc = "kAr 98"
        }
        mpweapon_kar98k_pavlov:e =
        {
          model = "xmodel/weapon_kAr98"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP kAr 98 Pavlov"
        }
        mpweapon_kar98k_scoped:e =
        {
          model = "xmodel/weapon_kar98scoped"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP kAr 98 Scoped"
        }
        mpweapon_luger:e =
        {
          model = "xmodel/weapon_luger"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Luger"
        }
        mpweapon_m1carbine:e =
        {
          model = "xmodel/weapon_M1Carbine"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP M1 Carbine"
        }
        mpweapon_m1garand:e =
        {
          model = "xmodel/weapon_M1Garand"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP M1 Garand"
        }
        mpweapon_mk1britishfrag:e =
        {
          model = "xmodel/weapon_british_handgrenade"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP mk1 British hand grenade"
        }
        mpweapon_mosinnagant:e =
        {
          model = "xmodel/weapon_mosinnagant"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Mosinnagant"
        }
        mpweapon_mosinnagantsniper:e =
        {
          model = "xmodel/weapon_mosinnagantscoped"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Mosinnagant sniper"
        }
        mpweapon_mp40:e =
        {
          model = "xmodel/weapon_MP40"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP MP40"
        }
        mpweapon_mp44:e =
        {
          model = "xmodel/weapon_mp44"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP MP44"
        }
        mpweapon_panzerfaust:e =
        {
          model = "xmodel/weapon_panzerfaust"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Panzerfaust"
        }
        mpweapon_panzerfaust_ammo:e =
        {
          model = "xmodel/weapon_panzerfaust_ammo"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Panzerfaust ammo"
        }
        mpweapon_ppsh:e =
        {
          model = "xmodel/weapon_ppsh"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP ppsh"
        }
        mpweapon_russiangrenade:e =
        {
          model = "xmodel/weapon_russian_handgrenade"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Russian hand grenade"
        }
        mpweapon_springfield:e =
        {
          model = "xmodel/weapon_springfield"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Springfield"
        }
        mpstalingrad_ammo:e =
        {
          model = "xmodel/viewmodel_ammo"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Springfield ammo"
        }
        mpweapon_sten:e =
        {
          model = "xmodel/weapon_sten"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Sten"
        }
        mpweapon_stielhandgranate:e =
        {
          model = "xmodel/weapon_nebelhandgrenate"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Nebel hand grenate"
        }
        mpweapon_thompson:e =
        {
          model = "xmodel/weapon_thompson"
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP Thompson"
        }
      }
    }
  }
  Entity Forms.qctx =
  {
    // Definition of "includes"
    t_player_size:incl = { bbox = '-16 -16 -24 16 16 32' }
    t_ammo_size:incl = { bbox = '-16 -16 -16 16 16 16' }
    t_weapon_size:incl = { bbox = '-16 -16 -16 16 16 16' }
    t_teleport_size:incl = { bbox = '-32 -32 -4 32 32 4' }
    t_item_size:incl = { bbox = '-16 -16 -16 16 16 16' }

    t_model:incl =
    {
      model: =
      { Txt = " "
        Typ = "B"
        Cap = "models..."
        form ="t_models_form:form"
        hint ="Available .MD3 files"
      }
    }
    info_grenade_hint:form =
    {
      help = "AI will try to get a grenade to go through this point in space w"
       "hen throwing a grenade.  This is how AI understandsthrowing grenades t"
       "hrough windows and doors."
      bbox = '-4 -4 -4 4 4 4'
    }
    info_player_start:form =
    {
      help = "equivelant to info_player_deathmatch"
      bbox = '-16 -16 0 16 16 72'
      t_player_size = !
      mdl = "models/players/sarge/upper.md3"
      md3_autolink = "1"
      :u_torso = "Frame 125"
      :u_rshoulder = "Frame 125"
      :l_legs = "Frame 170"
      :h_cigar = "Frame 1"
      :h_head = "Frame 1"
    }
    func_group:form =
    {
      help = "Used to group brushes together just for editor convenience."$0D"T"
       "hey are turned into normal brushes by the utilities."
    }
    func_cullgroup:form =
    {
      help = "Used to group brushes together for culling in the portal-based r"
       "enderer."$0D"They are turned into world brushes by the utilities."
    }
    info_null:form =
    {
      help = "Used as a positional target for calculations in the utilities"$0D
       "(spotlights, etc), but removed during gameplay."
      bbox = '-4 -4 -4 4 4 4'
    }
    info_notnull:form =
    {
      help = "Used as a positional target for in-game calculation,"$0D"like ju"
       "mppad targets."
      bbox = '-4 -4 -4 4 4 4'
    }
    info_notnull_big:form =
    {
      help = "info_notnull with a bigger box for ease of positioning"
      bbox = '-16 -16 -24 16 16 32'
    }
    light:form =
    {
      help = "Non-displayed light."$0D22"light"$22" overrides the default 300 "
       "intensity."$0D"Nonlinear checkbox gives inverse square falloff instead"
       " of linear"$0D"Angle adds light:surface angle calculations (only valid"
       " for "$22"Linear"$22" lights) (wolf)"$0D"Lights pointed at a target wi"
       "ll be spotlights."$0D22"radius"$22" overrides the default 64 unit radi"
       "us of a spotlight at the target point."$0D22"exponent"$22" changes the"
       " default 0 exponent for the angle falloff.  Must be a non-negative int"
       "eger.  High numbers (10-20) are needed for narrow spotlight angles to "
       "show falloff over angle."$0D22"fade"$22" falloff/radius adjustment val"
       "ue. multiply the run of the slope by "$22"fade"$22" (1.0f default) (on"
       "ly valid for "$22"Linear"$22" lights) (wolf)"$0D22"overbrightShift"$22
       " controls overbright radius.  0 is default, 1 is no overbrighting at a"
       "ll, fractions in between do linear interpolation."
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "linear"
        hint = "Click Help above."
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "angle"
        hint = "Click Help above."
      }
      light: =
      {
        txt = "&"
        hint = "overrides the default 300 intensity."
      }
      _color: =
      {
        txt = "&"
        hint = "light color (not the intensity, only the color)"
      }
      _color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "Click here to select the color."
      }
      radius: =
      {
        txt = "&"
        hint = "overrides the default 64 unit radius"$0D
               "of a spotlight at the target point"$0D
               "and it must target something to work."
      }
      exponent: =
      {
        txt = "&"
        hint = "changes the default 0 exponent"$0D"for the angle falloff."
      }
      fade: =
      {
        txt = "&"
        hint = "falloff/radius adjustment value."
      }
      overbrightShift: =
      {
        txt = "&"
        hint = "controls overbright radius."
      }
    }
    misc_model:form =
    {
      mdl = "[model]"
      help = "If the misc_model has a targetname, it is kept as a server-side "
       "entity, so game scripts can modify it."$0D"If the misc_model does not "
       "have a targetname, it is only in the renderer on the client, so it can"
       "not change."$0D22"model"$22"            arbitrary xmodel file to displ"
       "ay"$0D22"modelscale"$22"    scale multiplier (defaults to 1x, and scal"
       "es uniformly)"$0D22"modelscale_vec"$22"    scale multiplier (defaults "
       "to 1 1 1, scales each axis as requested)"$0D"ORIENT_LOD - if flagged, "
       "the entity will yaw towards the player when the LOD switches"$0D"NO_SH"
       "ADOW - the opaque surfaces will not cast shadows"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "ORIENT_LOD"
        hint = "Click Help above."
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NO_SHADOW"
        hint = "Click Help above."
      }
      angle: =
      {
	Txt = "&"
	Hint = "direction in which model will be oriented."
        angle = "360"
      }
      model: =
      {
        txt = "&"
        hint = "arbitrary xmodel file to display."
        Typ = "EP"
        DefExt = "md3"
        BasePath = "$Game\baseq3"
        CutPath = "$Game\?\models"
        DirSep = "/"
        AugPath = "models"
      }
      t_model = !
      modelscale: =
      {
        txt = "&"
        hint = "scale multiplier (defaults to 1x, and scales uniformly)."
      }
      modelscale_vec: =
      {
        txt = "&"
        hint = "scale multiplier"$0D"(defaults to 1 1 1, scales each axis as r"
         "equested)."
      }
    }
    misc_portal_surface:form =
    {
      help = "The portal surface nearest this entity will show a view from the"
       " targeted misc_portal_camera, or a mirror view if untargeted."$0D"This"
       " must be within 64 world units of the surface!"
      bbox = '-8 -8 -8 8 8 8'
    }
    misc_portal_camera:form =
    {
      help = "The target for a misc_portal_director.  You can set either angle"
       "s or target another entity to determine the direction of view."$0D22"r"
       "oll"$22" an angle modifier to orient the camera around the target vect"
       "or;"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "slowrotate"
        hint = "Click Help above."
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "fastrotate"
        hint = "Click Help above."
      }
      roll: =
      {
        txt = "&"
        hint = "an angle modifier to orient the"$0D"camera around the target v"
         "ector."
      }
    }
    corona:form =
    {
      help = "Use color picker to set color or key "$22"color"$22".  values ar"
       "e 0.0-1.0 for each color (rgb)."$0D22"scale"$22" will designate a mult"
       "iplier to the default size.  (so 2.0 is 2xdefault size, 0.5 is half)"
      bbox = '-4 -4 -4 4 4 4'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OFF"
        hint = "Click Help above."
      }
      scale: =
      {
        txt = "&"
        hint = "will designate a multiplier to the default size."$0D"(so 2.0 i"
         "s 2xdefault size, 0.5 is half)"
      }
    }
    misc_mg42:form =
    {
      help = "weaponinfo - weapon info"$0D"leftarc - horizonal left fire arc."$0D
       "rightarc - horizonal left fire arc."$0D"toparc - vertical top fire arc"
       "."$0D"bottomarc - vertical bottom fire arc."$0D"convergencetime - time"
       " (in seconds) to converge to target."$0D"maxrange - maximum firing/sig"
       "ht range."$0D"damage - determines how much the weapon will inflict if "
       "a non player uses it"$0D"accuracy - all guns are 100% accurate a value"
       " of 0.5 would make it 50%"
      bbox = '-16 -16 0 16 16 56'
      weaponinfo: =
      {
        txt = "&"
        hint = "weapon info."
      }
      leftarc: =
      {
        txt = "&"
        hint = "horizonal left fire arc."
      }
      rightarc: =
      {
        txt = "&"
        hint = "horizonal right fire arc."
      }
      toparc: =
      {
        txt = "&"
        hint = "vertical top fire arc."
      }
      bottomarc: =
      {
        txt = "&"
        hint = "vertical bottom fire arc."
      }
      convergencetime: =
      {
        txt = "&"
        hint = "time (in seconds) to converge to target."
      }
      maxrange: =
      {
        txt = "&"
        hint = "maximum firing/sight range."
      }
      damage: =
      {
        txt = "&"
        hint = "determines how much the weapon will inflict"$0D"if a non playe"
         "r uses it."
      }
      accuracy: =
      {
        txt = "&"
        hint = "all guns are 100% accurate a value"$0D"of 0.5 would make it 50"
         "%."
      }
    }
    misc_turret:form =
    {
      help = "weaponinfo - weapon info"$0D"leftarc - horizonal left fire arc."$0D
       "rightarc - horizonal left fire arc."$0D"toparc - vertical top fire arc"
       "."$0D"bottomarc - vertical bottom fire arc."$0D"convergencetime - time"
       " (in seconds) to converge to target."$0D"maxrange - maximum firing/sig"
       "ht range."$0D"damage - determines how much the weapon will inflict if "
       "a non player uses it"$0D"accuracy - all guns are 100% accurate a value"
       " of 0.5 would make it 50%"
      bbox = '-16 -16 0 16 16 56'
      weaponinfo: =
      {
        txt = "&"
        hint = "weapon info."
      }
      leftarc: =
      {
        txt = "&"
        hint = "horizonal left fire arc."
      }
      rightarc: =
      {
        txt = "&"
        hint = "horizonal right fire arc."
      }
      toparc: =
      {
        txt = "&"
        hint = "vertical top fire arc."
      }
      bottomarc: =
      {
        txt = "&"
        hint = "vertical bottom fire arc."
      }
      convergencetime: =
      {
        txt = "&"
        hint = "time (in seconds) to converge to target."
      }
      maxrange: =
      {
        txt = "&"
        hint = "maximum firing/sight range."
      }
      damage: =
      {
        txt = "&"
        hint = "determines how much the weapon will inflict"$0D"if a non playe"
         "r uses it."
      }
      accuracy: =
      {
        txt = "&"
        hint = "all guns are 100% accurate a value"$0D"of 0.5 would make it 50"
         "%."
      }
    }
    func_door:form =
    {
      help = "TOGGLE      wait in both the start and end states for a trigger "
       "event."$0D"START_OPEN  the door to moves to its destination when spawn"
       "ed, and operate in reverse.  It is used to temporarily or permanently "
       "close off an area when triggered (not useful for touch or takedamage d"
       "oors)."$0D"NOMONSTER   monsters will not trigger this door"$0D"SHOOT-T"
       "HRU    Bullets don't stop when they hit the door.  Set "$22"shoot_thru"
       "_scale"$22" with bullet damage scale (see below)"$0D22"key"$22"       "
       "set to any non-zero value to start door as locked"$0D22"angle"$22"    "
       "    determines the opening direction"$0D22"targetname"$22" if set, no "
       "touch field will be spawned and a remote button or trigger field activ"
       "ates the door."$0D22"speed"$22"        movement speed (100 default)"$0D
       $22"closespeed"$22" optional different movement speed for door closing"$0D
       $22"wait"$22"      wait before returning (3 default, -1 = never return)"
       $0D22"lip"$22"       lip remaining at end of move (8 default)"$0D22"dmg"
       $22"       damage to inflict when blocked (2 default)"$0D22"color"$22" "
       "    constantLight color"$0D22"light"$22"     constantLight radius"$0D22
       "health"$22"    if set, the door must be shot open"$0D22"teamname"$22" "
       "   team name.  other doors with same team name will open/close in sync"
       "ronicity"$0D22"noisescale"$22"multiplier for how far the noise from th"
       "e door will travel to alert AI"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "TOGGLE"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "CRUSHER"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "TOUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "SHOOT"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "THRU"
        hint = "Click Help above"
      }
      key: =
      {
        txt = "&"
        hint = "set to any non-zero value to start door as locked."
      }
      angle: =
      {
        txt = "&"
        hint = "determines the opening direction."
      }
      targetname: =
      {
        txt = "&"
        hint = "if set, no touch field will be spawned and a remote"$0D"button"
         " or trigger field activates the door."
      }
      speed: =
      {
        txt = "&"
        hint = "movement speed (100 default)."
      }
      closespeed: =
      {
        txt = "&"
        hint = "optional different movement speed for door closing."
      }
      wait: =
      {
        txt = "&"
        hint = "wait before returning (3 default, -1 = never return)."
      }
      lip: =
      {
        txt = "&"
        hint = "lip remaining at end of move (8 default)."
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)."
      }
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color."
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius."
      }
      health: =
      {
        txt = "&"
        hint = "if set, the door must be shot open."
      }
      teamname: =
      {
        txt = "&"
        hint = "team name.  other doors with same team name"$0D"will open/clos"
         "e in syncronicity."
      }
      noisescale: =
      {
        txt = "&"
        hint = "multiplier for how far the noise from"$0D"the door will travel"
         " to alert AI."
      }
    }
    func_static:form =
    {
      help = "A bmodel that just sits there, doing nothing.  Can be used for c"
       "onditional walls and models."$0D22"color"$22"        constantLight col"
       "or"$0D22"light"$22"        constantLight radius"$0D22"start_invis"$22" "
       "will start the entity as non-existant"$0D"If targeted, it will toggle "
       "existance when triggered"$0D"pain will use its target"$0D"When using p"
       "ain you will need to specify the delay time"$0D"value of 1 = 1 sec 2 ="
       " 2 sec so on..."$0D"default is 1 sec you can use decimals"$0D"example "
       ":"$0D"delay"$0D"1.27"$0D"painEFX will spawn a shards"$0D"example:"$0D"s"
       "hard"$0D"4"$0D"will spawn rubble"$0D"shard default is 4"$0D"shard ="$0D
       "shard_glass = 0,"$0D"shard_wood = 1,"$0D"shard_metal = 2,"$0D"shard_ce"
       "ramic = 3,"$0D"shard_pebbles = 4"
      spawnflags: =
      {
        typ = "X1"
        cap = "start_invis"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "pain"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "painEFX"
        hint = "Click Help above"
      }
      shard: =
      {
        txt = "&"
        hint = "default is 4, Click Help above"
        typ = "C"
        items = "0>shard_glass"$0D"1>shard_wood"$0D"2>shard_metal"$0D"3>shard_"
         "ceramic"$0D"4>shard_pebbles"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"1"$0D"4"
      }
    }
    func_rotating:form =
    {
      help = "You need to have an origin brush as part of this entity."$0D"The"
       " center of that brush will be the point around which it is rotated. It"
       " will rotate around the Z axis by default.  You can check either the X"
       "_AXIS or Y_AXIS box to change that."$0D22"speed"$22"        determines"
       " how fast it moves; default value is 100."$0D22"dmg"$22"        damage"
       " to inflict when blocked (2 default)"$0D22"color"$22"        constantL"
       "ight color"$0D22"light"$22"        constantLight radius"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_ON"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "STARTINVIS"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "X_AXIS"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "Y_AXIS"
        hint = "Click Help above"
      }
      speed: =
      {
        txt = "&"
        hint = "determines how fast it moves; default value is 100."
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)."
      }
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color."
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius."
      }
    }
    func_bobbing:form =
    {
      help = "Normally bobs on the Z axis"$0D22"height"$22"    amplitude of bo"
       "b (32 default)"$0D22"speed"$22"        seconds to complete a bob cycle"
       " (4 default)"$0D22"phase"$22"        the 0.0 to 1.0 offset in the cycl"
       "e to start at"$0D22"dmg"$22"        damage to inflict when blocked (2 "
       "default)"$0D22"color"$22"        constantLight color"$0D22"light"$22" "
       "       constantLight radius"
      spawnflags: =
      {
        typ = "X1"
        cap = "X_AXIS"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "Y_AXIS"
        hint = "Click Help above"
      }
      height: =
      {
        txt = "&"
        hint = "amplitude of bob (32 default)."
      }
      speed: =
      {
        txt = "&"
        hint = "seconds to complete a bob cycle (4 default)."
      }
      phase: =
      {
        txt = "&"
        hint = "the 0.0 to 1.0 offset in the cycle to start at."
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)."
      }
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color."
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius."
      }
    }
    func_pendulum:form =
    {
      help = "You need to have an origin brush as part of this entity."$0D"Pen"
       "dulums always swing north / south on unrotated models.  Add an angles "
       "field to the model to allow rotation in other directions."$0D"Pendulum"
       " frequency is a physical constant based on the length of the beam and "
       "gravity."$0D22"speed"$22"        the number of degrees each way the pe"
       "ndulum swings, (30 default)"$0D22"phase"$22"        the 0.0 to 1.0 off"
       "set in the cycle to start at"$0D22"dmg"$22"        damage to inflict w"
       "hen blocked (2 default)"$0D22"color"$22"        constantLight color"$0D
       $22"light"$22"        constantLight radius"
      speed: =
      {
        txt = "&"
        hint = "the number of degrees each way the"$0D"pendulum swings, (30 de"
         "fault)."
      }
      phase: =
      {
        txt = "&"
        hint = "the 0.0 to 1.0 offset in the cycle to start at."
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)."
      }
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color."
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius."
      }
    }
    func_door_rotating:form =
    {
      help = "You need to have an origin brush as part of this entity."$0D"The"
       " center of that brush will be the point around which it is rotated. It"
       " will rotate around the Z axis by default.  You can check either the X"
       "_AXIS or Y_AXIS box to change that (only one axis allowed. If both X a"
       "nd Y are checked, the default of Z will be used)."$0D"FORCE        doo"
       "r opens even if blocked"$0D22"key"$22"       set to any non-zero value"
       " to start door as locked"$0D22"degrees"$22"   determines how many degr"
       "ees it will turn (90 default)"$0D22"speed"$22"        movement speed ("
       "100 default)"$0D22"closespeed"$22" optional different movement speed f"
       "or door closing"$0D22"time"$22"      how many milliseconds it will tak"
       "e to open 1 sec = 1000"$0D22"dmg"$22"       damage to inflict when blo"
       "cked (2 default)"$0D22"color"$22"     constantLight color"$0D22"light"$22
       "     constantLight radius"$0D22"teamname"$22"    team name.  other doo"
       "rs with same team name will open/close in syncronicity"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "TOGGLE"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "X_AXIS"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "Y_AXIS"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "REVERSE"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "FORCE"
        hint = "Click Help above"
      }
      key: =
      {
        txt = "&"
        hint = "set to any non-zero value to start door as locked."
      }
      degrees: =
      {
        txt = "&"
        hint = "determines how many degrees it will turn (90 default)."
      }
      speed: =
      {
        txt = "&"
        hint = "movement speed (100 default)."
      }
      closespeed: =
      {
        txt = "&"
        hint = "optional different movement speed for door closing."
      }
      time: =
      {
        txt = "&"
        hint = "how many milliseconds it will take to open 1 sec = 1000."
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)."
      }
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color."
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius."
      }
      teamname: =
      {
        txt = "&"
        hint = "other doors with same team name"$0D"will open/close in syncron"
         "icity."
      }
    }
    props_skyportal:form =
    {
      help = $22"fov"$22" for the skybox default is 90"$0D"To have the portal "
       "sky fogged, enter any of the following values:"$0D22"fogcolor"$22" (r "
       "g b) (values 0.0-1.0)"$0D22"fognear"$22" distance from entity to start"
       " fogging"$0D22"fogfar"$22" distance from entity that fog is opaque"
      bbox = '-8 -8 0 8 8 16'
      fov: =
      {
        txt = "&"
        hint = "for the skybox (default is 90)."
      }
      fogcolor: =
      {
        txt = "&"
        Typ = "LN"
        hint = "(r g b) (values 0.0-1.0)."
      }
      fognear: =
      {
        txt = "&"
        hint = "distance from entity to start fogging."
      }
      fogfar: =
      {
        txt = "&"
        hint = "distance from entity that fog is opaque."
      }
    }
    script_brushmodel:form =
    {
      help = $22"color"$22"     constantLight color"$0D22"light"$22"     const"
       "antLight radius"
      spawnflags: =
      {
        typ = "X1"
        cap = "DYNAMICPATH"
      }
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color."
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius."
      }
    }
    script_model:form =
    {
      help = $22"color"$22"     constantLight color"$0D22"light"$22"     const"
       "antLight radius"
      bbox = '-16 -16 -16 16 16 16'
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color."
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius."
      }
    }
    script_origin:form =
    {
      help = $22"color"$22"     constantLight color"$0D22"light"$22"     const"
       "antLight radius"
      bbox = '-8 -8 -8 8 8 8'
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color."
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius."
      }
    }
    info_vehicle_node:form =
    {
      help = $22"targetname"$22" - name of this node"$0D22"target"$22" - name "
       "of next node in this path"$0D22"speed"$22" - speed[mph] vehicle should"
       " have at this node"$0D22"lookahead"$22" - time[sec] vehicle should loo"
       "k ahead at this node"
      bbox = '-24 -24 -24 24 24 24'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_NODE"
        hint = "Click Help above"
      }
      targetname: =
      {
        txt = "&"
        hint = "name of this node."
      }
      target: =
      {
        txt = "&"
        hint = "name of next node in this path."
      }
      speed: =
      {
        txt = "&"
        hint = "speed[mph] vehicle should have at this node."
      }
      lookahead: =
      {
        txt = "&"
        hint = "time[sec] vehicle should look ahead at this node."
      }
    }
    info_vehicle_node_rotate:form =
    {
      help = $22"targetname"$22" - name of this node"$0D22"target"$22" - name "
       "of next node in this path"$0D22"speed"$22" - speed[mph] vehicle should"
       " have at this node"$0D22"lookahead"$22" - time[sec] vehicle should loo"
       "k ahead at this node"
      bbox = '-24 -24 -24 24 24 24'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_NODE"
        hint = "Click Help above"
      }
      targetname: =
      {
        txt = "&"
        hint = "name of this node."
      }
      target: =
      {
        txt = "&"
        hint = "name of next node in this path."
      }
      speed: =
      {
        txt = "&"
        hint = "speed[mph] vehicle should have at this node."
      }
      lookahead: =
      {
        txt = "&"
        hint = "time[sec] vehicle should look ahead at this node."
      }
    }
    script_vehicle:form =
    {
      mdl = "[model]"
      help = $22"targetname"$22" - name of this vehicle"$0D22"model"$22" - xmo"
       "del file to use as vehicle"$0D22"vehicletype"$22" - name of vehicle ty"
       "pe to use in AssetManager"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "USABLE"
        hint = "Click Help above"
      }
      targetname: =
      {
        txt = "&"
        hint = "name of this vehicle."
      }
      model: =
      {
        txt = "&"
        hint = "xmodel file to use as vehicle."
        Typ = "EP"
        DefExt = "md3"
        BasePath = "$Game\baseq3"
        CutPath = "$Game\?\models"
        DirSep = "/"
        AugPath = "models"
      }
      t_model = !
      vehicletype: =
      {
        txt = "&"
        hint = "name of vehicle type to use in AssetManager."
      }
    }
    worldspawn:form =
    {
      help = "Every map should have exactly one worldspawn."$0D22"music"$22"  "
       "   Music wav file. Can optionally specify intro & loop files to play"$0D
       $22"ambienttrack"$22" Ambient wav file."$0D22"gravity"$22"   800 is def"
       "ault gravity"$0D22"message"$22" Text to print during connection proces"
       "s"$0D22"ambient"$22"  Ambient light value (single scale, 1 = full brig"
       "ht, 2 = full overbright, must use '_color')"$0D22"_color"$22"    Ambie"
       "nt light color (RGB triple, must be used with 'ambient')"$0D22"sun"$22
       "        Shader to use for 'sun' image"$0D22"suncolor"$22"    RGB value"
       "s for direct sunlight color (color only, not brightness, 0-1 scale, wo"
       "rks with 'sunlight')"$0D22"sunlight"$22"    Intensity of the sun (1 = "
       "fullbright, 2 = full overbright for something facing directly at the s"
       "un, must use 'suncolor')"$0D22"sundiffusecolor"$22"  RGB values for di"
       "ffuse sunlight color (color only, not brightness, 0-1 scale, works wit"
       "h 'diffusefraction')"$0D22"diffusefraction"$22" fraction of sunlight i"
       "ntensity to come from the diffuse lighting (in range 0-1; eg, 0.5, wor"
       "ks with 'sundiffusecolor')"$0D22"sundirection"$22" pitch-yaw-roll for "
       "direction to sun (eg, sundirection -45 135 0)"$0D22"minlight"$22"  min"
       "imum intensity for a lightmap pixel (does not affect models in-game)"$0D
       $22"minlightcolor"$22"  color to clamp to for minlight (color gets norm"
       "alized)"$0D22"northyaw"$22"  yaw angle that denotes the direction of n"
       "orth"$0D"Multiplayer specific stuff:"$0D"NO_GT_WOLF specifies no objec"
       "tive mode for this map"$0D"NO_STOPWATCH specifies no stopwatch mode fo"
       "r this map"$0D"NO_CHECKPOINT specifies no checkpoint mode for this map"
      spawnflags: =
      {
        typ = "X1"
        cap = "sun_cameraflare"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "NO_GT_WOLF"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "NO_STOPWATCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "NO_CHECKPOINT"
        hint = "Click Help above"
      }
      music: =
      {
        txt = "&"
        hint = "Music wav file. Can optionally specify"$0D"intro & loop files "
         "to play."
      }
      ambienttrack: =
      {
        txt = "&"
        hint = "Ambient wav file."
      }
      gravity: =
      {
        txt = "&"
        hint = "800 is default gravity."
      }
      message: =
      {
        txt = "&"
        hint = "Text to print during connection process."
      }
      ambient: =
      {
        txt = "&"
        hint = "Ambient light value (single scale,"$0D"1 = full bright,"$0D"2 "
         "= full overbright, must use _color)."
      }
      _color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "Ambient light color (RGB triple,"$0D"must be used with 'ambien"
         "t')."
      }
      sun: =
      {
        txt = "&"
        hint = "Shader to use for 'sun' image."
      }
      suncolor: =
      {
        txt = "&"
        Typ = "LN"
        hint = "RGB values for direct sunlight color"$0D"(color only, not brig"
         "htness,"$0D"0-1 scale, works with 'sunlight')."
      }
      sunlight: =
      {
        txt = "&"
        hint = "Intensity of the sun (1 = fullbright,"$0D"2 = full overbright "
         "for something"$0D"facing directly at the sun, must use 'suncolor')."
      }
      sundiffusecolor: =
      {
        txt = "&"
        Typ = "LN"
        hint = "RGB values for diffuse sunlight color"$0D"(color only, not bri"
         "ghtness,"$0D"0-1 scale, works with 'diffusefraction')."
      }
      diffusefraction: =
      {
        txt = "&"
        hint = "fraction of sunlight intensity to come from"$0D"the diffuse li"
         "ghting (in range 0-1; eg, 0.5,"$0D"works with 'sundiffusecolor')."
      }
      sundirection: =
      {
        txt = "&"
        hint = "pitch-yaw-roll for direction to sun"$0D"(eg, sundirection -45 "
         "135 0)."
      }
      minlight: =
      {
        txt = "&"
        hint = "minimum intensity for a lightmap pixel"$0D"(does not affect mo"
         "dels in-game)."
      }
      minlightcolor: =
      {
        txt = "&"
        Typ = "LN"
        hint = "color to clamp to for minlight (color gets normalized)."
      }
      northyaw: =
      {
        txt = "&"
        hint = "yaw angle that denotes the direction of north."
      }
    }
    trigger_multiple:form =
    {
      help = $22"wait"$22" : Seconds between triggerings, 0.5 default, -1 = on"
       "e time only."$0D22"random"$22"    wait variance, default is 0"$0D"Vari"
       "able sized repeatable trigger.  Must be targeted at one or more entiti"
       "es."$0D"so, the basic time between firing is a random time between"$0D
       "(wait - random) and (wait + random)"
      spawnflags: =
      {
        typ = "X1"
        cap = "AI_AXIS"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "AI_ALLIES"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "AI_NEUTRAL"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOTPLAYER"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "VEHICLE"
        hint = "Click Help above"
      }
      wait: =
      {
        txt = "&"
        hint = "Seconds between triggerings, 0.5 default, -1 = one time only."
      }
      random: =
      {
        txt = "&"
        hint = "wait variance, default is 0."
      }
    }
    trigger_friendlychain:form =
    {
      help = "Forces any touching entity to be considered on the targeted frie"
       "ndly chain."
      spawnflags: =
      {
        typ = "X1"
        cap = "AI_AXIS"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "AI_ALLIES"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "AI_NEUTRAL"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOTPLAYER"
        hint = "Click Help above"
      }
    }
    trigger_hurt:form =
    {
      help = "Any entity that touches this will be hurt."$0D"It does dmg point"
       "s of damage each server frame"$0D"Targeting the trigger will toggle it"
       "s on / off state."$0D"PLAYER_ONLY   - only damages the player"$0D"SILE"
       "NT        - supresses playing the sound"$0D"NO_PROTECTION - *nothing* "
       "stops the damage"$0D"SLOW          - changes the damage rate to once p"
       "er second"$0D22"dmg"$22"            default 5 (whole numbers only)"$0D
       $22"life"$22"    time this brush will exist if value is zero will live "
       "for ever ei 0.5 sec 2.sec"$0D"default is zero"$0D"the entity must be u"
       "sed first before it will count down its life"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OFF"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "PLAYER_ONLY"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "SILENT"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NO_PROTECTION"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "SLOW"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "ONCE"
        hint = "Click Help above"
      }
      dmg: =
      {
        txt = "&"
        hint = "default 5 (whole numbers only)."
      }
      life: =
      {
        txt = "&"
        hint = "time this brush will exist if value is zero will"$0D"live for "
         "ever ei 0.5 sec 2.sec (default is zero)."$0D"the entity must be used"
         " first"$0D"before it will count down its life"
      }
    }
    trigger_once:form =
    {
      help = "Must be targeted at one or more entities."$0D"Once triggered, th"
       "is entity is destroyed"$0D"(you can actually do the same thing with tr"
       "igger_multiple with a wait of -1)"
      spawnflags: =
      {
        typ = "X1"
        cap = "AI_AXIS"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "AI_ALLIES"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "AI_NEUTRAL"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOTPLAYER"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "VEHICLE"
        hint = "Click Help above"
      }
    }
    trigger_damage:form =
    {
      help = "Trigger that responds to taking damage."$0D22"wait"$22"         "
       "   base time between triggering all targets, default is 1"$0D22"random"
       $22"        wait variance, default is 0"$0D"so, the basic time between "
       "firing is a random time between"$0D"(wait - random) and (wait + random"
       ")"$0D22"accumulate"$22"    If set, this much damage must be accumulate"
       "d before it will trigger"$0D22"threshold"$22"        If set, the min a"
       "mount of damage that must be done to it to trigger it"$0D"Note that ac"
       "cumulate & threshold can be used at the same time."$0D"PISTOL_NO turns"
       " off response to pistol damage"$0D"RIFLE_NO turns off response to rifl"
       "e damage"$0D"PROJ_NO turns off response to projectile damage"$0D"EXPLO"
       "SION_NO turns off response to explosion damage"$0D"SPLASH_NO turns off"
       " response to splash damage"$0D"MELEE_NO turns off response to melee da"
       "mage"$0D"FLAME_NO turns off response to fire damage"$0D"MISC_NO turns "
       "off response to all other misc types of damage"
      spawnflags: =
      {
        typ = "X1"
        cap = "PISTOL_NO"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "RIFLE_NO"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "PROJ_NO"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "EXPLOSION_NO"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "SPLASH_NO"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "MELEE_NO"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "FLAME_NO"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X256"
        cap = "MISC_NO"
        hint = "Click Help above"
      }
      wait: =
      {
        txt = "&"
        hint = "base time between triggering all targets (default is 1)."
      }
      random: =
      {
        txt = "&"
        hint = "wait variance (default is 0)."$0D"so, the basic time between f"
         "iring"$0D"is a random time between"$0D"(wait - random) and (wait + r"
         "andom)"
      }
      accumulate: =
      {
        txt = "&"
        hint = "If set, this much damage must be accumulated before it will tr"
         "igger."
      }
      threshold: =
      {
        txt = "&"
        hint = "If set, the min amount of damage that"$0D"must be done to it t"
         "o trigger it."
      }
    }
    node_pathnode:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - face this way when"
       " at this node on a friendly chain"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "face this way when at this node on a friendly chain."
      }
    }
    node_cover_stand:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - cover is valid aga"
       "inst enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "cover is valid against enemies from this direction."
      }
    }
    node_cover_crouch:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - cover is valid aga"
       "inst enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "cover is valid against enemies from this direction."
      }
    }
    node_cover_prone:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - cover is valid aga"
       "inst enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "cover is valid against enemies from this direction."
      }
    }
    node_cover_right:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - cover is valid aga"
       "inst enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "cover is valid against enemies from this direction."
      }
    }
    node_cover_left:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - cover is valid aga"
       "inst enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "cover is valid against enemies from this direction."
      }
    }
    node_cover_wide_right:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - cover is valid aga"
       "inst enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "cover is valid against enemies from this direction."
      }
    }
    node_cover_wide_left:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - cover is valid aga"
       "inst enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "cover is valid against enemies from this direction."
      }
    }
    node_concealment_stand:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - concealment is val"
       "id against enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "concealment is valid against enemies from this direction."
      }
    }
    node_concealment_crouch:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - concealment is val"
       "id against enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "concealment is valid against enemies from this direction."
      }
    }
    node_concealment_prone:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - concealment is val"
       "id against enemies from this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "concealment is valid against enemies from this direction."
      }
    }
    node_stack:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - face this directio"
       "n while stacking here"$0D"This node must target a cover node or anothe"
       "r stack node.  It is treated as overflow for the first targeted non-st"
       "ack node."
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "face this direction while stacking here."
      }
    }
    node_reacquire:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - node can reacquire"
       " against enemies in this direction"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "node can reacquire against enemies in this direction."
      }
    }
    node_balcony:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"NO_RAILING - the balcony is"
       " against a ledge and not a railing"$0D"angles - the edge is in this di"
       "rection"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "NO_RAILING"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "the edge is in this direction."
      }
    }
    node_scripted:form =
    {
      help = "DONT_LINK - node is not included in navigation data"$0D"NOT_CHAI"
       "N - node cannot start a friendly chain"$0D"angles - orients the node f"
       "or the animation"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOT_CHAIN"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      angles: =
      {
        txt = "&"
        hint = "orients the node for the animation."
      }
    }
    node_negotiation_begin:form =
    {
      help = "STOP_FIRST - if set, the AI comes to a complete stop before star"
       "ting the node's animation script"$0D22"animscript"$22" - name without "
       "path or extension of the animation script to play when you reach this "
       "node.  This script must be in "$22"animscripts/traverse/"$22"."$0D"Mus"
       "t target a single "$22"node_negotiation_end"$22"."$0D"Always contribut"
       "es to navigation data."$0D"Can never be included in a friendly chain."
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "STOP_FIRST"
        hint = "Click Help above"
      }
      animscript: =
      {
        txt = "&"
        hint = "orients the node for the animation."
      }
      angles: =
      {
        txt = "&"
        hint = "Click Help above."
      }
    }
    node_negotiation_end:form =
    {
      help = "Must be targeted by a "$22"node_negotiation_begin"$22"."$0D"Alwa"
       "ys contributes to navigation data."$0D"Can never be included in a frie"
       "ndly chain."
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X4"
        cap = "DONT_STAND"
        hint = "Click Help above."
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "DONT_CROUCH"
        hint = "Click Help above."
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "DONT_PRONE"
        hint = "Click Help above."
      }
    }
    mp_target_location:form =
    {
      help = "Set "$22"message"$22" to the name of this location."$0D"Set "$22
       "count"$22" to 0-7 for color."$0D"0:white 1:red 2:green 3:yellow 4:blue"
       " 5:cyan 6:magenta 7:white"$0D"Closest target_location in sight used fo"
       "r the location, if none"$0D"in site, closest in distance"
      bbox = '-8 -8 -8 8 8 8'
      message: =
      {
        txt = "&"
        hint = "Set to the name of this location."
      }
      count: =
      {
        txt = "&"
        hint = "Set to 0-7 for color"
        typ = "C"
        items = "0>white"$0D"1>red"$0D"2>green"$0D"3>yellow"$0D"4>blue"$0D"5>c"
         "yan"$0D"6>magenta"$0D"7>white"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"
      }
    }
    item_ammo_stielhandgranate_open:form =
    {
      help = "-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY -----"
       "---"$0D"defaultmdl="$22"xmodel/ammo_stielhandgranate1"$22
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "SUSPENDED"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "SPIN"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "RESPAWN"
      }
    }
    item_ammo_stielhandgranate_closed:form =
    {
      help = "-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY -----"
       "---"$0D"defaultmdl="$22"xmodel/ammo_stielhandgranate2"$22
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "SUSPENDED"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "SPIN"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "RESPAWN"
      }
    }
    item_health_small:form =
    {
      help = "-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY -----"
       "---"$0D"defaultmdl="$22"xmodel/health_small"$22
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "SUSPENDED"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "SPIN"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "RESPAWN"
      }
    }
    item_health:form =
    {
      help = "-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY -----"
       "---"$0D"defaultmdl="$22"xmodel/health_medium"$22
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "SUSPENDED"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "SPIN"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "RESPAWN"
      }
    }
    item_health_large:form =
    {
      help = "-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY -----"
       "---"$0D"defaultmdl="$22"xmodel/health_large"$22
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        typ = "X1"
        cap = "SUSPENDED"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "SPIN"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "RESPAWN"
      }
    }
    trigger_use:form =
    {
      help = "when activated will use its target."$0D"cursorhint - sets the cu"
       "rsor hint icon to display when the player looks at it."$0D"Default is "
       "HINT_ACTIVATE."$0D0D"HINT_string - is the hint string to display over "
       "the icon. Auto replaces [Use] with the key the player must press."$0D"E"
       "xample: Press [Use] to plant the bomb"
      bbox = '-4 -4 -4 4 4 4'
      spawnflags: =
      {
        typ = "X1"
        cap = "STARTOFF"
        hint = "Click Help above."
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "HAS_USER"
        hint = "Click Help above."
      }
      cursorhint: =
      {
        txt = "&"
        hint = "cursorhint - sets the cursor hint icon to"$0D"display when the"
         " player looks at it."
        typ = "C"
        items = "0>HINT_INHERIT"$0D"1>HINT_NONE"$0D"2>HINT_ACTIVATE"$0D"3>HINT"
         "_NOACTIVATE"$0D"4>HINT_DOOR"$0D"5>HINT_DOOR_LOCKED"$0D"6>HINT_MG42"$0D
         "7>HINT_HEALTH"$0D"8>HINT_LADDER"$0D"9>HINT_EXIT"$0D"10>HINT_FRIENDLY"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"1"
         "0"
      }
    }
    weapon_30cal:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_BAR:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_bren:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_colt:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_enfield:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_fg42:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_fraggrenade:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_kar98k:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_kar98k_pavlov:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_kar98k_scoped:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_luger:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_m1carbine:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_m1garand:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_mk1britishfrag:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_mosinnagant:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_mosinnagantsniper:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_mp40:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_mp44:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_panzerfaust:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_ppsh:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_russiangrenade:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_springfield:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    stalingrad_ammo:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_sten:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_stielhandgranate:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    weapon_thompson:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_30cal:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_bar:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_bren:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_colt:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_enfield:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_fg42:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_fraggrenade:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_kar98k:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_kar98k_pavlov:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_kar98k_scoped:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_luger:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_m1carbine:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_m1garand:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_mk1britishfrag:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_mosinnagant:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_mosinnagantsniper:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_mp40:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_mp44:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_panzerfaust:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_panzerfaust_ammo:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_ppsh:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_russiangrenade:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_springfield:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpstalingrad_ammo:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_sten:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_stielhandgranate:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
    mpweapon_thompson:form =
    {
      bbox = '-4 -4 -4 4 4 4'
    }
  }
}
