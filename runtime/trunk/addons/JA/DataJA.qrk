QQRKSRC1
// Configuration file for JA

//$Header$
// ----------- REVISION HISTORY ------------
//$Log$
//
//Revision 1.6  2006/09/22 02:09:38  nazar
//Added '_sun' parameter for light entity
//Added missed 'targetname' parameters for some target_* entities which need it
//
//Revision 1.5  2006/08/18 14:18:20  nazar
//Entity point_combat has been moved to Waypoints entities folder
//Added '_lightmapscale' params for the func_group entity
//Numerous other minor changes of parameters and hints of entities
//
//Revision 1.4  2006/01/18 16:44:16  nazar
//Added 'target*' params for waypoint* entities 
//Deleted unnecessary waypoint_navgoal_* entities except waypoint_navgoal
//
//Revision 1.3  2005/10/03 19:14:21  nazar
//Added the earlier missed NPC_HazardTrooper entity form
//
//Revision 1.2  2004/01/28 17:06:42  nazar
//Added misc_skyportal, Angle to some entities, all misc_* entities sort by alphabet
//
//Revision 1.1  2004/01/12 14:30:09  nazar
//Full singleplayer game support of Jedi Academy (multiplayer partly)
//

{
  QuArKProtected = "1"
  Description = "Base JA data"
  JA setup.qctx =
  {
    Game = "JA"
    HTML = "help/index.html"
    Palette = $0000000F0F0F1F1F1F2F2F2F3F3F3F4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B
     $9BABABABBBBBBBCBCBCBDBDBDBEBEBEB634B235B431F533F1F4F3B1B47371B3F2F173B2B
     $173327132F23132B1F13271B0F23170F1B130B170F0B130F070F0B075F5F6F5B5B675B53
     $5F574F5B534B534F474B473F433F3B3B3B3737332F2F2F2B2B2727272323231B1B1B1717
     $171313138F77537B6343735B3B674F2FCF974BA77B3B8B672F6F5327EB9F27CB8B23AF77
     $1F93631B774F175B3B0F3F270B231707A73B2B9F2F23972B1B8B27137F1F0F73170B6717
     $075713004B0F00430F003B0F00330B002B0B00230B001B07001307007B5F4B7357436B53
     $3F674F3B5F4737574333533F2F4B372B4333273F2F2337271B2F2317271B131F170F170F
     $0B0F0B076F3B175F3717532F17432B17372313271B0F1B130B0F0B07B35B4FBF7B6FCB9B
     $93D7BBB7CBD7DFB3C7D39FB7C387A7B77397A75B879B47778B2F677F17536F134B670F43
     $5B0B3F5307374B072F3F072733001F2B00171F000F1300070B0000008B5757834F4F7B47
     $477343436B3B3B6333335B2F2F572B2B4B23233F1F1F331B1B2B13131F0F0F130B0B0B07
     $07000000979F7B8F9773878B6B7F8363777B5F7373576B6B4F6363475B5B434F4F3B4343
     $3337372B2F2F2323231B1717130F0F0B9F4B3F9343378B3B2F7F3727772F236B2B1B6323
     $17571F134F1B0F43170B37130B2B0F071F0B071707000B0000000000777BCF6F73C3676B
     $B76363A75B5B9B53578F4B4F7F4747733F3F673737572F2F4B27273F231F2F1B1723130F
     $170B07079BAB7B8F9F6F8797637B8B5773834B6777435F6F3B5767334B5B273F4F1B3743
     $132F3B0B232F071B23001317000B0F0000FF0023E70F3FD31B53BB275FA72F5F8F335F7B
     $33FFFFFFFFFFD3FFFFA7FFFF7FFFFF53FFFF27FFEB1FFFD717FFBF0FFFAB07FF9300EF7F
     $00E36B00D35700C74700B73B00AB2B009B1F008F17007F0F007307005F00004700002F00
     $001B0000EF00003737FFFF00000000FF2B2B231B1B1713130FEB977FC373539F57337B3F
     $1BEBD3C7C7AB9BA78B77876B579F5B53
    ShaderFiles: =
    {
      shaders/shaderlist.txt =
      {
        Data = "// Created by QuArK"$0D0A"// All shaders are extracted to a si"
         "ngle file called 'quark.shader'"$0D0A"quark"$0D0A
      }
      shaders/shaderlist.txt =
      {
        Data = "// Created by QuArK"$0D0A"// No shader in this map"$0D0A
      }
    }
    TextureFlags:form =
    {
      Style = "5"
      Reset: =
      {
        Cap = "Reset to default"
        Typ = "B"
        Hint = "Reset all flags to the texture's default"
        Delete: =
        {
          Flags = ""
          Contents = ""
          Value = ""
        }
      }
      Contents: =
      {
        Cap = "detail"
        Typ = "X134217728"
        Hint = "for small, detail brushes that Q3vis can ignore"
      }
    }
  }
  NewFiles.qtx =
  {
    ToolBox = "New files..."
    Root = "JA file types.qtxfolder"
    JA file types.qtxfolder =
    {
      Pk3.pk3 =
      {
      }
    }
  }
  NewMap:incl =
  {
    Game = "JA"
    Root = "worldspawn:b"
    worldspawn:b =
    {
      Border walls:g =
      {
        East wall:p =
        {
          west:f =
          {
            v = '256 192 -96 256 96 -96 256 192 0'
            tex = "imperial/wall_3"
            tv = '0 0 48 0 0 -48'
          }
          east:f =
          {
            v = '272 -192 -96 272 -64 -96 272 -192 32'
            tex = "system/caulk"
          }
          south:f =
          {
            v = '256 -192 -96 288 -192 -96 256 -192 32'
            tex = "system/caulk"
          }
          north:f =
          {
            v = '272 192 -96 240 192 -96 272 192 32'
            tex = "system/caulk"
          }
          down:f =
          {
            v = '256 192 -96 288 192 -96 256 64 -96'
            tex = "system/caulk"
          }
          up:f =
          {
            v = '256 -192 96 288 -192 96 256 -64 96'
            tex = "system/caulk"
          }
        }
        West wall:p =
        {
          west:f =
          {
            v = '-272 192 -96 -272 64 -96 -272 192 32'
            tex = "system/caulk"
          }
          east:f =
          {
            v = '-256 -192 -96 -256 -96 -96 -256 -192 0'
            tex = "imperial/wall_3"
            tv = '0 0 48 0 0 -48'
          }
          south:f =
          {
            v = '-272 -192 -96 -240 -192 -96 -272 -192 32'
            tex = "system/caulk"
          }
          north:f =
          {
            v = '-256 192 -96 -288 192 -96 -256 192 32'
            tex = "system/caulk"
          }
          down:f =
          {
            v = '-272 192 -96 -240 192 -96 -272 64 -96'
            tex = "system/caulk"
          }
          up:f =
          {
            v = '-272 -192 96 -240 -192 96 -272 -64 96'
            tex = "system/caulk"
          }
        }
        North wall:p =
        {
          west:f =
          {
            v = '-256 208 -96 -256 176 -96 -256 208 32'
            tex = "system/caulk"
          }
          east:f =
          {
            v = '256 192 -96 256 224 -96 256 192 32'
            tex = "system/caulk"
          }
          south:f =
          {
            v = '-256 192 -96 -128 192 -96 -256 192 0'
            tex = "imperial/wall_3"
            tv = '0 0 64 0 0 -48'
          }
          north:f =
          {
            v = '256 208 -96 128 208 -96 256 208 32'
            tex = "system/caulk"
          }
          down:f =
          {
            v = '-256 208 -96 -128 208 -96 -256 176 -96'
            tex = "system/caulk"
          }
          up:f =
          {
            v = '-256 192 96 -128 192 96 -256 224 96'
            tex = "system/caulk"
          }
        }
        South wall:p =
        {
          west:f =
          {
            v = '-256 -192 -96 -256 -224 -96 -256 -192 32'
            tex = "system/caulk"
          }
          east:f =
          {
            v = '256 -208 -96 256 -176 -96 256 -208 32'
            tex = "system/caulk"
          }
          south:f =
          {
            v = '-256 -208 -96 -128 -208 -96 -256 -208 32'
            tex = "system/caulk"
          }
          north:f =
          {
            v = '256 -192 -96 128 -192 -96 256 -192 0'
            tex = "imperial/wall_3"
            tv = '0 0 64 0 0 -48'
          }
          down:f =
          {
            v = '-256 -192 -96 -128 -192 -96 -256 -224 -96'
            tex = "system/caulk"
          }
          up:f =
          {
            v = '-256 -208 96 -128 -208 96 -256 -176 96'
            tex = "system/caulk"
          }
        }
        Sky:p =
        {
          west:f =
          {
            v = '-256 0 272 -256 -128 272 -256 0 400'
            tex = "skies/space"
          }
          east:f =
          {
            v = '256 0 272 256 128 272 256 0 400'
            tex = "skies/space"
          }
          south:f =
          {
            v = '432 -192 272 560 -192 272 432 -192 400'
            tex = "skies/space"
          }
          north:f =
          {
            v = '432 192 272 304 192 272 432 192 400'
            tex = "skies/space"
          }
          down:f =
          {
            v = '432 0 96 560 0 96 432 -128 96'
            tex = "skies/space"
          }
          up:f =
          {
            v = '432 0 112 560 0 112 432 128 112'
            tex = "skies/space"
          }
        }
        Floor:p =
        {
          west:f =
          {
            v = '-256 0 272 -256 -128 272 -256 0 400'
            tex = "system/caulk"
          }
          east:f =
          {
            v = '256 0 272 256 128 272 256 0 400'
            tex = "system/caulk"
          }
          south:f =
          {
            v = '432 -192 272 560 -192 272 432 -192 400'
            tex = "system/caulk"
          }
          north:f =
          {
            v = '432 192 272 304 192 272 432 192 400'
            tex = "system/caulk"
          }
          down:f =
          {
            v = '432 0 -112 560 0 -112 432 -128 -112'
            tex = "system/caulk"
          }
          up:f =
          {
            v = '432 0 -96 560 0 -96 432 128 -96'
            tex = "doomgiver/floord"
            tv = '-192 -688 -192 -560 -96 -688'
          }
        }
      }
      info_player_start:e =
      {
        origin = "-144 0 -64"
        angle = "360"
      }
      light:e =
      {
        origin = "0 0 0"
        light = "300"
        _color = "1 1 1"
      }
    }
  }
  t_originpoly:incl =
  {
    ORIGIN:p =
    {
      east:f =
      {
        v = '8 0 0 8 64 0 8 0 64'
        tex = "system/origin"
      }
      west:f =
      {
        v = '-8 0 0 -8 -64 0 -8 0 64'
        tex = "system/origin"
      }
      north:f =
      {
        v = '0 8 0 -64 8 0 0 8 64'
        tex = "system/origin"
      }
      south:f =
      {
        v = '0 -8 0 64 -8 0 0 -8 64'
        tex = "system/origin"
      }
      up:f =
      {
        v = '0 0 24 64 0 24 0 64 24'
        tex = "system/origin"
      }
      down:f =
      {
        v = '0 0 -24 64 0 -24 0 -64 -24'
        tex = "system/origin"
      }
    }
    poly:p =
    {
      east:f =
      {
        v = '32 -32 -32 32 96 -32 32 -32 96'
        tex = "[auto]"
      }
      west:f =
      {
        v = '-32 -32 -32 -32 -32 96 -32 96 -32'
        tex = "[auto]"
        m = "1"
      }
      north:f =
      {
        v = '-32 32 -32 -32 32 96 96 32 -32'
        tex = "[auto]"
        m = "1"
      }
      south:f =
      {
        v = '-32 -32 -32 96 -32 -32 -32 -32 96'
        tex = "[auto]"
      }
      up:f =
      {
        v = '-32 -32 32 96 -32 32 -32 96 32'
        tex = "[auto]"
      }
      down:f =
      {
        v = '-32 -32 -32 -32 96 -32 96 -32 -32'
        tex = "[auto]"
        m = "1"
      }
    }
  }
  
  Textures.qtx =
  {
    Toolbox = "Texture Browser..."
    Root = "JA Textures.qtxfolder"

    JA Textures.qtxfolder =
    {
      bespin.txlist = 
      {
           bespin/basic.wl         = { a = "Base" }
           bespin/basic2.wl         = { a = "Base" }
           bespin/botton.wl         = { a = "Base" }
           bespin/botton_on2.wl         = { a = "Base" }
           bespin/control02.wl         = { a = "Base" }
           bespin/control02_glw.wl         = { a = "Base" }
           bespin/control03.wl         = { a = "Base" }
           bespin/control03_glw.wl         = { a = "Base" }
           bespin/door02.wl         = { a = "Base" }
           bespin/floor.wl         = { a = "Base" }
           bespin/floor3.wl         = { a = "Base" }
           bespin/hydraulic.wl         = { a = "Base" }
           bespin/mp_b_carb02.wl         = { a = "Base" }
           bespin/mp_b_light04.wl         = { a = "Base" }
           bespin/mp_b_light04_glow.wl         = { a = "Base" }
           bespin/mp_b_wall04a.wl         = { a = "Base" }
           bespin/mp_r_carb02.wl         = { a = "Base" }
           bespin/mp_r_light04.wl         = { a = "Base" }
           bespin/mp_r_light04_glow.wl         = { a = "Base" }
           bespin/newfloor.wl         = { a = "Base" }
           bespin/n_floor01.wl         = { a = "Base" }
           bespin/n_floor02.wl         = { a = "Base" }
           bespin/n_wall01.wl         = { a = "Base" }
           bespin/n_wall04.wl         = { a = "Base" }
           bespin/n_wall05.wl         = { a = "Base" }
           bespin/n_wall06.wl         = { a = "Base" }
           bespin/n_wall07.wl         = { a = "Base" }
           bespin/n_wall09.wl         = { a = "Base" }
           bespin/n_wall10.wl         = { a = "Base" }
           bespin/n_win01glow.wl         = { a = "Base" }
           bespin/n_win02glow.wl         = { a = "Base" }
           bespin/pipesnwall.wl         = { a = "Base" }
           bespin/u_beam01.wl         = { a = "Base" }
           bespin/u_floor03.wl         = { a = "Base" }
           bespin/u_floor04.wl         = { a = "Base" }
           bespin/u_light02.wl         = { a = "Base" }
           bespin/u_light02glow.wl         = { a = "Base" }
           bespin/u_light04.wl         = { a = "Base" }
           bespin/u_light04glow.wl         = { a = "Base" }
           bespin/u_metalgreen.wl         = { a = "Base" }
           bespin/u_metalorange.wl         = { a = "Base" }
           bespin/u_metalorange02.wl         = { a = "Base" }
           bespin/u_pipe04.wl         = { a = "Base" }
           bespin/u_shaftwall.wl         = { a = "Base" }
           bespin/u_shaftwall02.wl         = { a = "Base" }
           bespin/u_shaft_glow.wl         = { a = "Base" }
           bespin/u_shaft_glow02.wl         = { a = "Base" }
           bespin/u_tunpipe.wl         = { a = "Base" }
           bespin/u_wall03.wl         = { a = "Base" }
           bespin/u_wall05.wl         = { a = "Base" }
           bespin/u_wall06.wl         = { a = "Base" }
           bespin/u_wall08.wl         = { a = "Base" }
           bespin/u_wall09.wl         = { a = "Base" }
           bespin/u_wall10.wl         = { a = "Base" }
           bespin/wall6.wl         = { a = "Base" }
           bespin/wall_panel.wl         = { a = "Base" }
           bespin/wall_teeth.wl         = { a = "Base" }
           bespin/water1.wl         = { a = "Base" }
      }
      bounty.txlist = 
      {
           bounty/base.wl         = { a = "Base" }
           bounty/basic1.wl         = { a = "Base" }
           bounty/basic1_dark.wl         = { a = "Base" }
           bounty/basic1_dark_b.wl         = { a = "Base" }
           bounty/column1.wl         = { a = "Base" }
           bounty/door.wl         = { a = "Base" }
           bounty/floor1.wl         = { a = "Base" }
           bounty/floor2.wl         = { a = "Base" }
           bounty/floor3.wl         = { a = "Base" }
           bounty/hexfloor.wl         = { a = "Base" }
           bounty/new_hexfloor.wl         = { a = "Base" }
           bounty/new_wall1.wl         = { a = "Base" }
           bounty/new_wall1_light.wl         = { a = "Base" }
           bounty/sand.wl         = { a = "Base" }
           bounty/sand_b.wl         = { a = "Base" }
           bounty/trim1.wl         = { a = "Base" }
           bounty/trim2.wl         = { a = "Base" }
           bounty/trim3.wl         = { a = "Base" }
           bounty/walkway.wl         = { a = "Base" }
           bounty/walkway_rebel.wl         = { a = "Base" }
           bounty/wall1.wl         = { a = "Base" }
           bounty/wall1b.wl         = { a = "Base" }
           bounty/wall2.wl         = { a = "Base" }
           bounty/wall3.wl         = { a = "Base" }
           bounty/wall4.wl         = { a = "Base" }
           bounty/flag.wl         = { a = "Base" }
           bounty/flag2.wl         = { a = "Base" }
           bounty/flag3.wl         = { a = "Base" }
           bounty/new_wall1_light_glow.wl         = { a = "Base" }
      }     
      byss.txlist = 
      {
           byss/basicred.wl         = { a = "Base" }
           byss/bay_beam.wl         = { a = "Base" }
           byss/bay_ceiling.wl         = { a = "Base" }
           byss/bay_trim1.wl         = { a = "Base" }
           byss/bay_trim_bumper.wl         = { a = "Base" }
           byss/bay_vent.wl         = { a = "Base" }
           byss/bay_wall1.wl         = { a = "Base" }
           byss/biglight.wl         = { a = "Base" }
           byss/biglight_2.wl         = { a = "Base" }
           byss/biglight_2_glow.wl         = { a = "Base" }
           byss/biglight_glow.wl         = { a = "Base" }
           byss/bysscon_1.wl         = { a = "Base" }
           byss/byss_basic1_piller_light.wl         = { a = "Base" }
           byss/byss_basic2.wl         = { a = "Base" }
           byss/byss_basicwall.wl         = { a = "Base" }
           byss/byss_basicwall3.wl         = { a = "Base" }
           byss/byss_con2.wl         = { a = "Base" }
           byss/byss_crate_side.wl         = { a = "Base" }
           byss/byss_crate_side_glw.wl         = { a = "Base" }
           byss/byss_crate_top.wl         = { a = "Base" }
           byss/byss_crate_top_glw.wl         = { a = "Base" }
           byss/byss_doorlining.wl         = { a = "Base" }
           byss/byss_doorlining2.wl         = { a = "Base" }
           byss/byss_gate.wl         = { a = "Base" }
           byss/byss_gatedoor.wl         = { a = "Base" }
           byss/byss_gatedoor_onoff.wl         = { a = "Base" }
           byss/byss_gatedoor_onoffg.wl         = { a = "Base" }
           byss/byss_gatedoor_onoffr.wl         = { a = "Base" }
           byss/byss_gate_onoff.wl         = { a = "Base" }
           byss/byss_ghall_trim.wl         = { a = "Base" }
           byss/byss_ghall_wall.wl         = { a = "Base" }
           byss/byss_ghall_wall2.wl         = { a = "Base" }
           byss/byss_light.wl         = { a = "Base" }
           byss/byss_light2.wl         = { a = "Base" }
           byss/byss_ocpanel.wl         = { a = "Base" }
           byss/byss_ocpanel2.wl         = { a = "Base" }
           byss/byss_ocpanel3.wl         = { a = "Base" }
           byss/byss_pillar.wl         = { a = "Base" }
           byss/byss_piller.wl         = { a = "Base" }
           byss/byss_piller_glow.wl         = { a = "Base" }
           byss/byss_switch.wl         = { a = "Base" }
           byss/byss_tracpipe.wl         = { a = "Base" }
           byss/door1.wl         = { a = "Base" }
           byss/door1_grn.wl         = { a = "Base" }
           byss/door1_red.wl         = { a = "Base" }
           byss/elefoor2.wl         = { a = "Base" }
           byss/emitter.wl         = { a = "Base" }
           byss/emitter_glow.wl         = { a = "Base" }
           byss/env_large_floor.wl         = { a = "Base" }
           byss/env_large_floor2.wl         = { a = "Base" }
           byss/floor_byss.wl         = { a = "Base" }
           byss/floor_byss2.wl         = { a = "Base" }
           byss/isd_asteroid.wl         = { a = "Base" }
           byss/isd_basepanel1.wl         = { a = "Base" }
           byss/isd_basepanel2.wl         = { a = "Base" }
           byss/isd_bridge.wl         = { a = "Base" }
           byss/isd_bridge_glw.wl         = { a = "Base" }
           byss/isd_chute.wl         = { a = "Base" }
           byss/isd_midsection.wl         = { a = "Base" }
           byss/isd_midsection2.wl         = { a = "Base" }
           byss/isd_midsection2_glw.wl         = { a = "Base" }
           byss/isd_midsection_glow.wl         = { a = "Base" }
           byss/isd_trim.wl         = { a = "Base" }
           byss/large_floor.wl         = { a = "Base" }
           byss/lights.wl         = { a = "Base" }
           byss/lights_glw.wl         = { a = "Base" }
           byss/old_isd_basepanel2.wl         = { a = "Base" }
           byss/pathway.wl         = { a = "Base" }
           byss/piper5.wl         = { a = "Base" }
           byss/power222.wl         = { a = "Base" }
           byss/stairs_front.wl         = { a = "Base" }
           byss/static_field.wl         = { a = "Base" }
           byss/static_field2.wl         = { a = "Base" }
           byss/static_field3.wl         = { a = "Base" }
           byss/tracpanel.wl         = { a = "Base" }
           byss/trim2.wl         = { a = "Base" }
           byss/trim6.wl         = { a = "Base" }
           byss/byss_basic1.wl         = { a = "Base" }
           byss/byss_basicwall_glow.wl         = { a = "Base" }
           byss/byss_con1.wl         = { a = "Base" }
           byss/byss_gate_onoffg.wl         = { a = "Base" }
           byss/byss_gate_onoffr.wl         = { a = "Base" }
           byss/byss_ghall_trim_glow.wl         = { a = "Base" }
           byss/byss_light2_glow.wl         = { a = "Base" }
           byss/byss_light_glw.wl         = { a = "Base" }
           byss/byss_pillartech.wl         = { a = "Base" }
           byss/byss_switch_glow.wl         = { a = "Base" }
           byss/byss_switch_locked.wl         = { a = "Base" }
           byss/byss_switch_open.wl         = { a = "Base" }
           byss/byss_tracpipe2.wl         = { a = "Base" }
           byss/isd_decal1.wl         = { a = "Base" }
           byss/isd_decal2.wl         = { a = "Base" }
           byss/isd_decal3.wl         = { a = "Base" }
           byss/piper5_glow.wl         = { a = "Base" }
           byss/stairs_front_glow.wl         = { a = "Base" }
           byss/trim6_glow.wl         = { a = "Base" }
      }
      cairn.txlist = 
      {
           cairn/alcove01.wl         = { a = "Base" }
           cairn/alcove01_glw.wl         = { a = "Base" }
           cairn/basicltgray.wl         = { a = "Base" }
           cairn/basicltgray_dam.wl         = { a = "Base" }
           cairn/beam2.wl         = { a = "Base" }
           cairn/booth_outside.wl         = { a = "Base" }
           cairn/catfloor.wl         = { a = "Base" }
           cairn/c_cameraswitchglow.wl         = { a = "Base" }
           cairn/c_crate.wl         = { a = "Base" }
           cairn/c_crate2.wl         = { a = "Base" }
           cairn/c_gate.wl         = { a = "Base" }
           cairn/lightning3.wl         = { a = "Base" }
           cairn/lock01lock.wl         = { a = "Base" }
           cairn/lock01lockglw.wl         = { a = "Base" }
           cairn/lock01openglw1.wl         = { a = "Base" }
           cairn/metalc2.wl         = { a = "Base" }
           cairn/newwall.wl         = { a = "Base" }
           cairn/outerhull.wl         = { a = "Base" }
           cairn/outsidewall.wl         = { a = "Base" }
           cairn/outsidewall_glow.wl         = { a = "Base" }
           cairn/pipe2.wl         = { a = "Base" }
           cairn/pod_floor.wl         = { a = "Base" }
           cairn/stack.wl         = { a = "Base" }
           cairn/tracklight.wl         = { a = "Base" }
           cairn/tracklight2.wl         = { a = "Base" }
           cairn/tracklight2_glow.wl         = { a = "Base" }
           cairn/tracklight3.wl         = { a = "Base" }
           cairn/tracklight3_glow.wl         = { a = "Base" }
           cairn/tracklight_glow.wl         = { a = "Base" }
           cairn/trim_2a.wl         = { a = "Base" }
           cairn/tunlfloor.wl         = { a = "Base" }
           cairn/wall01.wl         = { a = "Base" }
           cairn/wall02.wl         = { a = "Base" }
           cairn/wall1.wl         = { a = "Base" }
           cairn/wall2.wl         = { a = "Base" }
           cairn/c_cameraswitch.wl         = { a = "Base" }
           cairn/c_gfoor.wl         = { a = "Base" }
           cairn/frame1.wl         = { a = "Base" }
           cairn/wall02_reactor.wl         = { a = "Base" }
      }
      colors.txlist = 
      {
           colors/black.wl         = { a = "Base" }
           colors/blue.wl         = { a = "Base" }
           colors/gray.wl         = { a = "Base" }
           colors/green.wl         = { a = "Base" }
           colors/orange.wl         = { a = "Base" }
           colors/red.wl         = { a = "Base" }
           colors/white.wl         = { a = "Base" }
           colors/yellow.wl         = { a = "Base" }
      }
      common.txlist = 
      {
           common/blue_dot.wl         = { a = "Base" }
           common/caps.wl         = { a = "Base" }
           common/caps_glow.wl         = { a = "Base" }
           common/detail5.wl         = { a = "Base" }
           common/detail8.wl         = { a = "Base" }
           common/detail9.wl         = { a = "Base" }
           common/dust3.wl         = { a = "Base" }
           common/environ1.wl         = { a = "Base" }
           common/environ11.wl         = { a = "Base" }
           common/environ9a.wl         = { a = "Base" }
           common/env_chrome.wl         = { a = "Base" }
           common/etest4.wl         = { a = "Base" }
           common/glass2.wl         = { a = "Base" }
           common/gradient.wl         = { a = "Base" }
           common/gradient2.wl         = { a = "Base" }
           common/gradient3.wl         = { a = "Base" }
           common/lav1.wl         = { a = "Base" }
           common/mp_blue.wl         = { a = "Base" }
           common/mp_red.wl         = { a = "Base" }
           common/stars.wl         = { a = "Base" }
           common/water3.wl         = { a = "Base" }
           common/water_1.wl         = { a = "Base" }
           common/dissolve.wl         = { a = "Base" }
           common/lrock2.wl         = { a = "Base" }
           common/security_glass.wl         = { a = "Base" }
           common/sglass1.wl         = { a = "Base" }
           common/sglass2.wl         = { a = "Base" }
           common/sglass3.wl         = { a = "Base" }
           common/sglass4.wl         = { a = "Base" }
           common/sglass5.wl         = { a = "Base" }
           common/water3_green.wl         = { a = "Base" }
      }
      danger.txlist = 
      {
           danger/ceiling_danger.wl         = { a = "Base" }
           danger/color_blend.wl         = { a = "Base" }
           danger/conpanel_danger.wl         = { a = "Base" }
           danger/danger_pipe.wl         = { a = "Base" }
           danger/door1_danger.wl         = { a = "Base" }
           danger/door2_danger.wl         = { a = "Base" }
           danger/drive_shaft.wl         = { a = "Base" }
           danger/drive_shaft_end.wl         = { a = "Base" }
           danger/edge1_danger.wl         = { a = "Base" }
           danger/engine_cover_rotated.wl         = { a = "Base" }
           danger/engine_end_rotated_glow.wl         = { a = "Base" }
           danger/floor_danger.wl         = { a = "Base" }
           danger/guts.wl         = { a = "Base" }
           danger/guts_glow.wl         = { a = "Base" }
           danger/guts_glow02.wl         = { a = "Base" }
           danger/guts_glow03.wl         = { a = "Base" }
           danger/guts_spec.wl         = { a = "Base" }
           danger/hull_edge.wl         = { a = "Base" }
           danger/hull_edge_02.wl         = { a = "Base" }
           danger/hull_edge_dark.wl         = { a = "Base" }
           danger/light_danger.wl         = { a = "Base" }
           danger/light_danger2.wl         = { a = "Base" }
           danger/light_navigation_glow.wl         = { a = "Base" }
           danger/map_display_base.wl         = { a = "Base" }
           danger/map_display_glow2.wl         = { a = "Base" }
           danger/map_display_glow3.wl         = { a = "Base" }
           danger/map_display_glow4.wl         = { a = "Base" }
           danger/monitor02.wl         = { a = "Base" }
           danger/monitor02_glow.wl         = { a = "Base" }
           danger/monitor03.wl         = { a = "Base" }
           danger/monitor04.wl         = { a = "Base" }
           danger/monitor06.wl         = { a = "Base" }
           danger/monitor1_danger.wl         = { a = "Base" }
           danger/monitor2_danger.wl         = { a = "Base" }
           danger/monitor_glow.wl         = { a = "Base" }
           danger/panel1.wl         = { a = "Base" }
           danger/panel2.wl         = { a = "Base" }
           danger/panels_ext.wl         = { a = "Base" }
           danger/panels_ext_section.wl         = { a = "Base" }
           danger/panels_ext_section2.wl         = { a = "Base" }
           danger/panels_ext_trim.wl         = { a = "Base" }
           danger/panel_striped.wl         = { a = "Base" }
           danger/panel_tail.wl         = { a = "Base" }
           danger/sand.wl         = { a = "Base" }
           danger/sanddunes.wl         = { a = "Base" }
           danger/sand_blend.wl         = { a = "Base" }
           danger/sand_portalsky.wl         = { a = "Base" }
           danger/sand_rough.wl         = { a = "Base" }
           danger/trim_danger.wl         = { a = "Base" }
           danger/wall1_danger.wl         = { a = "Base" }
           danger/wing.wl         = { a = "Base" }
           danger/engine_end_rotated.wl         = { a = "Base" }
           danger/floor.wl         = { a = "Base" }
           danger/holes.wl         = { a = "Base" }
           danger/light_navigation.wl         = { a = "Base" }
           danger/map_display_glow5.wl         = { a = "Base" }
           danger/monitor.wl         = { a = "Base" }
           danger/numbers.wl         = { a = "Base" }
           danger/sand_decal1.wl         = { a = "Base" }
           danger/scorch.wl         = { a = "Base" }
           danger/seam_horiz.wl         = { a = "Base" }
           danger/vents.wl         = { a = "Base" }
      }
      decals.txlist = 
      {
           decals/arrow_decal.wl         = { a = "Base" }
           decals/mp_b_lstrip.wl         = { a = "Base" }
           decals/mp_b_lstripglow.wl         = { a = "Base" }
           decals/mp_r_lstrip.wl         = { a = "Base" }
           decals/mp_r_lstripglow.wl         = { a = "Base" }
           decals/burnmark1.wl         = { a = "Base" }
           decals/burnmark2.wl         = { a = "Base" }
           decals/burnmark3.wl         = { a = "Base" }
           decals/burnmark4.wl         = { a = "Base" }
           decals/burnmark5.wl         = { a = "Base" }
           decals/dirt1.wl         = { a = "Base" }
           decals/floor_scrapes.wl         = { a = "Base" }
           decals/mp_imperial_symbol.wl         = { a = "Base" }
           decals/mp_rebel_symbol.wl         = { a = "Base" }
           decals/scratch1.wl         = { a = "Base" }
           decals/scratch2.wl         = { a = "Base" }
           decals/sign_decal1.wl         = { a = "Base" }
           decals/sign_decal3.wl         = { a = "Base" }
           decals/slashmark1.wl         = { a = "Base" }
      }
      desert.txlist = 
      {
           desert/concrete_floor_dark.wl         = { a = "Base" }
           desert/concrete_floor_light.wl         = { a = "Base" }
           desert/concrete_wall.wl         = { a = "Base" }
           desert/concrete_wall_tall.wl         = { a = "Base" }
           desert/concrete_wall_tall_vent.wl         = { a = "Base" }
           desert/crate1.wl         = { a = "Base" }
           desert/crate1_lid.wl         = { a = "Base" }
           desert/crate2.wl         = { a = "Base" }
           desert/crate2a.wl         = { a = "Base" }
           desert/crate2_lid.wl         = { a = "Base" }
           desert/decal_rancor.wl         = { a = "Base" }
           desert/decal_stucco_groove.wl         = { a = "Base" }
           desert/decal_stucco_vent.wl         = { a = "Base" }
           desert/door_1024.wl         = { a = "Base" }
           desert/door_heel.wl         = { a = "Base" }
           desert/door_lrg.wl         = { a = "Base" }
           desert/door_walkway.wl         = { a = "Base" }
           desert/light_yellow.wl         = { a = "Base" }
           desert/light_yellow_glw.wl         = { a = "Base" }
           desert/m1.wl         = { a = "Base" }
           desert/m2.wl         = { a = "Base" }
           desert/m3.wl         = { a = "Base" }
           desert/m4.wl         = { a = "Base" }
           desert/m5.wl         = { a = "Base" }
           desert/m6.wl         = { a = "Base" }
           desert/m7.wl         = { a = "Base" }
           desert/m8.wl         = { a = "Base" }
           desert/mos_eisley_door.wl         = { a = "Base" }
           desert/mos_eisley_door_jamb.wl         = { a = "Base" }
           desert/mp_neon_sign1.wl         = { a = "Base" }
           desert/mp_neon_sign2.wl         = { a = "Base" }
           desert/mp_neon_sign3.wl         = { a = "Base" }
           desert/mp_stucco_grime_top_bottom_red.wl         = { a = "Base" }
           desert/mp_stucco_grime_top_bottom_yel.wl         = { a = "Base" }
           desert/outerhull.wl         = { a = "Base" }
           desert/panel_dbay.wl         = { a = "Base" }
           desert/panel_dbaycontrol.wl         = { a = "Base" }
           desert/panel_dbaycontrol_glow.wl         = { a = "Base" }
           desert/panel_dbay_glow.wl         = { a = "Base" }
           desert/panel_monitor.wl         = { a = "Base" }
           desert/panel_monitor_glw.wl         = { a = "Base" }
           desert/panel_monitor_on.wl         = { a = "Base" }
           desert/panel_monitor_on_glw.wl         = { a = "Base" }
           desert/panel_tall.wl         = { a = "Base" }
           desert/panel_tall_glow.wl         = { a = "Base" }
           desert/pipe1.wl         = { a = "Base" }
           desert/pipe2.wl         = { a = "Base" }
           desert/rockwall2.wl         = { a = "Base" }
           desert/sandfloor2.wl         = { a = "Base" }
           desert/sandfloor2b.wl         = { a = "Base" }
           desert/sandfloor2old.wl         = { a = "Base" }
           desert/sandfloor2_tread.wl         = { a = "Base" }
           desert/sc_doors.wl         = { a = "Base" }
           desert/stucco.wl         = { a = "Base" }
           desert/stucco_ceiling_512_seamless.wl         = { a = "Base" }
           desert/stucco_grime.wl         = { a = "Base" }
           desert/stucco_grime_bottom.wl         = { a = "Base" }
           desert/stucco_grime_top_bottom.wl         = { a = "Base" }
           desert/stucco_portalsky1.wl         = { a = "Base" }
           desert/stucco_rim.wl         = { a = "Base" }
           desert/stucco_rim_2.wl         = { a = "Base" }
           desert/stucco_top_grime.wl         = { a = "Base" }
           desert/stucco_trim1.wl         = { a = "Base" }
           desert/s_basic.wl         = { a = "Base" }
           desert/s_basic_1.wl         = { a = "Base" }
           desert/s_basic_floor.wl         = { a = "Base" }
           desert/s_conbelt.wl         = { a = "Base" }
           desert/s_console.wl         = { a = "Base" }
           desert/s_console_anim.wl         = { a = "Base" }
           desert/s_console_anim2.wl         = { a = "Base" }
           desert/s_console_b.wl         = { a = "Base" }
           desert/s_console_glw.wl         = { a = "Base" }
           desert/s_door_1.wl         = { a = "Base" }
           desert/s_door_1_onoff.wl         = { a = "Base" }
           desert/s_door_2_onoff.wl         = { a = "Base" }
           desert/s_door_3_onoff.wl         = { a = "Base" }
           desert/s_door_3_onoffr.wl         = { a = "Base" }
           desert/s_floor1.wl         = { a = "Base" }
           desert/s_floor_elevator.wl         = { a = "Base" }
           desert/s_light.wl         = { a = "Base" }
           desert/s_light_glw.wl         = { a = "Base" }
           desert/s_switch_locked.wl         = { a = "Base" }
           desert/s_switch_unlocked.wl         = { a = "Base" }
           desert/s_tank2.wl         = { a = "Base" }
           desert/s_treds.wl         = { a = "Base" }
           desert/s_wall1.wl         = { a = "Base" }
           desert/s_wall2.wl         = { a = "Base" }
           desert/s_wall3.wl         = { a = "Base" }
           desert/top_walkway.wl         = { a = "Base" }
           desert/turbolift.wl         = { a = "Base" }
           desert/turbolift_base.wl         = { a = "Base" }
           desert/turbolift_int.wl         = { a = "Base" }
           desert/turbolift_int_glw.wl         = { a = "Base" }
           desert/t_rockwall1.wl         = { a = "Base" }
           desert/t_rockwall2.wl         = { a = "Base" }
           desert/vent_plate.wl         = { a = "Base" }
           desert/vent_tube.wl         = { a = "Base" }
           desert/walkway_section1.wl         = { a = "Base" }
           desert/walkway_section2.wl         = { a = "Base" }
           desert/wheeltread.wl         = { a = "Base" }
           desert/bloch1.wl         = { a = "Base" }
           desert/bloch2.wl         = { a = "Base" }
           desert/blotch_rust.wl         = { a = "Base" }
           desert/dbay_hud.wl         = { a = "Base" }
           desert/dbay_hud_ll.wl         = { a = "Base" }
           desert/dbay_hud_lr.wl         = { a = "Base" }
           desert/dbay_hud_ul.wl         = { a = "Base" }
           desert/dbay_hud_ur.wl         = { a = "Base" }
           desert/decal_cracks1.wl         = { a = "Base" }
           desert/decal_cracks2.wl         = { a = "Base" }
           desert/decal_psky_detail1.wl         = { a = "Base" }
           desert/decal_psky_groove.wl         = { a = "Base" }
           desert/decal_psky_vent.wl         = { a = "Base" }
           desert/decal_psky_vent2.wl         = { a = "Base" }
           desert/decal_stucco_detail1.wl         = { a = "Base" }
           desert/decal_stucco_vent2.wl         = { a = "Base" }
           desert/decal_s_detail1.wl         = { a = "Base" }
           desert/door_switch_red.wl         = { a = "Base" }
           desert/fuel1.wl         = { a = "Base" }
           desert/fuel2.wl         = { a = "Base" }
           desert/mp_1_circle_decal.wl         = { a = "Base" }
           desert/mp_2_circle_decal.wl         = { a = "Base" }
           desert/mp_3_circle_decal.wl         = { a = "Base" }
           desert/mp_security_station_decal.wl         = { a = "Base" }
           desert/overhead_door.wl         = { a = "Base" }
           desert/sandfloor2old_tread2.wl         = { a = "Base" }
           desert/s_door_1_onoffg.wl         = { a = "Base" }
           desert/s_door_1_onoffr.wl         = { a = "Base" }
           desert/s_door_2.wl         = { a = "Base" }
           desert/s_door_2_onoffg.wl         = { a = "Base" }
           desert/s_door_2_onoffr.wl         = { a = "Base" }
           desert/s_door_3_onoffg.wl         = { a = "Base" }
           desert/s_floor_lrg.wl         = { a = "Base" }
           desert/s_gratefloor.wl         = { a = "Base" }
           desert/s_switch_locked_glw.wl         = { a = "Base" }
           desert/s_switch_unlocked_glw.wl         = { a = "Base" }
           desert/s_tank.wl         = { a = "Base" }
           desert/s_windowfront_decal.wl         = { a = "Base" }
           desert/s_windowside_decal.wl         = { a = "Base" }
           desert/turbolift_base_glw.wl         = { a = "Base" }
           desert/turbolift_glw.wl         = { a = "Base" }
      }
      doomgiver.txlist = 
      {
           doomgiver/basic.wl         = { a = "Base" }
           doomgiver/basic2.wl         = { a = "Base" }
           doomgiver/bpipe2d.wl         = { a = "Base" }
           doomgiver/centerpipes2a.wl         = { a = "Base" }
           doomgiver/comm_panelglow.wl         = { a = "Base" }
           doomgiver/comm_roomglow.wl         = { a = "Base" }
           doomgiver/comp_panel.wl         = { a = "Base" }
           doomgiver/comp_panel1.wl         = { a = "Base" }
           doomgiver/comp_panel2.wl         = { a = "Base" }
           doomgiver/comp_panel3.wl         = { a = "Base" }
           doomgiver/comp_panel4.wl         = { a = "Base" }
           doomgiver/comp_panel5.wl         = { a = "Base" }
           doomgiver/comp_panel6.wl         = { a = "Base" }
           doomgiver/comp_panel7.wl         = { a = "Base" }
           doomgiver/comp_panel8.wl         = { a = "Base" }
           doomgiver/comp_panelcursor.wl         = { a = "Base" }
           doomgiver/comp_panel_11.wl         = { a = "Base" }
           doomgiver/control_ff.wl         = { a = "Base" }
           doomgiver/deathcon1.wl         = { a = "Base" }
           doomgiver/deathcon1glow.wl         = { a = "Base" }
           doomgiver/deathcon2glow.wl         = { a = "Base" }
           doomgiver/deathcon2glow1.wl         = { a = "Base" }
           doomgiver/deathconlight.wl         = { a = "Base" }
           doomgiver/doom_display1.wl         = { a = "Base" }
           doomgiver/door1.wl         = { a = "Base" }
           doomgiver/door1d.wl         = { a = "Base" }
           doomgiver/door1_red.wl         = { a = "Base" }
           doomgiver/doorhangar2.wl         = { a = "Base" }
           doomgiver/doorhangar2glow.wl         = { a = "Base" }
           doomgiver/doortrim01d.wl         = { a = "Base" }
           doomgiver/doortrim01dglow.wl         = { a = "Base" }
           doomgiver/d_switch.wl         = { a = "Base" }
           doomgiver/d_switchg1.wl         = { a = "Base" }
           doomgiver/d_switchg2.wl         = { a = "Base" }
           doomgiver/d_switchg3.wl         = { a = "Base" }
           doomgiver/edge1d.wl         = { a = "Base" }
           doomgiver/energything.wl         = { a = "Base" }
           doomgiver/energything2.wl         = { a = "Base" }
           doomgiver/flare_blue.wl         = { a = "Base" }
           doomgiver/floord.wl         = { a = "Base" }
           doomgiver/foormetal2.wl         = { a = "Base" }
           doomgiver/fronttrimd.wl         = { a = "Base" }
           doomgiver/hyper01.wl         = { a = "Base" }
           doomgiver/hyper02.wl         = { a = "Base" }
           doomgiver/lightnewd.wl         = { a = "Base" }
           doomgiver/lightnewdglow.wl         = { a = "Base" }
           doomgiver/light_whited.wl         = { a = "Base" }
           doomgiver/light_whited_glow.wl         = { a = "Base" }
           doomgiver/mapd.wl         = { a = "Base" }
           doomgiver/mapd1.wl         = { a = "Base" }
           doomgiver/mapd2.wl         = { a = "Base" }
           doomgiver/metalpanel1ed.wl         = { a = "Base" }
           doomgiver/metalpanel1gd.wl         = { a = "Base" }
           doomgiver/metalpanel7d.wl         = { a = "Base" }
           doomgiver/metalsec1d.wl         = { a = "Base" }
           doomgiver/metal_lgd.wl         = { a = "Base" }
           doomgiver/new2d.wl         = { a = "Base" }
           doomgiver/new3d.wl         = { a = "Base" }
           doomgiver/new5d.wl         = { a = "Base" }
           doomgiver/pipe2.wl         = { a = "Base" }
           doomgiver/screen01.wl         = { a = "Base" }
           doomgiver/screen03.wl         = { a = "Base" }
           doomgiver/screen05.wl         = { a = "Base" }
           doomgiver/screen09.wl         = { a = "Base" }
           doomgiver/trim01d.wl         = { a = "Base" }
           doomgiver/vslot2a.wl         = { a = "Base" }
           doomgiver/vslotd.wl         = { a = "Base" }
           doomgiver/wall15d.wl         = { a = "Base" }
           doomgiver/wall9d.wl         = { a = "Base" }
           doomgiver/wallpanel08d.wl         = { a = "Base" }
           doomgiver/comm_panel.wl         = { a = "Base" }
           doomgiver/comm_room.wl         = { a = "Base" }
           doomgiver/comp_panel_new_2.wl         = { a = "Base" }
           doomgiver/control_panel_02.wl         = { a = "Base" }
           doomgiver/deathcon1a.wl         = { a = "Base" }
           doomgiver/deathcon2.wl         = { a = "Base" }
           doomgiver/deathcon2a.wl         = { a = "Base" }
      }
      factory.txlist = 
      {
           factory/awning.wl         = { a = "Base" }
           factory/base.wl         = { a = "Base" }
           factory/basefloor1.wl         = { a = "Base" }
           factory/basemetal1.wl         = { a = "Base" }
           factory/basemetal2.wl         = { a = "Base" }
           factory/basemetal4.wl         = { a = "Base" }
           factory/basemetal5.wl         = { a = "Base" }
           factory/basewall.wl         = { a = "Base" }
           factory/basewall2.wl         = { a = "Base" }
           factory/basewall_vent.wl         = { a = "Base" }
           factory/basic1.wl         = { a = "Base" }
           factory/basic2.wl         = { a = "Base" }
           factory/basic3.wl         = { a = "Base" }
           factory/basic4.wl         = { a = "Base" }
           factory/basic5.wl         = { a = "Base" }
           factory/basic6.wl         = { a = "Base" }
           factory/basicmetal2_2.wl         = { a = "Base" }
           factory/big_door.wl         = { a = "Base" }
           factory/blastshield.wl         = { a = "Base" }
           factory/caution2.wl         = { a = "Base" }
           factory/ceilingbase1.wl         = { a = "Base" }
           factory/conveyor_belt.wl         = { a = "Base" }
           factory/crane_coil.wl         = { a = "Base" }
           factory/crane_pipe.wl         = { a = "Base" }
           factory/crateside.wl         = { a = "Base" }
           factory/crateside2.wl         = { a = "Base" }
           factory/crateside4.wl         = { a = "Base" }
           factory/crate_trim10.wl         = { a = "Base" }
           factory/crate_trim11.wl         = { a = "Base" }
           factory/crate_trim2.wl         = { a = "Base" }
           factory/crate_trim3.wl         = { a = "Base" }
           factory/crate_trim4.wl         = { a = "Base" }
           factory/crate_trim5.wl         = { a = "Base" }
           factory/crate_trim6.wl         = { a = "Base" }
           factory/crate_trim7.wl         = { a = "Base" }
           factory/crate_trim8.wl         = { a = "Base" }
           factory/crate_trim9.wl         = { a = "Base" }
           factory/cul_door.wl         = { a = "Base" }
           factory/cul_door_onoff.wl         = { a = "Base" }
           factory/cul_door_onoffg.wl         = { a = "Base" }
           factory/cul_door_onoffr.wl         = { a = "Base" }
           factory/darkfloor.wl         = { a = "Base" }
           factory/darkmetal.wl         = { a = "Base" }
           factory/door.wl         = { a = "Base" }
           factory/doorpart.wl         = { a = "Base" }
           factory/doorpattern.wl         = { a = "Base" }
           factory/door_onoff.wl         = { a = "Base" }
           factory/door_onoffg.wl         = { a = "Base" }
           factory/door_onoffr.wl         = { a = "Base" }
           factory/electrical2.wl         = { a = "Base" }
           factory/env4.wl         = { a = "Base" }
           factory/enviro.wl         = { a = "Base" }
           factory/etest3.wl         = { a = "Base" }
           factory/goldtop1.wl         = { a = "Base" }
           factory/goldtop2.wl         = { a = "Base" }
           factory/inside_ceiling1.wl         = { a = "Base" }
           factory/inside_floor.wl         = { a = "Base" }
           factory/largepipe4.wl         = { a = "Base" }
           factory/ll_longbrace.wl         = { a = "Base" }
           factory/metalsec1.wl         = { a = "Base" }
           factory/newcrate1.wl         = { a = "Base" }
           factory/newcrate1_side.wl         = { a = "Base" }
           factory/newcrate3.wl         = { a = "Base" }
           factory/newcrate3_trim.wl         = { a = "Base" }
           factory/newcrate4.wl         = { a = "Base" }
           factory/newcrate4_side.wl         = { a = "Base" }
           factory/newcrate4_side_old.wl         = { a = "Base" }
           factory/outerwall.wl         = { a = "Base" }
           factory/outerwall_pipes.wl         = { a = "Base" }
           factory/outside_floor1.wl         = { a = "Base" }
           factory/outside_rock1b.wl         = { a = "Base" }
           factory/outside_wall.wl         = { a = "Base" }
           factory/piller.wl         = { a = "Base" }
           factory/pillerb.wl         = { a = "Base" }
           factory/pillerc.wl         = { a = "Base" }
           factory/piller_base.wl         = { a = "Base" }
           factory/pipe.wl         = { a = "Base" }
           factory/pipe_electric.wl         = { a = "Base" }
           factory/siding1.wl         = { a = "Base" }
           factory/siding2.wl         = { a = "Base" }
           factory/silvertop.wl         = { a = "Base" }
           factory/s_basic.wl         = { a = "Base" }
           factory/s_panel.wl         = { a = "Base" }
           factory/s_panel2.wl         = { a = "Base" }
           factory/s_trim.wl         = { a = "Base" }
           factory/s_trim2.wl         = { a = "Base" }
           factory/s_wall2.wl         = { a = "Base" }
           factory/s_wall3.wl         = { a = "Base" }
           factory/tracklight.wl         = { a = "Base" }
           factory/tracklight_glow.wl         = { a = "Base" }
           factory/trainside.wl         = { a = "Base" }
           factory/trainside_side.wl         = { a = "Base" }
           factory/trim1.wl         = { a = "Base" }
           factory/trim2.wl         = { a = "Base" }
           factory/trimlight.wl         = { a = "Base" }
           factory/trimlight_glow.wl         = { a = "Base" }
           factory/trim_01.wl         = { a = "Base" }
           factory/wall10.wl         = { a = "Base" }
           factory/wall10env.wl         = { a = "Base" }
           factory/wall2c.wl         = { a = "Base" }
           factory/wall3.wl         = { a = "Base" }
           factory/wall3b.wl         = { a = "Base" }
           factory/wallbeam02.wl         = { a = "Base" }
           factory/cat_floor.wl         = { a = "Base" }
           factory/cat_floor2.wl         = { a = "Base" }
           factory/deconfield2.wl         = { a = "Base" }
           factory/ggoo1.wl         = { a = "Base" }
           factory/ggoo3.wl         = { a = "Base" }
           factory/grate.wl         = { a = "Base" }
           factory/grating.wl         = { a = "Base" }
           factory/newcrate1_glow.wl         = { a = "Base" }
           factory/newcrate3_trim_glow1.wl         = { a = "Base" }
           factory/newcrate3_trim_glow2.wl         = { a = "Base" }
           factory/newcrate4_side_glow1.wl         = { a = "Base" }
           factory/newcrate4_side_glow2.wl         = { a = "Base" }
           factory/opipe_b.wl         = { a = "Base" }
           factory/opipe_o.wl         = { a = "Base" }
           factory/opipe_p.wl         = { a = "Base" }
           factory/opipe_r.wl         = { a = "Base" }
           factory/outside_wall_2.wl         = { a = "Base" }
           factory/piller_base_glow.wl         = { a = "Base" }
           factory/tickertape.wl         = { a = "Base" }
           factory/tickertape2.wl         = { a = "Base" }
           factory/tickertape3.wl         = { a = "Base" }
           factory/wall2.wl         = { a = "Base" }
           factory/wallliner.wl         = { a = "Base" }
           factory/walllinerb.wl         = { a = "Base" }
           factory/wallliner_energya.wl         = { a = "Base" }
           factory/wallliner_energyb.wl         = { a = "Base" }
      }
      hoth.txlist = 
      {
           jnegretetest/canvas2_desert.wl         = { a = "Base" }
           jnegretetest/rock_huge_snow.wl         = { a = "Base" }
           hoth/at_at_frost.wl         = { a = "Base" }
           hoth/at_at_leg.wl         = { a = "Base" }
           hoth/crate1.wl         = { a = "Base" }
           hoth/crate1b.wl         = { a = "Base" }
           hoth/door_02_onoffg.wl         = { a = "Base" }
           hoth/door_02_onoffr.wl         = { a = "Base" }
           hoth/door_04_a.wl         = { a = "Base" }
           hoth/floorpanel_01.wl         = { a = "Base" }
           hoth/floorpanel_02.wl         = { a = "Base" }
           hoth/hothsky.wl         = { a = "Base" }
           hoth/h_basicwall.wl         = { a = "Base" }
           hoth/h_basicwall_2.wl         = { a = "Base" }
           hoth/h_control_01.wl         = { a = "Base" }
           hoth/h_control_02.wl         = { a = "Base" }
           hoth/h_control_03.wl         = { a = "Base" }
           hoth/h_control_03_glw.wl         = { a = "Base" }
           hoth/h_control_04.wl         = { a = "Base" }
           hoth/h_control_04_glw.wl         = { a = "Base" }
           hoth/h_control_metal.wl         = { a = "Base" }
           hoth/h_door_neutral.wl         = { a = "Base" }
           hoth/h_door_onoffg.wl         = { a = "Base" }
           hoth/h_door_onoffr.wl         = { a = "Base" }
           hoth/h_floor.wl         = { a = "Base" }
           hoth/h_floor_01.wl         = { a = "Base" }
           hoth/h_outground.wl         = { a = "Base" }
           hoth/h_outground_2.wl         = { a = "Base" }
           hoth/h_outground_3.wl         = { a = "Base" }
           hoth/h_wallchunk.wl         = { a = "Base" }
           hoth/ice.wl         = { a = "Base" }
           hoth/ice2.wl         = { a = "Base" }
           hoth/ion_feedtube_copper.wl         = { a = "Base" }
           hoth/ion_feedtube_copper_spec.wl         = { a = "Base" }
           hoth/ion_feedtube_spec.wl         = { a = "Base" }
           hoth/ion_panel_03.wl         = { a = "Base" }
           hoth/ion_panel_03_glw.wl         = { a = "Base" }
           hoth/ion_screen_01_glw.wl         = { a = "Base" }
           hoth/ion_screen_01_ring.wl         = { a = "Base" }
           hoth/ion_screen_02_glw.wl         = { a = "Base" }
           hoth/ion_screen_02_pls2.wl         = { a = "Base" }
           hoth/ion_screen_02_ret.wl         = { a = "Base" }
           hoth/ion_screen_03_glw.wl         = { a = "Base" }
           hoth/ion_screen_03_wipe.wl         = { a = "Base" }
           hoth/lights_tube.wl         = { a = "Base" }
           hoth/lights_tube_glow.wl         = { a = "Base" }
           hoth/light_01b.wl         = { a = "Base" }
           hoth/light_01b_glow.wl         = { a = "Base" }
           hoth/light_ceiling.wl         = { a = "Base" }
           hoth/light_ceiling_glow.wl         = { a = "Base" }
           hoth/rock_huge_snow.wl         = { a = "Base" }
           hoth/snowbiga.wl         = { a = "Base" }
           hoth/snow_01.wl         = { a = "Base" }
           hoth/switch_lift.wl         = { a = "Base" }
           hoth/walker.wl         = { a = "Base" }
           hoth/walker_grill.wl         = { a = "Base" }
           hoth/beacon_pole.wl         = { a = "Base" }
           hoth/bed_cushion.wl         = { a = "Base" }
           hoth/bed_cushion_wall.wl         = { a = "Base" }
           hoth/blast_panel.wl         = { a = "Base" }
           hoth/blast_panel2.wl         = { a = "Base" }
           hoth/blast_panel2_snow.wl         = { a = "Base" }
           hoth/blast_panel3_snow.wl         = { a = "Base" }
           hoth/blast_panel4.wl         = { a = "Base" }
           hoth/blast_panel4_snow.wl         = { a = "Base" }
           hoth/blast_panel_snow.wl         = { a = "Base" }
           hoth/door_02.wl         = { a = "Base" }
           hoth/door_02_onoff.wl         = { a = "Base" }
           hoth/elevator_floor1.wl         = { a = "Base" }
           hoth/exit_beam.wl         = { a = "Base" }
           hoth/exit_beam_side.wl         = { a = "Base" }
           hoth/exit_center_piece.wl         = { a = "Base" }
           hoth/exit_plate.wl         = { a = "Base" }
           hoth/exit_trim.wl         = { a = "Base" }
           hoth/floor_grate_new.wl         = { a = "Base" }
           hoth/h_control_01_glw.wl         = { a = "Base" }
           hoth/h_control_02_glw.wl         = { a = "Base" }
           hoth/h_door.wl         = { a = "Base" }
           hoth/h_door2.wl         = { a = "Base" }
           hoth/h_door2_onoff.wl         = { a = "Base" }
           hoth/h_door2_onoffg.wl         = { a = "Base" }
           hoth/h_door2_onoffr.wl         = { a = "Base" }
           hoth/h_door_onoff.wl         = { a = "Base" }
           hoth/h_floor_02.wl         = { a = "Base" }
           hoth/h_floor_03.wl         = { a = "Base" }
           hoth/h_tile.wl         = { a = "Base" }
           hoth/h_tile_02.wl         = { a = "Base" }
           hoth/h_wall_01.wl         = { a = "Base" }
           hoth/h_wall_02.wl         = { a = "Base" }
           hoth/h_wall_03.wl         = { a = "Base" }
           hoth/h_wall_04b.wl         = { a = "Base" }
           hoth/h_wall_04b_shelf.wl         = { a = "Base" }
           hoth/ion_feedtube.wl         = { a = "Base" }
           hoth/ion_panel_04.wl         = { a = "Base" }
           hoth/ion_panel_05.wl         = { a = "Base" }
           hoth/ion_panel_06.wl         = { a = "Base" }
           hoth/ion_panel_07.wl         = { a = "Base" }
           hoth/ion_screen_01.wl         = { a = "Base" }
           hoth/ion_screen_01_glw2.wl         = { a = "Base" }
           hoth/ion_screen_01_glw3.wl         = { a = "Base" }
           hoth/ion_screen_02.wl         = { a = "Base" }
           hoth/ion_screen_02_pls.wl         = { a = "Base" }
           hoth/ion_screen_03.wl         = { a = "Base" }
           hoth/ion_screen_04.wl         = { a = "Base" }
           hoth/mp_rock.wl         = { a = "Base" }
           hoth/mp_rock2.wl         = { a = "Base" }
           hoth/newwall_mask.wl         = { a = "Base" }
           hoth/switch_lift_red.wl         = { a = "Base" }
           hoth/trim_01.wl         = { a = "Base" }
      }
      h_evil.txlist = 
      {
           h_evil/basicrocknew.wl         = { a = "Base" }
           h_evil/crossbeam1.wl         = { a = "Base" }
           h_evil/elecgrid_glow1.wl         = { a = "Base" }
           h_evil/elecgrid_glow2.wl         = { a = "Base" }
           h_evil/elecgrid_glow3.wl         = { a = "Base" }
           h_evil/energypipe1.wl         = { a = "Base" }
           h_evil/energypipe1_glow1.wl         = { a = "Base" }
           h_evil/evil_basic2a.wl         = { a = "Base" }
           h_evil/evil_basicwall10.wl         = { a = "Base" }
           h_evil/evil_basicwall11.wl         = { a = "Base" }
           h_evil/evil_basicwall13.wl         = { a = "Base" }
           h_evil/evil_basicwall15.wl         = { a = "Base" }
           h_evil/evil_basicwall2.wl         = { a = "Base" }
           h_evil/evil_basicwall4.wl         = { a = "Base" }
           h_evil/evil_basicwall6.wl         = { a = "Base" }
           h_evil/evil_basicwall7.wl         = { a = "Base" }
           h_evil/evil_basicwallh.wl         = { a = "Base" }
           h_evil/evil_door_basic.wl         = { a = "Base" }
           h_evil/evil_door_basic_onoff.wl         = { a = "Base" }
           h_evil/evil_pipe2.wl         = { a = "Base" }
           h_evil/evil_rock12.wl         = { a = "Base" }
           h_evil/evil_rock13.wl         = { a = "Base" }
           h_evil/evil_trim3.wl         = { a = "Base" }
           h_evil/fantop.wl         = { a = "Base" }
           h_evil/fantop_side.wl         = { a = "Base" }
           h_evil/fan_display.wl         = { a = "Base" }
           h_evil/fan_display_blade.wl         = { a = "Base" }
           h_evil/floorlarge2.wl         = { a = "Base" }
           h_evil/floor_metal.wl         = { a = "Base" }
           h_evil/frameblue.wl         = { a = "Base" }
           h_evil/frameblue_floor.wl         = { a = "Base" }
           h_evil/frameblue_smallconduit.wl         = { a = "Base" }
           h_evil/frameblue_stairriser.wl         = { a = "Base" }
           h_evil/frameblue_stairtread.wl         = { a = "Base" }
           h_evil/frameblue_trim.wl         = { a = "Base" }
           h_evil/framedoor_trim.wl         = { a = "Base" }
           h_evil/framedoor_trim2.wl         = { a = "Base" }
           h_evil/framedoor_trim3.wl         = { a = "Base" }
           h_evil/framedoor_trim_horizontal.wl         = { a = "Base" }
           h_evil/light1.wl         = { a = "Base" }
           h_evil/light2.wl         = { a = "Base" }
           h_evil/light2_glow.wl         = { a = "Base" }
           h_evil/light3.wl         = { a = "Base" }
           h_evil/light3_glow.wl         = { a = "Base" }
           h_evil/light4.wl         = { a = "Base" }
           h_evil/light4_glow.wl         = { a = "Base" }
           h_evil/light5.wl         = { a = "Base" }
           h_evil/newfloor.wl         = { a = "Base" }
           h_evil/newstone.wl         = { a = "Base" }
           h_evil/newstonecut.wl         = { a = "Base" }
           h_evil/newstonewall.wl         = { a = "Base" }
           h_evil/newstonewall1.wl         = { a = "Base" }
           h_evil/switch.wl         = { a = "Base" }
           h_evil/switch_off.wl         = { a = "Base" }
           h_evil/switch_on.wl         = { a = "Base" }
           h_evil/trim_g.wl         = { a = "Base" }
           h_evil/trim_g2.wl         = { a = "Base" }
           h_evil/blue_grate.wl         = { a = "Base" }
           h_evil/crossbeam2.wl         = { a = "Base" }
           h_evil/elecgrid_base.wl         = { a = "Base" }
           h_evil/energypipe1_glow2.wl         = { a = "Base" }
           h_evil/evil_door_basic_onoffg.wl         = { a = "Base" }
           h_evil/evil_door_basic_onoffr.wl         = { a = "Base" }
           h_evil/fan_display_off.wl         = { a = "Base" }
           h_evil/fan_display_on.wl         = { a = "Base" }
           h_evil/frameblue_grate.wl         = { a = "Base" }
           h_evil/light1glow.wl         = { a = "Base" }
           h_evil/waterf1.wl         = { a = "Base" }
           h_evil/wf3.wl         = { a = "Base" }
           h_evil/wfn2.wl         = { a = "Base" }
      }
      impdetention.txlist = 
      {
           impdetention/512_128.wl         = { a = "Base" }
           impdetention/512_512.wl         = { a = "Base" }
           impdetention/black_panel.wl         = { a = "Base" }
           impdetention/bpipe2.wl         = { a = "Base" }
           impdetention/control3.wl         = { a = "Base" }
           impdetention/control4.wl         = { a = "Base" }
           impdetention/control4_back.wl         = { a = "Base" }
           impdetention/control4_backglow.wl         = { a = "Base" }
           impdetention/control4_glow.wl         = { a = "Base" }
           impdetention/control5.wl         = { a = "Base" }
           impdetention/control5_glow.wl         = { a = "Base" }
           impdetention/controlpanel1.wl         = { a = "Base" }
           impdetention/crate7.wl         = { a = "Base" }
           impdetention/deathconlight.wl         = { a = "Base" }
           impdetention/doordirt.wl         = { a = "Base" }
           impdetention/doordirt2.wl         = { a = "Base" }
           impdetention/doortrim01.wl         = { a = "Base" }
           impdetention/edge1.wl         = { a = "Base" }
           impdetention/elevat_floor.wl         = { a = "Base" }
           impdetention/floor.wl         = { a = "Base" }
           impdetention/floorpanel1bdark.wl         = { a = "Base" }
           impdetention/greybase.wl         = { a = "Base" }
           impdetention/hangerdoor.wl         = { a = "Base" }
           impdetention/innertrim.wl         = { a = "Base" }
           impdetention/lightnew.wl         = { a = "Base" }
           impdetention/lightnewglow.wl         = { a = "Base" }
           impdetention/light_blue.wl         = { a = "Base" }
           impdetention/light_fx.wl         = { a = "Base" }
           impdetention/light_red.wl         = { a = "Base" }
           impdetention/light_white.wl         = { a = "Base" }
           impdetention/light_white_off.wl         = { a = "Base" }
           impdetention/lpanel6tuw.wl         = { a = "Base" }
           impdetention/lpanel6tuwglow.wl         = { a = "Base" }
           impdetention/metal.wl         = { a = "Base" }
           impdetention/metalpanel1c.wl         = { a = "Base" }
           impdetention/metalpanel1f1dark.wl         = { a = "Base" }
           impdetention/metalpanel1f1darkglow.wl         = { a = "Base" }
           impdetention/metalpanel1h.wl         = { a = "Base" }
           impdetention/metalpanel1new.wl         = { a = "Base" }
           impdetention/mp_b_symbol.wl         = { a = "Base" }
           impdetention/mp_b_trimlight.wl         = { a = "Base" }
           impdetention/mp_b_trimlight_glow.wl         = { a = "Base" }
           impdetention/mp_r_symbol.wl         = { a = "Base" }
           impdetention/mp_r_trimlight.wl         = { a = "Base" }
           impdetention/mp_r_trimlight_glow.wl         = { a = "Base" }
           impdetention/uppertrim.wl         = { a = "Base" }
           impdetention/vslot2.wl         = { a = "Base" }
           impdetention/vslot2a.wl         = { a = "Base" }
           impdetention/deathcon1.wl         = { a = "Base" }
           impdetention/deathcon1a.wl         = { a = "Base" }
           impdetention/interference2.wl         = { a = "Base" }
           impdetention/screen1.wl         = { a = "Base" }
      }
      imperial.txlist = 
      {
           imperial/basic.wl         = { a = "Base" }
           imperial/beam.wl         = { a = "Base" }
           imperial/beam_plain.wl         = { a = "Base" }
           imperial/beam_tie.wl         = { a = "Base" }
           imperial/camera_switch_glw.wl         = { a = "Base" }
           imperial/caution.wl         = { a = "Base" }
           imperial/caution2.wl         = { a = "Base" }
           imperial/caution2_red.wl         = { a = "Base" }
           imperial/caution_red.wl         = { a = "Base" }
           imperial/ceiling.wl         = { a = "Base" }
           imperial/cellwall.wl         = { a = "Base" }
           imperial/crate_panels.wl         = { a = "Base" }
           imperial/crate_panels_red.wl         = { a = "Base" }
           imperial/door_1new_onoff.wl         = { a = "Base" }
           imperial/edge.wl         = { a = "Base" }
           imperial/edge_2.wl         = { a = "Base" }
           imperial/elevat_floor.wl         = { a = "Base" }
           imperial/env_shiny_floor.wl         = { a = "Base" }
           imperial/etest3.wl         = { a = "Base" }
           imperial/e_concretefloor.wl         = { a = "Base" }
           imperial/e_concretefloor_2.wl         = { a = "Base" }
           imperial/e_door1.wl         = { a = "Base" }
           imperial/e_door2.wl         = { a = "Base" }
           imperial/floor.wl         = { a = "Base" }
           imperial/grid.wl         = { a = "Base" }
           imperial/grid_2.wl         = { a = "Base" }
           imperial/grid_3.wl         = { a = "Base" }
           imperial/holotarget1.wl         = { a = "Base" }
           imperial/holotarget2.wl         = { a = "Base" }
           imperial/holotarget2_small.wl         = { a = "Base" }
           imperial/holotarget3.wl         = { a = "Base" }
           imperial/light_hanger.wl         = { a = "Base" }
           imperial/light_hanger_glw.wl         = { a = "Base" }
           imperial/light_prison.wl         = { a = "Base" }
           imperial/light_prison_glw.wl         = { a = "Base" }
           imperial/light_tie.wl         = { a = "Base" }
           imperial/light_tie_glw.wl         = { a = "Base" }
           imperial/mapd1.wl         = { a = "Base" }
           imperial/mapd2.wl         = { a = "Base" }
           imperial/outside_wall.wl         = { a = "Base" }
           imperial/outside_wall_base.wl         = { a = "Base" }
           imperial/outside_wall_base2.wl         = { a = "Base" }
           imperial/pipes.wl         = { a = "Base" }
           imperial/pipewall.wl         = { a = "Base" }
           imperial/pipe_2.wl         = { a = "Base" }
           imperial/pipe_3.wl         = { a = "Base" }
           imperial/pipe_big.wl         = { a = "Base" }
           imperial/pipe_small.wl         = { a = "Base" }
           imperial/pipe_small_2.wl         = { a = "Base" }
           imperial/shiny_floor.wl         = { a = "Base" }
           imperial/siding1.wl         = { a = "Base" }
           imperial/siding2.wl         = { a = "Base" }
           imperial/switch_door_locked.wl         = { a = "Base" }
           imperial/switch_door_unlocked.wl         = { a = "Base" }
           imperial/switch_elevator_grn.wl         = { a = "Base" }
           imperial/switch_elevator_grn_glw.wl         = { a = "Base" }
           imperial/switch_elevator_red.wl         = { a = "Base" }
           imperial/switch_elevator_red_glw.wl         = { a = "Base" }
           imperial/switch_hangar_locked.wl         = { a = "Base" }
           imperial/switch_hangar_locked_glw.wl         = { a = "Base" }
           imperial/switch_hangar_unlocked.wl         = { a = "Base" }
           imperial/switch_hangar_unlocked_glw.wl         = { a = "Base" }
           imperial/trim.wl         = { a = "Base" }
           imperial/trimforcepris.wl         = { a = "Base" }
           imperial/trim_2.wl         = { a = "Base" }
           imperial/trim_3.wl         = { a = "Base" }
           imperial/trim_4.wl         = { a = "Base" }
           imperial/wall2.wl         = { a = "Base" }
           imperial/wallnew1.wl         = { a = "Base" }
           imperial/wallnew2.wl         = { a = "Base" }
           imperial/wall_3.wl         = { a = "Base" }
           imperial/wall_6.wl         = { a = "Base" }
           imperial/wall_garrison2.wl         = { a = "Base" }
           imperial/wall_set2_a.wl         = { a = "Base" }
           imperial/wall_set2_e.wl         = { a = "Base" }
           imperial/wall_vent.wl         = { a = "Base" }
           imperial/camera_switch.wl         = { a = "Base" }
           imperial/control_panel1.wl         = { a = "Base" }
           imperial/door_1.wl         = { a = "Base" }
           imperial/door_1_onoffg.wl         = { a = "Base" }
           imperial/door_1_onoffr.wl         = { a = "Base" }
           imperial/door_2.wl         = { a = "Base" }
           imperial/door_2new_onoff.wl         = { a = "Base" }
           imperial/door_2_onoff.wl         = { a = "Base" }
           imperial/door_2_onoffg.wl         = { a = "Base" }
           imperial/door_2_onoffr.wl         = { a = "Base" }
           imperial/floorgrate.wl         = { a = "Base" }
           imperial/grass.wl         = { a = "Base" }
           imperial/grass_ground.wl         = { a = "Base" }
           imperial/grate02.wl         = { a = "Base" }
           imperial/grate02_broke.wl         = { a = "Base" }
           imperial/square.wl         = { a = "Base" }
           imperial/switch_door_locked_glw.wl         = { a = "Base" }
           imperial/switch_door_unlocked_glw.wl         = { a = "Base" }
           imperial/switch_hangar_locked_anim.wl         = { a = "Base" }
           imperial/wall_1.wl         = { a = "Base" }
           imperial/wall_2.wl         = { a = "Base" }
      }
      impgarrison.txlist = 
      {
           impgarrison/light_panel_01.wl         = { a = "Base" }
           impgarrison/metal.wl         = { a = "Base" }
           impgarrison/metal1.wl         = { a = "Base" }
           impgarrison/metal1glow.wl         = { a = "Base" }
           impgarrison/metal_lg_dk.wl         = { a = "Base" }
           impgarrison/metal_lg_lt.wl         = { a = "Base" }
           impgarrison/new2.wl         = { a = "Base" }
           impgarrison/new3.wl         = { a = "Base" }
           impgarrison/new5.wl         = { a = "Base" }
           impgarrison/new8.wl         = { a = "Base" }
           impgarrison/side_panel_01.wl         = { a = "Base" }
           impgarrison/wall01a.wl         = { a = "Base" }
      }
      imp_mine.txlist = 
      {
           imp_mine/basefloor2.wl         = { a = "Base" }
           imp_mine/blastdoor_piece.wl         = { a = "Base" }
           imp_mine/blastshield.wl         = { a = "Base" }
           imp_mine/compacter_treads.wl         = { a = "Base" }
           imp_mine/control1.wl         = { a = "Base" }
           imp_mine/control2.wl         = { a = "Base" }
           imp_mine/frame.wl         = { a = "Base" }
           imp_mine/kplate2.wl         = { a = "Base" }
           imp_mine/kplate3.wl         = { a = "Base" }
           imp_mine/kplatek.wl         = { a = "Base" }
           imp_mine/lava2.wl         = { a = "Base" }
           imp_mine/ramp.wl         = { a = "Base" }
           imp_mine/side_support.wl         = { a = "Base" }
           imp_mine/grating.wl         = { a = "Base" }
           imp_mine/lightmap2.wl         = { a = "Base" }
           imp_mine/lightmap3.wl         = { a = "Base" }
           imp_mine/lightmap4.wl         = { a = "Base" }
           imp_mine/lightmap5.wl         = { a = "Base" }
      }
      kejim.txlist = 
      {
           kejim/basepanel02.wl         = { a = "Base" }
           kejim/basepanel04.wl         = { a = "Base" }
           kejim/bigwall02.wl         = { a = "Base" }
           kejim/coolant.wl         = { a = "Base" }
           kejim/flatwhite.wl         = { a = "Base" }
           kejim/floor01.wl         = { a = "Base" }
           kejim/floor02.wl         = { a = "Base" }
           kejim/floorsquare2.wl         = { a = "Base" }
           kejim/floor_green.wl         = { a = "Base" }
           kejim/kej_control.wl         = { a = "Base" }
           kejim/kej_control2.wl         = { a = "Base" }
           kejim/kej_control2_glow.wl         = { a = "Base" }
           kejim/kej_control3.wl         = { a = "Base" }
           kejim/kej_control3_glow.wl         = { a = "Base" }
           kejim/kej_control_glow.wl         = { a = "Base" }
           kejim/kej_lights.wl         = { a = "Base" }
           kejim/kej_lights_glow.wl         = { a = "Base" }
           kejim/kej_pipe.wl         = { a = "Base" }
           kejim/labwell_common.wl         = { a = "Base" }
           kejim/labwell_square.wl         = { a = "Base" }
           kejim/lightpanel.wl         = { a = "Base" }
           kejim/lightpanel02.wl         = { a = "Base" }
           kejim/lightpanel02glow.wl         = { a = "Base" }
           kejim/lightpanelglow.wl         = { a = "Base" }
           kejim/metal.wl         = { a = "Base" }
           kejim/metal1.wl         = { a = "Base" }
           kejim/metal1glow.wl         = { a = "Base" }
           kejim/metal2.wl         = { a = "Base" }
           kejim/metalpanel1b.wl         = { a = "Base" }
           kejim/redfield1.wl         = { a = "Base" }
           kejim/redfield2.wl         = { a = "Base" }
           kejim/redlights.wl         = { a = "Base" }
           kejim/redlightsglow.wl         = { a = "Base" }
           kejim/sentrytrim01.wl         = { a = "Base" }
           kejim/stars_scroll.wl         = { a = "Base" }
           kejim/strutlight.wl         = { a = "Base" }
           kejim/strutlightglow.wl         = { a = "Base" }
           kejim/switch_brokena.wl         = { a = "Base" }
           kejim/trim05.wl         = { a = "Base" }
           kejim/wallpanel01.wl         = { a = "Base" }
           kejim/wallpanel01glow.wl         = { a = "Base" }
           kejim/wallpanel03.wl         = { a = "Base" }
           kejim/wallpanel03glow.wl         = { a = "Base" }
           kejim/wallpanel11.wl         = { a = "Base" }
           kejim/grate02.wl         = { a = "Base" }
           kejim/grate02_broke.wl         = { a = "Base" }
           kejim/mp_barrel.wl         = { a = "Base" }
           kejim/security_glass.wl         = { a = "Base" }
      }
      korriban.txlist = 
      {
           korriban/entrance_side.wl         = { a = "Base" }
           korriban/env_crystal.wl         = { a = "Base" }
           korriban/k_basic.wl         = { a = "Base" }
           korriban/k_basic2.wl         = { a = "Base" }
           korriban/k_basic3.wl         = { a = "Base" }
           korriban/k_basicfloor.wl         = { a = "Base" }
           korriban/k_basicfloor2.wl         = { a = "Base" }
           korriban/k_ceiling.wl         = { a = "Base" }
           korriban/k_ceiling2.wl         = { a = "Base" }
           korriban/k_floorlava.wl         = { a = "Base" }
           korriban/k_floorlava_glow.wl         = { a = "Base" }
           korriban/k_seproom_wall.wl         = { a = "Base" }
           korriban/k_seproom_wall2.wl         = { a = "Base" }
           korriban/k_septerbase.wl         = { a = "Base" }
           korriban/k_trim.wl         = { a = "Base" }
           korriban/k_trim2.wl         = { a = "Base" }
           korriban/k_trim3.wl         = { a = "Base" }
           korriban/k_trim4.wl         = { a = "Base" }
           korriban/k_trim5.wl         = { a = "Base" }
           korriban/k_trim6.wl         = { a = "Base" }
           korriban/k_trim7.wl         = { a = "Base" }
           korriban/k_trim8.wl         = { a = "Base" }
           korriban/k_wall.wl         = { a = "Base" }
           korriban/k_wall10.wl         = { a = "Base" }
           korriban/k_wall11.wl         = { a = "Base" }
           korriban/k_wall2.wl         = { a = "Base" }
           korriban/k_wall2plain.wl         = { a = "Base" }
           korriban/k_wall3.wl         = { a = "Base" }
           korriban/k_wall6.wl         = { a = "Base" }
           korriban/k_wall7.wl         = { a = "Base" }
           korriban/k_wall8.wl         = { a = "Base" }
           korriban/k_wall9.wl         = { a = "Base" }
           korriban/marble_pass.wl         = { a = "Base" }
           korriban/os_basewalk.wl         = { a = "Base" }
           korriban/os_basic_pillar.wl         = { a = "Base" }
           korriban/os_basic_walkway.wl         = { a = "Base" }
           korriban/os_outsidebase.wl         = { a = "Base" }
           korriban/os_outsidebaseb.wl         = { a = "Base" }
           korriban/os_outsidebaseb_broken.wl         = { a = "Base" }
           korriban/os_outsidebasec.wl         = { a = "Base" }
           korriban/os_outsidebasee.wl         = { a = "Base" }
           korriban/os_outsidebasef.wl         = { a = "Base" }
           korriban/os_outsidebase_trim.wl         = { a = "Base" }
           korriban/os_rock.wl         = { a = "Base" }
           korriban/os_rock2.wl         = { a = "Base" }
           korriban/os_rock3.wl         = { a = "Base" }
           korriban/os_rockb.wl         = { a = "Base" }
           korriban/os_sand.wl         = { a = "Base" }
           korriban/rockdetail.wl         = { a = "Base" }
           korriban/rockdetail2.wl         = { a = "Base" }
           korriban/sarc_base.wl         = { a = "Base" }
           korriban/sarc_small.wl         = { a = "Base" }
           korriban/stairs.wl         = { a = "Base" }
           korriban/trim.wl         = { a = "Base" }
           korriban/banner.wl         = { a = "Base" }
           korriban/chain.wl         = { a = "Base" }
           korriban/cracktext2.wl         = { a = "Base" }
           korriban/door.wl         = { a = "Base" }
           korriban/entrance_top.wl         = { a = "Base" }
           korriban/k_wall9b.wl         = { a = "Base" }
           korriban/orn_grate.wl         = { a = "Base" }
           korriban/os_basic_pillarb.wl         = { a = "Base" }
           korriban/os_outsidebased.wl         = { a = "Base" }
      }
      mp.txlist = 
      {
           mp/black.wl         = { a = "Base" }
           mp/desertsteprise.wl         = { a = "Base" }
           mp/desertsteprun.wl         = { a = "Base" }
           mp/h_clifftrim.wl         = { a = "Base" }
           mp/light_01b.wl         = { a = "Base" }
           mp/light_01b_glw.wl         = { a = "Base" }
           mp/light_vjun_blend.wl         = { a = "Base" }
           mp/metalpanel1c_dk.wl         = { a = "Base" }
           mp/pipe_blue.wl         = { a = "Base" }
           mp/pipe_red.wl         = { a = "Base" }
           mp/s_basic.wl         = { a = "Base" }
           mp/s_basic_dark.wl         = { a = "Base" }
           mp/s_bluestrip.wl         = { a = "Base" }
           mp/s_bluestrip_blend.wl         = { a = "Base" }
           mp/s_building_ext2test_glw2r.wl         = { a = "Base" }
           mp/s_building_ext2test_glwr.wl         = { a = "Base" }
           mp/s_byss_basic1.wl         = { a = "Base" }
           mp/s_graywall_dk.wl         = { a = "Base" }
           mp/s_light_strip2.wl         = { a = "Base" }
           mp/s_light_strip2_glw.wl         = { a = "Base" }
           mp/s_light_vjuny.wl         = { a = "Base" }
           mp/s_light_vjuny_blend.wl         = { a = "Base" }
           mp/s_metalc_env.wl         = { a = "Base" }
           mp/s_metal_hlight.wl         = { a = "Base" }
           mp/s_metal_hlight_blend.wl         = { a = "Base" }
           mp/s_metal_lg.wl         = { a = "Base" }
           mp/s_metal_lg_dk.wl         = { a = "Base" }
           mp/s_metal_vlight.wl         = { a = "Base" }
           mp/s_metal_vlight_blend.wl         = { a = "Base" }
           mp/s_qt_underside.wl         = { a = "Base" }
           mp/s_redstrip.wl         = { a = "Base" }
           mp/s_redstrip_blend.wl         = { a = "Base" }
           mp/s_squareslight.wl         = { a = "Base" }
           mp/s_squareslight_blend.wl         = { a = "Base" }
           mp/s_squareslight_y.wl         = { a = "Base" }
           mp/s_squareslight_y_blend.wl         = { a = "Base" }
           mp/s_steptrim1.wl         = { a = "Base" }
           mp/s_steptrim1_blendb.wl         = { a = "Base" }
           mp/s_steptrim1_blendr.wl         = { a = "Base" }
           mp/s_tracklight.wl         = { a = "Base" }
           mp/s_tracklight_blend.wl         = { a = "Base" }
           mp/s_vader_floor2.wl         = { a = "Base" }
           mp/t_door.wl         = { a = "Base" }
           mp/t_floor_cir.wl         = { a = "Base" }
           mp/t_floor_corner.wl         = { a = "Base" }
           mp/t_floor_hallway.wl         = { a = "Base" }
           mp/t_floor_rim.wl         = { a = "Base" }
           mp/t_floor_sides.wl         = { a = "Base" }
           mp/t_floor_single.wl         = { a = "Base" }
           mp/t_pitwall1.wl         = { a = "Base" }
           mp/t_pitwall2.wl         = { a = "Base" }
           mp/t_pitwall3.wl         = { a = "Base" }
           mp/t_wall2.wl         = { a = "Base" }
           mp/t_wall_back.wl         = { a = "Base" }
           mp/t_wall_corner1.wl         = { a = "Base" }
           mp/t_wall_halllights.wl         = { a = "Base" }
           mp/t_wall_lightpanel.wl         = { a = "Base" }
           mp/t_wall_lightpanel2.wl         = { a = "Base" }
           mp/t_wall_lightpanel_glw.wl         = { a = "Base" }
           mp/t_wall_p1.wl         = { a = "Base" }
           mp/t_wall_pbase.wl         = { a = "Base" }
           mp/t_wall_pipes1.wl         = { a = "Base" }
           mp/t_wall_secondlevel.wl         = { a = "Base" }
           mp/u_pipe_b.wl         = { a = "Base" }
           mp/ylight.wl         = { a = "Base" }
           mp/ylight_blend.wl         = { a = "Base" }
           mp/ylight_blue.wl         = { a = "Base" }
           mp/ylight_blue_blend.wl         = { a = "Base" }
           mp/ylight_red.wl         = { a = "Base" }
           mp/ylight_red_blend.wl         = { a = "Base" }
           mp/s_flatblue.wl         = { a = "Base" }
           mp/s_flatblue_blend.wl         = { a = "Base" }
           mp/s_flatred.wl         = { a = "Base" }
           mp/s_flatyellow.wl         = { a = "Base" }
           mp/s_flatyellow_blend.wl         = { a = "Base" }
           mp/s_lights_blend.wl         = { a = "Base" }
           mp/s_metalc.wl         = { a = "Base" }
           mp/s_metalc_dark.wl         = { a = "Base" }
           mp/t_wall_halllights_glw.wl         = { a = "Base" }
           mp/t_wall_lightpanel2_glw.wl         = { a = "Base" }
           mp/white.wl         = { a = "Base" }
      }
      narshaddaa.txlist = 
      {
           narshaddaa/ceiling_large.wl         = { a = "Base" }
           narshaddaa/floor2_b.wl         = { a = "Base" }
           narshaddaa/ll_control.wl         = { a = "Base" }
           narshaddaa/piller2.wl         = { a = "Base" }
           narshaddaa/pipe_blue.wl         = { a = "Base" }
           narshaddaa/pipe_red.wl         = { a = "Base" }
      }
      nar_hideout.txlist = 
      {
           nar_hideout/bumpfloor.wl         = { a = "Base" }
           nar_hideout/floor7.wl         = { a = "Base" }
           nar_hideout/floortile.wl         = { a = "Base" }
           nar_hideout/narchutebasic.wl         = { a = "Base" }
           nar_hideout/pushcart_front.wl         = { a = "Base" }
           nar_hideout/pushcart_side.wl         = { a = "Base" }
           nar_hideout/pushcart_top.wl         = { a = "Base" }
           nar_hideout/walltop01.wl         = { a = "Base" }
           nar_hideout/wall_bolt.wl         = { a = "Base" }
           nar_hideout/wall_brushworn.wl         = { a = "Base" }
      }
      nar_streets.txlist = 
      {
           nar_streets/bartop2.wl         = { a = "Base" }
           nar_streets/bar_back.wl         = { a = "Base" }
           nar_streets/bar_bottles.wl         = { a = "Base" }
           nar_streets/bar_tapbottle.wl         = { a = "Base" }
           nar_streets/baselight1.wl         = { a = "Base" }
           nar_streets/baselight1_glow.wl         = { a = "Base" }
           nar_streets/baselight2.wl         = { a = "Base" }
           nar_streets/baselight2_glow.wl         = { a = "Base" }
           nar_streets/bwall_3.wl         = { a = "Base" }
           nar_streets/bwall_4.wl         = { a = "Base" }
           nar_streets/crane.wl         = { a = "Base" }
           nar_streets/eleswitch.wl         = { a = "Base" }
           nar_streets/eleswitcha.wl         = { a = "Base" }
           nar_streets/eleswitchb.wl         = { a = "Base" }
           nar_streets/pillar_1.wl         = { a = "Base" }
           nar_streets/stucwall2.wl         = { a = "Base" }
           nar_streets/support3.wl         = { a = "Base" }
           nar_streets/wall05.wl         = { a = "Base" }
           nar_streets/wall05a.wl         = { a = "Base" }
           nar_streets/wall09.wl         = { a = "Base" }
           nar_streets/wall10.wl         = { a = "Base" }
      }
      quicktrip.txlist = 
      {
           quicktrip/dirt_sand.wl         = { a = "Base" }
           quicktrip/modern_qt_basestone.wl         = { a = "Base" }
           quicktrip/modern_qt_floor.wl         = { a = "Base" }
           quicktrip/modern_qt_trim_bottom.wl         = { a = "Base" }
           quicktrip/modern_qt_trim_top.wl         = { a = "Base" }
           quicktrip/new_qt_bridge_joist.wl         = { a = "Base" }
           quicktrip/new_qt_bridge_joist2.wl         = { a = "Base" }
           quicktrip/new_qt_ceiling2.wl         = { a = "Base" }
           quicktrip/new_qt_pilar_tops.wl         = { a = "Base" }
           quicktrip/new_qt_spillway.wl         = { a = "Base" }
           quicktrip/new_qt_wall2_entrance.wl         = { a = "Base" }
           quicktrip/new_qt_wall2_pilars.wl         = { a = "Base" }
           quicktrip/pillar.wl         = { a = "Base" }
           quicktrip/qt_basestone.wl         = { a = "Base" }
           quicktrip/qt_dome.wl         = { a = "Base" }
           quicktrip/qt_domebase.wl         = { a = "Base" }
           quicktrip/qt_door_clean.wl         = { a = "Base" }
           quicktrip/qt_door_rough.wl         = { a = "Base" }
           quicktrip/qt_pillarbase.wl         = { a = "Base" }
           quicktrip/qt_spillway.wl         = { a = "Base" }
           quicktrip/qt_stonefloor.wl         = { a = "Base" }
           quicktrip/qt_trim1.wl         = { a = "Base" }
           quicktrip/qt_trim2.wl         = { a = "Base" }
           quicktrip/qt_trim3.wl         = { a = "Base" }
           quicktrip/qt_uncut.wl         = { a = "Base" }
           quicktrip/qt_underside.wl         = { a = "Base" }
           quicktrip/qt_wall2.wl         = { a = "Base" }
           quicktrip/qt_wall_insets.wl         = { a = "Base" }
           quicktrip/rock_sandstone.wl         = { a = "Base" }
           quicktrip/sand.wl         = { a = "Base" }
           quicktrip/shrubbery1.wl         = { a = "Base" }
           quicktrip/shrubbery2.wl         = { a = "Base" }
           quicktrip/shrubbery3.wl         = { a = "Base" }
      }
      rail.txlist = 
      {
           rail/base_bronze.wl         = { a = "Base" }
           rail/base_bronze_dark.wl         = { a = "Base" }
           rail/blue_base.wl         = { a = "Base" }
           rail/blue_siderail.wl         = { a = "Base" }
           rail/bracers.wl         = { a = "Base" }
           rail/brasspanel.wl         = { a = "Base" }
           rail/brasspanel_glow.wl         = { a = "Base" }
           rail/building5.wl         = { a = "Base" }
           rail/caboose.wl         = { a = "Base" }
           rail/compartments.wl         = { a = "Base" }
           rail/compartments_b.wl         = { a = "Base" }
           rail/compartments_plain.wl         = { a = "Base" }
           rail/floor.wl         = { a = "Base" }
           rail/freezer_door.wl         = { a = "Base" }
           rail/fusebox.wl         = { a = "Base" }
           rail/fusebox2.wl         = { a = "Base" }
           rail/fusebox2_dam.wl         = { a = "Base" }
           rail/fusebox2_dam_glow.wl         = { a = "Base" }
           rail/fusebox2_glow.wl         = { a = "Base" }
           rail/grail.wl         = { a = "Base" }
           rail/grail_frosted.wl         = { a = "Base" }
           rail/gripper.wl         = { a = "Base" }
           rail/gripper_exhaust.wl         = { a = "Base" }
           rail/gripper_exhaust_glow.wl         = { a = "Base" }
           rail/gripper_glow.wl         = { a = "Base" }
           rail/hull.wl         = { a = "Base" }
           rail/hull2.wl         = { a = "Base" }
           rail/hull3.wl         = { a = "Base" }
           rail/large_vent.wl         = { a = "Base" }
           rail/large_vent_panel.wl         = { a = "Base" }
           rail/light_purple.wl         = { a = "Base" }
           rail/long_panel.wl         = { a = "Base" }
           rail/neon_ad_1.wl         = { a = "Base" }
           rail/neon_ad_2.wl         = { a = "Base" }
           rail/neon_ad_3.wl         = { a = "Base" }
           rail/neon_ad_4.wl         = { a = "Base" }
           rail/neon_ad_5.wl         = { a = "Base" }
           rail/neon_ad_6.wl         = { a = "Base" }
           rail/pillar.wl         = { a = "Base" }
           rail/pipe.wl         = { a = "Base" }
           rail/pipes.wl         = { a = "Base" }
           rail/railbase1.wl         = { a = "Base" }
           rail/railbase2.wl         = { a = "Base" }
           rail/railing.wl         = { a = "Base" }
           rail/railing2.wl         = { a = "Base" }
           rail/railing3.wl         = { a = "Base" }
           rail/railing_flat.wl         = { a = "Base" }
           rail/railtrim1.wl         = { a = "Base" }
           rail/railtrim2.wl         = { a = "Base" }
           rail/railtrim3.wl         = { a = "Base" }
           rail/railtrim4.wl         = { a = "Base" }
           rail/rail_basic.wl         = { a = "Base" }
           rail/rail_console.wl         = { a = "Base" }
           rail/rail_console2.wl         = { a = "Base" }
           rail/rail_console4.wl         = { a = "Base" }
           rail/rail_console5.wl         = { a = "Base" }
           rail/rail_console5_glow3.wl         = { a = "Base" }
           rail/rail_console_glow.wl         = { a = "Base" }
           rail/rail_console_glow2.wl         = { a = "Base" }
           rail/rail_console_large.wl         = { a = "Base" }
           rail/rail_crate.wl         = { a = "Base" }
           rail/rail_crate2.wl         = { a = "Base" }
           rail/rail_crate2_top.wl         = { a = "Base" }
           rail/rail_dam_console.wl         = { a = "Base" }
           rail/rail_floor.wl         = { a = "Base" }
           rail/rail_floor2.wl         = { a = "Base" }
           rail/rail_grate.wl         = { a = "Base" }
           rail/rail_light_inside.wl         = { a = "Base" }
           rail/rail_pipe.wl         = { a = "Base" }
           rail/rail_pipe2.wl         = { a = "Base" }
           rail/rail_runner.wl         = { a = "Base" }
           rail/rail_tracklight.wl         = { a = "Base" }
           rail/rail_walkway.wl         = { a = "Base" }
           rail/roundplate1.wl         = { a = "Base" }
           rail/roundplate2.wl         = { a = "Base" }
           rail/roundplate3.wl         = { a = "Base" }
           rail/roundplate4.wl         = { a = "Base" }
           rail/runner1.wl         = { a = "Base" }
           rail/runner2.wl         = { a = "Base" }
           rail/runner_slanted.wl         = { a = "Base" }
           rail/spine.wl         = { a = "Base" }
           rail/tanker.wl         = { a = "Base" }
           rail/tanksymbol2.wl         = { a = "Base" }
           rail/trainbasic1.wl         = { a = "Base" }
           rail/trainbasic2.wl         = { a = "Base" }
           rail/traindoor.wl         = { a = "Base" }
           rail/trainfloor.wl         = { a = "Base" }
           rail/trim3.wl         = { a = "Base" }
           rail/tunnel_lights.wl         = { a = "Base" }
           rail/tunnel_lights_glow.wl         = { a = "Base" }
           rail/vent_panel.wl         = { a = "Base" }
           rail/vent_panel_glow.wl         = { a = "Base" }
           rail/windows.wl         = { a = "Base" }
           rail/windows3_glow.wl         = { a = "Base" }
           rail/windows4.wl         = { a = "Base" }
           rail/windows5.wl         = { a = "Base" }
           rail/windows_glow.wl         = { a = "Base" }
           rail/frosted_glass.wl         = { a = "Base" }
           rail/railing3_glow.wl         = { a = "Base" }
           rail/railtrim4_glow.wl         = { a = "Base" }
           rail/railtrim4_glow_old.wl         = { a = "Base" }
           rail/rail_console2_glow.wl         = { a = "Base" }
           rail/rail_console4_glow1.wl         = { a = "Base" }
           rail/rail_console4_glow2.wl         = { a = "Base" }
           rail/rail_console5_glow1.wl         = { a = "Base" }
           rail/rail_console5_glow2.wl         = { a = "Base" }
           rail/rail_console_large_glow.wl         = { a = "Base" }
           rail/rail_light_inside_glow.wl         = { a = "Base" }
           rail/rail_tracklight_glow.wl         = { a = "Base" }
           rail/runner1_glow.wl         = { a = "Base" }
           rail/tanksymbol1.wl         = { a = "Base" }
           rail/tanksymbol3.wl         = { a = "Base" }
           rail/thinlight.wl         = { a = "Base" }
           rail/thinlight_glow1.wl         = { a = "Base" }
           rail/thinlight_glow2.wl         = { a = "Base" }
           rail/windows2.wl         = { a = "Base" }
           rail/windows2_glow.wl         = { a = "Base" }
           rail/windows3.wl         = { a = "Base" }
           rail/windows4_glowb.wl         = { a = "Base" }
      }
      rift.txlist = 
      {
           rift/basewall.wl         = { a = "Base" }
           rift/basewall_b.wl         = { a = "Base" }
           rift/basewall_formal.wl         = { a = "Base" }
           rift/blackrock2.wl         = { a = "Base" }
           rift/blackrock2_gold.wl         = { a = "Base" }
           rift/carvedwall.wl         = { a = "Base" }
           rift/ceiling_formal.wl         = { a = "Base" }
           rift/crypt_floor.wl         = { a = "Base" }
           rift/env_crystal.wl         = { a = "Base" }
           rift/env_crystal_2.wl         = { a = "Base" }
           rift/env_crystal_green.wl         = { a = "Base" }
           rift/env_crystal_red.wl         = { a = "Base" }
           rift/flag1.wl         = { a = "Base" }
           rift/flag2.wl         = { a = "Base" }
           rift/flag3.wl         = { a = "Base" }
           rift/floor1.wl         = { a = "Base" }
           rift/floor1b.wl         = { a = "Base" }
           rift/floor1_formal.wl         = { a = "Base" }
           rift/floor1_formalb.wl         = { a = "Base" }
           rift/floor1_trim.wl         = { a = "Base" }
           rift/floor2.wl         = { a = "Base" }
           rift/frontstepface.wl         = { a = "Base" }
           rift/marbly.wl         = { a = "Base" }
           rift/newcolumn.wl         = { a = "Base" }
           rift/newcolumn_glow.wl         = { a = "Base" }
           rift/newcolumn_top.wl         = { a = "Base" }
           rift/newwall1.wl         = { a = "Base" }
           rift/pillartop.wl         = { a = "Base" }
           rift/piller.wl         = { a = "Base" }
           rift/pillerwall2.wl         = { a = "Base" }
           rift/piller_b.wl         = { a = "Base" }
           rift/plainwall.wl         = { a = "Base" }
           rift/rock3.wl         = { a = "Base" }
           rift/rock3_crosssection.wl         = { a = "Base" }
           rift/rockdoor.wl         = { a = "Base" }
           rift/rockdoor_b.wl         = { a = "Base" }
           rift/rockdoor_b_dec.wl         = { a = "Base" }
           rift/rockdoor_b_ruined.wl         = { a = "Base" }
           rift/rock_color.wl         = { a = "Base" }
           rift/steps.wl         = { a = "Base" }
           rift/stone_rim.wl         = { a = "Base" }
           rift/stone_rimb.wl         = { a = "Base" }
           rift/stone_rim_glow.wl         = { a = "Base" }
           rift/symbol1_fx1.wl         = { a = "Base" }
           rift/symbol1_fx2.wl         = { a = "Base" }
           rift/symbol2_fx1.wl         = { a = "Base" }
           rift/symbol2_fx2.wl         = { a = "Base" }
           rift/symbol3_fx1.wl         = { a = "Base" }
           rift/symbol3_fx2.wl         = { a = "Base" }
           rift/symbol4_fx1.wl         = { a = "Base" }
           rift/symbol4_fx2.wl         = { a = "Base" }
           rift/symbol5_fx1.wl         = { a = "Base" }
           rift/symbol5_fx2.wl         = { a = "Base" }
           rift/symbol6_fx1.wl         = { a = "Base" }
           rift/symbol6_fx2.wl         = { a = "Base" }
           rift/symbol7_fx1.wl         = { a = "Base" }
           rift/symbol7_fx2.wl         = { a = "Base" }
           rift/symbol8_fx1.wl         = { a = "Base" }
           rift/symbol8_fx2.wl         = { a = "Base" }
           rift/symbol9_fx1.wl         = { a = "Base" }
           rift/symbol9_fx2.wl         = { a = "Base" }
           rift/thick_trim.wl         = { a = "Base" }
           rift/thick_trim_a.wl         = { a = "Base" }
           rift/thin_trim1.wl         = { a = "Base" }
           rift/basepiller.wl         = { a = "Base" }
           rift/basewall_ornate.wl         = { a = "Base" }
           rift/basewall_piller_orn.wl         = { a = "Base" }
           rift/base_ornate.wl         = { a = "Base" }
           rift/carved_symbol.wl         = { a = "Base" }
           rift/cobweb.wl         = { a = "Base" }
           rift/cobweb2.wl         = { a = "Base" }
           rift/piller_formal.wl         = { a = "Base" }
           rift/symbol1.wl         = { a = "Base" }
           rift/symbol2.wl         = { a = "Base" }
           rift/symbol3.wl         = { a = "Base" }
           rift/symbol4.wl         = { a = "Base" }
           rift/symbol5.wl         = { a = "Base" }
           rift/symbol6.wl         = { a = "Base" }
           rift/symbol7.wl         = { a = "Base" }
           rift/symbol8.wl         = { a = "Base" }
           rift/symbol9.wl         = { a = "Base" }
           rift/thin_trim2.wl         = { a = "Base" }
      }
      rocky_ruins.txlist = 
      {
           rocky_ruins/arch.wl         = { a = "Base" }
           rocky_ruins/bar_pillar.wl         = { a = "Base" }
           rocky_ruins/base_wall2.wl         = { a = "Base" }
           rocky_ruins/base_wall5.wl         = { a = "Base" }
           rocky_ruins/base_wall7.wl         = { a = "Base" }
           rocky_ruins/base_walllogo.wl         = { a = "Base" }
           rocky_ruins/beam.wl         = { a = "Base" }
           rocky_ruins/beam_end.wl         = { a = "Base" }
           rocky_ruins/ceiling.wl         = { a = "Base" }
           rocky_ruins/ciclox04.wl         = { a = "Base" }
           rocky_ruins/grate_light.wl         = { a = "Base" }
           rocky_ruins/grate_light_glw.wl         = { a = "Base" }
           rocky_ruins/grating_new.wl         = { a = "Base" }
           rocky_ruins/halfwall.wl         = { a = "Base" }
           rocky_ruins/leatherpading.wl         = { a = "Base" }
           rocky_ruins/metal1.wl         = { a = "Base" }
           rocky_ruins/metal1_bottom.wl         = { a = "Base" }
           rocky_ruins/metal1_top.wl         = { a = "Base" }
           rocky_ruins/metal2.wl         = { a = "Base" }
           rocky_ruins/metal2_bottom.wl         = { a = "Base" }
           rocky_ruins/metal2_top.wl         = { a = "Base" }
           rocky_ruins/palor_door_closed.wl         = { a = "Base" }
           rocky_ruins/palor_door_open.wl         = { a = "Base" }
           rocky_ruins/palor_map_base.wl         = { a = "Base" }
           rocky_ruins/parlor_1switch_1.wl         = { a = "Base" }
           rocky_ruins/parlor_1switch_2.wl         = { a = "Base" }
           rocky_ruins/parlor_1switch_3.wl         = { a = "Base" }
           rocky_ruins/parlor_1switch_4.wl         = { a = "Base" }
           rocky_ruins/parlor_2switch_1.wl         = { a = "Base" }
           rocky_ruins/parlor_2switch_2.wl         = { a = "Base" }
           rocky_ruins/parlor_2switch_3.wl         = { a = "Base" }
           rocky_ruins/parlor_2switch_4.wl         = { a = "Base" }
           rocky_ruins/parlor_3switch_1.wl         = { a = "Base" }
           rocky_ruins/parlor_3switch_2.wl         = { a = "Base" }
           rocky_ruins/parlor_3switch_3.wl         = { a = "Base" }
           rocky_ruins/parlor_3switch_4.wl         = { a = "Base" }
           rocky_ruins/parlor_4switch_1.wl         = { a = "Base" }
           rocky_ruins/parlor_4switch_2.wl         = { a = "Base" }
           rocky_ruins/parlor_4switch_3.wl         = { a = "Base" }
           rocky_ruins/parlor_4switch_4.wl         = { a = "Base" }
           rocky_ruins/pillar_corner.wl         = { a = "Base" }
           rocky_ruins/pillar_front.wl         = { a = "Base" }
           rocky_ruins/pillar_side.wl         = { a = "Base" }
           rocky_ruins/pipe.wl         = { a = "Base" }
           rocky_ruins/pipe2.wl         = { a = "Base" }
           rocky_ruins/pipes.wl         = { a = "Base" }
           rocky_ruins/pipes2.wl         = { a = "Base" }
           rocky_ruins/pipes_wall.wl         = { a = "Base" }
           rocky_ruins/port_trim.wl         = { a = "Base" }
           rocky_ruins/port_trim2.wl         = { a = "Base" }
           rocky_ruins/port_trim3.wl         = { a = "Base" }
           rocky_ruins/poster.wl         = { a = "Base" }
           rocky_ruins/rancor_floor.wl         = { a = "Base" }
           rocky_ruins/ridge_pipe.wl         = { a = "Base" }
           rocky_ruins/rocky_light.wl         = { a = "Base" }
           rocky_ruins/rocky_light_glow.wl         = { a = "Base" }
           rocky_ruins/r_ceiling.wl         = { a = "Base" }
           rocky_ruins/r_diwall.wl         = { a = "Base" }
           rocky_ruins/r_floor.wl         = { a = "Base" }
           rocky_ruins/r_floor2.wl         = { a = "Base" }
           rocky_ruins/r_wall.wl         = { a = "Base" }
           rocky_ruins/r_wall2.wl         = { a = "Base" }
           rocky_ruins/r_wall3.wl         = { a = "Base" }
           rocky_ruins/screen1.wl         = { a = "Base" }
           rocky_ruins/screen2_glw.wl         = { a = "Base" }
           rocky_ruins/screen3.wl         = { a = "Base" }
           rocky_ruins/screen3_anim.wl         = { a = "Base" }
           rocky_ruins/screen3_glw.wl         = { a = "Base" }
           rocky_ruins/screen4.wl         = { a = "Base" }
           rocky_ruins/screen4_anim.wl         = { a = "Base" }
           rocky_ruins/screen4_glw.wl         = { a = "Base" }
           rocky_ruins/screen5_anim.wl         = { a = "Base" }
           rocky_ruins/screen5_glw.wl         = { a = "Base" }
           rocky_ruins/arrow1.wl         = { a = "Base" }
           rocky_ruins/arrow1_b.wl         = { a = "Base" }
           rocky_ruins/arrow2.wl         = { a = "Base" }
           rocky_ruins/arrow2_b.wl         = { a = "Base" }
           rocky_ruins/arrow3.wl         = { a = "Base" }
           rocky_ruins/arrow3_b.wl         = { a = "Base" }
           rocky_ruins/arrow4.wl         = { a = "Base" }
           rocky_ruins/arrow4_b.wl         = { a = "Base" }
           rocky_ruins/barsign_paint.wl         = { a = "Base" }
           rocky_ruins/exit_arrows.wl         = { a = "Base" }
           rocky_ruins/grate2.wl         = { a = "Base" }
           rocky_ruins/grate3.wl         = { a = "Base" }
           rocky_ruins/grate3_effect2.wl         = { a = "Base" }
           rocky_ruins/grate3_effect3.wl         = { a = "Base" }
           rocky_ruins/grouptickets.wl         = { a = "Base" }
           rocky_ruins/halfwall_top.wl         = { a = "Base" }
           rocky_ruins/newgrate.wl         = { a = "Base" }
           rocky_ruins/palor_frame.wl         = { a = "Base" }
           rocky_ruins/palor_map_frame.wl         = { a = "Base" }
           rocky_ruins/screen2.wl         = { a = "Base" }
           rocky_ruins/screen5.wl         = { a = "Base" }
      }
      rooftop.txlist = 
      {
           rooftop/baseground.wl         = { a = "Base" }
           rooftop/building_ext1.wl         = { a = "Base" }
           rooftop/building_ext1_glw.wl         = { a = "Base" }
           rooftop/building_ext1_new.wl         = { a = "Base" }
           rooftop/building_ext2test.wl         = { a = "Base" }
           rooftop/building_ext2test_glw.wl         = { a = "Base" }
           rooftop/building_ext2test_glw2.wl         = { a = "Base" }
           rooftop/building_ext2test_glw2_new.wl         = { a = "Base" }
           rooftop/building_ext2test_glw_new.wl         = { a = "Base" }
           rooftop/building_ext2test_new.wl         = { a = "Base" }
           rooftop/building_ext3.wl         = { a = "Base" }
           rooftop/building_ext3_glw.wl         = { a = "Base" }
           rooftop/building_ext3_glw_new.wl         = { a = "Base" }
           rooftop/building_ext3_new.wl         = { a = "Base" }
           rooftop/building_ext4.wl         = { a = "Base" }
           rooftop/building_ext4_glw.wl         = { a = "Base" }
           rooftop/building_ext4_glw_new.wl         = { a = "Base" }
           rooftop/building_ext4_new.wl         = { a = "Base" }
           rooftop/building_ext5.wl         = { a = "Base" }
           rooftop/building_ext5b.wl         = { a = "Base" }
           rooftop/building_ext5b_glw.wl         = { a = "Base" }
           rooftop/building_ext5_glw.wl         = { a = "Base" }
           rooftop/building_ext6.wl         = { a = "Base" }
           rooftop/building_ext6_glow.wl         = { a = "Base" }
           rooftop/building_ext6_glw2_new.wl         = { a = "Base" }
           rooftop/building_ext6_glw_new.wl         = { a = "Base" }
           rooftop/building_ext6_new.wl         = { a = "Base" }
           rooftop/garage_door.wl         = { a = "Base" }
           rooftop/giant_logo.wl         = { a = "Base" }
           rooftop/grey_rusty_wall1.wl         = { a = "Base" }
           rooftop/groundlight.wl         = { a = "Base" }
           rooftop/groundlight_glw.wl         = { a = "Base" }
           rooftop/landing_pad.wl         = { a = "Base" }
           rooftop/light.wl         = { a = "Base" }
           rooftop/light2.wl         = { a = "Base" }
           rooftop/light2_glw.wl         = { a = "Base" }
           rooftop/lightpost.wl         = { a = "Base" }
           rooftop/lightpost_glow.wl         = { a = "Base" }
           rooftop/light_glw.wl         = { a = "Base" }
           rooftop/light_trim.wl         = { a = "Base" }
           rooftop/light_trim2.wl         = { a = "Base" }
           rooftop/light_trim2_glw.wl         = { a = "Base" }
           rooftop/light_trim_glw.wl         = { a = "Base" }
           rooftop/light_vert.wl         = { a = "Base" }
           rooftop/lobby_support_bottom.wl         = { a = "Base" }
           rooftop/lobby_support_side.wl         = { a = "Base" }
           rooftop/lobby_support_top.wl         = { a = "Base" }
           rooftop/main_building_ext.wl         = { a = "Base" }
           rooftop/main_building_ext_trim.wl         = { a = "Base" }
           rooftop/neon_circle.wl         = { a = "Base" }
           rooftop/neon_large1.wl         = { a = "Base" }
           rooftop/neon_tall.wl         = { a = "Base" }
           rooftop/neon_tall2.wl         = { a = "Base" }
           rooftop/office_ceiling.wl         = { a = "Base" }
           rooftop/office_door_exterior.wl         = { a = "Base" }
           rooftop/office_door_interior.wl         = { a = "Base" }
           rooftop/office_floor1.wl         = { a = "Base" }
           rooftop/office_floor2.wl         = { a = "Base" }
           rooftop/office_floor_carpet.wl         = { a = "Base" }
           rooftop/office_floor_carpet2.wl         = { a = "Base" }
           rooftop/office_floor_carpet_trim.wl         = { a = "Base" }
           rooftop/office_lift_floor.wl         = { a = "Base" }
           rooftop/office_lift_wall.wl         = { a = "Base" }
           rooftop/office_pillar.wl         = { a = "Base" }
           rooftop/office_supports.wl         = { a = "Base" }
           rooftop/office_trim1.wl         = { a = "Base" }
           rooftop/office_trim_exterior.wl         = { a = "Base" }
           rooftop/office_wall2.wl         = { a = "Base" }
           rooftop/office_wall_basic.wl         = { a = "Base" }
           rooftop/rooftop_light.wl         = { a = "Base" }
           rooftop/rooftop_light_glow.wl         = { a = "Base" }
           rooftop/roof_basewall.wl         = { a = "Base" }
           rooftop/roof_basewall_glow.wl         = { a = "Base" }
           rooftop/roundplate1.wl         = { a = "Base" }
           rooftop/roundplate1_glw.wl         = { a = "Base" }
           rooftop/screen1.wl         = { a = "Base" }
           rooftop/screen1_ring.wl         = { a = "Base" }
           rooftop/screen1_txt.wl         = { a = "Base" }
           rooftop/screen2.wl         = { a = "Base" }
           rooftop/screen2_glw.wl         = { a = "Base" }
           rooftop/screen2_ring.wl         = { a = "Base" }
           rooftop/traffica_glw.wl         = { a = "Base" }
           rooftop/trafficb_glw.wl         = { a = "Base" }
           rooftop/trafficc_glw.wl         = { a = "Base" }
           rooftop/trafficd_glw.wl         = { a = "Base" }
           rooftop/traffice_glw.wl         = { a = "Base" }
           rooftop/trafficf_glw.wl         = { a = "Base" }
           rooftop/trim1.wl         = { a = "Base" }
           rooftop/trim2.wl         = { a = "Base" }
           rooftop/trim3.wl         = { a = "Base" }
           rooftop/trim4.wl         = { a = "Base" }
           rooftop/twin_tower1.wl         = { a = "Base" }
           rooftop/twin_tower_middlefront.wl         = { a = "Base" }
           rooftop/twin_tower_sidebrace2.wl         = { a = "Base" }
           rooftop/walkway.wl         = { a = "Base" }
           rooftop/walkway_civilian.wl         = { a = "Base" }
           rooftop/walkway_trim.wl         = { a = "Base" }
           rooftop/wall1.wl         = { a = "Base" }
           rooftop/wall10.wl         = { a = "Base" }
           rooftop/wall2.wl         = { a = "Base" }
           rooftop/wall3.wl         = { a = "Base" }
           rooftop/wall4.wl         = { a = "Base" }
           rooftop/wall4b.wl         = { a = "Base" }
           rooftop/wall6.wl         = { a = "Base" }
           rooftop/window2.wl         = { a = "Base" }
           rooftop/window2_glw.wl         = { a = "Base" }
           rooftop/windowplate.wl         = { a = "Base" }
           rooftop/windowplate_b.wl         = { a = "Base" }
           rooftop/window_building.wl         = { a = "Base" }
           rooftop/window_building_b.wl         = { a = "Base" }
           rooftop/window_building_glow_new.wl         = { a = "Base" }
           rooftop/window_building_ground.wl         = { a = "Base" }
           rooftop/window_building_ground3.wl         = { a = "Base" }
           rooftop/window_building_new.wl         = { a = "Base" }
           rooftop/window_building_trim.wl         = { a = "Base" }
           rooftop/window_building_trim_glow.wl         = { a = "Base" }
           rooftop/building_ext3_glwg.wl         = { a = "Base" }
           rooftop/building_ext3_glwr.wl         = { a = "Base" }
           rooftop/building_ext5trim_glw.wl         = { a = "Base" }
           rooftop/light_vert_glw.wl         = { a = "Base" }
           rooftop/traffica.wl         = { a = "Base" }
           rooftop/trafficb.wl         = { a = "Base" }
           rooftop/trafficc.wl         = { a = "Base" }
           rooftop/trafficd.wl         = { a = "Base" }
           rooftop/traffice.wl         = { a = "Base" }
           rooftop/trafficf.wl         = { a = "Base" }
           rooftop/windowplate_b_glow.wl         = { a = "Base" }
           rooftop/windowplate_glow.wl         = { a = "Base" }
      }
      skies.txlist = 
      {
           skies/bespin_bk.wl         = { a = "Base" }
           skies/bespin_dn.wl         = { a = "Base" }
           skies/bespin_ft.wl         = { a = "Base" }
           skies/bespin_lf.wl         = { a = "Base" }
           skies/bespin_rt.wl         = { a = "Base" }
           skies/bespin_up.wl         = { a = "Base" }
           skies/byss_bk.wl         = { a = "Base" }
           skies/byss_dn.wl         = { a = "Base" }
           skies/byss_ft.wl         = { a = "Base" }
           skies/byss_lf.wl         = { a = "Base" }
           skies/byss_rt.wl         = { a = "Base" }
           skies/byss_up.wl         = { a = "Base" }
           skies/b_bk.wl         = { a = "Base" }
           skies/b_dn.wl         = { a = "Base" }
           skies/b_ft.wl         = { a = "Base" }
           skies/b_lf.wl         = { a = "Base" }
           skies/b_rt.wl         = { a = "Base" }
           skies/b_up.wl         = { a = "Base" }
           skies/cs1_bk.wl         = { a = "Base" }
           skies/cs1_dn.wl         = { a = "Base" }
           skies/cs1_ft.wl         = { a = "Base" }
           skies/cs1_lf.wl         = { a = "Base" }
           skies/cs1_rt.wl         = { a = "Base" }
           skies/cs1_up.wl         = { a = "Base" }
           skies/desert_bk.wl         = { a = "Base" }
           skies/desert_dn.wl         = { a = "Base" }
           skies/desert_ft.wl         = { a = "Base" }
           skies/desert_lf.wl         = { a = "Base" }
           skies/desert_rt.wl         = { a = "Base" }
           skies/desert_up.wl         = { a = "Base" }
           skies/dos_bk.wl         = { a = "Base" }
           skies/dos_dn.wl         = { a = "Base" }
           skies/dos_ft.wl         = { a = "Base" }
           skies/dos_lf.wl         = { a = "Base" }
           skies/dos_rt.wl         = { a = "Base" }
           skies/dos_up.wl         = { a = "Base" }
           skies/dune_bk.wl         = { a = "Base" }
           skies/dune_dn.wl         = { a = "Base" }
           skies/dune_ft.wl         = { a = "Base" }
           skies/dune_lf.wl         = { a = "Base" }
           skies/dune_rt.wl         = { a = "Base" }
           skies/dune_up.wl         = { a = "Base" }
           skies/fatal_bk.wl         = { a = "Base" }
           skies/fatal_dn.wl         = { a = "Base" }
           skies/fatal_ft.wl         = { a = "Base" }
           skies/fatal_lf.wl         = { a = "Base" }
           skies/fatal_rt.wl         = { a = "Base" }
           skies/fatal_up.wl         = { a = "Base" }
           skies/hevil_bk.wl         = { a = "Base" }
           skies/hevil_dn.wl         = { a = "Base" }
           skies/hevil_ft.wl         = { a = "Base" }
           skies/hevil_lf.wl         = { a = "Base" }
           skies/hevil_rt.wl         = { a = "Base" }
           skies/hevil_up.wl         = { a = "Base" }
           skies/korb_bk.wl         = { a = "Base" }
           skies/korb_dn.wl         = { a = "Base" }
           skies/korb_ft.wl         = { a = "Base" }
           skies/korb_lf.wl         = { a = "Base" }
           skies/korb_rt.wl         = { a = "Base" }
           skies/korb_up.wl         = { a = "Base" }
           skies/nebula2_bk.wl         = { a = "Base" }
           skies/nebula2_dn.wl         = { a = "Base" }
           skies/nebula2_ft.wl         = { a = "Base" }
           skies/nebula2_lf.wl         = { a = "Base" }
           skies/nebula2_rt.wl         = { a = "Base" }
           skies/nebula2_up.wl         = { a = "Base" }
           skies/space_bk.wl         = { a = "Base" }
           skies/space_dn.wl         = { a = "Base" }
           skies/space_ft.wl         = { a = "Base" }
           skies/space_lf.wl         = { a = "Base" }
           skies/space_rt.wl         = { a = "Base" }
           skies/space_up.wl         = { a = "Base" }
           skies/vu_bk.wl         = { a = "Base" }
           skies/vu_dn.wl         = { a = "Base" }
           skies/vu_ft.wl         = { a = "Base" }
           skies/vu_lf.wl         = { a = "Base" }
           skies/vu_rt.wl         = { a = "Base" }
           skies/vu_up.wl         = { a = "Base" }
           skies/wedge_bk.wl         = { a = "Base" }
           skies/wedge_dn.wl         = { a = "Base" }
           skies/wedge_ft.wl         = { a = "Base" }
           skies/wedge_lf.wl         = { a = "Base" }
           skies/wedge_rt.wl         = { a = "Base" }
           skies/wedge_up.wl         = { a = "Base" }
           skies/yavin_bk.wl         = { a = "Base" }
           skies/yavin_dn.wl         = { a = "Base" }
           skies/yavin_ft.wl         = { a = "Base" }
           skies/yavin_lf.wl         = { a = "Base" }
           skies/yavin_rt.wl         = { a = "Base" }
           skies/yavin_up.wl         = { a = "Base" }
           skies/sky.wl         = { a = "Base" }
           skies/alphasquare.wl         = { a = "Base" }
           skies/cloudlayer2.wl         = { a = "Base" }
           skies/cloudlayer4.wl         = { a = "Base" }
      }
      system.txlist = 
      {
           system/antiportal.wl         = { a = "Base" }
           system/cluster_portal.wl         = { a = "Base" }
           system/do_not_enter.wl         = { a = "Base" }
           system/lightgrid.wl         = { a = "Base" }
           system/etest4.wl         = { a = "Base" }
           system/viewscreen1.wl         = { a = "Base" }
           system/areaportal.wl         = { a = "Base" }
           system/blocknpc.wl         = { a = "Base" }
           system/blockplayer.wl         = { a = "Base" }
           system/caulk.wl         = { a = "Base" }
           system/clip.wl         = { a = "Base" }
           system/cushion.wl         = { a = "Base" }
           system/fog.wl         = { a = "Base" }
           system/hint.wl         = { a = "Base" }
           system/inside.wl         = { a = "Base" }
           system/ladder.wl         = { a = "Base" }
           system/nodraw.wl         = { a = "Base" }
           system/nodrop.wl         = { a = "Base" }
           system/noimpact.wl         = { a = "Base" }
           system/origin.wl         = { a = "Base" }
           system/outside.wl         = { a = "Base" }
           system/physics_clip.wl         = { a = "Base" }
           system/qer_mirror.wl         = { a = "Base" }
           system/qer_mirror2.wl         = { a = "Base" }
           system/qer_portal.wl         = { a = "Base" }
           system/rainsurf.wl         = { a = "Base" }
           system/securitycode.wl         = { a = "Base" }
           system/securitycode_blue.wl         = { a = "Base" }
           system/securitycode_green.wl         = { a = "Base" }
           system/securitycode_red.wl         = { a = "Base" }
           system/shotclip.wl         = { a = "Base" }
           system/shotonlyclip.wl         = { a = "Base" }
           system/skip.wl         = { a = "Base" }
           system/slick.wl         = { a = "Base" }
           system/terrain.wl         = { a = "Base" }
           system/trigger.wl         = { a = "Base" }
           system/weatherzone.wl         = { a = "Base" }
           system/_video.wl         = { a = "Base" }
           system/_video512.wl         = { a = "Base" }
           system/_videotall.wl         = { a = "Base" }
      }
      taspir.txlist = 
      {
           taspir/128_128rust.wl         = { a = "Base" }
           taspir/256_128rust.wl         = { a = "Base" }
           taspir/256_128rustv.wl         = { a = "Base" }
           taspir/256_128rustv_glow.wl         = { a = "Base" }
           taspir/512_512rust.wl         = { a = "Base" }
           taspir/512_512rust_glow_b.wl         = { a = "Base" }
           taspir/512_512rust_glow_r.wl         = { a = "Base" }
           taspir/512_512rust_glow_y.wl         = { a = "Base" }
           taspir/background.wl         = { a = "Base" }
           taspir/basefloor.wl         = { a = "Base" }
           taspir/bigflat.wl         = { a = "Base" }
           taspir/bigflatrust.wl         = { a = "Base" }
           taspir/bigpipe.wl         = { a = "Base" }
           taspir/bigpipe2.wl         = { a = "Base" }
           taspir/bigside2.wl         = { a = "Base" }
           taspir/brace.wl         = { a = "Base" }
           taspir/ceilingbase1.wl         = { a = "Base" }
           taspir/circuitwall.wl         = { a = "Base" }
           taspir/compacter_treads.wl         = { a = "Base" }
           taspir/control1.wl         = { a = "Base" }
           taspir/control2.wl         = { a = "Base" }
           taspir/control2_glw.wl         = { a = "Base" }
           taspir/control2_glw2.wl         = { a = "Base" }
           taspir/control2_glw3.wl         = { a = "Base" }
           taspir/control3.wl         = { a = "Base" }
           taspir/control3_glw.wl         = { a = "Base" }
           taspir/control4.wl         = { a = "Base" }
           taspir/control4_glw.wl         = { a = "Base" }
           taspir/control5.wl         = { a = "Base" }
           taspir/control6.wl         = { a = "Base" }
           taspir/control6_glw.wl         = { a = "Base" }
           taspir/display_controls2.wl         = { a = "Base" }
           taspir/display_controls2_glw.wl         = { a = "Base" }
           taspir/display_controls2_glwa.wl         = { a = "Base" }
           taspir/display_controls2_glwc.wl         = { a = "Base" }
           taspir/display_controls3.wl         = { a = "Base" }
           taspir/display_controls3_glw.wl         = { a = "Base" }
           taspir/display_controls3_glw2.wl         = { a = "Base" }
           taspir/display_controls4.wl         = { a = "Base" }
           taspir/door.wl         = { a = "Base" }
           taspir/doortrim.wl         = { a = "Base" }
           taspir/door_b.wl         = { a = "Base" }
           taspir/door_g.wl         = { a = "Base" }
           taspir/door_r.wl         = { a = "Base" }
           taspir/door_y.wl         = { a = "Base" }
           taspir/elevator_platform.wl         = { a = "Base" }
           taspir/floor.wl         = { a = "Base" }
           taspir/ggoo_blue.wl         = { a = "Base" }
           taspir/lamp2_bulb.wl         = { a = "Base" }
           taspir/lamp2_bulb_glow.wl         = { a = "Base" }
           taspir/landingplat_glw.wl         = { a = "Base" }
           taspir/landing_wipev.wl         = { a = "Base" }
           taspir/lift_switch.wl         = { a = "Base" }
           taspir/lift_switch_glw.wl         = { a = "Base" }
           taspir/lift_switch_off_blb.wl         = { a = "Base" }
           taspir/lift_switch_off_wp.wl         = { a = "Base" }
           taspir/light.wl         = { a = "Base" }
           taspir/light_glow.wl         = { a = "Base" }
           taspir/newdoor1_b.wl         = { a = "Base" }
           taspir/panelling1.wl         = { a = "Base" }
           taspir/panelling2.wl         = { a = "Base" }
           taspir/panellong.wl         = { a = "Base" }
           taspir/pipes.wl         = { a = "Base" }
           taspir/pipestank.wl         = { a = "Base" }
           taspir/rustmetal1.wl         = { a = "Base" }
           taspir/siding1.wl         = { a = "Base" }
           taspir/siding1_old.wl         = { a = "Base" }
           taspir/siding2.wl         = { a = "Base" }
           taspir/smalltrim.wl         = { a = "Base" }
           taspir/smalltrim_glow.wl         = { a = "Base" }
           taspir/taspir1_mapbase.wl         = { a = "Base" }
           taspir/taspir1_mapglow1.wl         = { a = "Base" }
           taspir/taspir1_mapglow6.wl         = { a = "Base" }
           taspir/taspir_rock2.wl         = { a = "Base" }
           taspir/taspir_rock5.wl         = { a = "Base" }
           taspir/taspir_walk.wl         = { a = "Base" }
           taspir/tower2.wl         = { a = "Base" }
           taspir/trim.wl         = { a = "Base" }
           taspir/trim3.wl         = { a = "Base" }
           taspir/trim_walk.wl         = { a = "Base" }
           taspir/t_pillar.wl         = { a = "Base" }
           taspir/t_pillar2.wl         = { a = "Base" }
           taspir/t_trim2.wl         = { a = "Base" }
           taspir/t_trim2_glow.wl         = { a = "Base" }
           taspir/t_wall.wl         = { a = "Base" }
           taspir/t_wall2.wl         = { a = "Base" }
           taspir/t_wall3.wl         = { a = "Base" }
           taspir/t_wall4.wl         = { a = "Base" }
           taspir/t_wall5.wl         = { a = "Base" }
           taspir/t_wall5_glow.wl         = { a = "Base" }
           taspir/vator.wl         = { a = "Base" }
           taspir/wallnew1.wl         = { a = "Base" }
           taspir/wallnew2.wl         = { a = "Base" }
           taspir/wallnew3.wl         = { a = "Base" }
           taspir/wall_outside.wl         = { a = "Base" }
           taspir/control1_glw.wl         = { a = "Base" }
           taspir/control3_pls.wl         = { a = "Base" }
           taspir/display_controls.wl         = { a = "Base" }
           taspir/display_controls2_glwb.wl         = { a = "Base" }
           taspir/display_controls4_glow1.wl         = { a = "Base" }
           taspir/display_controls4_glow2.wl         = { a = "Base" }
           taspir/display_controls4_glow3.wl         = { a = "Base" }
           taspir/display_controls_glw.wl         = { a = "Base" }
           taspir/display_controls_up.wl         = { a = "Base" }
           taspir/display_controls_wp.wl         = { a = "Base" }
           taspir/door_glow.wl         = { a = "Base" }
           taspir/floor2.wl         = { a = "Base" }
           taspir/landing_pad.wl         = { a = "Base" }
           taspir/landing_wipeh.wl         = { a = "Base" }
           taspir/lift_switch_off.wl         = { a = "Base" }
           taspir/panellong_glow.wl         = { a = "Base" }
           taspir/power_tube.wl         = { a = "Base" }
           taspir/taspir1_mapglow2.wl         = { a = "Base" }
           taspir/taspir1_mapglow3.wl         = { a = "Base" }
           taspir/taspir1_mapglow4.wl         = { a = "Base" }
           taspir/taspir1_mapglow5.wl         = { a = "Base" }
           taspir/taspir1_mapglow_all.wl         = { a = "Base" }
      }      
      vjun.txlist = 
      {
           vjun/basemetal1.wl         = { a = "Base" }
           vjun/basemetal2.wl         = { a = "Base" }
           vjun/basemetal2b.wl         = { a = "Base" }
           vjun/basemetal3.wl         = { a = "Base" }
           vjun/basemetal4.wl         = { a = "Base" }
           vjun/basemetal5.wl         = { a = "Base" }
           vjun/basemetal6.wl         = { a = "Base" }
           vjun/brace.wl         = { a = "Base" }
           vjun/bracer.wl         = { a = "Base" }
           vjun/ceilingsupport.wl         = { a = "Base" }
           vjun/circle_light.wl         = { a = "Base" }
           vjun/circle_light_glw.wl         = { a = "Base" }
           vjun/core_texture.wl         = { a = "Base" }
           vjun/darktrim.wl         = { a = "Base" }
           vjun/darktrim_gray.wl         = { a = "Base" }
           vjun/door1.wl         = { a = "Base" }
           vjun/door1_onoff.wl         = { a = "Base" }
           vjun/door1_onoffg.wl         = { a = "Base" }
           vjun/door1_onoffr.wl         = { a = "Base" }
           vjun/door2.wl         = { a = "Base" }
           vjun/door2_onoff.wl         = { a = "Base" }
           vjun/door_trim.wl         = { a = "Base" }
           vjun/edgetech.wl         = { a = "Base" }
           vjun/explosive_decal_glow.wl         = { a = "Base" }
           vjun/floor1.wl         = { a = "Base" }
           vjun/floor2.wl         = { a = "Base" }
           vjun/floor3.wl         = { a = "Base" }
           vjun/floor3_glow.wl         = { a = "Base" }
           vjun/floor4.wl         = { a = "Base" }
           vjun/frametech_glw.wl         = { a = "Base" }
           vjun/grateamber_light.wl         = { a = "Base" }
           vjun/hangardoor.wl         = { a = "Base" }
           vjun/hangar_ceiling.wl         = { a = "Base" }
           vjun/hangar_console.wl         = { a = "Base" }
           vjun/hangar_console2.wl         = { a = "Base" }
           vjun/hangar_console3.wl         = { a = "Base" }
           vjun/hangar_console3_glw.wl         = { a = "Base" }
           vjun/hangar_console_glw.wl         = { a = "Base" }
           vjun/hangerwall.wl         = { a = "Base" }
           vjun/huge_floor.wl         = { a = "Base" }
           vjun/h_control_metal.wl         = { a = "Base" }
           vjun/largewall.wl         = { a = "Base" }
           vjun/lift_floor_vjun.wl         = { a = "Base" }
           vjun/light2.wl         = { a = "Base" }
           vjun/light2_glw.wl         = { a = "Base" }
           vjun/lightground.wl         = { a = "Base" }
           vjun/lightground_glw.wl         = { a = "Base" }
           vjun/lights.wl         = { a = "Base" }
           vjun/lights3.wl         = { a = "Base" }
           vjun/lights3_glw.wl         = { a = "Base" }
           vjun/light_strip.wl         = { a = "Base" }
           vjun/light_strip_glw.wl         = { a = "Base" }
           vjun/light_vjun.wl         = { a = "Base" }
           vjun/light_vjunamber.wl         = { a = "Base" }
           vjun/light_vjunamber2.wl         = { a = "Base" }
           vjun/light_vjunamber_glow.wl         = { a = "Base" }
           vjun/light_vjun_glw.wl         = { a = "Base" }
           vjun/newfloor_vjun.wl         = { a = "Base" }
           vjun/o_base.wl         = { a = "Base" }
           vjun/o_basemetal1.wl         = { a = "Base" }
           vjun/o_basemetal2.wl         = { a = "Base" }
           vjun/o_basemetal5.wl         = { a = "Base" }
           vjun/o_door.wl         = { a = "Base" }
           vjun/o_door_onoff.wl         = { a = "Base" }
           vjun/o_door_onoffg.wl         = { a = "Base" }
           vjun/o_door_onoffr.wl         = { a = "Base" }
           vjun/o_floor1.wl         = { a = "Base" }
           vjun/o_floor2.wl         = { a = "Base" }
           vjun/o_floor3.wl         = { a = "Base" }
           vjun/o_ground2.wl         = { a = "Base" }
           vjun/o_trim1.wl         = { a = "Base" }
           vjun/o_trim2.wl         = { a = "Base" }
           vjun/o_trim3.wl         = { a = "Base" }
           vjun/o_trim4.wl         = { a = "Base" }
           vjun/o_trim5.wl         = { a = "Base" }
           vjun/o_trim6.wl         = { a = "Base" }
           vjun/o_trim6b.wl         = { a = "Base" }
           vjun/o_wall1.wl         = { a = "Base" }
           vjun/o_wall2.wl         = { a = "Base" }
           vjun/o_wall3.wl         = { a = "Base" }
           vjun/o_wall4.wl         = { a = "Base" }
           vjun/o_wall5.wl         = { a = "Base" }
           vjun/rail.wl         = { a = "Base" }
           vjun/rail3.wl         = { a = "Base" }
           vjun/redgrate_light.wl         = { a = "Base" }
           vjun/redlights3.wl         = { a = "Base" }
           vjun/redlights3_glw.wl         = { a = "Base" }
           vjun/redlight_strip.wl         = { a = "Base" }
           vjun/redlight_strip_glw.wl         = { a = "Base" }
           vjun/redlight_vjun.wl         = { a = "Base" }
           vjun/redlight_vjun_glow.wl         = { a = "Base" }
           vjun/screen1.wl         = { a = "Base" }
           vjun/slantwall.wl         = { a = "Base" }
           vjun/tech.wl         = { a = "Base" }
           vjun/trashcompactor1.wl         = { a = "Base" }
           vjun/trashcompactor3.wl         = { a = "Base" }
           vjun/trashcompactor4.wl         = { a = "Base" }
           vjun/trashcompactor5.wl         = { a = "Base" }
           vjun/trashcompactor6.wl         = { a = "Base" }
           vjun/trashfloor.wl         = { a = "Base" }
           vjun/trashhall.wl         = { a = "Base" }
           vjun/trashhall_wall.wl         = { a = "Base" }
           vjun/trim1.wl         = { a = "Base" }
           vjun/trim2.wl         = { a = "Base" }
           vjun/trim3.wl         = { a = "Base" }
           vjun/vader_basewall.wl         = { a = "Base" }
           vjun/vader_floor.wl         = { a = "Base" }
           vjun/vader_floor2.wl         = { a = "Base" }
           vjun/vader_floor3.wl         = { a = "Base" }
           vjun/vader_switch.wl         = { a = "Base" }
           vjun/vader_switch_off.wl         = { a = "Base" }
           vjun/vader_switch_on.wl         = { a = "Base" }
           vjun/vader_trim.wl         = { a = "Base" }
           vjun/vader_trim2.wl         = { a = "Base" }
           vjun/vader_trim3.wl         = { a = "Base" }
           vjun/vader_walkway.wl         = { a = "Base" }
           vjun/vent.wl         = { a = "Base" }
           vjun/vent2.wl         = { a = "Base" }
           vjun/vjun_ceilingbrace.wl         = { a = "Base" }
           vjun/vjun_wall5.wl         = { a = "Base" }
           vjun/vjun_wall6.wl         = { a = "Base" }
           vjun/walk_ceiling.wl         = { a = "Base" }
           vjun/wall1.wl         = { a = "Base" }
           vjun/wall10.wl         = { a = "Base" }
           vjun/wall11.wl         = { a = "Base" }
           vjun/wall13.wl         = { a = "Base" }
           vjun/wall14.wl         = { a = "Base" }
           vjun/wall14_glw.wl         = { a = "Base" }
           vjun/wall15.wl         = { a = "Base" }
           vjun/wall16.wl         = { a = "Base" }
           vjun/wall17.wl         = { a = "Base" }
           vjun/wall18.wl         = { a = "Base" }
           vjun/wall3.wl         = { a = "Base" }
           vjun/wall4.wl         = { a = "Base" }
           vjun/wall7dent.wl         = { a = "Base" }
           vjun/wall8.wl         = { a = "Base" }
           vjun/wall9.wl         = { a = "Base" }
           vjun/wall9_glow.wl         = { a = "Base" }
           vjun/wallpiece.wl         = { a = "Base" }
           vjun/wall_clean1.wl         = { a = "Base" }
           vjun/wall_clean2.wl         = { a = "Base" }
           vjun/wall_garrison.wl         = { a = "Base" }
           vjun/wall_saberroom.wl         = { a = "Base" }
           vjun/wall_saberroom_glw.wl         = { a = "Base" }
           vjun/door2_onoff_glowg.wl         = { a = "Base" }
           vjun/door2_onoff_glowr.wl         = { a = "Base" }
           vjun/explosive_decal.wl         = { a = "Base" }
           vjun/floor3_mask.wl         = { a = "Base" }
           vjun/frametech.wl         = { a = "Base" }
           vjun/grate.wl         = { a = "Base" }
           vjun/grate1.wl         = { a = "Base" }
           vjun/grate2.wl         = { a = "Base" }
           vjun/grateamber_light_glow.wl         = { a = "Base" }
           vjun/hangardoor_glw.wl         = { a = "Base" }
           vjun/hangar_console2_glw.wl         = { a = "Base" }
           vjun/redgrate_light_glow.wl         = { a = "Base" }
           vjun/tech2.wl         = { a = "Base" }
           vjun/vader_floor2_glow.wl         = { a = "Base" }
           vjun/vader_floor2_mask.wl         = { a = "Base" }
           vjun/vader_floor_mask.wl         = { a = "Base" }
           vjun/vader_trim2_mask.wl         = { a = "Base" }
           vjun/vader_trim3_mask.wl         = { a = "Base" }
           vjun/vader_walkway_mask.wl         = { a = "Base" }
           vjun/walk_ceiling_mask.wl         = { a = "Base" }
           vjun/wall8_mask.wl         = { a = "Base" }
           vjun/wall9_mask.wl         = { a = "Base" }
      }
      wedge.txlist = 
      {
           wedge/ggoo1.wl         = { a = "Base" }
           wedge/hatch1.wl         = { a = "Base" }
           wedge/hatch2.wl         = { a = "Base" }
           wedge/hatch3.wl         = { a = "Base" }
           wedge/hatch4.wl         = { a = "Base" }
           wedge/largescreen2.wl         = { a = "Base" }
           wedge/largescreen2_glw.wl         = { a = "Base" }
           wedge/large_tank_cap.wl         = { a = "Base" }
           wedge/large_tank_cap_glow.wl         = { a = "Base" }
           wedge/large_tank_fins.wl         = { a = "Base" }
           wedge/large_tank_fins_glow.wl         = { a = "Base" }
           wedge/metl18l00.wl         = { a = "Base" }
           wedge/panels1.wl         = { a = "Base" }
           wedge/panels5.wl         = { a = "Base" }
           wedge/pillar_light.wl         = { a = "Base" }
           wedge/pillar_light_glw.wl         = { a = "Base" }
           wedge/powerpipe_glw.wl         = { a = "Base" }
           wedge/strut1.wl         = { a = "Base" }
           wedge/switch_door_unlocked_broken.wl         = { a = "Base" }
           wedge/tank5.wl         = { a = "Base" }
           wedge/tankeffect.wl         = { a = "Base" }
           wedge/tankmet.wl         = { a = "Base" }
           wedge/tank_centertrim.wl         = { a = "Base" }
           wedge/tank_lowbasic.wl         = { a = "Base" }
           wedge/tank_topbasic.wl         = { a = "Base" }
           wedge/tank_trim.wl         = { a = "Base" }
           wedge/textractorcopter.wl         = { a = "Base" }
           wedge/trim1.wl         = { a = "Base" }
           wedge/trim2.wl         = { a = "Base" }
           wedge/trim3.wl         = { a = "Base" }
           wedge/trim_beam.wl         = { a = "Base" }
           wedge/trim_clamp.wl         = { a = "Base" }
           wedge/wall_inset.wl         = { a = "Base" }
           wedge/wall_tankcon.wl         = { a = "Base" }
           wedge/wall_tankcon_glw.wl         = { a = "Base" }
           wedge/wall_tankcon_plain.wl         = { a = "Base" }
           wedge/wall_tankcon_plain2.wl         = { a = "Base" }
           wedge/wecrate.wl         = { a = "Base" }
           wedge/wecrate_2.wl         = { a = "Base" }
           wedge/wedge_pipe.wl         = { a = "Base" }
           wedge/wedge_pipe2.wl         = { a = "Base" }
           wedge/wedge_shutter.wl         = { a = "Base" }
           wedge/wedge_towerframe.wl         = { a = "Base" }
           wedge/wedge_towerwall.wl         = { a = "Base" }
           wedge/wedge_towerwall2.wl         = { a = "Base" }
           wedge/w_basic.wl         = { a = "Base" }
           wedge/w_basic2.wl         = { a = "Base" }
           wedge/w_basicpanel.wl         = { a = "Base" }
           wedge/w_bigtrim.wl         = { a = "Base" }
           wedge/w_bigtrim2.wl         = { a = "Base" }
           wedge/w_btrim.wl         = { a = "Base" }
           wedge/w_btrim_2.wl         = { a = "Base" }
           wedge/w_catwalkside_trim.wl         = { a = "Base" }
           wedge/w_catwalk_r.wl         = { a = "Base" }
           wedge/w_con1.wl         = { a = "Base" }
           wedge/w_con1_glw.wl         = { a = "Base" }
           wedge/w_con2.wl         = { a = "Base" }
           wedge/w_con2_glw.wl         = { a = "Base" }
           wedge/w_con3.wl         = { a = "Base" }
           wedge/w_con3_glw.wl         = { a = "Base" }
           wedge/w_con3_glw1.wl         = { a = "Base" }
           wedge/w_con3_glw2.wl         = { a = "Base" }
           wedge/w_door.wl         = { a = "Base" }
           wedge/w_door2_onoff.wl         = { a = "Base" }
           wedge/w_door_glw.wl         = { a = "Base" }
           wedge/w_door_onoff.wl         = { a = "Base" }
           wedge/w_lights.wl         = { a = "Base" }
           wedge/w_pipejoint.wl         = { a = "Base" }
           wedge/w_tanklock.wl         = { a = "Base" }
           wedge/w_tanksteps.wl         = { a = "Base" }
           wedge/w_wall.wl         = { a = "Base" }
           wedge/w_windowtrim.wl         = { a = "Base" }
           wedge/w_wingate.wl         = { a = "Base" }
           wedge/w_wingate2.wl         = { a = "Base" }
           wedge/large_tank_grate.wl         = { a = "Base" }
           wedge/powerpipe.wl         = { a = "Base" }
           wedge/w_btrim_glow.wl         = { a = "Base" }
           wedge/w_catwalk.wl         = { a = "Base" }
           wedge/w_door_onoffg.wl         = { a = "Base" }
           wedge/w_door_onoffr.wl         = { a = "Base" }
      }
      yavin.txlist = 
      {
           yavin/bblock3.wl         = { a = "Base" }
           yavin/brock1.wl         = { a = "Base" }
           yavin/button_lg.wl         = { a = "Base" }
           yavin/ceiling.wl         = { a = "Base" }
           yavin/columnpile.wl         = { a = "Base" }
           yavin/control01.wl         = { a = "Base" }
           yavin/control01_glw.wl         = { a = "Base" }
           yavin/crackfloor.wl         = { a = "Base" }
           yavin/crate01.wl         = { a = "Base" }
           yavin/crate02.wl         = { a = "Base" }
           yavin/crate03.wl         = { a = "Base" }
           yavin/crate03tb.wl         = { a = "Base" }
           yavin/crate03_glow.wl         = { a = "Base" }
           yavin/darkrock.wl         = { a = "Base" }
           yavin/dark_floor.wl         = { a = "Base" }
           yavin/door_met01.wl         = { a = "Base" }
           yavin/door_met02.wl         = { a = "Base" }
           yavin/door_stone01.wl         = { a = "Base" }
           yavin/door_stone02.wl         = { a = "Base" }
           yavin/dugdirt.wl         = { a = "Base" }
           yavin/floor.wl         = { a = "Base" }
           yavin/fungal.wl         = { a = "Base" }
           yavin/gardenwall3.wl         = { a = "Base" }
           yavin/goldblock2.wl         = { a = "Base" }
           yavin/goldblock3.wl         = { a = "Base" }
           yavin/greenblock.wl         = { a = "Base" }
           yavin/greenblockh.wl         = { a = "Base" }
           yavin/ground.wl         = { a = "Base" }
           yavin/hangar_floor.wl         = { a = "Base" }
           yavin/hangdoor.wl         = { a = "Base" }
           yavin/hangfloor.wl         = { a = "Base" }
           yavin/jung8.wl         = { a = "Base" }
           yavin/lift_floor.wl         = { a = "Base" }
           yavin/lighturth.wl         = { a = "Base" }
           yavin/main_display01.wl         = { a = "Base" }
           yavin/main_display02.wl         = { a = "Base" }
           yavin/main_display04.wl         = { a = "Base" }
           yavin/map.wl         = { a = "Base" }
           yavin/marbly.wl         = { a = "Base" }
           yavin/metalrandom1worn.wl         = { a = "Base" }
           yavin/metalstockworn.wl         = { a = "Base" }
           yavin/met_floor01.wl         = { a = "Base" }
           yavin/met_grate01.wl         = { a = "Base" }
           yavin/met_light01.wl         = { a = "Base" }
           yavin/met_pipe01.wl         = { a = "Base" }
           yavin/met_trim02.wl         = { a = "Base" }
           yavin/met_trim04.wl         = { a = "Base" }
           yavin/met_wall01.wl         = { a = "Base" }
           yavin/met_wall02.wl         = { a = "Base" }
           yavin/mudside_b.wl         = { a = "Base" }
           yavin/obsidian_templebasic.wl         = { a = "Base" }
           yavin/obsidian_templebasic2.wl         = { a = "Base" }
           yavin/obsidian_templebasic_trim.wl         = { a = "Base" }
           yavin/obsidian_walkway.wl         = { a = "Base" }
           yavin/paved.wl         = { a = "Base" }
           yavin/pillar_base01.wl         = { a = "Base" }
           yavin/rock3.wl         = { a = "Base" }
           yavin/rockblock.wl         = { a = "Base" }
           yavin/rockmossy.wl         = { a = "Base" }
           yavin/rockwall.wl         = { a = "Base" }
           yavin/rock_mayan4.wl         = { a = "Base" }
           yavin/sand1.wl         = { a = "Base" }
           yavin/screen01.wl         = { a = "Base" }
           yavin/stair_trim01.wl         = { a = "Base" }
           yavin/stone.wl         = { a = "Base" }
           yavin/stonepanel04.wl         = { a = "Base" }
           yavin/stonewall2.wl         = { a = "Base" }
           yavin/stone_pull.wl         = { a = "Base" }
           yavin/stone_tile2.wl         = { a = "Base" }
           yavin/stone_tile2_glow.wl         = { a = "Base" }
           yavin/stone_walk.wl         = { a = "Base" }
           yavin/streakshale.wl         = { a = "Base" }
           yavin/strius.wl         = { a = "Base" }
           yavin/supports.wl         = { a = "Base" }
           yavin/s_mud2.wl         = { a = "Base" }
           yavin/s_rock4.wl         = { a = "Base" }
           yavin/templewallgrungyx.wl         = { a = "Base" }
           yavin/templewall_1.wl         = { a = "Base" }
           yavin/temple_basicwall3.wl         = { a = "Base" }
           yavin/temple_basicwall4.wl         = { a = "Base" }
           yavin/temple_basicwall5.wl         = { a = "Base" }
           yavin/temple_interiorsmall2.wl         = { a = "Base" }
           yavin/temple_interiorsmallwb.wl         = { a = "Base" }
           yavin/temple_stone2.wl         = { a = "Base" }
           yavin/temple_stonea.wl         = { a = "Base" }
           yavin/temple_vines2.wl         = { a = "Base" }
           yavin/tileblock.wl         = { a = "Base" }
           yavin/trimblock.wl         = { a = "Base" }
           yavin/trimblock2.wl         = { a = "Base" }
           yavin/triml.wl         = { a = "Base" }
           yavin/trims.wl         = { a = "Base" }
           yavin/trim_stone01.wl         = { a = "Base" }
           yavin/trim_stone02.wl         = { a = "Base" }
           yavin/trim_stone03.wl         = { a = "Base" }
           yavin/trim_stone04.wl         = { a = "Base" }
           yavin/trim_stone05.wl         = { a = "Base" }
           yavin/trim_stone08.wl         = { a = "Base" }
           yavin/v_floor.wl         = { a = "Base" }
           yavin/wblock.wl         = { a = "Base" }
           yavin/groundplants.wl         = { a = "Base" }
           yavin/light.wl         = { a = "Base" }
           yavin/light_blue.wl         = { a = "Base" }
           yavin/lshadow.wl         = { a = "Base" }
           yavin/tree1.wl         = { a = "Base" }
           yavin/treebarkstump.wl         = { a = "Base" }
           yavin/tree_leaves.wl         = { a = "Base" }
      }
    }
  }

  Textures.qtx =
  {
    Toolbox = "Texture Browser..."
    Root = "JA Shaders.qtxfolder"

    JA Shaders.qtxfolder =
    {

      bespin.txlist = 
      {
           bespin/sky.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/sky_platform.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_tunpipe02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/floor_slick_nodamage.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/cortosis.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_floor02_nodamage.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_shaftwall.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_grate.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_beam02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_light01.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_light02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_light02a.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_light03.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_light04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_hangdoor02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/botton_on.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/force.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_tube.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_casing03.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_shaftwall02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/n_win01.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/n_win02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/n_win03.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/mp_r_light04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/mp_b_light04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/mp_r_light02a.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/mp_b_light02a.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/mp_b_wall04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/mp_b_casing04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/mp_r_casing04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/mp_r_wall04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/bottondroidopen.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/n_light01.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/bswitch.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/bswitchon.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/botton_off.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/door01locked.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/control01.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/control02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/control03.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/control04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_carbfloor.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_carbfloor02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/water2.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/breakable_grate1.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/breakable_grate2.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/sky_test.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/basic8.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/basic2.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/basic6.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/basic.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/ceiling01.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/floor2.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/floor3.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/floor4.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/floor.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/grate.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/hydraulic.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/n_floor01.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/n_floor02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/newfloor.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/plating_b.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_floor04.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_floor02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_floor03.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_floor01.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_metalgreen.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_metalorange02.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_metallg.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_metalorange.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/u_metalgreenrib.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/wall_iron.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
           bespin/sky_duel.wl         = { a = "Base" b = "bespin.shader" shader = "1" }
      }
      byss.txlist = 
      {
           byss/byss_basic1_piller_light.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/emiter.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/static_field.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/large_floor.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/pathway.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/lights.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_light.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/tractor.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/isd_basepanel1.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/isd_midsection.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/static_field_2sided.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/static_field_absorb.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/isd_bridge.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/isd_midsection2.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/isd_decal1.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/isd_decal2.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/isd_decal3.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/isd_decal4.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_gate_onoff.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_gatedoor_onoff.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/door1.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_switch.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_crate_side.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_crate_top.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/static_field2.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/static_field3.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/static_field4.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/static_field5.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_basicwall.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/floor_byss.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/floor_byss2.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/basicred.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_basic1.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_basic2.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/biglight.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/biglight_2.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_light2.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/trim6.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/stairs_front.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/byss_ghall_trim.wl         = { a = "Base" b = "byss.shader" shader = "1" }
           byss/piper5.wl         = { a = "Base" b = "byss.shader" shader = "1" }
      }
      cairn.txlist = 
      {
           cairn/frame1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }           
           cairn/pipe01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/tunwall.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/tunlights.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/door02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/light01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/win01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/pipe02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/mp_win02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/c_conbeltmov.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/lightning3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/c_conbeltmov2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }           
           cairn/elcon01on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/c_cameraswitch.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/c_feedbackscreen.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/c_feedbackscreenon.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/dec_oil02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/dec_oil03.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/dec_oil01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/basewall.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/outsidewall.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/basewall_light.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/basic_onoff.wl         = { a = "Base" b = "imperial.shader" shader = "1" }           
           cairn/basic_onoff_b.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/lock01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/newpipe.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/tracklight.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/tracklight2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/tracklight3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/lightvice.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/wall02_reactor.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/lightning4.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/elcon01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/cairn_screen7.wl         = { a = "Base" b = "imperial.shader" shader = "1" }           
           cairn/cairn_screen3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/cairn_screen4.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/cairn_screen5.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/cairn_screen6.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/cairn_screen2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/alcove01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/mine_face.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/lock01lock.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/lock01open.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/door_display_glow2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/door_display_glow.wl         = { a = "Base" b = "imperial.shader" shader = "1" }           
           cairn/screen_vator.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/screen_vator_on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/kplate2_e.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/wallpanel04_e.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/cairn_alarm.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/mp_win03.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/screen_reactor.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/cairn_screen8.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/door3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/postcontrol.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/control5_b1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/control5_b2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/control5_b3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           cairn/metalc2_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
      }
      common.txlist = 
      {
           common/glass.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_no_tess.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_reflective.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_reflective_double-sided.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/crystal.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/antiportal.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/skip.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass_breakable.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass_green.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass_red.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/gradient.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/gradient2.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water_1.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass_opaque.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass_equal.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/neon_purple.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water2.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/caustic00.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/neon_green.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/neon_red.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/neon_orange.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/neon_blue.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water2_waterfall.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water2_shadow.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water2_water.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water2_waterfall_Tutorial.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water2_water1.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water2_still.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/dust_animated.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass_tess.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass_t2dp1.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/dust_gradient.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/dark_dust.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/blue_gradient.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/tan_gradient.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_obsidian.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/flava1.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/black_trans_blend.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/gradient_twosided.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_obsidian2.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water_waterfall_3.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water_waterfall_2.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/nightbeam.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/lvr.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/lvr2.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/dark_yellow_dust.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/env_glass_security.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_security_hex.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_security_chain.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_security_tris.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_security_thex.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_security_square.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/neonblue_gradient.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water2_water1_vjun1.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/Water_Yavin2.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water_3.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/dark_orange.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/red_gradient.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/glass_security_opaque.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/water_quicktrip.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/frosted_glass.wl         = { a = "Base" b = "common.shader" shader = "1" }
           common/nightbeam_byss.wl         = { a = "Base" b = "common.shader" shader = "1" }
      }
      danger.txlist = 
      {
           danger/black_nodynamiclight.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/vents.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/seam_horiz.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/seam_vert.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/engine_end_rotated.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/scorch.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/monitor.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/sand_decal.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/monitor02.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/monitor02_off.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/light_navigation.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/light_navigation_blink.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/guts_specular.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/guts_glowing.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/numbers.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/terrain_0.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/terrain_1.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/terrain_2.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/terrain_0to1.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/terrain_0to2.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/terrain_1to2.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/surprise_0.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/surprise_1.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/surprise_2.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/surprise_0to1.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/surprise_0to2.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/surprise_1to2.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/terrain_vertex.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/map_display_glow1.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/map_display_glow2.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/map_display_glow3.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/map_display_glow4.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/floor_danger.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/floor.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/panels_ext.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/panels_ext_trim.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/panels_ext_section2.wl         = { a = "Base" b = "danger.shader" shader = "1" }
           danger/panels_ext_section.wl         = { a = "Base" b = "danger.shader" shader = "1" }
      }
      decals.txlist = 
      {
           decals/mp_rebel_symbol.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/mp_imperial_symbol.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/mp_b_stripe.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/mp_r_stripe.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/mp_r_lstripcap.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/mp_b_lstripcap.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/mp_r_lstrip.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/mp_b_lstrip.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/burnmark1.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/burnmark2.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/burnmark3.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/burnmark4.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/burnmark5.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/dirt1.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/scratch1.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/scratch2.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/caution_strip.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/sign_decal1.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/sign_decal2.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/sign_decal3.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/arrow_decal.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/slashmark1.wl         = { a = "Base" b = "decals.shader" shader = "1" }
           decals/floor_scrapes.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           decals/barsign.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           decals/screen1.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
      }
      desert.txlist = 
      {
           desert/t_rockwall2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/sandfloor2b.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/light_yellow.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco_grime_detail.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/door_switch_blue_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/door_switch_red_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/door_switch_stucco_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/t_rockwall1_clip.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/t_rockwall1_clip_sm2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/t_rockwall1_clip_sm.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/sandfloor2_Phong.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_switch_locked.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_switch_unlocked.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/dbay_hud.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/panel_monitor_on.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/panel_monitor.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_door_1_onoff.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_door_2_onoff.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_door_3_onoff.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/door_lrg_onoff.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_console.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_windowfront_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_windowside_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_light.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco_top_grime.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco_128.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco_grime.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco_grime_bottom.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco_grime_top_bottom.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco_rim.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/stucco_rim_2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_stucco_vent2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_s_detail1.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_stucco_detail1.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/turbolift_base.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_stucco_detail1_lightmapped.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_stucco_vent2_lightmapped.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_stucco_groove_lightmapped.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_s_detail1_lightmapped.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/pipe1.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/pipe2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/turbolift.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_psky_detail1_lightmapped.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_psky_groove_lightmapped.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_psky_vent2_lightmapped.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_psky_vent_lightmapped.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/dbay_hud_ll.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/dbay_hud_lr.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/dbay_hud_ul.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/dbay_hud_ur.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/panel_dbaycontrol.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/panel_dbay.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/panel_tall.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/turbolift_int.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_tank.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/blotch_rust.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/bloch1.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/bloch2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/overhead_door.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/sandfloor2old_tread2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/metalcrust_anim_map.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/moltenmetal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_cracks1.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_cracks2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/decal_rancor.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/mp_security_station_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/mp_1_circle_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/mp_2_circle_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/mp_3_circle_decal.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/t_rockwall1_b.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/outerhull.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_basic_floor.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_basic_1.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_basic.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_conbelt.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_gratefloor.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_floor_lrg.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_floor1.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_floor_elevator.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/s_treds.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/walkway_section1.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           desert/walkway_section2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
      }
      doomgiver.txlist = 
      {
           doomgiver/grating.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/forcefield.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/oz_test.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/comp_panel.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/cfield.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/conduit_field.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/oz_test2.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/trimabc2.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/trimabc.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/control_panel_03.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/comp_panel_alpha.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/comp_panel_new_2.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/comm_room.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/control_panel_02.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/deathcon1a.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/redlightsd.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/grate01d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/light1d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/doortrim01d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/512_512d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/shieldpaneloff.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/shieldpanel.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/mapd.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/mapd2.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/control5.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/mapd1.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/doorhangar2.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/doom_screen1.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/fuel1.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/pipe1.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/tramtrack.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/hyperspace.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/arrow.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/deathconlight.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/bigpipe1d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/flare_blue.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/hyper03_b.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/light_whited.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/door_red.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/door1_locked.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/doomscreen.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/door_opener.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/pipe2.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/largepipe.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/basic2.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/basic.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/floorgrate1.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/floord.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/metalsec1d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/new5d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/new3d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/new2d.wl         = { a = "Base" b = "doomgiver.shader" shader = "1" }
           doomgiver/lightnewd.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/trim4d.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/elevatorup.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/elevatorcall.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/deathcon2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/deathcon1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/d_doorswitch.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/d_doorswitchon.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/d_switch.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/d_switchon.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/screen01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/screen04.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/doom_display.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/control_panel_04.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comp_panel_r.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comp_panel_g.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comp_panel_b.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/trim4g.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/trim4b.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comp_panel_ra.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comp_panel_ga.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comp_panel_ba.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comm_panel.l         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comm_panel1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/comm_panel2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/centerpipes2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           doomgiver/bay_wall1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
      }
      factory.txlist = 
      {
           factory/T2_Wedge_floorgrate.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/wall10.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/wall.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/env_siding.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/cat_floor.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic2_tiled.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/wall2.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/cat_floor2.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic4_railing.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/tracklight.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/wallliner.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/conveyor_belt.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/deconfield1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/tickertape.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/trimlight.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/prison_field.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/walllinerb.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basewall_vent.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/piller.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/pipe_current.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/env_offset.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/other_field.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/env_pipe.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/env_glass.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/trim_01.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/cat_floor_b.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic2_tiled_b.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/fliquid4.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/coolant_test.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/coolant_test_red.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/colorb1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/ggoo1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/door_onoff.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/cul_door_onoff.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/newcrate1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/piller_base.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/newcrate3_trim.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/newcrate4_side.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/bomb_new_glow.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/gooblue.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/bomb_new_glow_deact.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basemetal5.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basefloor1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basemetal1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basemetal2.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basemetal4.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/base.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basicmetal2_2.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic2.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic3.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic4.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic5.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic6.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/darkfloor.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/darkmetal.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/grating.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/grate.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/inside_floor.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/metalsec1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/outside_rock1b.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/outside_floor1.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/s_basic.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/volcanic_rock.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basic3_b.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/conveyor_belt_off.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/conveyor_belt_slow.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/basemetal5_noclip.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/darkmetal_noclip.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/env_pipe_noclip.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/goldtop2_noclip.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/conveyor_belt_fast.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/conveyor_belt_fast_2.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           factory/outside_floor1_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           factory/basic1_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           factory/outside_rock1b_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           factory/volcanic_rock_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
      }
      flares_and_sprites.txlist = 
      {
           sprites/ss_raintest.wl         = { a = "Base" b = "sprites.shader" shader = "1" }
           sprites/ss_test1.wl         = { a = "Base" b = "sprites.shader" shader = "1" }
           sprites/ss_test2.wl         = { a = "Base" b = "sprites.shader" shader = "1" }
           sprites/ss_test3.wl         = { a = "Base" b = "sprites.shader" shader = "1" }
           sprites/ss_testall.wl         = { a = "Base" b = "sprites.shader" shader = "1" }
           flares/standard_flare.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_red.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_blue.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_white.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/light_white.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_lt_blue.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/clip_flare_white.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/solid_blue.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_ring2.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_white_pulse.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/standard_flare_bigger.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_crystal.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_yellow.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_red_pulse.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_blue_pulse.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_beam.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_orange.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_bluehue.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/solid_orange.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_blue2.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/solid_red.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/Wedge_Blue_flare.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/Vjun2_Green_flare.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_wedge.wl         = { a = "Base" b = "flares.shader" shader = "1" }
           flares/flare_stampede.wl         = { a = "Base" b = "flares.shader" shader = "1" }
      }
      fogs.txlist = 
      {
           fogs/fog1.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/yavin.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/proto.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/yavin2.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/test1.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/bespin.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/narshadaa.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/narshadaa2.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/kejim_cold.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/cairn_red.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/fog_black.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/fog_black2.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/fog_blacksiegehoth.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/fog_siege2.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/fog_blackdeathstar.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/yavin_white.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/bespin_notex.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/bespin_cloud_layer.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/fog_black_reverse.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/bespin_test.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/yavin_swamp.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/fog_grey.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/fog_amber.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/smtest_fog.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/areisfog.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/rift.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/Hoth2fog.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/T2_Wedgefog.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/vjun1.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/T1_Fatal_redfog2_light.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/greyfog.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/T1_Fatal_redfog_light.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/hoth.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/korriban.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/rail.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/vjun1acidriver.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           fogs/lava.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
      }
      hoth.txlist = 
      {
           hoth/mp_rock2.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ice_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/cut_ice_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/chiseled_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ice_rock_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/grey_snow_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/rock_huge_snow.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/rock_huge_snow_model.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ice_model.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/instance_basicltgray.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/instance_basicltgray_dam.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/snow_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/snow_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ice.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_outground_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_outground_2_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_outground_3_phong.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/terrain_0.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/terrain_1.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/terrain_0to1.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/terrain_vertex.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/basicltgray_shiny.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_outground_2_clip.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_outground_3_clip.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/snow_01_clip.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/instance_outerhull.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/instance_pipe2.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/instance_stack.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_wall_04b.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/icicles.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/at_at_leg_b.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_door2.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_door.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_floor_03.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/snow_nolightmap.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_icicles.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ion_panel_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ion_panel_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ion_panel_03.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_control_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_control_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_control_03.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_control_04.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_door_onoff.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_door2_onoff.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/door_04_a_onoff.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/door_02_onoff.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/newwall.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/fuelgradient.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/snow_01_b.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_outground_3_b.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_outground_2_b.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/walker_b.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/door_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/trim_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_floor_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_wall_03.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_wall_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_wall_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/floor_grate_new.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ion_feedtube.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ion_feedtube_copper.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_wall_04b_shelf.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/light_01b.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/lights_tube.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/lights_tube_off.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/exit_beam.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/exit_beam_side.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/exit_center_piece.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/exit_plate.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/exit_trim.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/light_ceiling.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/blast_panel.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/blast_panel_snow.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/blast_panel2.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/blast_panel2_snow.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/blast_panel3.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/blast_panel3_snow.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/blast_panel4.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/blast_panel4_snow.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ion_screen_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ion_screen_03.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ion_screen_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/switch_lift_green.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/switch_lift_red.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/copper_pipe_nospec.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/floorpanel_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/floor_grate.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/floorpanel_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/grid_02a.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/grid_02.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/grid_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_basicwall.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_floor.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/h_floor_01.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ice2_specular.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/ice2.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/lsnow1a.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/lsnow1.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/lsnow.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/snow_03.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/snowbiga.wl         = { a = "Base" b = "hoth.shader" shader = "1" }
           hoth/at_at_leg_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/basic2_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/h_basicwall_2_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/crate1_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/crate1b_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/floorpanel_01_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/floorpanel_02_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/metal_lg_dk_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/metal_lg_lt_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/outside_wall_vertex.wl         = { a = "Base" b = "vertex.shader" shader = "1" }
           hoth/hoth_fog.wl         = { a = "Base" b = "fogs.shader" shader = "1" }
           hoth/hoth_fog2wl         = { a = "Base" b = "fogs.shader" shader = "1" }
      }
      h_evil.txlist = 
      {
           h_evil/frameblue_grate.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/roundhole_grate.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/phong_black.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/phong_green.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/elecgrid.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/crossbeam2.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/stairtread.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/stairriser.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/blue_grate.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/evil_door_basic_onoff.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/energypipe1.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/energypipe2.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/light4.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/fan_display.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/fan_display_off.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/evil_rock13.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/light1.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/light2.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/light3.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/wfall.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/lakewater.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/switch.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/switch_off.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/basicrocknew.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/evil_basic2a_backup.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/evil_basic2.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/evil_basic2a.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/evil_basic.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/floor_metal.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/frameblue_floor.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/frameblue_smallconduit.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/waterf1.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/wf3.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/wfn2.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
           h_evil/wfall_opaque.wl         = { a = "Base" b = "hiddenevil.shader" shader = "1" }
      }
      impdetention.txlist = 
      {
           impdetention/deathcon1.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           impdetention/deathcon1a.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           impdetention/lightnew.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/doortrim01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/lpanel6tuw.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/metalpanel1f1dark.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/control3_back.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/control5.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/control4.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/control4_back.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/control_base.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/mp_r_trimlight.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/mp_b_trimlight.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/door1c.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/hangerdoorb.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/newtrim1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/screen1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/floordet.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/floor.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/floor1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/floor2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/elevat_floor.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/floorgrate.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/floorgrate1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/floorpanel1b.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/floorpanel1bdark.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/metal.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/metal2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/ribs.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/doordirt_noclip.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/bpipe2_noclip.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           impdetention/light1_2.wl         = { a = "Base" b = "pit2.shader" shader = "1" }
           impdetention/lightnewglow2.wl         = { a = "Base" b = "pit2.shader" shader = "1" }
           impdetention/light_white_flare2.wl         = { a = "Base" b = "pit2.shader" shader = "1" }
      }
      imperial.txlist = 
      {
           imperial/holotarget1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/dp_ground.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/dp_ground_nosprites.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/imp_forcefield.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/square.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/wall_1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/wall_2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/light_tie.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/light_hanger.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/light_prison.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/switch_hangar_locked.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/switch_hangar_unlocked.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/switch_door_locked.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/switch_door_unlocked.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/switch_elevator_grn.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/switch_elevator_red.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/switch_elevator_sealed.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/shiny_floor.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/grate02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/grate02_broke.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/grate02_long.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/grate02_long_broken.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/holotarget2_small.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/mapd1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/mapd2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/door_1_onoff.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/door_2_onoff.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/dpred_striplight.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/dpred_stairlight.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/door_1new_onoff.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/door_1new_sealed.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/door_2new_onoff.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/door_2new_sealed.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/door_1new_locked.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/camera_switch.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imperial/door_1_onoff.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           imperial/door_2_onoff.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
      }
      imp_mine.txlist = 
      {
           imp_mine/bigflatrust_sm.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/basefloor2.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/bigflat.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/bigflat_sm.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/bigflatrust.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/basefloor.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/elevatorfloor.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/floorgrid.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/kplate2.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/kplate.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/kplatek.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/kplates.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/trim_floor.wl         = { a = "Base" b = "imp_mine.shader" shader = "1" }
           imp_mine/grating.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lighttrack2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lighttrack.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/pipe_glowing.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/light.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lighttrack3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/minelight.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/pipeput.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/pipeput_rust.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lava.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lightmap5.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lightmap3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lightmap4.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lightmap2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/slime.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/monorail.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/monorail_top.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/rock_color_digs3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/tiescreen.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lightmap.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/control7on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/control7off.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/control5switched.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/control5switch.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/newdoor1_b.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/pipe_glowing2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/grating_breakable.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/elevatorpanel.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/elevatorpanel_red.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lightmap_fan2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/tower_frame.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/lightmap_fan.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/strobe_on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/crystal1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/crystal2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/crystal3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           imp_mine/grating_noclip.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
      }
      jnegretetest.txlist = 
      {
           jnegretetest/water3.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/water2.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/ice_phong.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/cut_ice_phong.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/chiseled_phong.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/ice_rock_phong.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/grey_snow_phong.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/standard_flare.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_fog.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/vjun1_fog.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_2_fog.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/echo_fog.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_0.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_1.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_2.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_0to1.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_0to2.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_1to2.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/boba_night.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/boba_late_afternoon.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/boba_afternoon.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/rancor_sky.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/hoth_sky.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/symbol.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/bumpmap.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/rock_huge_snow.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/ice.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/snow_02.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/sky.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/pink_base.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           jnegretetest/pink_fur.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
      }
      kejim.txlist = 
      {
           kejim/bluelights.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/basepanel01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/ceilinglight01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/lightpanel.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/lightpanel02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/strutlight.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/flatwhite.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/wallpanel03.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/redfield1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/grate02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/pipe.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/pipe3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/compwall01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/drawer1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/barrel.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/wallpanel01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/refpanel.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/lift_on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/coolantbubbles.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/flatblue.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/flatwhite_half.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/metal1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/cameraswitch.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/forcefield2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/powerscreen256.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/pipe2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/mp_b_metalpanel1b.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/mp_r_metalpanel1b.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/mp_emptrim.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/lift_off.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switch.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/crateswitch.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/icicle.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/red_puzzle01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/red_puzzle02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/red_puzzle03.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/blue_puzzle01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/blue_puzzle02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/blue_puzzle03.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/green_puzzle01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/green_puzzle02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/green_puzzle03.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/keyportblue.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/keyport.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switch_broken.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kgunpanel.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kgunpanelon.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kgeneratorpanel.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kgeneratorpanel2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switch_on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/alpha.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/newfloor_kej.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kmousepanel.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kmousepanel_on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/gen_glow.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/map_display2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/map_display3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/wallpanel06.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/greenlights.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switchred.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switchred_on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switchgreen.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switchgreen_on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switchblue.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/switchblue_on.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/coruscantwall4.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kej_control.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/stars_scroll.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/refcolumn.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/grate02_broke.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kej_lights.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/grate02_long.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/grate02_long_broken.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kej_control2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kej_control3.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/blastdoor_onoff.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/powerscreen1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/map_display1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/frame1.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/coruscant.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/map_display4.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/redfield2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/flashscreen_base.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/dish_final.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kej_control5.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kej_control6.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/crystalscreen.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/redlights.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/path_red.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/floor01.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/floor02.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/floorsquare.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/floorsquare2.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/metal.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/path_blue.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/path_green.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/floor_green.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/metal2_noclip.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/metal_noclip.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           kejim/kej_control3.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           kejim/kej_control.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           kejim/kej_control6.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           kejim/kej_control5.wl         = { a = "Base" b = "desert.shader" shader = "1" }
           kejim/kej_control2.wl         = { a = "Base" b = "desert.shader" shader = "1" }
      }
      korriban.txlist = 
      {
           korriban/kor1_breakablechainclip.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/kor1_lava.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/k_basic_statue.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/sand_phong1.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/cracktext.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/cracktext2.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/cracktext3.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/os_outsidebaseb.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/os_outsidebasef.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/os_rockb.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/os_sand.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/chain.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/chain_deform.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/chain_deform_autosprite.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/ragnos_statue_body.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/ragnos_statue_head.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/ragnos_statue_hands.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/korriban1_phong.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/korriban1_phongdirt.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/os_outsidebased.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/k_wall9b.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/os_basic_pillarb.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/door.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/entrance_top.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/orn_grate.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/k_floorlava.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/env_crystal.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/k_basic.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/k_basic2.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/k_basic3.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/k_basicfloor.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/k_basicfloor2.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/os_basewalk.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
           korriban/sand_phong1_vertex.wl         = { a = "Base" b = "korriban.shader" shader = "1" }
      }
      metashader.txlist = 
      {
           metashader/s_0.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/s_1.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/s_2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/s_0to1.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/s_0to2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/s_1to2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/canyon_0.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/canyon_1.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/canyon_2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/canyon_0to1.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/canyon_0to2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/canyon_1to2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/smswoop_0.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/smswoop_1.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/smswoop_2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/smswoop_0to1.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/smswoop_0to2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
           metashader/smswoop_1to2.wl         = { a = "Base" b = "metashader.shader" shader = "1" }
      }
      mp.txlist = 
      {
           mp/t_wall_halllights.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/t_wall_lightpanel.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/t_floor_hallway.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/t_floor_corner.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/t_floor_single.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/t_floor_cir.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/t_floor_sides.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/t_floor_rim.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/t_wall_lightpanel2.wl         = { a = "Base" b = "mp.shader" shader = "1" }
           mp/hoth_ctf_sky_top.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/hoth_ctf_sky_sides.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/hoth_ctf_fog.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/taspir_sky1.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/taspir_sky1b.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/taspir_fog1.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/desert_03.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/light_01_b.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/u_light02_1000.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/caulk_hull.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/fast_black.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/fast_white.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/h_basicwall_vert.wl         = { a = "Base" b = "mp3.shader" shader = "1" }
           mp/h_tatsky.wl         = { a = "Base" b = "mp4.shader" shader = "1" }
           mp/h_tatsky2.wl         = { a = "Base" b = "mp4.shader" shader = "1" }
           mp/h_sandstone.wl         = { a = "Base" b = "mp4.shader" shader = "1" }
           mp/h_yavin.wl         = { a = "Base" b = "mp4.shader" shader = "1" }
           mp/h_black_100.wl         = { a = "Base" b = "mp4.shader" shader = "1" }
           mp/h_fog_black.wl         = { a = "Base" b = "mp4.shader" shader = "1" }
           mp/h_hevil.wl         = { a = "Base" b = "mp4.shader" shader = "1" }
           mp/h_bomb.wl         = { a = "Base" b = "mp4.shader" shader = "1" }
           mp/s_black.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_black_fog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_duel3_fog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flatred_bright.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_spacectf1.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_redsky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_space.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_metalc.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_metalc_dark.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flatwhite.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flatblue.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flatred.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flatyellow.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flatyellow_nolight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight_d.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight2.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight3.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight3_bright.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight4.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight5.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight6.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight7.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_lightpanel1.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_lightpanel1_bright.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_lightpanel2.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_lightpanel2_bright.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_squarelight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_roundy.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_deathconlight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_squareslight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_squareslight_y.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_metal_hlight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_metal_vlight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_redstrip.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_redstrip2.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_redstrip3_nolight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_bluestrip.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_taspir.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_steptrim1.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_steptrim1_b.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_steptrim1_r.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_trim4b.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flare_blue.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_graywall.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_graywall_hr.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_graywall_dk.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_graywall_dk_hr.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_metal_lg.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_metal_lg_dk.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_metal_lg_d2.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_metal_lg_dk_d2.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_fatalsky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_ground.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_blue_flare.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_red_flare.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flare.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_rockwall.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_rockwall_nophong.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_kfog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_kor_sky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_ylight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_ylight_blue.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_ylight_red.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_kor_fog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_kor_fog2.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/kor_outside.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_bespin.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_bespin_fog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_bespin_white.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_bespin_brown.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjunsky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjun_fog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjun_light_strip.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjun_light_strip2.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjun_light_vjun.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjun_light_vjuny.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjun_u_light02.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjun_grate_light.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_vjun_lights.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_wall17.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flare_big.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_flare_yellow.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_rift_fog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_blacksky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_rift_newcolumn.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_bountysky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_hothsky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_hothpit_fog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_hoth_fog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_cliffwall1.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_cliffwall1_nophong.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_cliffwall1top.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_cliffwall1top_nophong.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_outground_phong.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_outground_nophong.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_outground_3_phong.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_outground_3_nophong.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_evilsky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_wall2_nophong.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_duel2sky.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/desert_03.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_thinlight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_thinlight_r.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/roofog.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_building_ext2test_r.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_tracklight_nolight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
           mp/s_ylight_nolight.wl         = { a = "Base" b = "mp2.shader" shader = "1" }
      }
      narshaddaa.txlist = 
      {
           narshaddaa/tunnellights.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/ll_tracklight.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/symbols.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/ll_smalllights.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/light1.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/fuelpump1.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/fuelpump2.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/fuelpump3.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/fuelpump4.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           narshaddaa/piller2_noclip.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_hideout/lightshaft.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_hideout/pipe1_ref.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_hideout/nscameraswitch.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/wall01.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/baselight1.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/baselight2.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/trimlights1.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/tracklight.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/wall08.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/tracklight_streets.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/barswitch.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/barswitchon.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/forceswitchred.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/forceswitchblue.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/eleswitch.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/eleswitchon.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/ns_screen_green.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
           nar_streets/flashred_glow.wl         = { a = "Base" b = "nar_shaddaa.shader" shader = "1" }
      }
      rail.txlist = 
      {
           rail/tower_light.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows3.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows_b.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/gripper_exhaust.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_tracklight.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/gripper.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_console.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_console2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_console_large.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows7.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/thinlight.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows4.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/neon_ad_1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/railtrim4.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/runner1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_light_inside.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/vent_panel.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/tanksymbol1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/tanksymbol2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/tanksymbol3.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows2_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows3_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows_b_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows7_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/windows4_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_console3.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_console4.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/fusebox2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/fusebox2_dam.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/tunnel_lights.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/brasspanel.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/railing3.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/blue_siderail.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/base_bronze_dark.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/base_bronze_dark_old.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/base_bronze_old.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/blue_base.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/base_bronze.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/caboose.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_floor2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_floor.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_pipe2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_pipe.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/railbase2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/railbase1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_walkway.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/roundplate4.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/roundplate2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/roundplate3.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/roundplate1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/trainend_basic.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/trainbasic2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/trainbasic1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/trainfloor.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/railtrim4_blue.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_console5.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/railing2_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/roundplate2_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/roundplate4_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_floor_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/base_bronze_dark_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/hull_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/hull2_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/hull3_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/pipe_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/pipes_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_basic_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_light_inside_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_pipe_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/rail_pipe2_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/railtrim4_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rail/tanker_noclip.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
      }
      rbettenbergtest.txlist = 
      {
           rbettenbergtest/t1_danger_sky.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/t1_danger_phong.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/t1_danger_streaked.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/korriban1_phong.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_water1.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_light1.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_glass1.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_waternodraw.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_waterfall1.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_bluefog.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_waterfall2.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_sky1.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_waterfall3.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/tcfoghull.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/tcfog.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/tc_lavatest.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_sky_dpredicament.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_light1_dpredicament.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/hevil_phongrock.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/rbettenbergtest_sky_hevil.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/hevil_phongrock2.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/taspir_phongrock.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           rbettenbergtest/taspir1_fog.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           danger/terrain_0.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           danger/terrain_1.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           danger/terrain_2.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           danger/terrain_0to1.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           danger/terrain_0to2.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           danger/terrain_1to2.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           danger/terrain_vertex.wl         = { a = "Base" b = "rbettenbergtest.shader" shader = "1" }
           sandcrawler/smsand.wl         = { a = "Base" b = "smsand.shader" shader = "1" }
           sandcrawler/ore.wl         = { a = "Base" b = "smsand.shader" shader = "1" }
           sandcrawler/d_bay.wl         = { a = "Base" b = "smsand.shader" shader = "1" }
           quicktrip/desert_0.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/desert_1.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/desert_2.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/desert_0to1.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/desert_0to2.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/desert_1to2.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/qt_basestone_phong.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/qt_stonefloor_phong.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/qt_uncut_phong.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/qt_wall2_phong.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/decal_grime_top.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/decal_grime_bttm.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/sandstone_phong.wl         = { a = "Base" b = "quicktrip.shader" shader = "1" }
           quicktrip/desert1_1.wl         = { a = "Base" b = "arioche.shader" shader = "1" }
           quicktrip/desert1_2.wl         = { a = "Base" b = "arioche.shader" shader = "1" }
           quicktrip/desert_flat.wl         = { a = "Base" b = "arioche.shader" shader = "1" }
           quicktrip/desert1_0.wl         = { a = "Base" b = "arioche.shader" shader = "1" }           
      }
      rift_rich_rmg.txlist = 
      {
           rift/env_crystal.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/carvedwall.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/carvedwall_lowalpha.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/glass_crystal.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol1.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol2.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol3.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol4.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol5.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol6.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol7.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol8.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol9.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol10.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol11.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/symbol12.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/rock3_phong.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/newcolumn.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/stone_rim.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/cobweb.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/piller_formal.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/thin_trim2.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/basepiller.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/base_ornate.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/basewall_ornate.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/cobweb2.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/env_crystal_red.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/env_crystal_green.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/env_crystal_blue.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/carved_symbol.wl         = { a = "Base" b = "rift.shader" shader = "1" }
           rift/rock_color_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           rich/crazywater.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/desert1_2.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/desert1_0.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/desert_flat.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/grassy1_1.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/grassy1_0.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/water1.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/jungle_4.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/jungle_3.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/jungle_2.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/jungle_1.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/jungle_flat.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/snow1_3.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/snow1_1.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/snow2_2.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
           rmg/grassy_flat.wl         = { a = "Base" b = "rich_rmg.shader" shader = "1" }
      }
      rocky_ruins.txlist = 
      {
           rocky_ruins/rock_phong.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/grate2.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/grate_light.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/r_floor2b.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/arrow1.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/arrow4_b.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/arrow1_b.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/arrow2.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/arrow2_b.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/arrow3.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/arrow3_b.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/arrow4.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/barsign_paint.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/screen2.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/screen5.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/screen4.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/screen3.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/halfwall_top_effect.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/grate3_effect.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/bluelight1.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/ticket_stubs.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/poster.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/palor_door_switch.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/parlor_switch1.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/parlor_switch2.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/parlor_switch3.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/parlor_switch4.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/newgrate.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/exit_arrows.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/rocky_light.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/grate.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/grating_new.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/metal2_top.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/metal1_bottom.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/metal1_top.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/metal2.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/metal2_bottom.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/metal1.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/pillar_side.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/r_floor.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/r_floor2.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/r_diwall.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/rancor_floor.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
           rocky_ruins/pilar_side_b.wl         = { a = "Base" b = "rocky_ruin.shader" shader = "1" }
      }
      rooftop.txlist = 
      {
           rooftop/light_hangar_surfacelight.wl         = { a = "Base" b = "imperial.shader" shader = "1" }
           rooftop/window_building_b.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/lightpost.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/lightpostsurfacelight.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/light_trim.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/light_trim2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/light.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext3.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext2test.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext4.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/window_building_trim.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/window2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/light2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/groundlight.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/light_vert.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/light_trim3.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/roundplate1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext5.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext6.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/traffica.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/trafficd.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/screen1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/screen2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext5b.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext2test_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext3_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext4_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/building_ext6_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/window_building_new.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/neon_circle.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/windowplate.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/roof_basewall.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/rooftop_light.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/windowplate_b.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/baseground.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/landing_pad.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/office_floor2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/office_floor_carpet_trim.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/office_floor_carpet2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/office_floor1.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/office_floor_carpet.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/walkway.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/walkway_civilian.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/walkway2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/window_building_ground3.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/window_building_ground2.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
           rooftop/window_building_ground.wl         = { a = "Base" b = "rail_roof.shader" shader = "1" }
      }
      siege.txlist = 
      {
           siege/snowwallphong1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/snowwallphong2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/snowwallphong3.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/snowfloorphong1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/skyportal_hoth.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/cliffwall1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/icetrans.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/outgroundlightmap.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/blacklight.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/desert.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/stuccowall.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/sand1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/korcolumn.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/korcliffside.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/korrock3.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/korrock3diffuse.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/osrockvertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/korportal.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/ore_lightemitting_lavapool.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/korlava.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/asteroidrock.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/desert_grime_tb.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/desert_stucco.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/desert_grime.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/siege2sand.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/hoth_sky.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/hoth_cliff1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege/ice_phong.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege1/terrain_0.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege1/terrain_1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege1/terrain_0to1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege1/terrain_vertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege3/terrain_0.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege3/terrain_1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege3/terrain_0to1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege3/terrain_vertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           kor/terrain_0.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           kor/terrain_1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           kor/terrain_2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           kor/terrain_0to1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           kor/terrain_0to2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           kor/terrain_1to2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           kor/terrain_vertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege2airbase/terrain_0.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege2airbase/terrain_1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege2airbase/terrain_2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege2airbase/terrain_0to1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege2airbase/terrain_0to2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege2airbase/terrain_1to2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           siege2airbase/terrain_vertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_0.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_3.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_0to1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_0to2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_0to3.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_1to2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_1to3.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_2to3.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korriban1/terrain_vertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korterra1/terrain_0.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korterra1/terrain_1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korterra1/terrain_2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korterra1/terrain_0to1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korterra1/terrain_0to2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korterra1/terrain_1to2.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           korterra1/terrain_vertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           crystallava/terrain_0.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           crystallava/terrain_1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           crystallava/terrain_0to1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           crystallava/terrain_vertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           crystallava/terrain_0.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           crystallava/terrain_1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           terradesert/terrain_0to1.wl         = { a = "Base" b = "siege.shader" shader = "1" }
           terradesert/terrain_vertex.wl         = { a = "Base" b = "siege.shader" shader = "1" }
      }      
      skies.txlist = 
      {
           skies/normallight.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/ships.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/bluelight.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/orangelight.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/test.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/test2.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/bespin.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/test3.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/right_light.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/test4.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/test5.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/kejim.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/kejim_light.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/new_test.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/artus_light.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/yavin.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/space.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/ice.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/col10.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/dm_col1.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/t1_fatal.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/t1_fatal.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/yavin_nodraw.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/desert.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/hevil.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/cloudlayer2.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/hoth.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/Wedge_sky.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/siege_1.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/siege_2.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/T1_Fatal_skybox.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/hevil_2.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/cloudlayer_test.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/boba_night.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/boba_late_afternoon.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/boba_afternoon.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/test_korriban1.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/rail_sun.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/korr2.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/cloudlayer_yavin.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/rogue_test.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/t2_dpred.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/dune.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/NarKreeta.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/korriban.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/Dosuun.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/Coruscant.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/byss.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/byss_mp.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/cloudlayer_surprise.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/vjun.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/ct.wl         = { a = "Base" b = "skies.shader" shader = "1" }
           skies/sky_nodraw.wl         = { a = "Base" b = "skies.shader" shader = "1" }
      }
      system.txlist = 
      {
           system/nodrop.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/blockplayer.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/blocknpc.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/clip.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/cushion.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/hint.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/origin.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/noimpact.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/areaportal.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/trigger.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/caulk.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/nodraw.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/weatherzone.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/nodraw_solid.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/nodraw_slime.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/mirror1.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/portal.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/portal_512.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/shotonlyclip.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/cluster_portal.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/do_not_enter.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/fog_black.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/outside.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/inside.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/physics_clip.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/terrain.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/ladder.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/mirror_yavin.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/slick.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/caulk_nonsolid.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/antiportal.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/skip.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/clipmodel_nodraw.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/caulk_water.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/caulk_lava.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/caulk_acid.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/lightgrid.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/viewscreen1.wl         = { a = "Base" b = "system.shader" shader = "1" }
           system/rainsurf.wl         = { a = "Base" b = "test.shader" shader = "1" }
           common/caulk.wl         = { a = "Base" b = "system.shader" shader = "1" }
           region.wl         = { a = "Base" b = "system.shader" shader = "1" }
           colors/black.wl         = { a = "Base" b = "system.shader" shader = "1" }
           colors/black_nomarks.wl         = { a = "Base" b = "system.shader" shader = "1" }
           colors/yellow.wl         = { a = "Base" b = "system.shader" shader = "1" }
           colors/white.wl         = { a = "Base" b = "system.shader" shader = "1" }
           colors/white2.wl         = { a = "Base" b = "system.shader" shader = "1" }
      }
      taspir.txlist = 
      {
           taspir/ore_lightemitting.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/ore_lightemitting_lavapool.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/ore_lightemitting_lavapool2.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/taspir_phongrock.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/grating_building2.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/taspir1_mapbase.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/taspir1_mapbase2.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/taspir1_mapbase3.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/taspir1_mapbase4.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/control1.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/control2.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/control3.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/control4.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/control6.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/landing_pad.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/taspir1_mapbase5.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/taspir1_mapbase_all.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/rust_glow_y.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/rust_glow_r.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/rust_glow_g.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/rust_glow_b.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/light_ceiling.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/t_wall5.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/lamp2_bulb.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/display_controls.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/display_controls2.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/display_controls3.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/lift_switch.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/lift_switch_off.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/display_controls4.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/power_tube.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/256_128rustv.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/panellong.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/smalltrim.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/t_trim2.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/door.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/door_off.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           taspir/floor.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           skies/taspir1.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
           fogs/taspir1_fog.wl         = { a = "Base" b = "taspir.shader" shader = "1" }
      }
      test.txlist = 
      {
           tests/glass_green.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glasspartition.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/test1.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/test2.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/test3.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glass1_opaque.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glass1.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glass_nolightmap.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glass_vertexlight.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/light_test.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/metal1.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/light_red.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/light_red2.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/light_blue.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/light_red3.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/forcefield.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/forcefield_2.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/temp5.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glass_reflective.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/floor_specular.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/floor_slick.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/energything3.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glass_portal.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/slick_tube.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/waste.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glass_security.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/mirror_floor2.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/forcefield_nonsolid.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/glass_security_border.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/forcefield_block.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/energything_block.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/mirror_floor.wl         = { a = "Base" b = "test.shader" shader = "1" }
           tests/droid_shield.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/elevatorup_on.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/elevatordown_on.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/control_ff_on.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/elevatorcall.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/ff_edge.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/light_red.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/light_white.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/elevatorup.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/elevatordown.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/crate.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/512_512lights.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/deathcon1a.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/deathcon1.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/deathcon2a.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/deathcon2.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/light_blue.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impdetention/light_white_flare.wl         = { a = "Base" b = "test.shader" shader = "1" }           
           shapes.wl         = { a = "Base" b = "test.shader" shader = "1" }
           lines.wl         = { a = "Base" b = "test.shader" shader = "1" }
           dots.wl         = { a = "Base" b = "test.shader" shader = "1" }
           impgarrison/blastdoor_lock.wl         = { a = "Base" b = "test.shader" shader = "1" }
           fogs/rain.wl         = { a = "Base" b = "test.shader" shader = "1" }           
      }
      vjun.txlist = 
      {
           vjun/grate.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/grate2.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/rocky_phong.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/wall14.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/vj4vertexphong.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/hangardoor.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/hangar_console.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/hangar_console2.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/hangar_console3.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/light_strip.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/light_strip2.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/wall_saberroom.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/door1_onoff.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/door2_onoff.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/o_door_onoff.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/lights3.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/light_vjun.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/vader_floor2.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/vader_trim3.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/floor3.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/wall8.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/vader_floor.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/walk_ceiling.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/vader_walkway.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/wall9.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/vader_trim2.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/grate1.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/light_vjun_amber.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/grate_light_amber.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/screen1.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/frametech.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/lightground.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/light2.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/tech.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/pipe_effect.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/circle_light.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/vader_switch.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/vader_switch_off.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/redlight_vjun.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/redlight_strip.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/redlights3.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/redgrate_light.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
           vjun/explosive_decal.wl         = { a = "Base" b = "vjun.shader" shader = "1" }           
           common/water_vjun.wl         = { a = "Base" b = "vjun.shader" shader = "1" }
      }
      wedge.txlist = 
      {
           wedge/large_tank_grate.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           wedge/large_tank_fins.wl         = { a = "Base" b = "factory.shader" shader = "1" }
           wedge/large_tank_cap.wl         = { a = "Base" b = "factory.shader" shader = "1" }           
           wedge/w_catwalk.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/w_door_onoff.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/powerpipe.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/flare_blue.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/w_door.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/w_con1.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/w_con2.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/w_con3.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/wall_tankcon.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/w_catwalk_r.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/largescreen2.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/pillar_light.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/w_btrim.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
           wedge/w_door2_onoff.wl         = { a = "Base" b = "wedge.shader" shader = "1" }
      }
      yavin.txlist = 
      {
           yavin/dirt1.wl         = { a = "Base" b = "jnegretetest.shader" shader = "1" }
           yavin/map.wl         = { a = "Base" b = "test.shader" shader = "1" }
           yavin/slipdirt.wl         = { a = "Base" b = "test.shader" shader = "1" }
           yavin/mrj_water.wl         = { a = "Base" b = "test.shader" shader = "1" }
           yavin/coolant_test.wl         = { a = "Base" b = "test.shader" shader = "1" }
           yavin/smooth_rock2_rain.wl         = { a = "Base" b = "test.shader" shader = "1" }
           yavin/grasspatchy_swampsprite.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/grasspatchy_reeds.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/grasspatchy_underwater.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/s_rock1_vines.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water1_2sided.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water1_temple.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water1_2sided_redux.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water1.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/gravel.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/light.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/light_blue.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ycamera.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/yswitch.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/yswitchon.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ydoorswitch.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ydoorswitchon.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/yeleswitchon.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/light_yellow.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water1_nofog.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/yeleswitch.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/rock2.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/crate03.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/control01.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/stone_tile2.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/temple_vinesalpha.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water_test.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water_test2.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water_test3.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water_test4.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water_test5.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/temple_illusion.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/slime.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/grasspatchy_sprite.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/grasspatchy_sm_sprite.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/dirtgrasscorner_sprite.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/dirtgrassedge_sprite.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/dirt1_sprite.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/grasspatchy2.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/doorlight_red.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/doorlight_green.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/swater1.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/swater1_2sided.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/swater_opaque_bottom.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/water_yavintrail.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/groundjungle.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/waterfall.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/tree06b_test.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/tree09b_test.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/mud_shadow.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ground_grasssprite.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/mud_sprites.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/tree1.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ground.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/groundplants.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/bblock3_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/stone_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/stone_walk_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/gardenwall3_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ceiling_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/stonewall2_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/strius_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/temple_interiorsmallwb_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ground_Phong_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ground_grasssprite_Phong_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/dugdirt_Phong.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ground_Phong.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ground_grasssprite_Phong.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/mud_sprites_Phong.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/supports_light.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/supports.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/tree_leaves.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/ground_plants.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/obsidian_templebasic2.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/obsidian_templebasic.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/obsidian_templebasic_trim.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           yavin/obsidian_templebasic_trim2.wl         = { a = "Base" b = "yavin.shader" shader = "1" }           
           bounty/flag.wl         = { a = "Base" b = "bounty.shader" shader = "1" }
           bounty/flag2.wl         = { a = "Base" b = "bounty.shader" shader = "1" }
           bounty/flag2_b.wl         = { a = "Base" b = "bounty.shader" shader = "1" }
           bounty/flag3.wl         = { a = "Base" b = "bounty.shader" shader = "1" }
           bounty/door_onoff.wl         = { a = "Base" b = "bounty.shader" shader = "1" }
           bounty/new_wall1_light.wl         = { a = "Base" b = "bounty.shader" shader = "1" }
           bounty/new_wall1_light_off.wl         = { a = "Base" b = "bounty.shader" shader = "1" }
           bounty/basic1_dark_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
           bounty/floor1_vertex.wl         = { a = "Base" b = "yavin.shader" shader = "1" }
      }
    } 
  } 
        
  JAEntities.qtx =
  {
    ToolBox = "New map items..."
    Root = "JA Entities.qtxfolder"
    JA Entities.qtxfolder =
    {
      Player Start.qtxfolder =
      {
        info_player_start:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        info_player_deathmatch:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        info_jedimaster_start:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        info_player_imperial:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        info_player_rebel:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        info_player_intermission:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        info_saga_objective:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
      }
      Weapon and Ammo.qtxfolder =
      {        
        weapon_concussion_rifle:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_blaster:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_blaster_pistol:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_bowcaster:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_bryar_pistol:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_demp2:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_det_pack:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_disruptor:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }        
        weapon_emplaced:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_flechette:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_repeater:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_rocket_launcher:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_saber:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_stun_baton:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_thermal:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        weapon_trip_mine:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        ammo_blaster:e =
        {
          ;desc = "Ammo for the Bryar and Blaster pistols"
          Origin = "0 0 0"
        }
        ammo_detpack:e =
        {
          ;desc = "3 pack of detpacks"
          Origin = "0 0 0"
        }
        ammo_force:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        ammo_metallic_bolts:e =
        {
          ;desc = "Ammo for Imperial Heavy Repeater and the Golan Arms Flechette"
          Origin = "0 0 0"
        }
        ammo_powercell:e =
        {
          ;desc = "Ammo for Tenloss Disruptor, Wookie Bowcaster, and the Destructive Electro Magnetic Pulse (demp2 ) guns"
          Origin = "0 0 0"
        }
        ammo_rockets:e =
        {
          ;desc = "Ammo for Merr-Sonn portable missile launcher"
          Origin = "0 0 0"
        }
        ammo_thermal:e =
        {
          ;desc = "Belt of thermal detonators"
          Origin = "0 0 0"
        }
        ammo_tripmine:e =
        {
          ;desc = "3 pack of tripmines"
          Origin = "0 0 0"
        }
      }
      Holocron.qtxfolder =
      {
        misc_holocron:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_grip:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_heal:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_levitation:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_lightining:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_pull:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_push:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_saberthrow:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_speed:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        holocron_force_telepathy:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
      }
      Func.qtxfolder =
      {
        func_bobbing:b =
        {
          ;desc = "Normally bobs on the Z axis"
          ;incl = "defpoly"
        }
        func_breakable:b =
        {
          ;desc = ""
          ;incl = "defpoly"
        }
        func_button:b =
        {
          ;desc = "When touched, moves in direction of it's angle, triggers targets, waits, then returns and can be triggered again"
          ;incl = "defpoly"
        }
        func_door:b =
        {
          ;desc = ""
          ;incl = "defpoly"
          Angle = "360"
        }        
        func_glass:b =
        {
          ;desc = ""
          ;incl = "defpoly"
        }
        func_group:b =
        {
          ;desc = "Used to group brushes together just for editor convenience. They are turned into normal brushes by the utilities"
          ;incl = "defpoly"
        }
        func_pendulum:b =
        {
          ;desc = "Need origin brush! Pendulums always swing north/south on unrotated models (by default)"
          ;incl = "defpoly"
        }
        func_plat:b =
        {
          ;desc = "Plats are always drawn in the extended position so they will light correctly"
          ;incl = "defpoly"
        }
        func_rotating:b =
        {
          ;desc = "Need to have an origin brush! Will rotate around the Z axis by default"
          ;incl = "defpoly"
        }
        func_static:b =
        {
          ;desc = "A bmodel that just sits there, doing nothing. Can be used for conditional walls and models"
          ;incl = "defpoly"
        }
        func_timer:e =
        {
          ;desc = "This should be renamed trigger_timer... Repeatedly fires its targets. Can be turned ON or OFF by using"
          Origin = "0 0 0"
        }
        func_train:b =
        {
          ;desc = "Moves between path_corner target points. MUST HAVE AN ORIGIN BRUSH. The train spawns at the first target it is pointing at"
          ;incl = "defpoly"
        }
        func_usable:b =
        {
          ;desc = "A bmodel that just sits there, doing nothing. Can be used for conditional walls and models"
          ;incl = "defpoly"
        }
        func_wall:b =
        {
          ;desc = "A bmodel that just sits there, doing nothing. Can be used for conditional walls and models"
          ;incl = "defpoly"
        }
      }
      Trigger.qtxfolder =
      {
        trigger_always:b =
        {
          ;desc = "This trigger will always fire. It is activated by the world"
          ;incl = "defpoly"
        }
        trigger_entdist:b =
        {
          ;desc = "fires if the given entity is within the given distance. Sets itself inactive after one use"
          ;incl = "defpoly"
        }        
        trigger_hurt:b =
        {
          ;desc = "Any entity that touches this will be hurt. It does dmg points of damage each server frame"
          ;incl = "defpoly"
        }
        trigger_location:b =
        {
          ;desc = "When an ent is asked for it's location, it will return this ent's message field if it is in it. Always rectangular"
          ;incl = "defpoly"
        }
        trigger_multiple:b =
        {
          ;desc = "Variable sized repeatable trigger. Must be targeted at one or more entities"
          ;incl = "defpoly"
        }
        trigger_once:b =
        {
          ;desc = "Variable sized trigger. Must be targeted at one or more entities."
          ;incl = "defpoly"
        }
        trigger_push:b =
        {
          ;desc = "Must point at a target_position, which will be the apex of the leap"
          ;incl = "defpoly"
        }
        trigger_shipboundary:b =
        {
          ;desc = "causes vehicle to turn toward target and travel in that direction for a set time when hit"
          ;incl = "defpoly"
        }
        trigger_space:b =
        {
          ;desc = "causes human clients to suffocate and have no gravity"
          ;incl = "defpoly"
        }
        trigger_teleport:b =
        {
          ;desc = "Prediction of teleportation events. Must point at a target_position, which will be the teleport destination."
          ;incl = "defpoly"
        }
        trigger_visible:e =
        {
          ;desc = "Only fires when player is looking at it, fires only once then removes itself"
          Origin = "0 0 0"
        }
      }
      Target.qtxfolder =
      {
        info_null:e =
        {
          ;desc = "Used as a positional target for calculations in the utilities (spotlights, etc), but removed during gameplay"
          Origin = "0 0 0"
        }
        info_notnull:e =
        {
          ;desc = "Used as a positional target for in-game calculation, like jumppad targets. target_position does the same thing"
          Origin = "0 0 0"
        }
        ref_tag:e =
        {
          ;desc = "These tags can later be refered to by the scripting system so that their origins and angles can be referred to"
          Origin = "0 0 0"
          Angles = "360 0 0"
        }
        target_activate:e =
        {
          ;desc = "Will set the target(s) to be usable/triggerable"
          Origin = "0 0 0"
        }
        target_autosave:e =
        {
          ;desc = "Auto save the game. Make sure it won't trigger during dialogue or cinematic or it will stutter!"
          Origin = "0 0 0"
        }
        target_change_parm:e =
        {
          ;desc = "Copies any parms set on this ent to the entity that fired the trigger/button/whatever that uses this"
          Origin = "0 0 0"
        }
        target_counter:e =
        {
          ;desc = "Acts as an intermediary for an action that takes multiple inputs"
          Origin = "0 0 0"
        }
        target_deactivate:e =
        {
          ;desc = "Will set the target(s) to be non-usable/triggerable"
          Origin = "0 0 0"
        }
        target_delay:e =
        {
          ;desc = "pause before firing targets"
          Origin = "0 0 0"
        }
        target_friction_change:e =
        {
          ;desc = "Change friction (ise, normal, etc)"
          Origin = "0 0 0"
        }
        target_give:e =
        {
          ;desc = "Gives the activator all the items pointed to"
          Origin = "0 0 0"
        }
        target_gravity_change:e =
        {
          ;desc = "changes level gravity"
          Origin = "0 0 0"
        }
        target_interest:e =
        {
          ;desc = "A point that a squadmate will look at if standing still"
          Origin = "0 0 0"
        }
        target_kill:e =
        {
          ;desc = "Kills the activator"
          Origin = "0 0 0"
        }
        target_laser:e =
        {
          ;desc = "When triggered, fires a laser. You can either set a target or a direction."
          Origin = "0 0 0"
        }
        target_level_change:e =
        {
          ;desc = "level change"
          Origin = "0 0 0"
        }
        target_location:e =
        {
          ;desc = "Set message to the name of this location"
          Origin = "0 0 0"
        }
        target_play_music:e =
        {
          ;desc = "Plays the requested music files when this target is used"
          Origin = "0 0 0"
        }
        target_position:e =
        {
          ;desc = "Used as a positional target for in-game calculation, like jumppad targets. info_notnull does the same thing"
          Origin = "0 0 0"
        }
        target_print:e =
        {
          ;desc = "Print message on the center of screen"
          Origin = "0 0 0"
        }
        target_push:e =
        {
          ;desc = "When triggered, pushes the activator in the direction of angles"
          Origin = "0 0 0"
        }
        target_random:e =
        {
          ;desc = "Randomly fires off only one of it's targets each time used"
          Origin = "0 0 0"
        }
        target_relay:e =
        {
          ;desc = "This doesn't perform any actions except fire its targets. The activator can be forced to be from a certain team"
          Origin = "0 0 0"
        }
        target_remove_powerups:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        target_score:e =
        {
          ;desc = "The activator is given this many points"
          Origin = "0 0 0"
        }
        target_scriptrunner:e =
        {
          ;desc = "Script to run when used"
          Origin = "0 0 0"
        }
        target_secret:e =
        {
          ;desc = "You found a Secret!"
          Origin = "0 0 0"
        }
        target_speaker:e =
        {
          ;desc = "A sound will play on the level"
          Origin = "0 0 0"
        }
        target_teleporter:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }        
      }
      Light.qtxfolder =
      {
        light:e =
        {
          origin = "0 0 0"
          light = "300"
          _color = "1.0 1.0 1.0"
        }
        lightJunior:e =
        {
          ;desc = "Non-displayed light that only affects dynamic game models, but does not contribute to lightmaps"
          origin = "0 0 0"
          light = "300"
          _color = "1.0 1.0 1.0"
        }
        misc_dlight:e =
        {
          ;desc = "Dynamic light, toggles on and off when used"
          origin = "0 0 0"
        }
        misc_spotlight:e =
        {
          ;desc = "Search spotlight that must be targeted at a func_train or other entity. Uses its target2 when it detects the player"
          Origin = "0 0 0"
          Angle = "360"
        }
      }
      Item.qtxfolder =
      {
        item_bacta:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_battery:e =
        {
          ;desc = "battery pickup item"
          Origin = "0 0 0"
        }
        item_binoculars:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_datapad:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_force_boon:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_force_enlighten:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_force_enlighten_light:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_force_enlighten_dark:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_goodie_key:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_health:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_la_goggles:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_medpac:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_medpak_instant:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_security_key:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_seeker:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_sentry_gun:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_shield:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_shield_lrg_instant:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_shield_sm_instant:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
        item_ysalimari:e =
        {
          ;desc = ""
          Origin = "0 0 0"
        }
      }
      Misc.qtxfolder =
      {
        emplaced_eweb:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        emplaced_gun:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_ammo_floor_unit:e =
        {
          ;desc = "Gives ammo energy when used"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_atst_drivable:e =
        {
          ;desc = "ATST - Drivable"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_bsp:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_camera:e =
        {
          ;desc = "Model of a Security Camera in the world that can be used by the player to look through it's viewpoint"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_crystal_crate:e =
        {
          ;desc = "Open crate of crystals that explode when shot"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_exploding_crate:e =
        {
          ;desc = "Basic exploding crate"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_gas_tank:e =
        {
          ;desc = "Basic exploding oxygen tank"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_ion_cannon:e =
        {
          ;desc = "Huge ion cannon, like the ones at the rebel base on Hoth"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_laser_arm:e =
        {
          ;desc = "What it does when used depends on it's count (can be set by a script)"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_maglock:e =
        {
          ;desc = "Place facing a door (using the angle, not a targetname). Can only be destroyed by lightsaber and will automatically unlock the door it's attached to"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model:e =
        {
          ;desc = "turns into BSP triangles - not solid by default (click SOLID or use _clipmodel shader)"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_ammo_power_converter:e =
        {
          ;desc = "Gives ammo energy when used"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_ammo_rack:e =
        {
          ;desc = "Ammo Rack"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_beacon:e =
        {
          ;desc = "An animating beacon model"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_bomb_planted:e =
        {
          ;desc = "Planted by evil men for evil purposes"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_breakable:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_cargo_small:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_ghoul:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_gun_rack:e =
        {
          ;desc = "Gun Rack"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_jabba_cam:e =
        {
          ;desc = "The eye camera that popped out of Jabba's front door"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_shield_power_converter:e =
        {
          ;desc = "Gives shield energy when used"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_static:e =
        {
          ;desc = "loaded as a model in the renderer - does not take up precious bsp space!"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_model_welder:e =
        {
          ;desc = "When 'on' emits sparks from it's welding points"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_ns_turret:e =
        {
          ;desc = "NS turret that only hangs from the ceiling, will aim and shoot at enemies"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_panel_turret:e =
        {
          ;desc = "Creates a turret that, when the player uses a panel, takes control of this turret and adopts the turret view"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_portal_camera:e =
        {
          ;desc = "The target for a misc_portal_surface. You can set either angles or target another entity (NOT an info_null) to determine the direction of view"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_portal_surface:e =
        {
          ;desc = "Portal surface nearest this will show a view from targeted misc_portal_camera, or a mirror if untargeted. This must be within 64 world units of the surface!"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_security_panel:e =
        {
          ;desc = "A model that just sits there and opens when a player uses it and has right key"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_sentry_turret:e =
        {
          ;desc = "personal assault sentry, like the ones you can carry in your inventory"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_shield_floor_unit:e =
        {
          ;desc = "Gives shield energy when used"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_skyportal:e =
        {
          ;desc = "Put it in the sky room"
          Origin = "0 0 0"          
        }
        misc_trip_mine:e =
        {
          ;desc = "Place in a map and point the angles at whatever surface you want it to attach to"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_turret:e =
        {
          ;desc = "Turret that hangs from the ceiling, will aim and shoot at enemies"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_weapon_shooter:e =
        {
          ;desc = "Weapon shooter"
          Origin = "0 0 0"
          Angle = "360"
        }
        misc_weather_zone:b =
        {
          ;desc = "Determines a region to check for weather contents. Place surrounding your inside/outside brushes"
          Origin = "0 0 0"
          Angle = "360"
        }
        object_cargo_barrel1:e =
        {
          ;desc = "Cargo Barrel, if given a targetname, using it makes it explode"
          Origin = "0 0 0"
          Angle = "360"
        }
      }
      Waypoint.qtxfolder =
      {
        waypoint:e =
        {
          ;desc = "An entity for AI navigation, place to go"
          Origin = "0 0 0"
        }
        waypoint_small:e =
        {
          ;desc = "An entity for AI navigation, with a radius 2 units for best accuracy of AI movements (not used in original game)"
          Origin = "0 0 0"
        }
        waypoint_navgoal:e =
        {
          ;desc = "A waypoint for script navgoals. Not included in navigation data if NO_AUTO_CONNECT checked"
          Origin = "0 0 0"
        }
        point_combat:e =
        {
          ;desc = "NPCs in bState BS_COMBAT_POINT will find their closest empty combat_point"
          Origin = "0 0 0"
        }
        path_corner:e =
        {
          ;desc = "Train path corners"
          Origin = "0 0 0"
        }
        rail_track:b =
        {
          ;desc = "A rail track determines what location and direction rail_mover entities go. Don't bother with any origin brushes"
          Origin = "0 0 0"
        }
        rail_lane:b =
        {
          ;desc = "Use rail lanes to split up tracks. Just target it to a track that you want to break up into pieces"
          Origin = "0 0 0"
        }
        rail_mover:b =
        {
          ;desc = "Rail Mover will go along the track and lane of your choice. Just target it to either a track or a lane. Don't bother with any origin brushes"
          Origin = "0 0 0"
        }
      }
      FX.qtxfolder =
      {
        fx_cloudlayer:e =
        {
          ;desc = "Creates a scalable scrolling cloud layer, mostly for bespin undercity but could be used other places"
          Origin = "0 0 0"
        }
        fx_explosion_trail:e =
        {
          ;desc = "Can be used for something like a meteor, damaging things as it moves through the environment. Just add an impact effect (fxFile2) and a splashDamage and splashRadius"
          Origin = "0 0 0"
        }
        fx_rain:e =
        {
          ;desc = "This world effect will spawn rain globally into the level"
          Origin = "0 0 0"
        }
        fx_runner:e =
        {
          ;desc = "Runs the specified effect, can also be targeted at an info_notnull to orient the effect"
          Origin = "0 0 0"
          angle = "180"
        }
        fx_snow:e =
        {
          ;desc = "This world effect will spawn snow globally into the level"
          Origin = "0 0 0"
        }
        fx_target_beam:e =
        {
          ;desc = "Emits specified effect file, doing damage if required"
          Origin = "0 0 0"
        }
        fx_wind:e =
        {
          ;desc = "Generates global wind forces"
          Origin = "0 0 0"
          Angle = "360"
        }
        fx_wind_zone:e =
        {
          ;desc = "Generates local wind forces"
          Origin = "0 0 0"
          Angle = "360"
        }
      }
      Team.qtxfolder =
      {
        team_CTF_redflag:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        team_CTF_redplayer:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        team_CTF_redspawn:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        team_CTF_blueflag:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        team_CTF_blueplayer:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        team_CTF_bluespawn:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
        team_CTF_neutralflag:e =
        {
          ;desc = ""
          Origin = "0 0 0"
          Angle = "360"
        }
      }
      NPC.qtxfolder =
      {
        NPC_Heroes.qtxfolder =
        {
        NPC_Alora:e =
        {
          ;desc = "Lightsaber and level 2 force powers, 300 health"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_BobaFett:e =
        {
          ;desc = "Boba Fett"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Chewbacca:e =
        {
          ;desc = "Chewbacca - yeti"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Desann:e =
        {
          ;desc = "Desann"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Galak:e =
        {
          ;desc = "Officer Galak, may use Mech"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Jan:e =
        {
          ;desc = "Jan Ors"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Kothos:e =
        {
          ;desc = "Brothers. Force only. Will be set up to re-inforce their leader (use SET_LEADER) by healing them, recharging them, keeping the player away, etc"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Kyle:e =
        {
          ;desc = "Kyle Katarn"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Lando:e =
        {
          ;desc = "Lando Calrissian"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Lannik_Racto:e =
        {
          ;desc = "Lannik Racto"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Luke:e =
        {
          ;desc = "Luke Skywalker"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_MonMothma:e =
        {
          ;desc = "Mon Mothma"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_MorganKatarn:e =
        {
          ;desc = "Morgan Katarn"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Ragnos:e =
        {
          ;desc = "Ragnos"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Rax:e =
        {
          ;desc = "Rax"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Reelo:e =
        {
          ;desc = "Reelo Baruk"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Rosh_Penin:e =
        {
          ;desc = "Rosh Penin"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Tavion:e =
        {
          ;desc = "Tavion"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Tavion_New:e =
        {
          ;desc = "Has a red lightsaber and force powers, uses her saber style from JK2"
          Origin = "0 0 0"
          Angle = "360"
        }
        }
        NPC_Droids.qtxfolder =
        {
        NPC_Droid_Assassin:e =
        {
          ;desc = "droid with blaster and shield"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_ATST:e =
        {
          ;desc = "ATST - AI Controlled"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Interrogator:e =
        {
          ;desc = "Interrogator Droid"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Gonk:e =
        {
          ;desc = "Gonk Droid - the droid that looks like a walking ice machine. Was in the Jawa land crawler, walking around talking to itself"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Mark1:e =
        {
          ;desc = "Big walking droid, very hard enemy"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Mark2:e =
        {
          ;desc = "Small rolling droid with one gun"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Mouse:e =
        {
          ;desc = "Mouse Droid - small, box shaped droid, first seen on the Death Star. Chewie yelled at it and it backed up and ran away"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Probe:e =
        {
          ;desc = "Imperial Probe Droid - the multilegged floating droid that Han and Chewie shot on the ice planet Hoth"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Protocol:e =
        {
          ;desc = "Protocol Droid"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_R2D2:e =
        {
          ;desc = "R2D2 Droid - you probably know this one already"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_R5D2:e =
        {
          ;desc = "R5D2 Droid - the droid originally chosen by Uncle Owen until it blew a bad motivator, and they took R2D2 instead"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Remote:e =
        {
          ;desc = "Remote Droid - the floating round droid used by Obi Wan to train Luke about the force while on the Millenium Falcon"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Saber:e =
        {
          ;desc = "training droid with saber"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Seeker:e =
        {
          ;desc = "Seeker Droid - floating round droids that shadow troopers spawn"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Droid_Sentry:e =
        {
          ;desc = "Sentry Droid - Large, armored floating Imperial droids with 3 forward-facing gun turrets"
          Origin = "0 0 0"
          Angle = "360"
        }
        } 
        NPC_Monsters.qtxfolder =
        {
        NPC_MineMonster:e =
        {
          ;desc = "Mine Monster"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Claw:e =
        {
          ;desc = "???"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Fish:e =
        {
          ;desc = "???"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Flier2:e =
        {
          ;desc = "???"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Glider:e =
        {
          ;desc = "flying as pterodactyle"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Howler:e =
        {
          ;desc = "Lizard with ultra-sound choke"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Lizard:e =
        {
          ;desc = "???"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Murjj:e =
        {
          ;desc = "???"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Mutant_Rancor:e =
        {
          ;desc = "Bigger, meaner, nastier, Frencher. Breath attack, pound attack"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Rancor:e =
        {
          ;desc = "2000 health, picks people up and eats them"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Sand_Creature:e =
        {
          ;desc = "worm-formed undergound monster"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Swamp:e =
        {
          ;desc = "???"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Monster_Wampa:e =
        {
          ;desc = "Big snow monster as yeti"
          Origin = "0 0 0"
          Angle = "360"
        }
        }
        NPC_spawner:e =
        {
          ;desc = "Spawn dedicated NPC. If targeted, will only spawn a NPC when triggered"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Player:e =
        {
          ;desc = "player characters"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Vehicle:e =
        {
          ;desc = "set NPC_type to vehicle name in vehicles.dat"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Bartender:e =
        {
          ;desc = "Bartender"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_BespinCop:e =
        {
          ;desc = "Bespin Cop"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Cultist:e =
        {
          ;desc = "Cultist uses a blaster and force powers. 40 health"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Cultist_Commando:e =
        {
          ;desc = "Cultist uses dual blaster pistols and force powers. 40 health"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Cultist_Destroyer:e =
        {
          ;desc = "Cultist has no weapons, runs up to you chanting & building up a Force Destruction blast - when gets to you, screams and explodes"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Cultist_Saber:e =
        {
          ;desc = "Uses a saber and no force powers. 100 health. Default fencer uses fast style - weak, but can attack rapidly. Good defense"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Cultist_Saber_Powers:e =
        {
          ;desc = "Uses a saber and has a couple low-level powers. 150 health. Default fencer uses fast style - weak, but can attack rapidly. Good defense"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Imperial:e =
        {
          ;desc = "Imperial, greyshirt grunt, uses blaster pistol, 20 health"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_ImpWorker:e =
        {
          ;desc = "Imperial Worker"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Gran:e =
        {
          ;desc = "Gran, Uses grenade"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_HazardTrooper:e =
        {
          ;desc = "BIG Mecha Trooper, 250 health, repeater"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Human_Merc:e =
        {
          ;desc = "100 health, blaster rifle"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Jawa:e =
        {
          ;desc = "Little Jawa from the Tatooin"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Jedi:e =
        {
          ;desc = "Jedi, Ally Jedi NPC Buddy - tags along with player"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Merchant:e =
        {
          ;desc = "Merchant"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Noghri:e =
        {
          ;desc = "Blue"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Prisoner:e =
        {
          ;desc = "Prisoner"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Rebel:e =
        {
          ;desc = "Rebel"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Reborn:e =
        {
          ;desc = "Reborn Jedi. Default Reborn is a poor lightsaber fighter, acrobatic and uses no force powers. 40 health."
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Reborn_New:e =
        {
          ;desc = "Reborn is an excellent lightsaber fighter, acrobatic and uses force powers. Full-length red saber, 200 health"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_RocketTrooper:e =
        {
          ;desc = "200 health, flies, rockets"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Rodian:e =
        {
          ;desc = "Rodian"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Saboteur:e =
        {
          ;desc = "Has a blaster rifle, can cloak and roll"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_ShadowTrooper:e =
        {
          ;desc = "Shadow Trooper"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Snowtrooper:e =
        {
          ;desc = "Snow trooper, 30 health, blaster"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Stormtrooper:e =
        {
          ;desc = "Storm Trooper, white, 30 health, blaster"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_SwampTrooper:e =
        {
          ;desc = "Swamp Trooper"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Tie_Pilot:e =
        {
          ;desc = "Tie Pilot, 30 health, blaster"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Trandoshan:e =
        {
          ;desc = "Trandoshan"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Tusken:e =
        {
          ;desc = "Tusken bandits"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Ugnaught:e =
        {
          ;desc = "Ugnaught"
          Origin = "0 0 0"
          Angle = "360"
        }
        NPC_Weequay:e =
        {
          ;desc = "Weequay"
          Origin = "0 0 0"
          Angle = "360"
        }
      }
    }
  }
  Entity forms.qctx =
  {
    // Definition of "includes"
      t_modelbrowser:incl = 
      {
            Typ = "EP"
            DefExt = "md3"
            BasePath = "$Game\base\models"
            CutPath = "$Game\base\?"
            DirSep = "/"
            AugPath = "models"
      }
      t_efxbrowser:incl = 
      {
            Typ = "EP"
            DefExt = "efx"
            BasePath = "$Game\base\effects"
            CutPath = "$Game\base\?\"
            DirSep = "/"
      }
      t_scriptbrowser:incl = 
      {
            Typ = "EP"
            DefExt = "ibi"
            BasePath = "$Game\base\scripts"
            CutPath = "$Game\base\?\"
            DirSep = "/"
      }
      t_soundbrowser:incl = 
      {
            Typ = "EP"
            DefExt = "wav; *.mp3"
            BasePath = "$Game\base\sound"
            CutPath = "$Game\base\?"
            DirSep = "/"
            AugPath = "sound"
      }
  }
  Entity forms.fctx =
  {
    misc_crystal_crate:form =
    {
      bbox = '-34 -34 0 34 34 44'
      mdl = "models/map_objects/imp_mine/crate_open.md3"
      health: =
      {
        txt = "&"
        hint = "how much health the crate has, default 80"
        type = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "radius to do damage in, default 80"
        type = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "amount of damage to do when it explodes, default 40"
        type = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "auto-explodes"
        type = "E"
      }
      target: =
      {
        txt = "&"
        hint = "what to use when it dies"
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "NON_SOLID"
        Hint = "can only be shot"
      }
    }
    misc_spotlight:form =
    {
      bbox = '-10 -10 0 10 10 10'
      mdl = "models/map_objects/imp_mine/spotlight.md3"
      target: =
      {
        txt = "&"
        hint = "What to point at"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "What to use when detects player"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Toggles it on/off"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "START_OFF"
        Hint = "Starts off"
      }
    }
    misc_ion_cannon:form =
    {
      bbox = '-140 -140 0 140 140 320'
      mdl = "models/map_objects/imp_mine/ioncannon.md3"
      wait: =
      {
        txt = "&"
        hint = "How fast it shoots (default 1500 ms between shots, can't be le"
         "ss than 500 ms)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "milliseconds wait variation (default 400 ms...up to plus or mi"
         "nus .4 seconds)"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "Number of milliseconds between bursts (default 6000 ms, can't "
         "be less than 1000 ms, only works when BURSTS checked)"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "default 2000"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "how much damage to do when it dies, must be greater than 0 to "
         "actually work"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "damage radius, must be greater than 0 to actually work"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "What to use when destroyed"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Toggles it on/off"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "What to use when it fires a shot."
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        typ = "X1"
        hint = "Starts off"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BURSTS"
        typ = "X2"
        hint = "adds more variation, shots come out in bursts"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHIELDED"
        typ = "X4"
        hint = "cannon is shielded, any kind of shot bounces off"
      }
    }
    misc_model_welder:form =
    {
      mdl = "models/map_objects/cairn/welder.md3"
      bbox = '-16 -16 -16 16 16 16'
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        typ = "X1"
        hint = "welder starts off, using it toggles it on/off"
      }
    }
    misc_holocron:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      count: =
      {
        typ = "C"
        txt = "&"
        hint = "Set to type of holocron (based on force power value)"
        items = "HEAL"$0D"JUMP"$0D"SPEED"$0D"PUSH"$0D"PULL"$0D"TELEPATHY"$0D"G"
         "RIP"$0D"LIGHTNING"$0D"RAGE"$0D"PROTECT"$0D"ABSORB"$0D"TEAM HEAL"$0D"T"
         "EAM FORCE"$0D"DRAIN"$0D"SEE"$0D"SABERATTACK"$0D"SABERDEFEND"$0D"SABE"
         "RTHROW"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"1"
         "0"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"$0D"16"$0D"17"
      }
    }
    misc_model_ghoul:form =
    {
      bbox = '-16 -16 -37 16 16 32'
      health: =
      {
        txt = "&"
        hint = "how much health the model has - default 60 (zero makes non-bre"
         "akable)"
        typ = "E"
      }
      model: =
      {
        txt = "&"
        hint = "arbitrary .glm file to display"
        typ = "E"
      }
    }
    misc_portal_camera:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = "You can set either angles or target another entity (NOT an inf"
         "o_null) to determine the direction of view."
        typ = "E"
      }
      roll: =
      {
        txt = "&"
        hint = "angle modifier to orient the camera around the target vector"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SLOWROTATE"
        hint = ""
        typ = "x1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FASTROTATE"
        hint = ""
        typ = "X2"
      }
    }
    misc_security_panel:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      mdl = "models/map_objects/kejim/sec_panel.md3"
      target: =
      {
        txt = "&"
        hint = "thing to use when successfully opened"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "thing to use when player uses the panel without the key"
        typ = "E"
      }
      message: =
      {
        txt = "&"
        hint = "name of the key player must have"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "Start off, has to be activated to be usable"
        typ = "X128"
      }
    }
    misc_exploding_crate:form =
    {
      mdl = "models/map_objects/nar_shaddar/crate_xplode.md3"
      bbox = '-24 -24 0 24 24 64'
      target: =
      {
        txt = "&"
        hint = "what to use when it dies"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "auto-explodes"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "radius to do damage in - default 128"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "amount of damage to do when it explodes - default 50"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much health the model has - default 40 (zero makes non-bre"
         "akable)"
        typ = "E"
      }
    }
    misc_model_gun_rack:form =
    {
      bbox = '-14 -14 -4 14 14 30'
      mdl = "models/map_objects/kejim/weaponsrack.md3"
      spawnflags: =
      {
        txt = "&"
        cap = "BLASTER"
        hint = "Puts one or more blaster guns on the rack."
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "REPEATER"
        hint = "Puts one or more repeater guns on the rack."
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ROCKET"
        hint = "Puts one or more rocket launchers on the rack."
        typ = "X4"
      }
    }
    misc_trip_mine:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      targetname: =
      {
        txt = "&"
        hint = "starts off, when used, turns on (toggles)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_ON"
        hint = "If you give it a targetname to make it toggle-able, but want i"
         "t to start on, set this flag"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BROADCAST"
        hint = "ONLY USE THIS IF YOU HAVE TO!  causes the trip wire and loop s"
         "ound to always happen, use this if the beam drops out in certain sit"
         "uations"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        hint = "it will start completely off until used"
        typ = "X4"
      }
    }
    misc_model_bomb_planted:form =
    {
      bbox = '-16 -16 0 16 16 70'
      health: =
      {
        txt = "&"
        hint = "please don't shoot the thermonuclear device"
        typ = "E"
      }
      forcevisible: =
      {
        txt = "&"
        hint = "When you turn on force sight, you can see these"
        typ = "E"
      }
    }
    misc_model_beacon:form =
    {
      bbox = '-16 -16 0 16 16 24'
      mdl = "models/map_objects/wedge/beacon.md3"
      model: =
      {
        txt = "&"
        items = "models/map_objects/wedge/beacon.md3"
        hint = ".md3 model"
        typ = "C"
      }      
      forcevisible: =
      {
        txt = "&"
        hint = "When you turn on force sight, you can see these"
        typ = "E"
      }
    }
    misc_maglock:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = "thing to use when destoryed (not doors - it automatically unlo"
         "cks the door it was angled at)"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "default is 10"
        typ = "E"
      }
    }
    misc_model_shield_power_converter:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      mdl = "models/items/psd_big.md3"
      health: =
      {
        txt = "&"
        hint = "how much health the model has - default 60 (zero makes non-bre"
         "akable)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "the amount of ammo given when used (default 100)"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "what to use when it dies"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "dies and displays damagemodel when used, if any (if not, remov"
         "es itself)"
        typ = "E"
      }
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USETARGET"
        hint = "when used it fires off target"
        typ = "X8"
      }
    }
    misc_model_cargo_small:form =
    {
      bbox = '-14 -14 -4 14 14 30'
      mdl = "models/map_objects/kejim/cargo_small.md3"
      health: =
      {
        txt = "&how much damage to take before blowing up ( default 25 )"
        hint = ""
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "damage range when it explodes ( default 96 )"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "damage to do within explode range ( default 1 )"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MEDPACK"
        hint = "instant use medpacks"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHIELDS"
        hint = "instant shields"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BACTA"
        hint = "bacta tanks"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BATTERIES"
        hint = "batteries"
        typ = "X8"
      }
    }
    misc_model_ammo_rack:form =
    {
      bbox = '-14 -14 -4 14 14 30'
      mdl = "models/map_objects/kejim/weaponsrung.md3"
      spawnflags: =
      {
        txt = "&"
        cap = "BLASTER"
        hint = "Adds one or more ammo packs that are compatible with Blasters "
         "and the Bryar pistol."
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "METAL_BOLTS"
        hint = "Adds one or more metal bolt ammo packs that are compatible wit"
         "h the heavy repeater and the flechette gun"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ROCKETS"
        hint = "Puts one or more rocket packs on a rack."
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "WEAPON"
        hint = "adds a weapon matching a selected ammo type to the rack."
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "HEALTH"
        hint = "adds a health pack to the top shelf of the ammo rack"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PWR_CELL"
        hint = "Adds one or more power cell packs that are compatible with the"
         " Disuptor, bowcaster, and demp2"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_FILL"
        hint = "Only puts selected ammo on the rack, it never fills up all thr"
         "ee slots if only one or two items were checked"
        typ = "X64"
      }
    }
    misc_model_jabba_cam:form =
    {
      mdl = "models/map_objects/nar_shaddar/jabacam.md3"
      bbox = '0 -8 0 60 8 16'
      targetname: =
      {
        txt = "&"
        hint = "Toggles it on/off"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "EXTENDED"
        hint = "Starts in the extended position"
        typ = "X1"
      }
    }
    misc_camera:form =
    {
      bbox = '-8 -8 -12 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "how long to wait between being used (default 0.5)"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "camera will remain pointed at this entity (if it's a train or "
         "some other moving object, it will keep following it)"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "when player is in this camera and hits the use button, it will"
         " cycle to this next camera (if no target2, returns to normal view )"
        typ = "E"
      }
      target3: =
      {
        txt = "&"
        hint = "thing to use when player enters this camera view"
        typ = "E"
      }
      target4: =
      {
        txt = "&"
        hint = "thing to use when player leaves this camera view"
        typ = "E"
      }
      closetarget: =
      {
        txt = "&"
        hint = "fired this when it's destroyed"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "VULNERABLE"
        hint = "allow camera to be destroyed"
        typ = "X1"
      }
    }
    misc_ns_turret:form =
    {
      bbox = '-8 -8 -32 8 8 29'
      wait: =
      {
        txt = "&"
        hint = "Time between shots (default 150 ms)"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "How much damage each shot does (default 5)"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "How much damage it can take before exploding (default 100)"
        typ = "E"
      }
      radius: =
      {
        txt = "&"
        hint = "How far away an enemy can be for it to pick it up (default 512"
         ")"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "How much damage the explosion does. If either splashDamage or "
         "splashRadius are 0, it will not make an explosion"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "The radius of the explosion. If either splashRadius or splashD"
         "amage are 0, it will not make an explosion"
        typ = "E"
      }
      team: =
      {
        txt = "&"
        hint = "team that is not targeted by and does not take damage from thi"
         "s turret [player, enemy (default), neutral]"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "What to use when destroyed"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Toggles it on/off"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        hint = "Starts off"
        typ = "X1"
      }
    }
    misc_panel_turret:form =
    {
      bbox = '-8 -8 -12 8 8 16'
      speed: =
      {
        txt = "&"
        hint = "missile speed, (default 3000)"
        typ = "E"
      }
      damage: =
      {
        txt = "&"
        hint = "amount of damage shots do, (default 50)"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "time between shots, in milliseconds (default 200)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "the max pitch range in degrees, (default 60) which means you c"
         "an move 60 degrees above or below the start angles"
        typ = "E"
      }
      radius: =
      {
        txt = "&"
        hint = "the max yaw range in degrees, (default 90) which means you can"
         " move 90 degrees on either side of the start angles"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much heatlh the thing has, (default 200) only works if HEA"
         "LTH is checked, otherwise it can't be destroyed"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "thing to use when player enters the turret view"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "thing to use when player leaves the turret view"
        typ = "E"
      }
      target3: =
      {
        txt = "&"
        hint = "thing to use when it dies"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "HEALTH"
        hint = "gun turret has health and displays a hud with its current heal"
         "th"
        typ = "X1"
      }
    }
    misc_turret:form =
    {
      bbox = '-8 -8 -22 8 8 0'
      wait: =
      {
        txt = "&"
        hint = "Time between shots (default 150 ms)"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "How much damage each shot does (default 5)"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "How much damage it can take before exploding (default 100)"
        typ = "E"
      }
      radius: =
      {
        txt = "&"
        hint = "How far away an enemy can be for it to pick it up (default 512"
         ")"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "How much damage the explosion does. If either splashDamage or "
         "splashRadius are 0, it will not make an explosion"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "The radius of the explosion. If either splashRadius or splashD"
         "amage are 0, it will not make an explosion"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      team: =
      {
        txt = "&"
        hint = "team that is not targeted by and does not take damage from thi"
         "s turret [player, enemy (default), neutral]"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "What to use when destroyed"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "What to use when it decides to start shooting at an enemy"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Toggles it on/off"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        hint = "Starts off"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "UPSIDE_DOWN"
        hint = "make it rest on a surface/floor instead of hanging from the ce"
         "iling"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TURBO"
        hint = "Big-ass, Boxy Death Star Turbo Laser version"
        typ = "X4"
      }
    }
    misc_sentry_turret:form =
    {
      bbox = '-16 -16 0 16 16 24'
      count: =
      {
        txt = "&"
        hint = "number of shots before thing deactivates. -1 = infinite, defau"
         "lt 150"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "How much damage it can take before exploding (default 50)"
        typ = "E"
      }
      radius: =
      {
        txt = "&"
        hint = "How far away an enemy can be for it to pick it up (default 512"
         ")"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "How much damage the explosion does. If either splashDamage or "
         "splashRadius are 0, it will not make an explosion"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "The radius of the explosion. If either splashRadius or splashD"
         "amage are 0, it will not make an explosion"
        typ = "E"
      }
      team: =
      {
        txt = "&"
        hint = "team that is not targeted by and does not take damage from thi"
         "s turret [player, enemy, neutral]"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "What to use when destroyed"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "What to use when it decides to fire at an enemy"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        hint = "Starts off"
        typ = "X1"
      }
    }
    misc_laser_arm:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      count: =
      {
        txt = "&"
        hint = "0 (default) - Fire in direction facing: 1 turn left: 2 turn ri"
         "ght: 3 aim up: 4 aim down"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "How long the beam lasts, in seconds (default is 3)"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "How fast it turns (degrees per second, default 30)"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "What thing for it to be pointing at to start with"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "to use it"
        typ = "E"
      }
    }
    misc_weapon_shooter:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      wait: =
      {
        txt = "&"
        hint = "debounce time between refires (defaults to 500)"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "speed of WP_THERMAL (default is 900)"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "what to aim at (will update aim every frame if it's a moving target)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "ranges from 0 to random, added to wait (defaults to 0)"
        typ = "E"
      }
      weapon: =
      {
        typ = "C"
        txt = "&"
        hint = "specify the weapon to use (default is WP_BLASTER)"
        items = "WP_BRYAR_PISTOL"$0D"WP_BLASTER"$0D"WP_DISRUPTOR"$0D"WP_BOWCASTE"
        "R"$0D"WP_REPEATER"$0D"WP_DEMP2"$0D"WP_FLECHETTE"$0D"WP_ROCKET_LAUNCHER"$0D"WP"
        "_CONCUSSION"$0D"WP_THERMAL"$0D"WP_TRIP_MINE"$0D"WP_DET_PACK"$0D"WP_STUN_BATO"
        "N"$0D"WP_EMPLACED_GUN"$0D"WP_BOT_LASER"$0D"WP_TURRET"$0D"WP_ATST_MAIN"$0D"W"
        "P_ATST_SIDE"$0D"WP_TIE_FIGHTER"$0D"WP_RAPID_FIRE_CONC"$0D"WP_BLASTER_PISTOL"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ALTFIRE"
        hint = "fire the alt-fire of the chosen weapon"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TOGGLE"
        hint = "keep firing until used again (fires at intervals of wait)"
        typ = "X2"
      }
    }
    misc_gas_tank:form =
    {
      bbox = '-4 -4 0 4 4 40'
      mdl = "models/map_objects/imp_mine/tank.md3"
      target: =
      {
        txt = "&"
        hint = "what to use when it dies"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "auto-explodes"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much health the model has - default 20 (zero makes non-bre"
         "akable)"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "amount of damage to do when it explodes - default 32"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "radius to do damage in - default 48"
        typ = "E"
      }
    }
    misc_portal_surface:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      targetname: =
      {
        txt = "&"
        hint = "When used, cycles to the next misc_portal_camera it's targeted"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "makes it auto-cycle between all cameras it's pointed at at int"
         "evervals of specified number of seconds"
        typ = "E"
      }
    }
    misc_ammo_floor_unit:form =
    {
      bbox = '-16 -16 0 16 16 32'
      mdl = "models/items/a_pwr_converter.md3"
      count: =
      {
        txt = "&"
        hint = "the amount of ammo given when used (default 100)"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much health the model has - default 60 (zero makes non-bre"
         "akable)"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "what to use when it dies"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "dies and displays damagemodel when used, if any (if not, remov"
         "es itself)"
        typ = "E"
      }
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USETARGET"
        hint = "when used it fires off target"
        typ = "X8"
      }
    }
    misc_model_ammo_power_converter:form =
    {
      bbox = '-16 -16 0 16 16 16'
      mdl = "models/items/power_converter.md3"
      count: =
      {
        txt = "&"
        hint = "the amount of ammo given when used (default 100)"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much health the model has - default 60 (zero makes non-bre"
         "akable)"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "what to use when it dies"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "dies and displays damagemodel when used, if any (if not, remov"
         "es itself)"
        typ = "E"
      }
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USETARGET"
        hint = "when used it fires off target"
        typ = "X8"
      }
    }
    misc_shield_floor_unit:form =
    {
      bbox = '-16 -16 0 16 16 32'
      mdl = "/models/items/a_shield_converter.md3"
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much health the model has - default 60 (zero makes non-bre"
         "akable)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "max charge value (default MP:50 SP:100)"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      target: =
      {
        txt = "&"
        hint = "what to use when it dies"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "dies and displays damagemodel when used, if any (if not, remov"
         "es itself)"
        typ = "E"
      }
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "USETARGET"
        Hint = "when used it fires off target"
      }
    }
    misc_atst_drivable:form =
    {
      bbox = '-40 -40 -24 40 40 248'
      mdl = "models/map_objects/imp_detention/atst.md3"
      health: =
      {
        txt = "&"
        hint = "how much health the atst has - default 800"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "what to use when it dies"
        typ = "E"
      }
    }
    object_cargo_barrel1:form =
    {
      bbox = '-16 -16 -16 16 16 29'
      mdl = "models/map_objects/cairn/barrels.md3"
      health: =
      {
        txt = "&"
        hint = "default = 20"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "default = 100"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "default = 200"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "if given a targetname, using it makes it explode"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SMALLER"
        hint = "small barrel"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "KLINGON"
        hint = "klingon style barrel"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_SMOKE"
        hint = "will not leave lingering smoke cloud when killed"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "POWDERKEG"
        hint = "wooden explosive barrel"
        typ = "X8"
      }
    }
    misc_weather_zone:form =
    { 

      bspmodel: =
      {
        txt = "&"
        hint = "DON'T write here"
        typ = "E"
      }
    }
    misc_bsp:form =
    { 

      bbox = '-16 -16 -16 16 16 16'
      bspmodel: =
      {
        txt = "&"
        hint = "arbitrary bsp file to display"
        typ = "E"
      }
    }
    misc_model:form =
    { 

      bbox = '-16 -16 -24 16 16 32'
      mdl = "[model]"
      model: =
      {
        t_modelbrowser = !
        txt = "&"
        hint = "arbitrary .md3 or .ase file to display"
        typ = "E"
      }
      _frame: =
      {
        txt = "&"
        hint = "which frame from an animated md3"
        typ = "E"
      }
      modelscale: =
      {
        txt = "&"
        hint = "uniform  scale"
        typ = "E"
      }
      modelscale_vec: =
      {
        txt = "&"
        hint = "scale model in each axis"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "RMG"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SOLID"
        hint = ""
        typ = "X2"
      }
    }
    misc_model_static:form =
    { 

      bbox = '-16 -16 -24 16 16 32'
      mdl = "[model]"
      model: =
      {
        t_modelbrowser = !
        txt = "&"
        hint = "arbitrary .md3 or .ase file to display"
        typ = "E"
      }
      _frame: =
      {
        txt = "&"
        hint = "which frame from an animated md3"
        typ = "E"
      }
      modelscale: =
      {
        txt = "&"
        hint = "uniform  scale"
        typ = "E"
      }
      modelscale_vec: =
      {
        txt = "&"
        hint = "scale model in each axis"
        typ = "E"
      }
      zoffset: =
      {
        txt = "&"
        hint = "units to offset vertical culling position"
        typ = "E"
      }
    }
    misc_model_breakable:form =
    { 
      mdl = "[model]"
      model: =
      {
        t_modelbrowser = !
        txt = "&"
        hint = "arbitrary .md3 file to display"
        typ = "E"
      }
      splashradius: =
      {
        txt = "&"
        hint = "radius of damage"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "damage to do (will make it explode on death)"
        typ = "E"
      }
      gravity: =
      {
        txt = "&"
        hint = "if set to 1, this will be affected by gravity"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much health to have - default is zero (not breakable)  If "
         "you don't set the SOLID flag, but give it health, it can be shot but"
         " will not block NPCs or players from moving"
        typ = "E"
      }
      material: =
      {
        txt = "&"
        hint = "default is MAT_NONE"
        typ = "C"
        items = "MAT_METAL"$0D"MAT_GLASS"$0D"MAT_ELECTRICAL"$0D"MAT_ELEC_METAL"
         $0D"MAT_DRK_STONE"$0D"MAT_LT_STONE"$0D"MAT_GLASS_METAL"$0D"MAT_METAL2"
         $0D"MAT_NONE"$0D"MAT_GREY_STONE"$0D"MAT_METAL3"$0D"MAT_CRATE1"$0D"MAT"
         "_GRATE1"$0D"MAT_ROPE"$0D"MAT_CRATE2"$0D"MAT_WHITE_METAL"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"1"
         "0"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"
      }
      radius: =
      {
        txt = "&"
        hint = "Chunk code tries to pick a good volume of chunks, but you can "
         "alter this to scale the number of spawned chunks. (default 1)  (.5) "
         "is half as many chunks, (2) is twice as many chunks"
        typ = "E"
      }
      team: =
      {
        txt = "&"
        hint = "cannot take damage from members of this team"
        typ = "C"
        items = "player"$0D"neutral"$0D"enemy"
        values = "player"$0D"neutral"$0D"enemy"
      }
      target: =
      {
        txt = "&"
        hint = "What to use when it dies"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "What to use when it's repaired"
        typ = "E"
      }
      target3: =
      {
        txt = "&"
        hint = "What to use when it's used while it's broken"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "when used, dies and displays damagemodel, if any (if not, remo"
         "ves itself)"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "Only the NPC with this name can damage this"
        typ = "E"
      }
      forcevisible: =
      {
        txt = "&"
        hint = "When you turn on force sight (any level), you can see these draw through the entire level..."
        typ = "E"
      }
      redCrosshair: =
      {
        txt = "&"
        hint = "If set to 1, crosshair turns red when you look at this"
        typ = "E"
      }
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SOLID"
        hint = "Movement is blocked by it, if not set, can still be broken by "
         "explosions and shots if it has health"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "AUTOANIMATE"
        hint = "Will cycle it's anim"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DEADSOLID"
        hint = "Stay solid even when destroyed (in case damage model is rather"
         " large)"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_DMODEL"
        hint = "Makes it NOT display a damage model when destroyed, even if on"
         "e exists"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_SMOKE"
        hint = ""
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USE_MODEL"
        hint = "When used, will toggle to it's usemodel (model name + '_u1.md3"
         "')... this obviously does nothing if USE_NOT_BREAK is not checked"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USE_NOT_BREAK"
        hint = "Using it doesn't make it break, still can be destroyed by dama"
         "ge"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_EXPLOSION"
        hint = "Does not play an explosion effect, though will still create ch"
         "unks if specified"
        typ = "X256"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        hint = "Does not play an explosion effect, though will still create ch"
         "unks if specified"
        typ = "X4096"
      }
    }
    NPC_Trandoshan:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Tusken:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SNIPER"
        hint = "use sniper rifle"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_BespinCop:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Ugnaught:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Mark2:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Tie_Pilot:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Mark1:form =
    {
      bbox = '-36 -36 -24 36 36 80'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Prisoner:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ELDER"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Merchant:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Noghri:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Interrogator:form =
    {
      bbox = '-12 -12 -24 12 12 0'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Galak:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MECH"
        hint = "will be the armored Galak"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Sentry:form =
    {
      bbox = '-24 -24 -24 24 24 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Sentry:form =
    {
      bbox = '-24 -24 -24 24 24 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_MonMothma:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Mouse:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Imperial:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      message: =
      {
        txt = "&"
        hint = "if a COMMANDER, turns on his key surface.  This is the name of"
         " the key you get when you walk over his body.  This must match the '"
         "message' field of the func_security_panel you want this key to open."
         "  Set to 'goodie' to have him carrying a goodie key that player can "
         "use to operate doors with 'GOODIE' spawnflag."
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      mindtrickscript: =
      {
        txt = "&"
        hint = "default script to run when mindtrick is used on"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "OFFICER"
        hint = "Brownshirt Officer, uses blaster rifle, 40 health"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "COMMANDER"
        hint = "Blackshirt Commander, uses rapid-fire blaster rifle, 80 health"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Reelo:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Ragnos:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Lannik_Racto:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Rax:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FUN"
        hint = "Makes him magically the funnest thing ever in any game ever made (actually does nothing, it'll just be fun by the power of suggestion)"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_BobaFett:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Lando:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_MineMonster:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Murjj:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Lizard:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Howler:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Swamp:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Sand_Creature:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      turfrange: =
      {
        txt = "&"
        hint = "if set, they will not go beyond this dist from their spawn position"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FAST"
        hint = "move faster"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Claw:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Glider:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Flier2:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Fish:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Wampa:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Rancor:form =
    {
      bbox = '-30 -30 -24 30 30 136'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MUTANT"
        hint = "Bigger, meaner, nastier, Frencher. Breath attack, pound attack"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FASTKILL"
        hint = "Kills NPCs faster"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Monster_Mutant_Rancor:form =
    {
      bbox = '-60 -60 -24 60 60 360'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FASTKILL"
        hint = "Kills NPCs faster"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Bartender:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Gran:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHOOTER"
        hint = "uses blaster instead of"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BOXER"
        hint = "uses fists only"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_HazardTrooper:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 250)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "OFFICER"
        hint = "400 health, flechette"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CONCUSSION"
        hint = "400 health, concussion rifle"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Human_Merc:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      message: =
      {
        txt = "&"
        hint = "turns on his key surface"$0D 
             "This is the name of the key you get when you walk over his body"$0D 
             "This must match the message field of the func_security_panel you want this key to open"$0D  
             "Set to GOODIE to have him carrying a goodie key that player can use to operate doors with GOODIE spawnflag"$0D 
             "NOTE: this overrides all the weapon spawnflags"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BOWCASTER"
        hint = "Starts with a Bowcaster"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "REPEATER"
        hint = "Starts with a Repeater"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FLECHETTE"
        hint = "Starts with a Flechette gun"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CONCUSSION"
        hint = "Starts with a Concussion Rifle"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Rodian:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BLASTER"
        hint = "uses a blaster instead of sniper rifle, different skin"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_HIDE"
        hint = "(only applicable with snipers) does not duck and hide between "
         "shots"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_RocketTrooper:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "OFFICER"
        hint = "starts flying, uses concussion rifle instead of rockets"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SPOTLIGHT"
        hint = "uses a shoulder-mounted spotlight"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_RocketTrooper:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "OFFICER"
        hint = "400 health, flechette"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CONCUSSION"
        hint = "400 health, concussion rifle"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Weequay:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Tavion:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Tavion_New:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SCEPTER"
        hint = "Has a red lightsaber and force powers, Ragnos' Scepter in left hand, uses dual saber style and occasionally attacks with Scepter"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SITH_SWORD"
        hint = "Has Ragnos' Sith Sword in right hand and force powers, uses strong style"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Alora:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DUAL"
        hint = "Dual sabers and level 3 force powers, 500 health"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_MorganKatarn:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_ImpWorker:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Cultist:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      nodelay: =
      {
        txt = "&"
        hint = "set to 1 to make the Reborn not stand around and taunt the player before attacking"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SABER"
        hint = "Uses a saber and no force powers"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "GRIP"
        hint = "Uses no weapon and grip, push and pull"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LIGHTNING"
        hint = "Uses no weapon and lightning and push"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DRAIN"
        hint = "Uses no weapons and drain and push"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Cultist_Commando:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      nodelay: =
      {
        txt = "&"
        hint = "set to 1 to make the Reborn not stand around and taunt the player before attacking"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Cultist_Destroyer:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      nodelay: =
      {
        txt = "&"
        hint = "set to 1 to make the Reborn not stand around and taunt the player before attacking"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Cultist_Saber:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      nodelay: =
      {
        txt = "&"
        hint = "set to 1 to make the Reborn not stand around and taunt the player before attacking"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MED"
        hint = "Uses medium style - average speed and attack strength, average defense"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STRONG"
        hint = "Uses strong style, slower than others, but can do a lot of damage with one blow. Weak defense"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ALL"
        hint = "Knows all 3 styles, switches between them, good defense"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "THROW"
        hint = "can throw their saber - reduces their defense some (can use this spawnflag alone or in combination with any ONE of the previous 3 spawnflags)"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Cultist_Saber_Powers:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      nodelay: =
      {
        txt = "&"
        hint = "set to 1 to make the Reborn not stand around and taunt the player before attacking"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MED"
        hint = "Uses medium style - average speed and attack strength, average defense"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STRONG"
        hint = "Uses strong style, slower than others, but can do a lot of damage with one blow. Weak defense"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ALL"
        hint = "Knows all 3 styles, switches between them, good defense"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "THROW"
        hint = "can throw their saber - reduces their defense some (can use this spawnflag alone or in combination with any ONE of the previous 3 spawnflags)"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Reborn:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      nodelay: =
      {
        txt = "&"
        hint = "set to 1 to make the Reborn not stand around and taunt the player before attacking"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FORCE"
        hint = "Uses force powers but is not the best lightsaber fighter and n"
         "ot acrobatic.  Purple saber, 75 health."
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FENCER"
        hint = "A good lightsaber fighter, but not acrobatic and uses no force"
         " powers.  Yellow saber, 100 health."
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ACROBAT"
        hint = "quite acrobatic, but not the best lightsaber fighter and uses "
         "no force powers.  Red saber, 100 health."
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BOSS"
        hint = "quite acrobatic, good lightsaber fighter and uses force powers"
         ".  Orange saber, 150 health."
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Reborn_New:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      nodelay: =
      {
        txt = "&"
        hint = "set to 1 to make the Reborn not stand around and taunt the player before attacking"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DUAL"
        hint = "Use 2 shorter sabers"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STAFF"
        hint = "Uses a saber staff"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "WEAK"
        hint = "Is a bit less tough"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MASTER"
        hint = "Is SUPER tough"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Desann:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_ATST:form =
    {
      bbox = '-40 -40 -24 40 40 248'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Assassin:form =
    {
      bbox = '-40 -40 -24 40 40 248'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Saber:form =
    {
      bbox = '-40 -40 -24 40 40 248'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TRAINING"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Probe:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_ShadowTrooper:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      nodelay: =
      {
        txt = "&"
        hint = "set to 1 to make the Cultist not stand around and taunt the player before attacking"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Rebel:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Jan:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Chewbacca:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Kothos:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "VIL"
        hint = "spawns Vil Kothos instead of Dasariah (can anyone tell them apart anyway...?)"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Stormtrooper:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "OFFICER"
        hint = "60 health, flechette"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "COMMANDER"
        hint = "60 health, heavy repeater"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ALTOFFICER"
        hint = "0 health, alt-fire flechette (grenades)"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ROCKET"
        hint = "60 health, rocket launcher"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "COMMANDO"
        hint = "Causes character to use Hazard Trooper (move in formation AI)"
        typ = "X512"
      }
    }
    NPC_Snowtrooper:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Saboteur:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SNIPER"
        hint = "Has a sniper rifle, no acrobatics, but can dodge"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PISTOL"
        hint = "Just has a pistol, can roll"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "COMMANDO"
        hint = "Has 2 pistols and can roll & dodge"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CLOAKED"
        hint = "Starts cloaked"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_SwampTrooper:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "REPEATER"
        hint = "Swaptrooper who uses the repeater"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Protocol:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "IMPERIAL"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Remote:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_Gonk:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Vehicle:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      NPC_type: =
      {
        txt = "&"
        hint = "Type of vehicle *.veh"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "Vehicles targetname AND script_targetname"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Vehicles targetname"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "Spawn script for this Vehicle"
        typ = "E"
      }
      noVisTime: =
      {
        txt = "&"
        hint = "how long to wait after spawning/last being seen by the player beforw blowing ourselves up (default is 10 seconds)"
        typ = "E"
      }
      skin: =
      {
        txt = "&"
        hint = "which skin to set red for example - If no skin it is random"
        typ = "E"
      }
      showhealth: =
      {
        txt = "&"
        hint = "set to 1 to show health bar on this entity when crosshair is over it"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_VIS_DIE"
        hint = "die after certain amount of time of not having a LOS to the Player (default time is 10 seconds, change by setting noVisTime)"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "drop to floor"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SAFE"
        hint = "Won't spawn if an entity is within 64 units"
        typ = "X512"
      }
    }
    NPC_Player:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC (should this be when the last NPC it spawned dies?)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "RIFLEMAN"
        hint = "?"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PHASER"
        hint = "?"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TRICORDER"
        hint = "?"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "drop to floor"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_spawner:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      NPC_type: =
      {
        txt = "&"
        hint = "name of NPC (in npcs.cfg) to spawn in"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      NPC_target2: =
      {
        txt = "&"
        hint = "NPC's target to fire when knocked out"
        typ = "E"
      }
      NPC_target4: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed by friendly fire"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn the NPC"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "if spawn blocked, how many seconds to wait before trying again (default=0.5, <0 =never try again and fire target2)"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC (should this be when the last NPC it spawned dies?)"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "Fired by stasis spawners when they try to spawn while their spawner model is broken"
        typ = "E"
      }
      target3: =
      {
        txt = "&"
        hint = "Fired by spawner if they try to spawn and are blocked and have a wait < 0 (removes them)"
        typ = "E"
      }
      sep: = 
      { 
        typ = "S" 
        txt = "Scripts"
        hint = "These strings can be used to activate behaviors instead of scripts - these are checked first and so no scripts should be names with these names:"$0D
         "default - 0: whatever"$0D
         "idle - 1: Stand around, do abolutely nothing"$0D
         "roam - 2: Roam around, collect stuff"$0D
         "walk - 3: Crouch-Walk toward their goals"$0D
         "run - 4: Run toward their goals"$0D
         "standshoot - 5: Stay in one spot and shoot- duck when neccesary"$0D
         "standguard - 6: Wait around for an enemy"$0D
         "patrol - 7: Follow a path, looking for enemies"$0D
         "huntkill - 8: Track down enemies and kill them"$0D
         "evade - 9: Run from enemies"$0D
         "evadeshoot - 10: Run from enemies, shoot them if they hit you"$0D
         "runshoot - 11: Run to your goal and shoot enemy when possible"$0D
         "defend - 12: Defend an entity or spot?"$0D
         "snipe - 13: Stay hidden, shoot enemy only when have perfect shot and back turned"$0D
         "combat - 14: Attack, evade, use cover, move about, etc. Full combat AI - id NPC code"$0D
         "medic - 15: Go for lowest health buddy, hide and heal him"$0D
         "takecover - 16: Find nearest cover from enemies"$0D
         "getammo - 17: Go get some ammo"$0D
         "advancefight - 18: Go somewhere and fight along the way"$0D
         "face - 19: turn until facing desired angles"$0D
         "wait - 20: do nothing"$0D
         "formation - 21: Maintain a formation"$0D
         "crouch - 22: Crouch-walk toward their goals"
      }      
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by default)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"      
      }
      noBasicSounds: =
      {
        txt = "&"
        hint = "set to 1 to prevent loading and usage of basic sounds (pain, death, etc)"
        typ = "E"
      }
      noCombatSounds: =
      {
        txt = "&"
        hint = "set to 1 to prevent loading and usage of combat sounds (anger, victory, etc)"
        typ = "E"
      }
      noExtraSounds: =
      {
        txt = "&"
        hint = "set to 1 to prevent loading and usage of extra-sounds (chasing the enemy, detecting them, flanking them, also jedi combat sounds)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SAFE"
        hint = "Won't spawn if an entity is within 64 units"
        typ = "X512"
      }
    }
    NPC_Droid_R2D2:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "IMPERIAL"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Droid_R5D2:form =
    {
      bbox = '-12 -12 -24 12 12 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "IMPERIAL"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ALWAYSDIE"
        hint = "won't go into spinning zombie AI when at low health."
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Jedi:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TRAINER"
        hint = "Special Jedi - instructor"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MASTER"
        hint = "Special Jedi - master"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "RANDOM"
        hint = "creates a random Jedi student using the available player models/skins (excludes the current model of the player)"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Jawa:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ARMED"
        hint = "starts with the Jawa gun in-hand"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Luke:form =
    {
      bbox = '-16 -16 -24 16 16 40'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CEILING"
        hint = "Sticks to the ceiling until he sees an enemy or takes pain"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Kyle:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BOSS"
        hint = "Uses Boss AI"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "RIFLEMAN"
        hint = ""
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PHASER"
        hint = ""
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TRICORDER"
        hint = ""
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    NPC_Rosh_Penin:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      target: =
      {
        txt = "&"
        hint = "NPC will fire this when it spawns it's last NPC"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name this NPC goes by for targetting"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "starting health (default = 100)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many NPCs to spawn (only if targetted) default = 1"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "after spawned or triggered, how many seconds to wait to spawn "
         "the NPC"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "NPC's targetname AND script_targetname"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC's target to fire when killed"
        typ = "E"
      }
      playerTeam: =
      {
        txt = "&"
        hint = "Who not to shoot! (default is TEAM_STARFLEET)"
        typ = "E"
      }
      enemyTeam: =
      {
        txt = "&"
        hint = "Who to shoot (all but own if not set)"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "default script to run once spawned (none by default)"
        typ = "E"
      }
      usescript: =
      {
        txt = "&"
        hint = "default script to run when used (none by default)"
        typ = "E"
      }
      awakescript: =
      {
        txt = "&"
        hint = "default script to run once awoken (none by default)"
        typ = "E"
      }
      angerscript: =
      {
        txt = "&"
        hint = "default script to run once angered (none by default)"
        typ = "E"
      }
      painscript: =
      {
        txt = "&"
        hint = "default script to run when hit (none by default)"
        typ = "E"
      }
      fleescript: =
      {
        txt = "&"
        hint = "default script to run when hit and below 50% health (none by d"
         "efault)"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "default script to run when killed (none by default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DARKSIDE"
        hint = "Evil Rosh"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOFORCE"
        hint = "Can't jump, starts with no saber"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "NPC can be in air, but will spawn on the closest floor surface"
         " below it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CINEMATIC"
        hint = "Will spawn with no default AI (BS_CINEMATIC)"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTSOLID"
        hint = "Starts not solid"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTINSOLID"
        hint = "Don't try to fix if spawn in solid"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SHY"
        hint = "Spawner is shy"
        typ = "X256"
      }
    }
    fx_cloudlayer:form =
    {
      wait: =
      {
        txt = "&"
        hint = "adds curvature as it moves out to the edge of the layer.  ( de"
         "fault 0 ), 1 = small up, 3 = up more, -1 = small down, -3 = down mor"
         "e, etc."
        typ = "E"
      }
      radius: =
      {
        txt = "&"
        hint = "outer radius of cloud layer, (default 2048)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "inner radius of cloud layer, (default 128) only works for TUBE"
         " type"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TUBE"
        hint = "creates cloud layer with tube opening in the middle, must an I"
         "NNER radius also"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ALT"
        hint = "uses slightly different shader, good if using two layers sort "
         "of close together"
        typ = "X2"
      }
    }
    fx_target_beam:form =
    {
      fxFile: =
      {
        txt = "&"
        hint = "Effect used to draw the beam, ( default 'env/targ_beam' )"
        typ = "E"
      }
      fxFile2": =
      {
        txt = "&"
        hint = "Effect used for the beam impact effect, ( default 'env/targ_be"
         "am_impact' )"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random amount of seconds added to/subtracted from 'wait' each "
         "firing"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "If always on, how long to wait between blasts, in MILLISECONDS"
         " - default/min is 100 (1 frame at 10 fps), -1 means it will never fi"
         "re again"
        typ = "E"
      }
      damage: =
      {
        txt = "&"
        hint = "How much damage to inflict PER FRAME (so probably want it kind"
         " of low), default is none"
        typ = "E"
      }
      duration: =
      {
        txt = "&"
        hint = "How many seconds each burst lasts, -1 will make it stay on for"
         "ever"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "ent to point at- you MUST have this.  This can be anything you"
         " want, including a moving ent - for static beams, just use info_null"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Fires only when used"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTOFF"
        hint = "must be used before it's on"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "OPEN"
        hint = "will draw all the way to the target, regardless of where the t"
         "race hits"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_KNOCKBACK"
        hint = "beam damage does no knockback"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ONE_SHOT"
        hint = ""
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_IMPACT"
        hint = ""
        typ = "X16"
      }
    }
    fx_explosion_trail:form =
    {
      radius: =
      {
        txt = "&"
        hint = "damage radius around trail as it travels through the world ( d"
         "efault 128 )"
        typ = "E"
      }
      damage: =
      {
        txt = "&"
        hint = "radius damage ( default 128 )"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "damage radius on impact ( default 0 )"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "damage when thing impacts ( default 0 )"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "velocity through the world, ( default 350 )"
        typ = "E"
      }
      fxFile: =
      {
        txt = "&"
        hint = "name of the effect to play for the trail ( default 'env/exp_tr"
         "ail_comp' )"
        typ = "E"
      }
      fxFile2: =
      {
        txt = "&"
        hint = "effect file to play on impact"
        typ = "E"
      }
      model: =
      {
        txt = "&"
        hint = "model to attach to the trail"
        typ = "E"
      }
      soundSet: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "direction to aim the trail in, required unless you specify ang"
         "les"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "(required) trail effect spawns only when used"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "GRAVITY"
        hint = "object uses gravity instead of linear motion"
        typ = "X1"
      }
    }
    fx_rain:form =
    {
      count: =
      {
        txt = "&"
        hint = "the number of rain particles (default of 1000)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LIGHT"
        hint = "create light drizzle"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MEDIUM"
        hint = "create average medium rain"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "HEAVY"
        hint = "create heavy downpour with fog and lightning automatically"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ACID"
        hint = "create acid rain"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "OUTSIDE_SHAKE"
        hint = "will cause the camera to shake slightly whenever outside"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MISTY_FOG"
        hint = "causes clouds of misty fog to float through the level"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LIGHTNING"
        hint = "random bursts of lightning and thunder in the level"
        typ = "X64"
      }
    }
    fx_snow:form =
    {
      count: =
      {
        txt = "&"
        hint = "the number of snow particles (default of 1000)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LIGHT"
        hint = "light snow"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MEDIUM"
        hint = "snow"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "HEAVY"
        hint = "snow"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MISTY_FOG"
        hint = "snow"
        typ = "X8"
      }
    }
    fx_wind:form =
    {
      count: =
      {
        txt = "&"
        hint = "the number of wind particles (default of 1000)"
        typ = "E"
      }
      angles: =
      {
        txt = "&"
        hint = "the direction  for constant  wind"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "the  speed for  constant wind"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NORMAL"
        hint = "creates a random light global wind"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CONSTANT"
        hint = "forces all wind to go in a specified  direction"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "GUSTING"
        hint = "causes random gusts of  wind"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SWIRLING"
        hint = "causes random swirls of wind"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FOG"
        hint = "fog wind"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LIGHT_FOG"
        hint = "fog wind"
        typ = "X64"
      }
    }
    fx_wind_zone:form =
    {
      count: =
      {
        txt = "&"
        hint = "the number of wind particles (default of 1000)"
        typ = "E"
      }
      angles: =
      {
        txt = "&"
        hint = "the direction for constant wind"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "the speed for constant wind"
        typ = "E"
      }
    }
    fx_runner:form =
    {
      splashDamage: =
      {
        txt = "&"
        hint = "only works when damage is checked ( default 5 )"
        typ = "E"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "only works when damage is checked ( default 16 )"
        typ = "E"
      }
      soundSet: =
      {
        txt = "&"
        hint = "bmodel set to use, plays start sound when toggled on, loop sou"
         "nd while on ( doesn't play on a oneshot), and a stop sound when turn"
         "ed off"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "how often to call the effect, don't over-do this ( default 200"
         " )"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random amount of time to add to delay, ( default 0, 200 = 0ms "
         "to 200ms )"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "direction to aim the effect in, otherwise defaults to up"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "uses its target2 when the fx gets triggered"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Target name for control purposes by another objects or scripts"
        typ = "E"
      }
      fxFile: =
      {
        t_efxbrowser = !
        txt = "&"
        hint = "name of the effect file to play"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTOFF"
        hint = "effect starts off, toggles on/off when used"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ONESHOT"
        hint = "effect fires only when used"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DAMAGE"
        hint = "does radius damage around effect every 'delay' milliseonds"
        typ = "X4"
      }
    }
    target_push:form =
    {
      speed: =
      {
        txt = "&"
        hint = "defaults to 1000"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ENERGYNOISE"
        hint = "plays energy noise"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CONSTANT"
        hint = "will push activator in direction of 'target' at constant 'spee"
         "d'"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_DAMAGE"
        hint = "the activator won't take falling damage after being pushed"
        typ = "X4"
      }
    }
    target_random:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USEONCE"
        hint = "set to never fire again"
        typ = "X1"
      }
    }
    target_interest:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      target: =
      {
        txt = "&"
        hint = "thing to fire when someone looks at this thing"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
    }
    target_gravity_change:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      gravity: =
      {
        txt = "&"
        hint = "Normal = 800, Valid range: any"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "GLOBAL"
        hint = "Apply to entire world, not just the activator"
        typ = "X1"
      }
    }
    target_friction_change:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      friction: =
      {
        txt = "&"
        hint = "Normal = 6, Valid range 0 - 10"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
    }
    target_laser:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_ON"
        hint = ""
        typ = "X1"
      }
    }
    target_autosave:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity. Make sure it won't trigger during dialogue or cinematic or it will stutter!"
        typ = "E"
      }
    }
    target_kill:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FALLING"
        hint = "death by falling"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ELECTRICAL"
        hint = "death by electrocution"
        typ = "X2"
      }
    }
    target_give:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
    }
    target_score:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      count: =
      {
        txt = "&"
        hint = "number of points to add, default 1"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
    }
    target_teleporter:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
    }
    target_print:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      message: =
      {
        txt = "&"
        hint = "text to print"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "REDTEAM"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BLUETEAM"
        hint = ""
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PRIVATE"
        hint = "only the activator gets the message"
        typ = "X4"
      }
    }
    target_delay:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = "What to use when delay is out"
        type = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targeting name"
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "delay variance, total delay = delay +/- random seconds"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "seconds to pause before firing targets."
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_RETRIGGER"
        hint = "Keeps the delay from resetting the time if it is activated aga"
         "in while it is counting down to an event"
        typ = "X1"
      }
    }
    target_play_music:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      music: =
      {
        txt = "&"
        hint = "music WAV or MP3 file ( music/introfile.mp3 [optional]  music/"
         "loopfile.mp3 )"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
    }
    target_position:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this point"
        typ = "E"
      }
    }
    target_location:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      message: =
      {
        txt = "&"
        hint = "name of this location"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "color of message 0:white 1:red 2:green 3:yellow 4:blue 5:cyan "
         "6:magenta 7:white"
        typ = "C"
        items = "white"$0D"red"$0D"green"$0D"yellow"$0D"blue"$0D"cyan"$0D"mage"
         "nta"$0D"white"
        values = "1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"
      }
    }
    target_secret:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      count: =
      {
        txt = "&"
        hint = "how many secrets on this level, if more than one on a level, b"
         "e sure they all have the same count!"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this Secret entity"
        typ = "E"
      }
    }
    target_level_change:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      targetname: =
      {
        txt = "&"
        hint = "Targetname for activate this one by another"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "Name of spawnpoint to start at in the new map"
        typ = "E"
      }
      mapname: =
      {
        txt = "&"
        hint = "Name of map to change to or +menuname to launch a menu instead"
        typ = "E"
      }
      tier_storyinfo: =
      {
        txt = "&"
        hint = "integer to set cvar or ++ to just increment"
        typ = "E"
      }
      storyhead: =
      {
        txt = "&"
        hint = "which head to show on menu [luke, kyle, or prot]"
        typ = "E"
      }
      saber_menu: =
      {
        txt = "&"
        hint = "integer to set cvar for menu"
        typ = "E"
      }
      weapon_menu: =
      {
        txt = "&"
        hint = "integer to set cvar for ingame weapon menu"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "HUB"
        hint = "Will save the current map's status and load the next map with "
         "any saved status it may have"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_STORYSOUND"
        hint = "will not play storyinfo wav file, even if you ++ or set tier_storyinfo"
        typ = "X2"
      }
    }
    target_change_parm:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      targetname: =
      {
        txt = "&"
        hint = "Targetname for activate this one by another"
        typ = "E"
      }
      parm1: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm2: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm3: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm4: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm5: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm6: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm7: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm8: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm9: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm10: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm11: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm12: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm13: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm14: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm15: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
      parm16: =
      {
        txt = "&"
        hint = "Copies any parms set on this ent to the entity that  fired the"
         " trigger/button/whatever that uses this"
        typ = "E"
      }
    }
    target_counter:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      bounceCount: =
      {
        txt = "&"
        hint = "number of times the counter should reset to it's full count wh"
         "en it's done"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "what the counter should fire each time it's incremented and do"
         "es NOT reach it's count"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "After the counter has been triggered 'count' times (default 2)"
         ", it will fire all of it's targets and remove itself."
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "cannot be used until used by a target_activate"
        typ = "X128"
      }
    }
    target_activate:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
    }
    target_remove_powerups:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
    }
    target_relay:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      wait: =
      {
        txt = "&"
        hint = "Cannot be fired again until this many seconds after the last t"
         "ime it was used"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "Will actually fire this many seconds after being used"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "RED_ONLY"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BLUE_ONLY"
        hint = ""
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "RANDOM"
        hint = "only one of the targets will be fired, not all of them"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "Can't be used until activated"
        typ = "X128"
      }
    }
    target_scriptrunner:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      delay: =
      {
        txt = "&"
        hint = "how long to wait after use to run script"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "can't be used again in this amount of seconds (Default is 1 se"
         "cond if it's multiple-use)"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "how many times to run, -1 = infinite.  Default is 1"
        typ = "E"
      }
      usescript: =
      {
        t_scriptbrowser = !
        txt = "&"
        hint = "Script to run when used"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "RUNONACTIVATOR"
        hint = "Will run the script on the entity that used this or tripped th"
         "e trigger that used this"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "start off"
        typ = "X128"
      }
    }
    target_deactivate:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Targetname of this entity"
        typ = "E"
      }
    }
    target_speaker:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      wait: =
      {
        txt = "&"
        hint = "Seconds between triggerings, 0 = don't auto trigger"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "wait variance, default is 0"
        typ = "E"
      }
      noise: =
      {
        t_soundbrowser = !
        txt = "&"
        hint = "wav file to play"
        typ = "E"
      }
      SoundSet: =
      {        
        txt = "&"
        hint = "Sound set from list of sound.txt"
        typ = "E"
      }
      targetname: =
      {        
        txt = "&"
        hint = "Target name for use"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LOOPED-ON"
        hint = "Looped sounds will be toggled by use functions."
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LOOPED-OFF"
        hint = "Looped sounds will be toggled by use functions."
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "GLOBAL"
        hint = "A global sound will play full volume throughout the level."
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ACTIVATOR"
        hint = "Activator sounds will play on the player that activated the ta"
         "rget."
        typ = "X8"
      }
    }
    waypoint_small:form =
    {
      bbox = '-2 -2 -24 2 2 32'
      spawnflags: =
      {
        txt = "&"
        cap = "SOLID_OK"
        hint = "only use if placing inside solid is unavoidable in map, but ma"
         "y be clear in-game (ie: at the bottom of a tall, solid lift that sta"
         "rts at the top position)"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROP_TO_FLOOR"
        hint = "will cause the point to auto drop to the floor"
        typ = "X2"
      }
    }
    waypoint_navgoal:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      radius: =
      {
        txt = "&"
        hint = "how far from the navgoal an ent can be before it thinks it rea"
         "ched it - default is '0' which means no radius check, just have to t"
         "ouch it"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "If NO_AUTO_CONNECT cheked, this is for connection with another waypoint_navgoal"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name you would use in script when setting a navgoal"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SOLID_OK"
        hint = "only use if placing inside solid is unavoidable in map, but ma"
         "y be clear in-game (ie: at the bottom of a tall, solid lift that sta"
         "rts at the top position)"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROP_TO_FLOOR"
        hint = "will cause the point to auto drop to the floor"
        typ = "X2"
      }      
      spawnflags: =
      {
        txt = "&"
        cap = "NO_AUTO_CONNECT"
        hint = "will not automatically connect to any other waypoints, you must then connect it by hand"
        typ = "X4"
      }      
    }
    rail_track:form =
    {       
      radius: =
      {
        txt = "&"
        hint = "Number of units to break down into grid size"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "Number of grid sized units per second rail_movers will go at"
        typ = "E"
      }
      angle: =
      {
        txt = "&"
        hint = "The direction rail_movers will go"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "The number of mover ents the track will try to add per row"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "How long the ent will wait from the start of the level before"
        " placing movers"
        typ = "E"
      }
    }
    rail_lane:form =
    {       
      delay: =
      {
        txt = "&"
        hint = "How long the ent will wait from the start of the level before placing movers"
        typ = "E"
      }
    }
    rail_mover:form =
    {       
      target: =
      {
        txt = "&"
        hint = "The track or lane you want this entity to move through"
        typ = "E"
      }
      model: =
      {
        txt = "&"
        hint = "A model you wish to use, not necessary - can be just a brush"
        typ = "E"
      }
      angle: =
      {
        txt = "&"
        hint = "Random angle rotation allowable on this thing"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "CENTER"
        Hint = "Will force this mover to attempt to center in the track or lane"
      }
    }
    item_security_key:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      message: =
      {
        txt = "&"
        hint = "used to differentiate one key from another."
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_goodie_key:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_force_enlighten:form =
    {
      bbox = '-16 -16 -16 16 16 16'
    }
    item_health:form =
    {
    }
    item_force_boon:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      count: =
      {
        txt = "&"
        hint = "Override quantity or duration."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_force_enlighten_light:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      count: =
      {
        txt = "&"
        hint = "Override quantity or duration."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_force_enlighten_dark:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      count: =
      {
        txt = "&"
        hint = "Override quantity or duration."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_ysalimari:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      count: =
      {
        txt = "&"
        hint = "Override quantity or duration."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_shield:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      count: =
      {
        txt = "&"
        hint = "Override quantity or duration."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_medpac:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      count: =
      {
        txt = "&"
        hint = "Override quantity or duration."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_la_goggles:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    item_shield_lrg_instant:form =
    {
      bbox = '-8 -8 -4 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_sentry_gun:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      count: =
      {
        txt = "&"
        hint = "Override quantity or duration."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_medpak_instant:form =
    {
      bbox = '-8 -8 -4 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_shield_sm_instant:form =
    {
      bbox = '-8 -8 -4 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_seeker:form =
    {
      bbox = '-8 -8 -4 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        type = "E"
      }
      random: =
      {
        txt = "&"
        hint = "Random number of plus or minus seconds varied from the respawn"
         " time."
        type = "E"
      }
      count: =
      {
        txt = "&"
        hint = "Override quantity or duration."
        type = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    item_battery:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    item_datapad:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    item_binoculars:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    item_bacta:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    team_CTF_redflag:form =
    {
      bbox = '-16 -16 -16 16 16 16'
    }
    team_CTF_blueflag:form =
    {
      bbox = '-16 -16 -16 16 16 16'
    }
    team_CTF_bluespawn:form =
    {
      bbox = '-16 -16 -24 16 16 32'
    }
    team_CTF_redspawn:form =
    {
      bbox = '-16 -16 -24 16 16 32'
    }
    team_CTF_redplayer:form =
    {
      bbox = '-16 -16 -16 16 16 32'
    }
    team_CTF_blueplayer:form =
    {
      bbox = '-16 -16 -16 16 16 32'
    }
    team_CTF_neutralflag:form =
    {
      bbox = '-16 -16 -16 16 16 16'
    }
    weapon_demp2:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_flechette:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_concussion_rifle:form =
    {
      bbox = '-16 -16 -2 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_thermal:form =
    {
      bbox = '-16 -16 -2 16 16 16'
      mdl = "models/weapons2/thermal/thermal_pu.md3"
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "NOPLAYER"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "ALLOWNPC"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X64"
        Cap = "NOGLOW"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X128"
        Cap = "USEPICKUP"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X256"
        Cap = "STATIONARY"
        Hint = ""
      }
    }
    weapon_repeater:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_trip_mine:form =
    {
      bbox = '-16 -16 -2 16 16 16'
      mdl="models/weapons2/laser_trap/laser_trap_pu.md3"
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X64"
        Cap = "NOGLOW"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X128"
        Cap = "USEPICKUP"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X256"
        Cap = "STATIONARY"
        Hint = ""
      }
    }
    weapon_det_pack:form =
    {
      bbox = '-16 -16 -2 16 16 16'
      mdl="models/weapons2/detpack/det_pack_pu.md3"
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X64"
        Cap = "NOGLOW"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X128"
        Cap = "USEPICKUP"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X256"
        Cap = "STATIONARY"
        Hint = ""
      }
    }
    weapon_emplaced:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
    }
    weapon_bowcaster:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_blaster:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_blaster_pistol:form =
    {
      bbox = '-16 -16 -2 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_stun_baton:form =
    {
      bbox = '-16 -16 -2 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X64"
        Cap = "STATIONARY"
        Hint = ""
      }
    }
    weapon_bryar_pistol:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
    }
    weapon_disruptor:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_rocket_launcher:form =
    {
      bbox = '-16 -16 -16 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    weapon_saber:form =
    {
      bbox = '-16 -16 -8 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    info_jedimaster_start:form =
    {
      bbox = '-16 -16 -24 16 16 32'
    }
    info_player_imperial:form =
    {
      bbox = '-16 -16 -24 16 16 32'
    }
    info_player_rebel:form =
    {
      bbox = '-16 -16 -24 16 16 32'
    }
    info_player_intermission:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      target: =
      {
        txt = "&"
        hint = "The intermission will be viewed from this point. Target an inf"
         "o_notnull for the view direction."
        typ = "E"
      }
    }
    info_player_start:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      spawnflags: =
      {
        txt = "&"
        cap = "KEEP_PREV"
        hint = "keep previous health/ammo/etc"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROPTOFLOOR"
        hint = "Player will start on the first solid structure under it"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STUN_BATON"
        hint = "Gives player the stun baton and bryar pistol, but not the sabe"
         "r, plus any weapons they may have carried over from previous levels."
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOWEAPON"
        hint = "Start player witn no weapons"
        typ = "X64"
      }
    }
    info_player_deathmatch:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      nobots: =
      {
        txt = "&"
        hint = "prevent bots from using this spot"
        typ = "E"
      }
      nohumans: =
      {
        txt = "&"
        hint = "will prevent non-bots from using this spot"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INITIAL"
        hint = "The first time a player enters the game, they will be at an 'i"
         "nitial' spot."
        typ = "X1"
      }
    }
    info_notnull:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
    }
    info_null:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LIGHT"
        hint = "only for a non-switchable light, removed during gameplay"
        typ = "X1"
      }
    }
    info_saga_objective:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      objective: =
      {
        txt = "&"
        hint = "specifies the objective to complete upon activation"
        typ = "E"
      }
      side: =
      {
        txt = "&"
        hint = "set to 1 to specify an imperial goal, 2 to specify rebels"
        typ = "C"
        items = "Rebel"$0D"Imperial"
        values = "1"$0D"2"
      }
    }
    func_group:form =
    {
      q3map_onlyvertexlighting: =
      {
        txt = "&"
        hint = "brush only  gets vertex lighting"
        typ = "E"
      }
      _lightmapscale: =
      {
        txt = "&"
        hint = "For large constructions, 2 or 3 is a fine value. For a high-detail shadows, use a value of 0.25 or so."
        typ = "E"
      }
    }
    func_rotating:form =
    {
      targetname: =
      {
        txt = "&"
        hint = "turns on/off when used"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "determines how fast it moves; default value is 100."
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_ON"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TOUCH_KILL"
        hint = "Inflicts massive damage upon touching it, disitegrates bodies"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "X_AXIS"
        hint = "rotate around X axis, instead of default Z axis"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "Y_AXIS"
        hint = "rotate around Y axis, instead of default Z axis"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
    }
    func_plat:form =
    {
      targetname: =
      {
        txt = "&"
        hint = "turns on/off when used"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "overrides default 200"
        typ = "E"
      }
      lip: =
      {
        txt = "&"
        hint = "default 8, protrusion above rest position"
        typ = "E"
      }
      height: =
      {
        txt = "&"
        hint = "total height of movement, defaults to model height"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "overrides default 2"
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
    }
    func_bobbing:form =
    {
      speed: =
      {
        txt = "&"
        hint = "seconds to complete a bob cycle (4 default)"
        typ = "E"
      }
      height: =
      {
        txt = "&"
        hint = "amplitude of bob (32 default)"
        typ = "E"
      }
      phase: =
      {
        txt = "&"
        hint = "the 0.0 to 1.0 offset in the cycle to start at"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "turns on/off when used"
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
    }
    func_pendulum:form =
    {
      speed: =
      {
        txt = "&"
        hint = "the number of degrees each way the pendulum swings, (30 defaul"
         "t)"
        typ = "E"
      }
      phase: =
      {
        txt = "&"
        hint = "the 0.0 to 1.0 offset in the cycle to start at"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "turns on/off when used"
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
    }
    func_wall:form =
    {
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "turns on/off when used"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        hint = "the wall will not be there"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "AUTOANIMATE"
        hint = "if a model is used it will animate"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
    }
    func_timer:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      random: =
      {
        txt = "&"
        hint = "wait variance, default is 0"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "base time between triggering all targets, default is 1"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "turns on/off when used"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_ON"
        hint = ""
        typ = "X1"
      }
    }
    trigger_entdist:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      distance: =
      {
        txt = "&"
        hint = "radius entity can be away to fire trigger"
        typ = "E"
      }
      NPC_target: =
      {
        txt = "&"
        hint = "NPC_types to look for ownername. If any, who to calc the"
        "distance from- default is the trigger_entdist himself. Example:"
        "target 'biessman telsia' will look for the biessman and telsia NPC" 
        "if it finds either of these within distance it will fire."
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "fired if entity is within distance"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "fired if entity is NOT within distance"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NPC"
        hint = ""
        typ = "X2"
      }
    }
    func_train:form =
    {
      target: =
      {
        txt = "&"
        hint = "first path corner"
        typ = "E"
      }
      target3: =
      {
        txt = "&"
        hint = "what to use when it breaks"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "will not start until used"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "default 0"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "default"$09"2"
        typ = "E"
      }
      linear: =
      {
        txt = "&"
        hint = "set to 1 and it will move linearly rather than with accelerati"
         "on (default is 0)"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "default 100"
        typ = "E"
      }
      noise: =
      {
        txt = "&"
        hint = "looping sound to play when the train is in motion"
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      startframe: =
      {
        txt = "&"
        hint = "default 0...ghoul2 animation start frame"
        typ = "E"
      }
      endframe: =
      {
        txt = "&"
        hint = "default 0...ghoul2 animation end frame"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_ON"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TOGGLE"
        hint = ""
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BLOCK_STOPS"
        hint = "stops when blocked"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LOOP"
        hint = "if it's a ghoul2 model, it will just loop the animation"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TIE"
        hint = "flying Tie-fighter hack, should be made more flexible so other"
         " things can use this if needed"
        typ = "X256"
      }
    }
    func_glass:form =
    {
      maxshards: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "sets the light's color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "sets the light's color"
      }
      light: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
    }
    func_usable:form =
    {
      wait: =
      {
        txt = "&"
        hint = "amount of time before the object is usable again (only valid w"
         "ith ALWAYS_ON flag)"
        typ = "E"
      }
      Usescript: =
      {
        txt = "&"
        hint = "script to run when turned on"
        typ = "E"
      }
      deathscript: =
      {
        txt = "&"
        hint = "script to run when turned off"
        typ = "E"
      }
      endframe: =
      {
        txt = "&"
        hint = "Will make it animate to next shader frame when used, not turn "
         "on/off... set this to number of frames in the shader, minus 1"
        typ = "E"
      }
      forcevisible: =
      {
        txt = "&"
        hint = "When you turn on force sight (any level), you can see these draw through the entire level"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "if it has health, it will be used whenever shot at/killed - if"
         " you want it to only be used once this way, set health to 1"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "Will fire this target every time it is toggled OFF"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "Will fire this target every time it is toggled ON"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "When used, will toggle on and off"
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      modelAngles: =
      {
        txt = "&"
        hint = "md3 model's angles <pitch yaw roll> (in addition to any rotation on the part of the brush entity itself)"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STARTOFF"
        hint = "the wall will not be there"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "AUTOANIMATE"
        hint = "if a model is used it will animate"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ANIM_ONCE"
        hint = "When turned on, goes through anim once"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ALWAYS_ON"
        hint = "Doesn't toggle on and off when used, just runs usescript and fires target"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BLOCKCHECK"
        hint = "Will not turn on while something is inside it"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NPC_USE"
        hint = "Only NPCs can directly use this"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "Start inactive"
        typ = "X128"
      }
    }
    func_button:form =
    {
      sound: =
      {
        txt = "&"
        hint = "sound of button"
        typ = "E"
      }
      lip: =
      {
        txt = "&"
        hint = "override the default 4 pixel lip remaining at end of move"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "all entities with a matching targetname will be used"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default 1 second wait (-1 = never return)"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "if set, the button must be killed instead of touched"
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
    }
    func_breakable:form =
    {
      chunks: =
      {
        txt = "&"
        hint = "number of chunks when broken"
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      splashradius: =
      {
        txt = "&"
        hint = "radius of damage"
        typ = "E"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "damage to do"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color (Don't know if works)"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color (Don't know if works)"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius (Don't know if works)"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "When killed or used, how long (in seconds) to wait before blow"
         "ing up (none by default)"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "how long minimum to wait between firing paintarget each time h"
         "it"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "Specifying this will make the object explode when destroyed"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "object's health"
        typ = "E"
      }
      noise: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      material: =
      {
        txt = "&"
        hint = ""
        typ = "C"
        items = "MAT_METAL"$0D"MAT_GLASS"$0D"MAT_ELECTRICAL"$0D"MAT_ELEC_METAL"
         $0D"MAT_DRK_STONE"$0D"MAT_LT_STONE"$0D"MAT_GLASS_METAL"$0D"MAT_METAL2"
         $0D"MAT_NONE"$0D"MAT_GREY_STONE"$0D"MAT_METAL3"$0D"MAT_CRATE1"$0D"MAT"
         "_GRATE1"$0D"MAT_ROPE"$0D"MAT_CRATE2"$0D"MAT_WHITE_METAL"
        values = "0"$0D"1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"1"
         "0"$0D"11"$0D"12"$0D"13"$0D"14"$0D"15"
      }
      radius: =
      {
        txt = "&"
        hint = "Chunk code tries to pick a good volume of chunks, but you can "
         "alter this to scale the number of spawned chunks. (default 1)  (.5) "
         "is half as many chunks, (2) is twice as many chunks"
        typ = "E"
      }
      dmgrad: =
      {
        txt = "&"
        hint = "Radius for explosion of dmg is set"
        typ = "E"
      }
      debrismodel: =
      {
        txt = "&"
        hint = "Model of debris chunks to throw when object is destroyed."
        typ = "C"
        items = "rock"$0D"chunks"$0D"wood"$0D"glass"$0D"none"
        values = "rock"$0D"chunks"$0D"wood"$0D"glass"$0D"none"
      }
      debrissound: =
      {
        txt = "&"
        hint = "Sound to play when debris hits a surface. Default is none."
        typ = "E"
      }
      breaksound: =
      {
        txt = "&"
        hint = "Sound to play when destroyed"
        typ = "E"
      }
      team: =
      {
        txt = "&"
        hint = "cannot take damage from members of this team"
        typ = "C"
        items = "player"$0D"neutral"$0D"enemy"
        values = "player"$0D"neutral"$0D"enemy"
      }      
      target: =
      {
        txt = "&"
        hint = "all entities with a matching targetname will be used when this"
         " is destoryed"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "entities with matching target will fire it"
        typ = "E"
      }
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
        typ = "E"
      }
      NPC_targetname: =
      {
        txt = "&"
        hint = "Only the NPC with this name can damage this"
        typ = "E"
      }
      forcevisible: =
      {
        txt = "&"
        hint = "When you turn on force sight (any level), you can see these draw through the entire level..."
        typ = "E"
      }
      redCrosshair: =
      {
        txt = "&"
        hint = "If set to 1, crosshair turns red when you look at this"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INVINCIBLE"
        hint = "can only be broken by being used"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "IMPACT"
        hint = "does damage on impact"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CRUSHER"
        hint = "won't reverse movement when hit an obstacle"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "THIN"
        hint = "can be broken by impact damage, like glass"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SABERONLY"
        hint = "only takes damage from sabers"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "HEAVY_WEAP"
        hint = "only takes damage by a heavy weapon, like an emplaced gun or A"
         "T-ST gun"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USE_NOT_BREAK"
        hint = "Using it doesn't make it break, still can be destroyed by dama"
         "ge"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_EXPLOSION"
        hint = "Does not play an explosion effect, though will still create ch"
         "unks if specified"
        typ = "X256"
      }
    }
    func_door:form =
    {
      target: =
      {
        txt = "&"
        hint = "Door fires this when it starts moving from it's closed positio"
         "n to its open position."
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "Door fires this when it starts moving from it's open position "
         "to its closed position."
        typ = "E"
      }
      opentarget: =
      {
        txt = "&"
        hint = "Door fires this after reaching its 'open' position"
        typ = "E"
      }
      closetarget: =
      {
        txt = "&"
        hint = "Door fires this after reaching its 'closed' position"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "if set, no touch field will be spawned and a remote button or "
         "trigger field activates the door."
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      sound: =
      {
        txt = "&"
        hint = "sound door makes when opening/closing"
        typ = "E"
      }
      soundset: =
      {
        txt = "&"
        hint = "soundset (sound preset) for this door"
        typ = "E"
      }
      linear: =
      {
        txt = "&"
        hint = "set to 1 and it will move linearly rather than with accelerati"
         "on (default is 0)"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default, set to negative for"
         " no damage)"
        typ = "E"
      }
      team: =
      {
        txt = "&"
        hint = "multiple doors to move as one unit"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "when used, how many seconds to wait before moving - default is"
         " none"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      sounds: =
      {
        txt = "&"
        hint = "sound door makes when opening/closing"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "wait before returning (3 default, -1 = never return)"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "movement speed (100 default)"
        typ = "E"
      }
      lip: =
      {
        txt = "&"
        hint = "lip remaining at end of move (8 default)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OPEN"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FORCE_ACTIVATE"
        hint = ""
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CRUSHER"
        hint = "crushes player"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TOGGLE"
        hint = "wait in both the start and end states for a trigger event - do"
         "es NOT work on Trek doors."
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LOCKED"
        hint = "Starts locked, with the shader animmap at the first frame and "
         "inactive.  Once used, the animmap changes to the second frame and th"
         "e door operates normally.  Note that you cannot use the door again a"
         "fter this."
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "GOODIE"
        hint = "Door will not work unless activator has a 'goodie key' in his "
         "inventory"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
    }
    func_static:form =
    {
      linear: =
      {
        txt = "&"
        hint = "set to 1 and it will move linearly rather than with accelerati"
         "on (default is 0)"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "how much damage to do when it crushes (use with CRUSHER spawnf"
         "lag)"
        typ = "E"
      }
      model2: =
      {
        txt = "&"
        hint = ".md3 model to also draw"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "constantLight color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "F_PUSH"
        hint = "Will be used when you Force-Push it"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "F_PULL"
        hint = "Will be used when you Force-Pull it"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SWITCH_SHADER"
        hint = "Toggle the shader anim frame between 1 and 2 when used"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CRUSHER"
        hint = "Make it do damage when it's blocked"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "IMPACT"
        hint = "Make it do damage when it hits any entity"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYER_USE"
        hint = "Player can use it with the use button"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "must be used by a target_activate before it can be used"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "BROADCAST"
        hint = "don't ever use this, it's evil"
        typ = "X256"
      }
    }
    emplaced_eweb:form =
    {
      bbox = '-12 -12 -24 12 12 24'
      wait: =
      {
        txt = "&"
        hint = "ONLY AFFECTS NPCs - time between bursts ( default 800 on harde"
         "st setting )"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "ONLY AFFECTS NPCs - time between shots ( default 200 on hardes"
         "t setting )"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much damage the gun can take before it blows ( default 250"
         " )"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "How much ammo to give this gun ( default 999 )"
        typ = "E"
      }
      splashdamage: =
      {
        txt = "&"
        hint = "how much damage a blowing up gun deals ( default 80 )"
        typ = "E"
      }
      splashradius: =
      {
        txt = "&"
        hint = "radius for exploding damage ( default 128 )"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "Cannot be used until used by a target_activate"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FACING"
        hint = "player must be facing relatively in the same direction as the "
         "gun in order to use it"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "VULNERABLE"
        hint = "allow the gun to take damage"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYERUSE"
        hint = "only the player makes it run its usescript"
        typ = "X8"
      }
    }
    emplaced_gun:form =
    {
      bbox = '-24 -24 0 24 24 64'
      wait: =
      {
        txt = "&"
        hint = "ONLY AFFECTS NPCs - time between bursts ( default 800 on harde"
         "st setting )"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "ONLY AFFECTS NPCs - time between shots ( default 200 on hardes"
         "t setting )"
        typ = "E"
      }
      health: =
      {
        txt = "&"
        hint = "how much damage the gun can take before it blows ( default 250"
         " )"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "if CANRESPAWN spawnflag, decides how long it is before gun res"
         "pawns (in ms)"$0D"[SP: how much ammo to give this gun ( default 999 "
         ")]"
        typ = "E"
      }
      splashdamage: =
      {
        txt = "&"
        hint = "how much damage a blowing up gun deals ( default 80 )"
        typ = "E"
      }
      splashradius: =
      {
        txt = "&"
        hint = "radius for exploding damage ( default 128 )"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CANRESPAWN [INACTIVE]"
        hint = "able to respawn"$0D"[SP: cannot be used until used by a target"
         "_activate]"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FACING"
        hint = "player must be facing relatively in the same direction as the "
         "gun in order to use it"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "VULNERABLE"
        hint = "allow the gun to take damage"
        typ = "X4"
      }
    }
    trigger_push:form =
    {
      speed: =
      {
        txt = "&"
        hint = "when used with the LINEAR spawnflag, pushes the client toward "
         "the position at a constant speed (default is 1000)"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "how long to wait between pushes: -1 = push only once"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "Must point at a target_position, which will be the apex of the"
         " leap."
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYERONLY"
        hint = "only the player is affected"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CHECKCLEAR"
        hint = "Every 1 second, it will check to see if it can trace to the ta"
         "rget_position, if it can, the trigger is touchable, if it can't, the"
         " trigger is not touchable"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LINEAR"
        hint = "Instead of tossing the client at the target_position, it will "
         "push them towards it.  Must set a speed"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NPCONLY"
        hint = "only NPCs are affected"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "RELATIVE"
        hint = "instead of pushing you in a direction that is always from the "
         "center of the trigger to the target_position, it pushes *you* toward"
         " the target position, relative to your current location (can use wit"
         "h 'speed'... if don't set a speed, it will use the distance from you"
         " to the target_position)"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "CONVEYOR"
        hint = "acts like a conveyor belt, will only push if player is on the "
         "ground ( should probably use RELATIVE also, if you want a true conve"
         "yor belt )"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "not active until targeted by a target_activate"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MULTIPLE"
        hint = "multiple entities can touch this trigger in a single frame *an"
         "d* if needed, the trigger can have a wait of > 0"
        typ = "X256"
      }
    }
    trigger_visible:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = "What to use when it fires."
        typ = "E"
      }
      FOV: =
      {
        txt = "&"
        hint = "how far off to the side of the player's field of view this can"
         " be, max, and still be considered 'seen'.  Player FOV is 80, so the "
         "default for this value is 30."
        typ = "E"
      }
      radius: =
      {
        txt = "&"
        hint = "how far this ent can be from player's eyes, max, and still be "
         "considered 'seen'"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NOTRACE"
        hint = "Doesn't check to make sure the line of sight is completely cle"
         "ar (penetrates walls, forcefields, etc)"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FORCESIGHT"
        hint = "Only activates this trigger if force sight is on"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "won't check for player visibility until activated"
        typ = "X128"
      }
    }
    trigger_hurt:form =
    {
      NPC_targetname: =
      {
        txt = "&"
        hint = "If set, only an NPC with a matching NPC_targetname will trip t"
         "his trigger"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Target name for use and switch"
        typ = "E"
      }
      noise: =
      {
        txt = "&"
        hint = "sound to play when it hurts something ( default: 'sound/world/"
         "electro' )"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "How many seconds it takes to get from 0 to 'dmg' (default is 0"
         ")"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Use in instead of 'SLOW' - determines how often the player get"
         "s hurt, 0.1 is every frame, 1.0 is once per second.  -1 will stop af"
         "ter one use"
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "If set, FALLING death causes a fade to black in this many mill"
         "iseconds (default is 10000 = 10 seconds)"
        typ = "E"
      }
      dmg: =
      {
        txt = "&"
        hint = "default 5 (whole numbers only)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "START_OFF"
        hint = ""
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYERONLY"
        hint = "only the player is hurt by it"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SILENT"
        hint = "supresses playing the sound"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_PROTECTION"
        hint = "*nothing* stops the damage"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LOCKCAM"
        hint = "Falling death results in camera locking in place"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FALLING"
        hint = "Forces a falling scream and anim"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ELECTRICAL"
        hint = "does electrical damage"
        typ = "X64"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "Cannot be triggered until used by a target_activate"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MULTIPLE"
        hint = "multiple entities can touch this trigger in a single frame *an"
         "d* if needed, the trigger can have a wait of > 0"
        typ = "X256"
      }
    }
    trigger_space:form =
    {
      bbox = '-8 -8 -8 8 8 8'
    }
    trigger_shipboundary:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = "name of entity to turn toward (can be info_notnull, or whatever)"
        typ = "E"
      }
      traveltime: =
      {
        txt = "&"
        hint = "time to travel in this direction"
        typ = "E"
      }
    }
    trigger_location:form =
    {
      message: =
      {
        txt = "&"
        hint = "location name"
        typ = "E"
      }
    }
    trigger_teleport:form =
    {
      target: =
      {
        txt = "&"
        hint = "Must point at a target_position, which will be the teleport de"
         "stination."
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SNAP_ANGLES"
        hint = "Make the entity that passes through snap to the target_position's angles"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_MISSILES"
        hint = "Missiles and thrown objects cannot pass through"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NO_NPCS"
        hint = "NPCs cannot pass through"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "STASIS"
        hint = "will play stasis teleport sound and fx instead of starfleet"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DEAD_OK"
        hint = "even if dead, you will teleport"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = ""
        typ = "X128"
      }
    }
    trigger_always:form =
    {
      bbox = '-8 -8 -8 8 8 8'
    }
    trigger_once:form =
    {
      NPC_targetname: =
      {
        txt = "&"
        hint = "If set, only an NPC with a matching NPC_targetname will trip t"
         "his trigger"
        typ = "E"
      }
      noise: =
      {
        txt = "&"
        hint = "Sound to play when the trigger fires (plays at activator's ori"
         "gin)"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "how many seconds to wait to fire targets after tripped"
        typ = "E"
      }
      soundSet: =
      {
        txt = "&"
        hint = "Ambient sound set to play when this trigger is activated"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Target name for use and switch"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "wait variance, default is 0"
        typ = "E"
      }
      team: =
      {
        txt = "&"
        hint = "If set, only this team can trip this trigger [player, enemy, n"
         "eutral]"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYERONLY"
        hint = "only a player can trigger this by touch"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FACING"
        hint = "Won't fire unless triggering ent's view angles are within 45 d"
         "egrees of trigger's angles (in addition to any other conditions)"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USE_BUTTON"
        hint = "Won't fire unless player is in it and pressing use button (in "
         "addition to any other conditions)"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FIRE_BUTTON"
        hint = "Won't fire unless player/NPC is in it and pressing fire button"
         " (in addition to any other conditions)"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NPCONLY"
        hint = "only non-player NPCs can trigger this by touch"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "Start off, has to be activated to be touchable/usable"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MULTIPLE"
        hint = "multiple entities can touch this trigger in a single frame *an"
         "d* if needed, the trigger can have a wait of > 0"
        typ = "X256"
      }
    }
    ammo_detpack:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    trigger_multiple:form =
    {
      NPC_targetname: =
      {
        txt = "&"
        hint = "If set, only an NPC with a matching NPC_targetname will trip t"
         "his trigger"
        typ = "E"
      }
      noise: =
      {
        txt = "&"
        hint = "Sound to play when the trigger fires (plays at activator's ori"
         "gin)"
        typ = "E"
      }
      delay: =
      {
        txt = "&"
        hint = "how many seconds to wait to fire targets after tripped"
        typ = "E"
      }
      speed: =
      {
        txt = "&"
        hint = "How many seconds to wait to fire the target2, default is 1"
        typ = "E"
      }
      soundSet: =
      {
        txt = "&"
        hint = "Ambient sound set to play when this trigger is activated"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "Seconds between triggerings, 0 default, number < 0 means one t"
         "ime only."
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = ""
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "The trigger will fire this only when the trigger has been acti"
         "vated and subsequently 'cleared'"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "Target name for use and switch"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "wait variance, default is 0"
        typ = "E"
      }
      hiderange: =
      {
        txt = "&"
        hint = "As long as NPC's head is in this trigger, NPCs out of this hid"
         "erange cannot see him.  If you set an angle on the trigger, they're "
         "only hidden from enemies looking in that direction."
        typ = "E"
      }
      team: =
      {
        txt = "&"
        hint = "If set, only this team can trip this trigger [player, enemy, n"
         "eutral]"
        typ = "E"
      }
      max_pilots: =
      {
        txt = "&"
        hint = "Number of pilots this spawner will allow"
        typ = "E"
      }
      roffname: =
      {
        txt = "&"
        hint = "If set, will play a roff upon activation"
        typ = "E"
      }
      rofftarget: =
      {
        txt = "&"
        hint = "If set with roffname, will activate the roff an entity with th"
         "is as its targetname. Otherwise uses roff on activating entity."
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "PLAYERONLY"
        hint = "Won't fire unless player is in it and pressing use button (in "
         "addition to any other conditions)"$0D"[SP: only a player can trigger"
         " this by touch]"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FACING"
        hint = "Only red team can use"$0D"[SP: Won't fire unless triggering en"
         "t's view angles are within 45 degrees of trigger's angles (in additi"
         "on to any other conditions)]"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "USE_BUTTON"
        hint = "Only blue team can use"$0D"[SP: Won't fire unless player is in"
         " it and pressing use button (in addition to any other conditions)]"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FIRE_BUTTON"
        hint = "Won't fire unless player/NPC is in it and pressing fire button"
         " (in addition to any other conditions)"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "NPCONLY"
        hint = "only non-player NPCs can trigger this by touch"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LIMITED_PILOT"
        hint = "only spawn if there are open pilot slots"
        typ = "X32"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INACTIVE"
        hint = "Start off, has to be activated to be touchable/usable"
        typ = "X128"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "MULTIPLE"
        hint = "multiple entities can touch this trigger in a single frame *an"
         "d* if needed, the trigger can have a wait of > 0"
        typ = "X256"
      }
    }
    ammo_metallic_bolts:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    ammo_rockets:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    ammo_force:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    ammo_blaster:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    ammo_powercell:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    ammo_tripmine:form =
    {
      bbox = '-8 -8 0 8 8 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    ammo_thermal:form =
    {
      bbox = '-16 -16 0 16 16 16'
      notfree: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in free for all games."
        type = "E"
      }
      notteam: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in team games."
        type = "E"
      }
      notsingle: =
      {
        txt = "&"
        hint = "If set to 1, don't spawn in Single Player games."
        type = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X16"
        Cap = "VERTICAL"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X32"
        Cap = "INVISIBLE"
        Hint = ""
      }
    }
    point_combat:form =
    {
      bbox = '-16 -16 -24 16 16 32'
      spawnflags: =
      {
        txt = "&"
        cap = "DUCK"
        hint = "NPC will duck and fire from this point, NOT IMPLEMENTED?"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "FLEE"
        hint = "will choose this point when running"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INVESTIGATE"
        hint = "Will look here if a sound is heard near it"
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SQUAD"
        hint = "NOT IMPLEMENTED"
        typ = "X8"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "LEAN"
        hint = "Lean-type cover, NOT IMPLEMENTED"
        typ = "X16"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SNIPE"
        hint = "Snipers look for these first, NOT IMPLEMENTED"
        typ = "X32"
      }
    }
    waypoint:form =
    {
      bbox = '-20 -20 -24 20 20 45'
      targetJump: =
      {
        txt = "&"
        hint = "is a special edge that only guys who can jump will cross (so basically Jedi)"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "SOLID_OK"
        hint = "only use if placing inside solid is unavoidable in map, but ma"
         "y be clear in-game (ie: at the bottom of a tall, solid lift that sta"
         "rts at the top position)"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "DROP_TO_FLOOR"
        hint = "will cause the point to auto drop to the floor"
        typ = "X2"
      }
      target: =
      {
        txt = "&"
        hint = "a first linked waypoint"
        typ = "E"
      }
      target2: =
      {
        txt = "&"
        hint = "a second linked waypoint"
        typ = "E"
      }
      target3: =
      {
        txt = "&"
        hint = "a third linked waypoint"
        typ = "E"
      }
      target4: =
      {
        txt = "&"
        hint = "a fourth linked waypoint"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "selfname of this waypoint"
        typ = "E"
      }
    }
    holocron_force_push:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    holocron_force_levitation:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    holocron_force_speed:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    holocron_force_pull:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    holocron_force_heal:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    holocron_force_telepathy:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    holocron_force_grip:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    holocron_force_lightining:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    holocron_force_saberthrow:form =
    {
      bbox = '-8 -8 0 8 8 16'
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning.  -1 = never respa"
         "wn automatically, which can be used with targeted spawning."
        typ = "E"
      }
      count: =
      {
        txt = "&"
        hint = "level of force power this holocron gives activator ( range: 0-"
         "3, default 1)"
        typ = "E"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn"
         " time"
        typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "SUSPENDED"
        Hint = "The suspended flag will allow items to hang in the air, otherw"
         "ise they are dropped to the next surface."
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "STARFLEET"
        Hint = "allows only starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "MONSTER"
        Hint = "allows only NON-starfleets to pick it up"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NOTSOLID"
        Hint = ""
      }
    }
    path_corner:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      speed: =
      {
        txt = "&"
        hint = "speed to move to the next corner"
        typ = "E"
      }
      wait: =
      {
        txt = "&"
        hint = "seconds to wait before behining move to next corner"
        typ = "E"
      }
      target: =
      {
        txt = "&"
        hint = "next path corner and other targets to fire"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "name of path_corner"
        typ = "E"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "TURN_TRAIN"
        hint = "func_train moving on this path will turn to face the next path"
         "_corner within 2 seconds"
        typ = "X1"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "INVISIBLE"
        hint = "train will become invisible ( but still solid ) when it reache"
         "s this path_corner. It will become visible again at the next path_co"
         "rner that does not have this option checked"
        typ = "X2"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "YAW_TRAIN"
        hint = ""
        typ = "X4"
      }
      spawnflags: =
      {
        txt = "&"
        cap = "ROLL_TRAIN"
        hint = ""
        typ = "X8"
      }
    }
    ref_tag:form =
    {
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = "use to point the tag at something for angles"
        typ = "E"
      }
      targetname: =
      {
        txt = "&"
        hint = "the name of this tag"
        typ = "E"
      }
      ownername: =
      {
        txt = "&"
        hint = "the owner of this tag"
        typ = "E"
      }
    }
    misc_dlight:form =
    {
      bbox = '-4 -4 -4 4 4 4'
      ownername: =
      {
        txt = "&"
        hint = "Will display the light at the origin of the entity with this t"
         "argetname"
        typ = "E"
      }
      startRGBA: =
      {
        Txt = "&"
        Hint = "Red Green Blue Radius to start with - This MUST be set or your"
         " light won't do anything"
        Typ = "EF4"
      }
      finalRGBA: =
      {
        Txt = "&"
        Hint = "Red Green Blue Radius to end with (with PULSE flag on)"
        Typ = "EF4"
      }
      speed: =
      {
        Txt = "&"
        Hint = "how long to take to fade from start to final and final to star"
         "t.  Also how long to fade on and off if appropriate flags are checke"
         "d (seconds) (with PULSE flag on)"
        Typ = "E"
      }
      starttime: =
      {
        Txt = "&"
        Hint = "how long to hold at start (seconds) (with PULSE flag on)"
        Typ = "E"
      }
      finaltime: =
      {
        Txt = "&"
        Hint = "how long to hold at final (seconds) (with PULSE flag on)"
        Typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        cap = "STARTOFF"
        Hint = "Starts off"
        Typ = "X1"
      }
      spawnflags: =
      {
        Txt = "&"
        cap = "FADEON"
        Hint = "Fades from 0 Radius to start Radius"
        Typ = "X2"
      }
      spawnflags: =
      {
        Txt = "&"
        cap = "FADEOFF"
        Hint = "Fades from current Radius to 0 Radius before turning off"
        Typ = "X4"
      }
      spawnflags: =
      {
        Txt = "&"
        cap = "PULSE"
        Hint = "This flag must be checked if you want it to fade/switch betwee"
         "n start and final RGBA, otherwise it will just sit at startRGBA"
        Typ = "X8"
      }
    }
    light:form =
    {
      light: =
      {
        Txt = "&"
        Hint = "light value, default 300"
        Typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "sets the light's color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "sets the light's color"
      }
      radius: =
      {
        Txt = "&"
        Typ = "E"
        Hint = "overrides the default 64 unit radius of a spotlight at the tar"
         "get point"
      }
      scale: =
      {
        Txt = "&"
        Hint = "multiplier for the light intensity - does not affect size (def"
         "ault 1)"
        Typ = "E"
      }
      style: =
      {
        typ = "C"
        txt = "&"
        hint = "specify a specify light style, even for switchable lights"
        items = "FLICKER #1"$0D"SLOW STRONG PULSE"$0D"CANDLE #1"$0D"FAST STROB"
         "E"$0D"GENTLE PULSE 1"$0D"FLICKER #2"$0D"CANDLE #2"$0D"CANDLE #3"$0D"S"
         "LOW STROBE"$0D"FLUORESCENT FLICKER"$0D"SLOW PULSE NOT FADE TO BLACK"$0D
         "FAST PULSE FOR JEREMY"$0D"Test Blending"
        values = "1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D
         "11"$0D"12"$0D"13"
      }
      style_off: =
      {
        typ = "C"
        txt = "&"
        hint = "specify a specify light style, even for switchable lights"
        items = "FLICKER #1"$0D"SLOW STRONG PULSE"$0D"CANDLE #1"$0D"FAST STROB"
         "E"$0D"GENTLE PULSE 1"$0D"FLICKER #2"$0D"CANDLE #2"$0D"CANDLE #3"$0D"S"
         "LOW STROBE"$0D"FLUORESCENT FLICKER"$0D"SLOW PULSE NOT FADE TO BLACK"$0D
         "FAST PULSE FOR JEREMY"$0D"Test Blending"
        values = "1"$0D"2"$0D"3"$0D"4"$0D"5"$0D"6"$0D"7"$0D"8"$0D"9"$0D"10"$0D
         "11"$0D"12"$0D"13"
      }
      _sun: =
      {
        Txt = "&"
        Typ = "E"
        Hint = "Set it 1 if it will a Sun light. But remember - sun light is a directed light, so you must set the Target parameter!"
      }
      target: =
      {
        Txt = "&"
        Typ = "E"
        Hint = "Lights pointed at a target will be spotlights"
      }
      targetname: =
      {
        Txt = "&"
        Typ = "E"
        Hint = "to indicate a switchable light - NOTE that all lights with the"
         " same targetname will be grouped together and act as one light (ie: "
         "don't mix colors, styles or start_off flag)"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "LINEAR"
        Hint = "checkbox gives linear falloff instead of inverse square"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "NOINCIDENCE"
        Hint = "makes lighting smoother"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "START_OFF"
        Hint = "Start off"
      }
    }
    lightJunior:form =
    {
      light: =
      {
        Txt = "&"
        Hint = "light value, default 300"
        Typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "sets the light's color"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "sets the light's color"
      }
      radius: =
      {
        Txt = "&"
        Typ = "E"
        Hint = "overrides the default 64 unit radius of a spotlight at the tar"
         "get point"
      }
      fade: =
      {
        Txt = "&"
        Hint = "falloff radius adjustment value"
        Typ = "E"
      }
      scale: =
      {
        Txt = "&"
        Hint = "multiplier for the light intensity - does not affect size (def"
         "ault 1)"
        Typ = "E"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X1"
        Cap = "NONLINEAR" 
        Hint = "gives inverse square falloff instead of linear"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X2"
        Cap = "ANGLE"
        Hint = "surface angle calculations, only valid for Linear lights"
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X4"
        Cap = "NEGATIVE_SPOT"
        Hint = ""
      }
      spawnflags: =
      {
        Txt = "&"
        Typ = "X8"
        Cap = "NEGATIVE_POINT"
        Hint = ""
      }
    }
    worldspawn:form =
    {
      music: =
      {
        txt = "&"
        hint = "path to WAV or MP3 files (e.g. 'music\intro.mp3 music\loopfile"
         ".mp3')"
        typ = "E"
      }
      gravity: =
      {
        txt = "&"
        hint = "800 is default gravity"
        typ = "E"
      }
      message: =
      {
        txt = "&"
        hint = "Text to print during connection"
        typ = "E"
      }
      soundSet: =
      {
        txt = "&"
        hint = "Ambient sound set to play"
        typ = "E"
      }
      breath: =
      {
        txt = "&"
        hint = "Whether the entity's have breath puffs or not (0 = No, 1 = All, 2 = Just cold breath, 3 = Just under water bubbles )"
        typ = "E"
      }
      clearstats: =
      {
        txt = "&"
        hint = "default 1, if 0 loading this map will not clear the stats for player"
        typ = "E"
      }
      tier_storyinfo: =
      {
        txt = "&"
        hint = "sets tier_storyinfo cvar"
        typ = "E"
      }
      spawnscript: =
      {
        txt = "&"
        hint = "runs this script"
        typ = "E"
      }
      gridsize: =
      {
        txt = "&"
        hint = "size of lighting grid to 'X Y Z'. default='64 64 128'"
        typ = "E3"
      }
      _gridsize: =
      {
        txt = "&"
        hint = "size of lighting grid to 'X Y Z'. default='64 64 128'"
        typ = "E3"
      }
      _minlight: =
      {
        txt = "&"
        hint = "minimum lighting on a surf.  overrides _mingridlight and _minvertexlight"
        typ = "E3"
      }
      _mingridlight: =
      {
        txt = "&"
        hint = "minimum lighting of lighting grid"
        typ = "E3"
      }
      _minvertexlight: =
      {
        txt = "&"
        hint = "minimum lighting on a vertex lighting surf"
        typ = "E3"
      }
      _noshadersun: =
      {
        txt = "&"
        hint = "no shader sun"
        typ = "E3"
      }
      _lightmapscale: =
      {
        txt = "&"
        hint = "scale size of lightmap"
        typ = "E3"
      }
      ambient: =
      {
        txt = "&"
        hint = "scale of global light (from _color)"
        typ = "E"
      }
      _color: =
      {
        Txt = "&"
        Hint = "color of ambient light"
      }
      _color: =
      {
        Txt = "&"
        Typ = "L"
        Hint = "color of ambient lightr"
      }
      fog: =
      {
        txt = "&"
        hint = "shader name of the global fog texture - must include the full "
         "path, such as 'textures/rj/fog1'"
        typ = "E"
      }
      distancecull: =
      {
        txt = "&"
        hint = "value for vis for the maximum viewing distance"
        typ = "E"
      }
      _blocksize: =
      {
        txt = "&"
        hint = "value for bsp on the maximum polygon / portal size"
        typ = "E3"
      }
      chopsize: =
      {
        txt = "&"
        hint = "value for bsp on the maximum polygon / portal size"
        typ = "E"
      }
      ls_Xr: =
      {
        txt = "&"
        hint = "override lightstyle X with this pattern for Red."
        typ = "E"
      }
      ls_Xg: =
      {
        txt = "&"
        hint = "green (valid patterns are 'a-z')"
        typ = "E"
      }
      ls_Xb: =
      {
        txt = "&"
        hint = "blue (a is OFF, z is ON)"
        typ = "E"
      }
    }
  }
}
