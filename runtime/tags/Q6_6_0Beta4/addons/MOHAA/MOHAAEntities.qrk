QQRKSRC1
// MOHAA Entities file for Quark

//$Header$
// ----------- REVISION HISTORY ------------
//$Log$
//Revision 1.2  2008/05/14 20:38:14  cdunde
//Fixed basic lighting in all games and a few other small typo errors.
//
//Revision 1.1  2008/03/28 19:08:47  cdunde
//Cleaned up, fixed if needed and brought into sync with all QuArK addons.
//
//

{
  QuArKProtected = "1"
  Description = "MOHAA Entities"

  t_originpoly:incl =
  {
    ORIGIN:p =
    {
      east:f = { v = '8 0 0 8 64 0 8 0 64' tex = "common/origin" }
      west:f = { v = '-8 0 0 -8 -64 0 -8 0 64' tex = "common/origin" }
      north:f = { v = '0 8 0 -64 8 0 0 8 64' tex = "common/origin" }
      south:f = { v = '0 -8 0 64 -8 0 0 -8 64' tex = "common/origin" }
      up:f = { v = '0 0 24 64 0 24 0 64 24' tex = "common/origin" }
      down:f = { v = '0 0 -24 64 0 -24 0 -64 -24' tex = "common/origin" }
    }
    poly:p =
    {
      east:f = { v = '32 -32 -32 32 96 -32 32 -32 96' tex = "[auto]" }
      west:f = { v = '-32 -32 -32 -32 -32 96 -32 96 -32' tex = "[auto]" m = "1" }
      north:f = { v = '-32 32 -32 -32 32 96 96 32 -32' tex = "[auto]" m = "1" }
      south:f = { v = '-32 -32 -32 96 -32 -32 -32 -32 96' tex = "[auto]" }
      up:f = { v = '-32 -32 32 96 -32 32 -32 96 32' tex = "[auto]" }
      down:f = { v = '-32 -32 -32 -32 96 -32 96 -32 -32' tex = "[auto]" m = "1" }
    }
  }

  Toolbox Folders.qtx =
  {
    Toolbox = "New map items..."
    Root = "MOHAA Entities.qtxfolder"
    MOHAA Entities.qtxfolder =
    {
      ai_* entities.qtxfolder =
      {
        ai_actor:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      func_* entities.qtxfolder =
      {
        func_barrel:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_crate:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_door:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_emitter:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_exploder:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_group:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_ladder:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_pushobject:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_rain:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_remove:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_rotatingdoor:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_teleportdest:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_viewjitter:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_window:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
      info_* entities.qtxfolder =
      {
        info_grenadehint:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_notnull:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_null:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_pathnode:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_allied:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_axis:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_deathmatch:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_intermission:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_start:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_splinepath:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_vehiclepoint:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_waypoint:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      other entities.qtxfolder =
      {
        detail:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        light:e =
        {
          _color = "1 1 1"
          light = "300"
          angles = "0 0 0"
          origin = "0 0 0"
        }
        worldspawn:b =
        {
        }
      }
      portal_* entities.qtxfolder =
      {
        portal_camera:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        portal_surface:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      script_* entities.qtxfolder =
      {
        script_door:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        script_model:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        script_object:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        script_origin:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        script_skyorigin:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
      sound_* entities.qtxfolder =
      {
        sound_randomspeaker:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        sound_speaker:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      trigger_* entities.qtxfolder =
      {
        trigger_changelevel:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_clickitem:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_hurt:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_multiple:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_multipleall:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_push:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_pushany:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_pushobject:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_relay:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        trigger_save:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_secret:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_teleport:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_use:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_useonce:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_vehicle:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
      vis_* entities.qtxfolder =
      {
        vis_leafgroup:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
      Weapons & Ammo.qtxfolder =
      {
        playerweapon_allied_bar:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "Browning automatic rifle."
        }
        playerweapon_allied_bazooka:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "umm its a bazooka?."
        }
        playerweapon_allied_colt45:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "Colt 45 pistol."
        }
        playerweapon_allied_highstandard-pistol:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "silenced pistol."
        }
        playerweapon_allied_m1-Garand:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "M1 Garand Rifle."
        }
        playerweapon_allied_m2-Grenade:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "Genade?."
        }
        playerweapon_allied_shotgun:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "shotgun."
        }
        playerweapon_allied_springfield:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "Springfield '03 Sniper Rifle."
        }
        playerweapon_allied_thompson:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "Thompson sub-machine gun."
        }
        playerweapon_german_kar98:e =
        {
          angle = "360"
          origin = "0 0 0"
          wait = "10"
          ;desc = "KAR 98 Rifle."
        }
        playerweapon_german_kar98-sniper:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "KAR 98 sniper rifle."
        }
        playerweapon_german_mp40:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "MP40 sub Machine gun."
        }
        playerweapon_german_mp44:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "mp44 sub Machine gun."
        }
        playerweapon_german_p38:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "P38 pistol."
        }
        playerweapon_german_panzerschreck:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "Panzerschreck."
        }
        playerweapon_german_steilhandgranate:e =
        {
          angle = "360"
          origin = "0 0 0"
          ;desc = "steilhandgranate."
        }
      }
    }
  }

  Entity forms.fctx =
  {
    // Definition of "includes"

    t_soundbrowser:incl =
    {
      txt = "&"
      Typ = "EP"
      BasePath = "$Game\tmpQuArK\sound"
      CutPath = "$Game\?\?\"
      DefExt = "wav"
      DirSep = "/"
    }

    ai_actor:form =
    {
      bbox = '-16 -16 0 16 16 92'
    }
    func_barrel:form =
    {
      help = "Brush model barrel object"$0D"Bashing only makes thunk or gong s"
       "ounds (depending on wether it's full or not)"$0D"Bullets and explosion"
       "s effects are dependant apon the type of barrel."$0D22"barreltype"$22" "
       "sets the type of barrel that it is. Valid settings are:"$0D"- "$22"wat"
       "er"$22" makes the barrel be filled with water."$0D"Always non-volitile"
       ". Only destroyed by explosion."$0D"- "$22"oil"$22" makes the barrel be"
       " filled with oil."$0D"Leakes oil when shot (not destroyed), shower of "
       "flames when exploded."$0D"- "$22"gas"$22" makes the barrel be filled w"
       "ith gas."$0D"A few bullet hits will make it explode."$0D"Explosions wi"
       "ll also make it explode."$0D"- "$22"empty"$22" makes the barrel comple"
       "tely empty."$0D"Does nothing special at all. It's just a poor empty ba"
       "rrel. aww :("
      spawnflags: =
      {
        typ = "X1"
        cap = "INDESTRUCTABLE"
      }
      targetname: =
      {
      Txt = "&"
      }
      target: =
      {
      Txt = "&"
      }
      barreltype: =
        {
        Txt = "&"
        Hint = $0D
        Typ="C"
          items =
          "water" $0D
          "oil" $0D
          "gas" $0D
          "empty" $0D
          values =
          "water" $0D
          "oil" $0D
          "gas" $0D
          "empty" $0D
        }
      }
    info_splinepath:form =
    {
      bbox = '-16 -16 -16 16 16 16'
    }
    func_crate:form =
    {
      help = "Brush model crate object"$0D22"spawnitems"$22" is a list of item"
       "s to spawn when the crate is destroyed."$0D"INDESTRUCTABLE makes the c"
       "rate, well, indestructable."$0D"Since the same effect can be achieved "
       "by not making it an entity, this should only"$0D"be used when stacking"
       " indestructable crates on top of destructable crates."$0D"Otherwise, t"
       "hey should just be brushes to save on entity count."$0D"NOTSTACKED pre"
       "vents the crate from causing crates above it to fall. Great for crates"
       " on shelves."$0D22"health"$22" sets the crate's health. Default is 300"
       $0D22"debristype"$22" sets the type of debris to spawn from the crate. "
       "Valid values are from 0 - ?. Default is 0"$0D"0: wooden crate 32 units"
       " to a side"$0D"1: wooden crate 64 units to a side"$0D"2: cardboard cra"
       "te 16 units to a side"$0D"3: cardboard crate 32 units to a side"

      spawnflags: =
      {
        typ = "X1"
        cap = "INDESTRUCTABLE"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NOTSTACKEDON"
      }
      targetname: =
      {
      Txt = "&"
      }
      target: =
      {
      Txt = "&"
      }
      health: =
      {
      Txt = "&"
      Hint = "Sets the crates health. Default is 300."
      }
      debristype: =
      {
      Txt = "&"
      Hint = "Sets the type of debris from the crate. Default is 0."
      Typ="C"
        items = 
        "Wooden crate, 32 units to a side." $0D
        "Wooden crate, 64 units to a side." $0D
        "Cardboard crate, 16 units to a side." $0D
        "Cardboard crate, 32 units to a side."
        values =
        "0"$0D
        "1"$0D
        "2"$0D
        "3"
        }	
      spawnitems: =
      {
      Txt = "&"
      Hint = "This is a list of items to spawn when the crate is destroyed."
      }	
    }
    func_rotatingdoor:form =
    {
      help = "if two doors touch, they are assumed to be connected and operate"
       " as a unit."$0D"TOGGLE causes the door to wait in both the start and e"
       "nd states for a trigger event."$0D"DOOR_DONT_LINK is for when you have"
       " two doors that are touching but you want to operate independently."$0D
       "START_OPEN causes the door to move to its destination when spawned, an"
       "d operate in reverse.  It is used to temporarily or permanently close "
       "off an area when triggered (not usefull for touch or takedamage doors)"
       "."$0D"OPEN_DIRECTION indicates which direction to open when START_OPEN"
       " is set."$0D"AUTO_OPEN causes the door to open when a player is near i"
       "nstead of waiting for the player to use the door."$0D"TARGETED door is"
       " only operational from triggers or script"$0D22"message"$22"        is"
       " printed when the door is touched if it is a trigger door and it hasn'"
       "t been fired yet"$0D22"openangle"$22"        how wide to open the door"
       $0D22"angle"$22"            determines the opening direction.  point to"
       "ward the middle of the door (away from the hinge)"$0D22"targetname"$22
       "    if set, no touch field will be spawned and a remote button or trig"
       "ger field activates the door."$0D22"health"$22"        if set, door mu"
       "st be shot open"$0D22"time"$22"            move time (0.3 default)"$0D
       $22"wait"$22"            wait before returning (3 default, -1 = never r"
       "eturn)"$0D22"dmg"$22"            damage to inflict when blocked (0 def"
       "ault)"$0D22"alwaysaway"$22"    makes the door always open away from th"
       "e opener"$0D22"sound_open"$22"        Specify the sound that plays whe"
       "n the door starts opening (default global door_wood_open)"$0D22"sound_"
       "close"$22"        Specify the sound that plays when the door starts cl"
       "osing (default global door_wood_close)"$0D22"sound_message"$22"       "
       " Specify the sound that plays when the door displays a message"$0D22"s"
       "ound_locked"$22"        Specify the sound that plays when the door is "
       "locked (default global door_wood_locked)"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "OPEN_DIRECTION"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DOOR_DONT_LINK"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "TOGGLE"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "AUTO_OPEN"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "TARGETED"
      }
      targetname: = 
      {
      Txt = "&"
      Hint = "If set, no touchfield will be spawned and a trigger or " $0D
      "button activates the door."
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      message: =
      {
      Txt = "&"
      Hint = "This text is printed when the door is touched, but"$0D 
      "only if it is a trigger door and hasn't been fired yet."
      }
      openangle: =
      {
      Txt = "&"
      Hint = "How wide to open the door."
      }
      angle: =
      {
      Txt = "&"
      Hint = "Determines the opening direction."
      }
      health: =
      {
      Txt = "&"
      Hint = "If set, the door must be shot open."
      }
      time: =
      {
      Txt = "&"
      Hint = "Move time (default is 0.3)."
      }
      wait: =
      {
      Txt = "&"
      Hint = "Time to wait before returning." $0D
      "3 is default, -1 = never return."
      }
      dmg: =
      {
      Txt = "&"
      Hint = "Damage to inflict when blocked."
      }
      alwaysaway: =
      {
      Txt = "&"
      Hint = "Makes the door always open away from the opener."
      }
      sound_open: =
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door" $0D
      "starts opening (default is global door_wood open)."
      }
      sound_close: = 
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door" $0D
      "starts closing (default is global door_wood open)."
      }
      sound_message: =
      {
      Txt = "&"
      Hint = "Specify the sounds that is played when displaying a message."
      }
      sound_locked: =
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door is locked" $0D
      "(default is global door_wood_locked)."
      }
    }
    func_door:form =
    {
      help = "if two doors touch, they are assumed to be connected and operate"
       " as a unit."$0D"TOGGLE causes the door to wait in both the start and e"
       "nd states for a trigger event."$0D"DOOR_DONT_LINK is for when you have"
       " two doors that are touching but you want to operate independently."$0D
       "START_OPEN causes the door to move to its destination when spawned, an"
       "d operate in reverse.  It is used to temporarily or permanently close "
       "off an area when triggered (not usefull for touch or takedamage doors)"
       "."$0D"OPEN_DIRECTION indicates which direction to open when START_OPEN"
       " is set."$0D"AUTO_OPEN causes the door to open when a player is near i"
       "nstead of waiting for the player to use the door."$0D"TARGETED door is"
       " only operational from triggers or script"$0D22"message"$22"        is"
       " printed when the door is touched if it is a trigger door and it hasn'"
       "t been fired yet"$0D22"angle"$22"            determines the opening di"
       "rection.  point toward the middle of the door (away from the hinge)"$0D
       $22"targetname"$22"    if set, no touch field will be spawned and a rem"
       "ote button or trigger field activates the door."$0D22"health"$22"     "
       "       if set, door must be shot open"$0D22"speed"$22"            move"
       " speed (100 default)"$0D22"time"$22"            move time (1/speed def"
       "ault, overides speed)"$0D22"wait"$22"            wait before returning"
       " (3 default, -1 = never return)"$0D22"lip"$22"                lip rema"
       "ining at end of move (8 default)"$0D22"dmg"$22"                damage "
       "to inflict when blocked (0 default)"$0D22"sound_stop"$22"        Speci"
       "fy the sound that plays when the door stops moving (default global doo"
       "r_stop)"$0D22"sound_move"$22"        Specify the sound that plays when"
       " the door opens or closes (default global door_moving)"$0D22"sound_mes"
       "sage"$22"    Specify the sound that plays when the door displays a mes"
       "sage"$0D22"sound_locked"$22"       Specify the sound that plays when t"
       "he door is locked"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DOOR_DONT_LINK"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "TOGGLE"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "AUTO_OPEN"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "TARGETED"
      }
      targetname: = 
      {
      Txt = "&"
      Hint = "If set, no touchfield will be spawned and a trigger or " $0D
      "button activates the door."
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      message: =
      {
      Txt = "&"
      Hint = "This text is printed when the door is touched, but"$0D 
      "only if it is a trigger door and hasn't been fired yet."
      }
      angle: =
      {
      Txt = "&"
      Hint = "Determines the opening direction."
      }
      health: =
      {
      Txt = "&"
      Hint = "If set, the door must be shot open."
      }
      time: =
      {
      Txt = "&"
      Hint = "Move time (default is 0.3)."
      }
      lip: = 
      {
      Txt = "&"
      Hint = "Lip remaining at end of move (default is 8)."
      }
      wait: =
      {
      Txt = "&"
      Hint = "Time to wait before returning." $0D
      "3 is default, -1 = never return."
      }
      dmg: =
      {
      Txt = "&"
      Hint = "Damage to inflict when blocked."
      }
      sound_open: =
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door" $0D
      "starts opening (default is global door_wood open)."
      }
      sound_close: = 
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door" $0D
      "starts closing (default is global door_wood open)."
      }
      sound_message: =
      {
      Txt = "&"
      Hint = "Specify the sounds that is played when displaying a message."
      }
      sound_locked: =
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door is locked" $0D
      "(default is global door_wood_locked)."
      }
    }
    script_door:form =
    {
      help = "if two doors touch, they are assumed to be connected and operate"
       " as a unit."$0D"TOGGLE causes the door to wait in both the start and e"
       "nd states for a trigger event."$0D"DOOR_DONT_LINK is for when you have"
       " two doors that are touching but you want to operate independently."$0D
       "START_OPEN causes the door to move to its destination when spawned, an"
       "d operate in reverse.  It is used to temporarily or permanently close "
       "off an area when triggered (not usefull for touch or takedamage doors)"
       "."$0D"OPEN_DIRECTION indicates which direction to open when START_OPEN"
       " is set."$0D"AUTO_OPEN causes the door to open when a player is near i"
       "nstead of waiting for the player to use the door."$0D"TARGETED door is"
       " only operational from triggers or script"$0D22"message"$22"        is"
       " printed when the door is touched if it is a trigger door and it hasn'"
       "t been fired yet"$0D22"angle"$22"            determines the opening di"
       "rection.  point toward the middle of the door (away from the hinge)"$0D
       $22"targetname"$22"    if set, no touch field will be spawned and a rem"
       "ote button or trigger field activates the door."$0D22"health"$22"     "
       "       if set, door must be shot open"$0D22"speed"$22"            move"
       " speed (100 default)"$0D22"time"$22"            move time (1/speed def"
       "ault, overides speed)"$0D22"wait"$22"            wait before returning"
       " (3 default, -1 = never return)"$0D22"dmg"$22"                damage t"
       "o inflict when blocked (0 default)"$0D22"initthread"$22"   code to exe"
       "cute to setup the door (optional)"$0D22"openthread"$22"   code to exec"
       "ute when opening the door (required)"$0D"The openthread should send th"
       "e "$22"dooropened"$22" event to the door, when it is completely open"$0D
       $22"closethread"$22"  code to execute when closing the door (required)"$0D
       "The closethread should send the "$22"doorclosed"$22" event to the door"
       ", when it is completely closed"$0D22"sound_stop"$22"        Specify th"
       "e sound that plays when the door stops moving (default global door_sto"
       "p)"$0D22"sound_move"$22"        Specify the sound that plays when the "
       "door opens or closes (default global door_moving)"$0D22"sound_message"$22
       "    Specify the sound that plays when the door displays a message"$0D22
       "sound_locked"$22"       Specify the sound that plays when the door is "
       "locked"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DOOR_DONT_LINK"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOT_MONSTERS"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "TOGGLE"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "AUTO_OPEN"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "TARGETED"
      }	
      targetname: = 
      {
      Txt = "&"
      Hint = "If set, no touchfield will be spawned and a trigger or " $0D
      "button activates the door."
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      message: =
      {
      Txt = "&"
      Hint = "This text is printed when the door is touched, but"$0D 
      "only if it is a trigger door and hasn't been fired yet."
      }
      angle: =
      {
      Txt = "&"
      Hint = "Determines the opening direction."
      }
      health: =
      {
      Txt = "&"
      Hint = "If set, the door must be shot open."
      }
      speed: =
      {
      Txt = "&"
      Hint = "Move speed (100 is default)."
      }
      time: =
      {
      Txt = "&"
      Hint = "Move time (default is 0.3). Overrides speed."
      }
      wait: =
      {
      Txt = "&"
      Hint = "Time to wait before returning." $0D
      "3 is default, -1 = never return."
      }
      dmg: =
      {
      Txt = "&"
      Hint = "Damage to inflict when blocked."
      }
      initthread: =
      {
      Txt = "&"
      Hint = "Code to execute to setup the door (optional)."
      }
      openthread: =
      {
      Txt = "&"
      Hint = "Code to execute when opening the door (required)."
      }
      closethread: = 
      {
      Txt = "&"
      Hint = "Code to execute when closing the door (required)."
      }
      sound_move: =
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door" $0D
      "opens or closes. (default is global door_moving)."
      }
      sound_stop: = 
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door" $0D
      "stops moving (default is global door_stop)."
      }
      sound_message: =
      {
      Txt = "&"
      Hint = "Specify the sounds that is played when displaying a message."
      }
      sound_locked: =
      {
      Txt = "&"
      Hint = "Specify the sound that plays when the door is locked" $0D
      "(default is global door_wood_locked)."
      }
    }
    func_viewjitter:form =
    {
      help = "Causes a radius view jitter"$0D22"radius"$22" sets the max effec"
       "tive range if the view jitter. Default is 128"$0D22"edgeeffect"$22" se"
       "t the fraction of the total jitter to apply at the max range. Default "
       "is 0.2"$0D22"jitteramount"$22" sets the amount to jitter the view. Set"
       " in angles as "$22"pitch yaw roll"$22". Default is "$22"2 2 3"$220D22"d"
       "uration"$22" set how long the view jitter should last. Default is 0 (i"
       "nstantanious)"$0D22"timedecay"$22" sets how the jitter angles will fal"
       "l off over the jitter's duraction in degrees per second. Default is "$22
       "2 2 3"$220D22"donedeath"$22" makes the view jitter remove itself after"
       " being fired once. Any non-zero value will work."
        bbox = '-8 -8 -8 8 8 8'
        radius: =
        {
        Txt = "&"
        Hint = "Sets the max effective range for the view jitter (default is 128)."
        }
        edgeeffect: =
        {
        Txt = "&"
        Hint = "Sets the fraction of the total jitter to apply at" $0D
        "at the maximum range (default is 0.2)."
        }
      }
    func_exploder:form =
    {
      help = "Spawns an explosion when triggered.  Triggers any targets."$0D22
       "dmg"$22" specifies how much damage to cause. Default indicates 120."$0D
       $22"key"$22" The item needed to activate this. (default nothing)"$0D22"s"
       "etthread"$22" name of thread to trigger.  This can be in a different s"
       "cript file as well\"$0D"by using the '::' notation."
      bbox = '0 0 0 8 8 8'
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: = 
      {
      Txt = "&"
      Hint = "&"
      }
      dmg: =
      {
      Txt = "&"
      Hint = "Specifies how much damge to cause (default is 120)."
      }
      key: =
      {
      Txt = "&"
      Hint = "The item needed to activate this (default is none)."
      }
      setthread: =
      {
      Txt = "&"
      Hint = "Name of the thread to trigger (this can be in a different"$0D
             "script file as well, by using the '::' notation)."
      }
    }
    info_grenadehint:form =
    {
      help = "Just a hint to the AI that it may be able to throw a grenade thr"
       "ough this point"
      bbox = '-8 -8 -8 8 8 8'
    }
    light:form =
    {
      help = "Non-displayed light. If it targets another entity it will become"
       " a spot light"$0D"if "$22"LINEAR"$22" is set, it will be a linear ligh"
       "t"$0D"if "$22"NO_ENTITIES"$22" is set, this light will only effect the"
       " world, not entities"$0D"if "$22"ENTITY_TRACE"$22" is set, a trace is "
       "done betwee the light and the entity."$0D"if "$22"ENTITY_ONLY"$22" is "
       "set, this light will only effect entities, not the world"$0D"The light"
       " is only added if the trace is clear"$0D22"no_entity_light"$22" - this"
       " light will not effect entities, just the world"$0D22"light"$22" - the"
       " intensity of the light, default 300"$0D22"color"$22" - the color of t"
       "he light"$0D22"falloff"$22" - if linear, specify the linear falloff (d"
       "efaults to 1)"$0D22"radius"$22" - make this a spot light of the given "
       "radius"$0D22"angles"$22" - make this a spot light centered on angles"$0D
       $22"spot_angle"$22" - if this is a spot light, what angle to use (defau"
       "lt 45)"$0D22"entity_trace"$22" - trace between the entity and the ligh"
       "t"$0D22"overbright_range"$22" - fraction of standard overbright range "
       "used for overbrighting (0.01 - 2.5).  Default = 1"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "LINEAR"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "NO_ENTITIES"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "ENTITY_TRACE"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "ENTITY_ONLY"
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      light: =
      {
      Txt = "&"
      Hint = "The intensity of the light (default 300)."
      }
      _color: =
      {
      Txt = "&"
      Hint = "The color of the light."
      }
      _color: =
      {
      Txt = "&"
      Typ = "LN"
      Hint = "Click here to pick the light color."
      }
      falloff: =
      {
      Txt = "&"
      Hint = "If the light is linear, this specifies"$0D
      "the linear fallof (default is 1)."
      }
      radius: =
      {
      Txt = "&"
      Hint= "Makes this a spotlight with the given radius."
      }
      angles: =
      {
      Txt = "&"
      Hint = "Makes this a spotlight centered on angles."
      }
      spot_angle: =
      {
      Txt = "&"
      Hint = "If this is a spotlight, this specifies what angle to use (default is 45)."
      }
      entity_trace: =
      {
      Txt = "&"
      Hint = "Trace between the entity and the light."
      }
      overbright_range: =
      {
      Txt = "&"
      Hint = "Fraction of standard overbright range used"$0D
      "for overbrighting (0.01 - 2.5, default is 1)."
      }
    }
    detail:form =
    {
      help = "Used to fake detail brushes, convenient for grouping"
    }
    func_group:form =
    {
      help = "Used to group brushes together just for editor convenience."
    }
    vis_leafgroup:form =
    {
      help = "Used to manually block visibility between groups of leafs."
    }
    func_remove:form =
    {
      help = "Used for lighting and such"
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
    }
    info_null:form =
    {
      help = "Used as a positional target for spotlights, etc."
      bbox = '-4 -4 -4 4 4 4'
    }
    info_notnull:form =
    {
      help = "Used as a positional target for lightning."
      bbox = '-4 -4 -4 4 4 4'
    }
    trigger_teleport:form =
    {
      help = "Touching this entity will teleport players to the targeted objec"
       "t."$0D22"key"$22"                        The item needed to activate t"
       "his. (default nothing)"$0D22"teleportthread"$22"        The thread tha"
       "t is run when the player is teleported"$0D"If NOT_PLAYERS is set, the "
       "teleporter does not teleport players"$0D"If MONSTERS is set, the telep"
       "orter teleports monsters"$0D"If PROJECTILES is set, the teleporter tel"
       "eports projectiles (rockets, grenades, etc.)"$0D"If NO_EFFECTS is set,"
       " the special effect will not happen and the teleport will be instant"$0D
       "If FAST_EFFECTS is set, the teleport will be instant, and the effects "
       "will appear"
      spawnflags: =
      {
        typ = "X1"
        cap = "VISIBLE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "NO_EFFECTS"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "FAST_EFFECTS"
      }
    }
    func_teleportdest:form =
    {
      help = "Point trigger_teleport at these."
      bbox = '-32 -32 0 32 32 8'
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "This should be name you point trigger_teleport at."
      }
    }
    info_waypoint:form =
    {
      help = "Used as a positioning device for objects"
      bbox = '-8 -8 -8 8 8 8'
    }
    info_vehiclepoint:form =
    {
      help = "Like info_waypoints, but with spawnflags for vehicles."
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_STOPPING"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "START_SKIDDING"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "STOP_SKIDDING"
      }
    }
    func_pushobject:form =
    {
      help = "Pushable object"$0D22"dmg"$22" how much damage to cause when blo"
       "cked.  (default 2)"$0D22"pushsound"$22" Sound to play when object is p"
       "ushed (default is none)"
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
      dmg: =
      {
      Txt = "&"
      Hint = "How much damage to cause when blocked."
      }
      pushsound: =
      {
      Txt = "&"
      Hint = "Sound to play when the object is pushed (default is none)."
      }
    }
    func_ladder:form =
    {
      help = "Ladder trigger volume"
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: = 
      {
      Txt = "&"
      Hint = "Targetname."
      }
    }
    func_emitter:form =
    {
      help = $22"emitter"$22" - Name of emitter to use."
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
      emitter: =
      {
      Txt = "&"
      Hint = "Name of the emitter to use."
      }
    }
    func_rain:form =
    {
      help = "This creates a raining effect in the brush"$0D22"emitter"$22" - "
       "Name of emitter to use for the rain."
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
      emitter: =
      {
      Txt = "&"
      Hint = "Name of the emitter to use for the rain."
      }
    }
    info_pathnode:form =
    {
      help = "DONT_LINK marks the node as not linking into navigation."$0D"DUC"
       "K marks the node as a good place to crouch at during weapon fire."$0D"C"
       "OVER marks the node as a good place to hide at during weapon fire."$0D
       "CONCEALMENT marks the node as a cover node that doesn't get sight chec"
       "ked; use for foliage and combat locations."$0D"CORNER_LEFT marks the n"
       "ode as a place to fire around a corner to the left; cannot also be CRA"
       "TE"$0D"CORNER_RIGHT marks the node as a place to fire around a corner "
       "to the right; cannot also be CRATE"$0D"SNIPER marks the node as a snip"
       "er node. Actor will move to the sniper node to target the enemy if dir"
       "ectly running towards the enemy is inconvenient."$0D"CRATE marks the n"
       "ode as a place to stand up and fire over; should always be used with D"
       "UCK"$0D"corner behaviors should have their origin 16 units from the wa"
       "ll and 16 units from the appropriate corner."
      bbox = '-16 -16 0 16 16 32'
      spawnflags: =
      {
        typ = "X1"
        cap = "DONT_LINK"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "DUCK"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "COVER"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "CONCEALMENT"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "CORNER_LEFT"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "CORNER_RIGHT"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "SNIPER"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "CRATE"
      }
    }
    info_player_start:form =
    {
      help = "The normal starting point for a level."$0D22"angle"$22" - the di"
       "rection the player should face"$0D22"thread"$22" - the thread that sho"
       "uld be called when spawned at this position"
      bbox = '-16 -16 0 16 16 96'
    }
    info_player_deathmatch:form =
    {
      help = "potential spawning position for deathmatch games"$0D22"angle"$22
       " - the direction the player should face"$0D22"thread"$22" - the thread"
       " that should be called when spawned at this position"$0D22"arena"$22" "
       "- the arena that this start point is located in"
      bbox = '-16 -16 0 16 16 96'
    }
    info_player_allied:form =
    {
      help = "potential spawning position for an allied player in a team games"
       "... ignored for FFA."$0D22"angle"$22" - the direction the player shoul"
       "d face"$0D22"thread"$22" - the thread that should be called when spawn"
       "ed at this position"$0D22"arena"$22" - the arena that this start point"
       " is located in"
      bbox = '-16 -16 0 16 16 96'
    }
    info_player_axis:form =
    {
      help = "potential spawning position for an axis player in a team games.."
       ". ignored for FFA."$0D22"angle"$22" - the direction the player should "
       "face"$0D22"thread"$22" - the thread that should be called when spawned"
       " at this position"$0D22"arena"$22" - the arena that this start point i"
       "s located in"
      bbox = '-16 -16 0 16 16 96'
    }
    info_player_intermission:form =
    {
      help = "viewing point in between deathmatch levels"
      bbox = '-16 -16 0 16 16 96'
    }
    portal_surface:form =
    {
      help = "The portal surface nearest this entity will show a view from the"
       " targeted portal_camera, or a mirror view if untargeted."
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
    }
    portal_camera:form =
    {
      help = "The target for a portal_surface.  You can set either angles or t"
       "arget another entity to determine the direction of view."$0D22"roll"$22
       " an angle modifier to orient the camera around the target vector;"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "slowrotate"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "fastrotate"
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
    }
    script_object:form =
    {
      spawnflags: =
      {
        typ = "X1"
        cap = "NOT_SOLID"
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
    }
    script_model:form =
    {
      bbox = '0 0 0 0 0 0'
      spawnflags: =
      {
        typ = "X1"
        cap = "NOT_SOLID"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "ALWAYS_DRAW"
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
    }
    script_origin:form =
    {
      help = "Used as an alternate origin for objects.  Bind the object to the"
       " script_origin"$0D"in order to simulate changing that object's origin."
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
      Txt = "&"
      Hint = "Target."
	  }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
    }
    script_skyorigin:form =
    {
      help = "Used to specify the origin of a portal sky"
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
    }
    trigger_multiple:form =
    {
      help = "Variable sized repeatable trigger.  Must be targeted at one or m"
       "ore entities."$0D"If "$22"health"$22" is set, the trigger must be kill"
       "ed to activate each time."$0D"If "$22"delay"$22" is set, the trigger w"
       "aits some time after activating before firing."$0D22"setthread"$22" na"
       "me of thread to trigger.  This can be in a different script file as we"
       "ll\"$0D"by using the '::' notation."$0D"if "$22"angle"$22" is set, the"
       " trigger will only fire when someone is facing the"$0D"direction of th"
       "e angle."$0D22"cone"$22" the cone in which a directed trigger can be t"
       "riggered (default 60 degrees)"$0D22"wait"$22" : Seconds between trigge"
       "rings. (.2 default)"$0D22"cnt"$22" how many times it can be triggered "
       "(infinite default)"$0D22"triggerable"$22" turn trigger on"$0D22"nottri"
       "ggerable"$22" turn trigger off"$0D"If NOT_PLAYERS is set, the trigger "
       "does not respond to players"$0D"If MONSTERS is set, the trigger will r"
       "espond to monsters"$0D"If PROJECTILES is set, the trigger will respond"
       " to projectiles (rockets, grenades, etc.)"$0D"If DAMAGE is set, the tr"
       "igger will only respond to bullets"$0D"set "$22"message"$22" to text s"
       "tring"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "DAMAGE"
      }
      health: =
      {
      Txt = "&"
      Hint = "If this is set, the trigger must be killed to activate each time."
      }
      delay: =
      {
      Txt = "&"
      Hint = "The trigger waits some time after activation, before firing."
      }
      setthread: =
      {
      Txt = "&"
      Hint = "Name of the thread to trigger."
      }
      angle: =
      {
      Txt = "&"
      Hint = "If this is set, the trigger will only fire when someone faces"$0D
             "the angle."
      }
      cone: =
      {
      Txt = "&"
      Hint = "The cone in which a directed trigger can be triggered (default is 60 degrees)."
      }
      wait: =
      {
      Txt = "&"
      Hint = "Seconds between dus triggerings (0.2 is default)."
      }
      cnt: =
      {
      Txt = "&"
      Hint = "How many times it can be triggered (default is infinite)."
      }
      triggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger on."
      }
      nottriggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger off."
      }
    }
    trigger_vehicle:form =
    {
      help = "works exactly like a trigger_multiple but only responds to vehic"
       "les."
    }
    trigger_multipleall:form =
    {
      help = "Variable sized repeatable trigger.  Must be targeted at one or m"
       "ore entities."$0D"If "$22"health"$22" is set, the trigger must be kill"
       "ed to activate each time."$0D"If "$22"delay"$22" is set, the trigger w"
       "aits some time after activating before firing."$0D22"setthread"$22" na"
       "me of thread to trigger.  This can be in a different script file as we"
       "ll\"$0D"by using the '::' notation."$0D"if "$22"angle"$22" is set, the"
       " trigger will only fire when someone is facing the"$0D"direction of th"
       "e angle."$0D22"cone"$22" the cone in which a directed trigger can be t"
       "riggered (default 60 degrees)"$0D22"wait"$22" : Seconds between trigge"
       "rings. (.2 default)"$0D22"triggerable"$22" turn trigger on"$0D22"nottr"
       "iggerable"$22" turn trigger off"$0D"If NOT_PLAYERS is set, the trigger"
       " does not respond to players"$0D"If MONSTERS is set, the trigger will "
       "respond to monsters"$0D"If PROJECTILES is set, the trigger will respon"
       "d to projectiles (rockets, grenades, etc.)"$0D"If DAMAGE is set, the t"
       "rigger will only respond to bullets"$0D"set "$22"message"$22" to text "
       "string"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "DAMAGE"
      }
      health: =
      {
      Txt = "&"
      Hint = "If this is set, the trigger must be killed to activate each time."
      }
      delay: =
      {
      Txt = "&"
      Hint = "The trigger waits some time after activation, before firing."
      }
      setthread: =
      {
      Txt = "&"
      Hint = "Name of the thread to trigger."
      }
      angle: =
      {
      Txt = "&"
      Hint = "If this is set, the trigger will only fire when someone faces"$0D
             "the angle."
      }
      cone: =
      {
      Txt = "&"
      Hint = "The cone in which a directed trigger can be triggered (default is 60 degrees)."
      }
      wait: =
      {
      Txt = "&"
      Hint = "Seconds between dus triggerings (0.2 is default)."
      }
      triggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger on."
      }
      nottriggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger off."
      }
    }
    trigger_save:form =
    {
      help = "Variable sized trigger. Triggers once, then removes itself."$0D"Y"
       "ou must set the key "$22"target"$22" to the name of another object in "
       "the"$0D"level that has a matching"$0D22"savename"$22". The Save Name t"
       "hat is appended to the world.message."$0D"If "$22"health"$22" is set, "
       "the trigger must be killed to activate it."$0D"If "$22"delay"$22" is s"
       "et, the trigger waits some time after activating before firing."$0D22"t"
       "argetname"$22".  If "$22"health"$22" is set, the trigger must be kille"
       "d to activate."$0D22"setthread"$22" name of thread to trigger.  This c"
       "an be in a different script file as well\"$0D"by using the '::' notati"
       "on."$0D"if "$22"killtarget"$22" is set, any objects that have a matchi"
       "ng "$22"target"$22" will be"$0D"removed when the trigger is fired."$0D
       "if "$22"angle"$22" is set, the trigger will only fire when someone is "
       "facing the"$0D"direction of the angle."$0D22"cone"$22" the cone in whi"
       "ch a directed trigger can be triggered (default 60 degrees)"$0D22"trig"
       "gerable"$22" turn trigger on"$0D22"nottriggerable"$22" turn trigger of"
       "f"$0D"If NOTOUCH is set, trigger will not respond to touch"$0D"If NOT_"
       "PLAYERS is set, the trigger does not respond to players"$0D"If MONSTER"
       "S is set, the trigger will respond to monsters"$0D"If PROJECTILES is s"
       "et, the trigger will respond to projectiles (rockets, grenades, etc.)"$0D
       "set "$22"message"$22" to text string"
      spawnflags: =
      {
        typ = "X1"
        cap = "NOTOUCH"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_relay:form =
    {
      help = "This fixed size trigger cannot be touched, it can only be fired "
       "by other events."$0D"It can contain killtargets, targets, delays, and "
       "messages."$0D"If NOT_PLAYERS is set, the trigger does not respond to e"
       "vents triggered by players"$0D"If MONSTERS is set, the trigger will re"
       "spond to events triggered by monsters"$0D"If PROJECTILES is set, the t"
       "rigger will respond to events triggered by projectiles (rockets, grena"
       "des, etc.)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_secret:form =
    {
      help = "Secret counter trigger.  Automatically sets and increments scrip"
       "t variables \"$0D"level.total_secrets and level.found_secrets."$0D"set"
       " "$22"message"$22" to text string"$0D"if "$22"angle"$22" is set, the t"
       "rigger will only fire when someone is facing the"$0D"direction of the "
       "angle."$0D22"cone"$22" the cone in which a directed trigger can be tri"
       "ggered (default 60 degrees)"$0D22"setthread"$22" name of thread to tri"
       "gger.  This can be in a different script file as well \"$0D"by using t"
       "he '::' notation.  (defaults to "$22"global/universal_script.scr::secr"
       "et"$22")"$0D22"triggerable"$22" turn trigger on"$0D22"nottriggerable"$22
       " turn trigger off"$0D"If NOTOUCH is set, trigger will not respond to t"
       "ouch"$0D"If NOT_PLAYERS is set, the trigger does not respond to player"
       "s"$0D"If MONSTERS is set, the trigger will respond to monsters"$0D"If "
       "PROJECTILES is set, the trigger will respond to projectiles (rockets, "
       "grenades, etc.)"
      spawnflags: =
      {
        typ = "X1"
        cap = "NOTOUCH"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_push:form =
    {
      help = "Pushes entities as if they were caught in a heavy wind."$0D22"sp"
       "eed"$22" indicates the rate that entities are pushed (default 1000)."$0D
       $22"angle"$22" indicates the direction the wind is blowing (-1 is up, -"
       "2 is down)"$0D22"target"$22" if target is set, then a velocity will be"
       " calculated based on speed"$0D22"triggerable"$22" turn trigger on"$0D22
       "nottriggerable"$22" turn trigger off"$0D"If NOT_PLAYERS is set, the tr"
       "igger does not push players"$0D"If MONSTERS is set, the trigger will p"
       "ush monsters"$0D"If PROJECTILES is set, the trigger will push projecti"
       "les (rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    trigger_pushany:form =
    {
      help = "Pushes entities as if they were caught in a heavy wind."$0D22"sp"
       "eed"$22" indicates the rate that entities are pushed (default 1000)."$0D
       $22"angles"$22" indicates the direction of the push"$0D22"target"$22" i"
       "f target is set, then a velocity will be calculated based on speed"$0D
       $22"triggerable"$22" turn trigger on"$0D22"nottriggerable"$22" turn tri"
       "gger off"$0D"If NOT_PLAYERS is set, the trigger does not push players"$0D
       "If MONSTERS is set, the trigger will push monsters"$0D"If PROJECTILES "
       "is set, the trigger will push projectiles (rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
    }
    sound_speaker:form =
    {
      help = "play a sound when it is used"$0D"AMBIENT-ON specifies an ambient"
       " sound that starts on"$0D"AMBIENT-OFF specifies an ambient sound that "
       "starts off"$0D"TOGGLE specifies that the speaker toggles on triggering"
       $0D"if (AMBIENT-?) is not set, then the sound is sent over explicitly t"
       "his creates more net traffic"$0D22"volume"$22" how loud 0-4 (1 default"
       " full volume, ambients do not respond to volume)"$0D22"noise"$22" soun"
       "d to play"$0D22"channel"$22" channel on which to play sound\"$0D"(0 au"
       "to, 1 weapon, 2 voice, 3 item, 4 body, 8 don't use PHS) (voice is defa"
       "ult)"$0D22"setthread"$22" name of thread to trigger.  This can be in a"
       " different script file as well\"$0D"by using the '::' notation."$0D"No"
       "rmal sounds play each time the target is used."$0D"Ambient Looped soun"
       "ds have a volume 1, and the use function toggles it on/off."$0D"If NOT"
       "_PLAYERS is set, the trigger does not respond to players"$0D"If MONSTE"
       "RS is set, the trigger will respond to monsters"$0D"If PROJECTILES is "
       "set, the trigger will respond to projectiles (rockets, grenades, etc.)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "AMBIENT"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "ON"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "AMBIENT"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "OFF"
      }
      spawnflags: =
      {
        typ = "X64"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X128"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X256"
        cap = "PROJECTILES"
      }
      spawnflags: =
      {
        typ = "X512"
        cap = "TOGGLE"
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
      noise: =
      {
        t_soundbrowser = !
        hint = "wav file to play."$0D$0D
           "The file selection button ... to the right"$0D
           "lets you pick the sound you want by clicking on it."$0D
           "Create a sub-folder named 'sound' in your tmpQuArk folder"$0D
           "and place your .wav files there. You can also create"$0D
           "sub-folders within the 'sound' folder to group your files."$0D
           $0D"Right clicking on the sound file will let you play it."$0D
           "The path is set so it will work if put into a .pak file."
      }
      channel: =
      {
      Txt = "&"
      Hint = "The channel on which to play the sound."
      Typ="C"
        items = 
        "Auto."$0D
        "Body"$0D
        "Item."$0D
        "Weaponidle."$0D
        "Voice."$0D
        "Local."$0D
        "Weapon."$0D
        "Dialog_Secondary."$0D
        "Dialog."$0D
        "Menu."
      values = 
        "0"$0D
        "1"$0D
        "2"$0D
        "3"$0D
        "4"$0D
        "5"$0D
        "6"$0D
        "7"$0D
        "8"$0D
        "9"
      }
      volume: =
      {
      Txt = "&"
      Hint = "The loudness of the sound (1 is default, ranges from 0 to 4)."
      }
      setthread: =
      {
      Txt = "&"
      Hint ="Name of the thread to trigger. This can be in a different" 
		  "script file as well by using the '::' notation."
      }
    }
    sound_randomspeaker:form =
    {
      help = "play a sound at random times"$0D22"mindelay"$22" minimum delay b"
       "etween sound triggers (default 3)"$0D22"maxdelay"$22" maximum delay be"
       "tween sound triggers (default 10)"$0D22"chance"$22" chance that sound "
       "will play when fired (default 1)"$0D22"volume"$22" how loud 0-4 (1 def"
       "ault full volume)"$0D22"noise"$22" sound to play"$0D22"channel"$22" ch"
       "annel on which to play sound\"$0D"(0 auto, 1 weapon, 2 voice, 3 item, "
       "4 body, 8 don't use PHS) (voice is default)"$0D"Normal sounds play eac"
       "h time the target is used."$0D"If NOT_PLAYERS is set, the trigger does"
       " not respond to players"$0D"If MONSTERS is set, the trigger will respo"
       "nd to monsters"$0D"If PROJECTILES is set, the trigger will respond to "
       "projectiles (rockets, grenades, etc.)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname:=
      {
      Txt = "&"
      Hint = "Targetname."
      }
      mindelay: =
      {
      Txt = "&"
      Hint = "Minimum delay between soundtriggers (default is 3)."
      }
      maxdelay: =
      {
      Txt = "&"
      Hint = "The maximum delay between soundtriggers (default is 10)."
      }
      chance: =
      {
      Txt = "&"
      Hint = "The chance that a sound will play when fired (default is 1)."
      }
      volume: =
      {
      Txt = "&"
      Hint = "The loudness of the sound (1 is default, ranges from 0 to 4)."
      }
      noise: =
      {
        t_soundbrowser = !
        hint = "wav file to play."$0D$0D
           "The file selection button ... to the right"$0D
           "lets you pick the sound you want by clicking on it."$0D
           "Create a sub-folder named 'sound' in your tmpQuArk folder"$0D
           "and place your .wav files there. You can also create"$0D
           "sub-folders within the 'sound' folder to group your files."$0D
           $0D"Right clicking on the sound file will let you play it."$0D
           "The path is set so it will work if put into a .pak file."
      }
      channel: =
      {
      Txt = "&"
      Hint = "The channel on which to play the sound."
      Typ="C"
        items = 
        "Auto."$0D
        "Body"$0D
        "Item."$0D
        "Weaponidle."$0D
        "Voice."$0D
        "Local."$0D
        "Weapon."$0D
        "Dialog_Secondary."$0D
        "Dialog."$0D
        "Menu."
      values = 
        "0"$0D
        "1"$0D
        "2"$0D
        "3"$0D
        "4"$0D
        "5"$0D
        "6"$0D
        "7"$0D
        "8"$0D
        "9"
      }
    }
    trigger_changelevel:form =
    {
      help = "When the player touches this, he gets sent to the map listed in "
       "the "$22"map"$22" variable."$0D"Unless the NO_INTERMISSION flag is set"
       ", the view will go to the info_intermission"$0D"spot and display stats"
       "."$0D22"spawnspot"$22"  name of the spawn location to start at in next"
       " map."$0D22"setthread"$22" This defaults to "$22"LevelComplete"$22" an"
       "d should point to a thread that is called just"$0D"before the level en"
       "ds."$0D22"triggerable"$22" turn trigger on"$0D22"nottriggerable"$22" t"
       "urn trigger off"$0D"If NOT_PLAYERS is set, the trigger does not respon"
       "d to players"$0D"If MONSTERS is set, the trigger will respond to monst"
       "ers"$0D"If PROJECTILES is set, the trigger will respond to projectiles"
       " (rockets, grenades, etc.)"
      spawnflags: =
      {
        typ = "X1"
        cap = "NO_INTERMISSION"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
      spawnspot: =
      {
      Txt = "&"
      Hint = "Name of the spawnlocation to start at in the next map."
      }
      setthread: =
      {
      Txt = "&"
      Hint = "This defaults to 'LevelComplete' and should point to a thread that is called just before the level ends."
      }
      triggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger on."
      }
      nottriggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger off."
      }
    }
    trigger_use:form =
    {
      help = "Activates targets when 'used' by an entity"$0D22"setthread"$22" "
       "name of thread to trigger.  This can be in a different script file as "
       "well\"$0D"by using the '::' notation."$0D22"triggerable"$22" turn trig"
       "ger on"$0D22"nottriggerable"$22" turn trigger off"$0D"If NOT_PLAYERS i"
       "s set, the trigger does not respond to players"$0D"If MONSTERS is set,"
       " the trigger will respond to monsters"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
    }
    trigger_useonce:form =
    {
      help = "Activates targets when 'used' by an entity, but only once"$0D22"s"
       "etthread"$22" name of thread to trigger.  This can be in a different s"
       "cript file as well\"$0D"by using the '::' notation."$0D22"triggerable"$22
       " turn trigger on"$0D22"nottriggerable"$22" turn trigger off"$0D"If NOT"
       "_PLAYERS is set, the trigger does not respond to players"$0D"If MONSTE"
       "RS is set, the trigger will respond to monsters"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
    }
    trigger_hurt:form =
    {
      help = $22"damage"$22" amount of damage to cause. (default 10)"$0D22"dam"
       "agetype"$22" what kind of damage should be given to the player. (defau"
       "lt CRUSH)"$0D22"triggerable"$22" turn trigger on"$0D22"nottriggerable"$22
       " turn trigger off"$0D"If NOT_PLAYERS is set, the trigger does not hurt"
       " players"$0D"If MONSTERS is set, the trigger hurts monsters"$0D"If PRO"
       "JECTILES is set, the trigger will hurt projectiles (rockets, grenades,"
       " etc.)"
      spawnflags: =
      {
        typ = "X4"
        cap = "NOT_PLAYERS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "MONSTERS"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "PROJECTILES"
      }
      damage: =
      {
      Txt = "&"
      Hint = "Amount of damage to cause (default is 10)."
      }
      damagetype: =
      {
      Txt = "&"
      Hint = "What type of damage a player should reveive (default is CRUSH)."
      Typ = "C"  
        items =
          "water"$0D
          "lava"$0D
          "spikes"$0D
          "bottomless pit"$0D
          "grass"
        values =
          "0"$0D
          "1"$0D
          "2"$0D
          "3"$0D
          "4"
      }
      triggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger on."
      }
      nottriggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger off."
      }
    }
    trigger_pushobject:form =
    {
      help = "Special trigger that can only be triggered by a push object."$0D
       $22"triggername"$22" if set, trigger only responds to objects with a ta"
       "rgetname the same as triggername."$0D22"cnt"$22" how many times it can"
       " be triggered (default 1, use -1 for infinite)"
    }
    trigger_clickitem:form =
    {
      help = "Trigger that detects a hit by items like the camera of binocular"
       "s."$0D"If "$22"delay"$22" is set, the trigger waits some time after ac"
       "tivating before firing."$0D22"reverbtype"$22" what kind of reverb shou"
       "ld be used"$0D22"reverblevel"$22" how much of the reverb effect should"
       " be applied"$0D22"altreverbtype"$22" what kind of reverb should be use"
       "d"$0D22"altreverblevel"$22" how much of the reverb effect should be ap"
       "plied"$0D22"edgeTriggerable"$22" trigger only fires when entering a tr"
       "igger"$0D22"multiFaceted"$22" if 1, then trigger is North/South separa"
       "te triggerable\"$0D"if 2, then trigger East/West separate triggerable"$0D
       $22"setthread"$22" name of thread to trigger.  This can be in a differe"
       "nt script file as well\"$0D"by using the '::' notation."$0D22"wait"$22
       " : Seconds between triggerings. (1.0 default)"$0D22"cnt"$22" how many "
       "times it can be triggered (infinite default)"$0D22"oneshot"$22" make t"
       "his a one time trigger"$0D22"triggerable"$22" turn trigger on"$0D22"no"
       "ttriggerable"$22" turn trigger off"
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
      delay: =
      {
      Txt = "&"
      Hint = "If set the trigger waits after activating before firing."
      }
      reverbtype: =
      {
      Txt = "&"
      Hint = "What kind of reverb should be used."
      }
      reverblevel: =
      {
      Txt = "&"
      Hint = "How much of the reverb effect should be applied."
      }
      altreverbtype: =
      {
      Txt = "&"
      Hint = "What kind of reverb should be used."
      }
      altreverblevel: =
      {
      Txt = "&"
      Hint = "How much of the reverb effect should be applied."
      }
      edgeTriggerable: =
      {
      Txt = "&"
      Hint = "Trigger only fires when entering a trigger."
      }
      multiFaced: =
      {
      Txt = "&"
      Hint = "If 1, then the trigger is North/South separate triggerable."$0D
             "If 2, then the trigger is East/West saparate triggerable."
      Typ="C"
      items = 
        "Neither."$0D
        "North/South."$0D
        "East/West."
        values = 
        "0"$0D
        "1"$0D
        "2"
      }
      setthread: =
      {
      Txt = "&"
      Hint = "Name of thread to trigger."
      }
      wait: =
      {
      Txt = "&"
      Hint = "Seconds between triggerings (default is 0."
      }
      cnt: =
      {
      Txt = "&"
      Hint = "How many times it can be triggered (default is infinite)."
      }
      oneshot: =
      {
      Txt = "&"
      Hint = "Makes this a one time trigger."
      }
      triggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger on."
      }
      nottriggerable: =
      {
      Txt = "&"
      Hint = "Turn trigger off."
      }
    }
    func_window:form =
    {
      help = "Brush model Window object"$0D22"spawnitems"$22" is a list of ite"
       "ms to spawn when the Window is destroyed."$0D22"health"$22" sets the W"
       "indow's health. Default is 250"$0D22"debristype"$22" sets the type of "
       "debris to spawn from the Window. Valid values are from 0 - ?. Default "
       "is 0"$0D"0: clear glass Window"$0D"1: colored glass Window"$0D22"targe"
       "t"$22" is the targetname of the script_object to use as the broken ver"
       "sion of the window"$0D"WINDOW_BROKEN_BLOCK will make the window still "
       "block the passage of the player & monsters when broken"
      spawnflags: =
      {
        typ = "X1"
        cap = "WINDOW_BROKEN_BLOCK"
      }
      target: =
      {
      Txt = "&"
      Hint = "Target."
      }
      targetname: =
      {
      Txt = "&"
      Hint = "Targetname."
      }
      spawnitems: =
      {
      Txt = "&"
      Hint = "This is a list of items to spawn when the window is destroyed."
      }
      health: =
      {
      Txt = "&"
      Hint = "This sets the window's health (default is 250)."
      }
      debristype: =
      {
      Txt = "&"
      Hint = "Sets the type of debris to spawn from the window."
      Typ="C"
      items =
        "Clear glass."$0D
        "Coloured glass."
        values = 
        "0"$0D
        "1"
      }
    }
    worldspawn:form =
    {
      help = "Only used for the world."$0D22"soundtrack"$22" the soundtrack to"
       " use on the map"$0D22"gravity"$22"     800 is default gravity"$0D22"sk"
       "ipthread"$22" thread that is activated to skip this level (if cinemati"
       "c)"$0D22"nextmap"$22"    map to goto when player exits"$0D22"message"$22
       "     text to print at user logon"$0D22"script"$22"        script to ru"
       "n on start of map"$0D22"farplane_color"$22" color to fade to when the "
       "far clip plane is on"$0D22"farplane_cull"$22" whether or not the far p"
       "lane should cull, default is yes"$0D22"farplane"$22"   distance from t"
       "he viewer that the far clip plane is"$0D22"ambientlight"$22" ambient l"
       "ighting to be applied to all entities"$0D22"ambient"$22"    ambient li"
       "ghting to be applied to all entities, use _color to specify color"$0D22
       "suncolor"$22"   color (and intensity) of the sun. Full daylight would "
       "be "$22"70 70 70"$220D22"sundirection"$22" direction of the sun in the"
       " level"$0D22"sundiffuse"$22" fraction of the sunlight to make diffuse "
       "(default 1)"$0D22"sundiffusecolor"$22" color of the diffuse sunlight. "
       "Uses the same value scale as suncolor."$0D22"sunflarename"$22" sets th"
       "e flare to use for the sun (default is sun)"$0D22"sunflaredirection"$22
       " allows you to specify a direction of the sun flare. Defaluts to using"
       " the direction specified for the sunlight."$0D22"lightmapdensity"$22" "
       "default lightmap density to be used for all surfaces"$0D22"overbright"$22
       " forces on overbright lighting. "$22"world"$22" makes it only affect t"
       "he world, "$22"entities"$22" makes it affect entity lighting, and "$22
       "all"$22" makes it affect both. Also, setting it to "$22"none"$22" forc"
       "es all overbright lighting off."$0D22"skyalpha"$22"   initial value of"
       " the sky's alpha, defaults to 1"$0D22"vis_derived"$22" whether or not "
       "the vis compiler derives additional vis info from the manual vis. defa"
       "ult is 0. 0 means vis compile will be slower since manual vis data is "
       "added after auto vis data. 1 means vis is faster and lower runtime pol"
       "y count, but erroneous no draw could result from incorrect manual vis "
       "data."$0D22"ai_visiondistance"$22" default vision distance for all ai,"
       " defaults to 2048"$0D22"northyaw"$22" sets the yaw angle that is consi"
       "dered to be north"
      spawnflags: =
      {
        typ = "X1"
        cap = "CINEMATIC"
      }
      soundtrack: =
      {
      	Txt = "&"
      	Hint = "The soundtrack to use on the map."
      }
      gravity: =
      {
      	Txt = "&"
      	Hint = "Default gravity is 800."
      }
      skipthread: = 
      {
      	Txt = "&"
      	Hint = "Thread that is activated to skip this level (if cinematic)."
      }
      nextmap: =
      {
      	Txt = "&"
      	Hint = "Map to go to when player exits this level."
      }
      message: =
      {
      	Txt = "&"
      	Hint = "Text to print at user logon."
      }
      script: = 
      {
      	Txt = "&"
      	Hint = "Script to run at the start of the level."
      }
      farplane_color: =
      {
      	Txt = "&"
      	Hint = "Colour to fade when the far clip plane is on."
      }
      farplane_cull: =
      {
      	Txt = "&"
      	Hint = "Whether or not the far plane should cull (default is yes)."
      }
      farplane: =
      {
      	Txt = "&"
      	Hint = "Distance from the viewer that the far clip plane is set."
      }
      ambientlight: =
      {
      	Txt = "&"
      	Hint = "Ambient lightning to be applied to all entities."
      }
      ambient: =
      {
      	Txt = "&"
      	Hint = "Abient lightning to be applied to all entities, use _color to specifie the colour."
      }
      suncolor: =
      {
      	Txt = "&"
      	Hint = "Color (and intensity) of the sun. Full daylight is 70 70 70."
      }
      sundirection: =
      {
      	Txt = "&"
      	Hint = "Direction of the sun in the level."
      }
      sundiffuse: =
      {
      	Txt = "&"
      	Hint = "Fraction of the sunlight to make diffuse (default is 1)."
      }
      sundiffusecolor: =
      {
      	Txt = "&"
      	Hint = "Colour of the diffuse sunlight. Uses the same scale as suncolor."
      }
      sunflarename: =
      {
      	Txt = "&"
      	Hint = "Sets the flare to use for the sun (default is sun)."
      }
      sunflaredirection: =
      {
      	Txt = "&"
      	Hint = "Allows you to specify the direction of the sun flare"$0D
      		   "(defaults to using the direction specified for the sunlight)."
      }
      lightmapdensity: =
      {
      	Txt = "&"
      	Hint = "Default lightmap density to be used for all surfaces."
      }
      overbright: = 
      {
      	Txt = "&"
      	Hint = "Forces on overbright lightening. 'World' makes it only"$0D
      		   "affect the world, 'entities' makes it affect entity lightning,"$0D
      		   " and 'all' makes it affect both. Setting it to 'none' forces"$0D
      		   "all overbright lightning off."
      }
      skyalpha: =
      {
      	Txt = "&"
      	Hint = "Initial value of the sky's alpha (default is 1)."
      }
      vis_derived: =
      {
      	Txt = "&"
      	Hint = "Whether or not the vis compiler derives additional vis info from the manual vis (default is 0)."$0D   
      	"Setting the value to 0 means will be slower since manual vis data is added after auto vis data. Setting"$0D
      	"the value to 1 means vis is faster and lower runtime poly count, but erroneous no draw could result"$0D 
      	"from incorrect manual vis data."
      }
      ai_visiondistance: =
      {
      	Txt = "&"
      	Hint = "Default vision distance for all ai (default is 2048)."
      }
      northyaw: =
      {
      	Txt = "&"
      	Hint = "Sets the yaw angle that is considered to be north."
      }	
    }
  }
}


