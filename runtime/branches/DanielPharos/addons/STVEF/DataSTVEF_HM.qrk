QQRKSRC1
// STVEF Holomatch definition file for Quark

//$Header$
// ----------- REVISION HISTORY ------------
//$Log$
//Revision 1.2  2007/04/16 11:35:43  danielpharos
//Added begin of support for EF2. Changed STVEF naming to be more consistent. Added ForceFaceFlags option.
//
//Revision 1.1  2006/09/08 07:56:27  cdunde
//Complete revamping of STVEF files and addition of HM addon
//for multiplayer editing by DanielPharos.
//
//
//template 2000-09-17
//
{
  QuArKProtected = "1"
  Description = "Base STVEF HM data"
  Toolbox Folders.qtx =
  {
    Toolbox = "New map items..."
    Root = "Entities for hm_entities.def.qtxfolder"
    Entities for hm_entities.def.qtxfolder =
    {
      ;desc = "Created from hm_entities.def"
      ammo_* entities.qtxfolder =
      {
        ammo_compressionrifle:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        ammo_dreadnought:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        ammo_grenades:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        ammo_imod:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        ammo_quantumburst:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        ammo_scavenger:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        ammo_stasis:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        ammo_tetriondisruptor:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      func_* entities.qtxfolder =
      {
        func_bobbing:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_breakable:b =
        {
          Damage = "none"
          material = "none"
          angle = "360"
          ;incl = "defpoly"
        }
        func_button:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_door:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_forcefield:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_group:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_pendulum:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_plat:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_rotating:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_static:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_timer:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        func_train:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        func_usable:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
      fx_* entities.qtxfolder =
      {
        fx_bolt:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        fx_drip:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        fx_spark:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        fx_steam:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        fx_transporter:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      holdable_* entities.qtxfolder =
      {
        holdable_detpack:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        holdable_medkit:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        holdable_shield:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        holdable_transporter:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      Holographic_* entities.qtxfolder =
      {
        Holographic_decoy:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      info_* entities.qtxfolder =
      {
        info_camp:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_notnull:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_null:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_deathmatch:e =
        {
          editormodel = "models/players2/arjofa/arjofa_blue.md3"
          angle = "360"
          origin = "0 0 0"
        }
        info_player_intermission:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        info_player_start:e =
        {
          editormodel = "models/players2/arjofa/arjofa_blue.md3"
          angle = "360"
          origin = "0 0 0"
        }
      }
      item_* entities.qtxfolder =
      {
        item_armor_body:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_armor_combat:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_armor_shard:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_botroam:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_enviro:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_flight:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_haste:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_hypo:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_hypo_small:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_invis:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_quad:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_regen:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        item_seeker:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      misc_* entities.qtxfolder =
      {
        misc_ammo_station:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        misc_laser_arm:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        misc_model_breakable:e =
        {
          Damage = "none"
          material = "none"
          angle = "360"
          origin = "0 0 0"
        }
        misc_portal_camera:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        misc_portal_surface:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        misc_teleporter_dest:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        misc_turret:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      other entities.qtxfolder =
      {
        light:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        worldspawn:b =
        {
        }
      }
      path_* entities.qtxfolder =
      {
        path_corner:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      shooter_* entities.qtxfolder =
      {
        shooter_grenade:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        shooter_plasma:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        shooter_rocket:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      target_* entities.qtxfolder =
      {
        target_counter:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_delay:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_give:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_kill:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_laser:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_location:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_objective:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_position:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_print:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_push:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_relay:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_remove_powerups:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_score:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_speaker:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        target_teleporter:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
      team_* entities.qtxfolder =
      {
        team_CTF_blueflag:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        team_CTF_blueplayer:e =
        {
          editormodel = "models/players2/arjofa/arjofa_blue.md3"
          angle = "360"
          origin = "0 0 0"
        }
        team_CTF_bluespawn:e =
        {
          editormodel = "models/players2/arjofa/arjofa_blue.md3"
          angle = "360"
          origin = "0 0 0"
        }
        team_CTF_redflag:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        team_CTF_redplayer:e =
        {
          editormodel = "models/players2/arjofa/arjofa_red.md3"
          angle = "360"
          origin = "0 0 0"
        }
        team_CTF_redspawn:e =
        {
          editormodel = "models/players2/arjofa/arjofa_red.md3"
          angle = "360"
          origin = "0 0 0"
        }
      }
      trigger_* entities.qtxfolder =
      {
        trigger_always:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        trigger_hurt:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_multiple:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_push:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
        trigger_teleport:b =
        {
          angle = "360"
          ;incl = "defpoly"
        }
      }
      weapon_* entities.qtxfolder =
      {
        weapon_borg_assimilator:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_borg_weapon:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_compressionrifle:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_dreadnought:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_grenadelauncher:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_imod:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_phaser:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_quantumburst:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_scavenger:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_stasisweapon:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_tetriondisruptor:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
        weapon_voyager_hypo:e =
        {
          angle = "360"
          origin = "0 0 0"
        }
      }
    }
  }

  Entity Forms.fctx =
  {
    // Definition of "includes"

    t_commonspecifics:incl =
    {
      target: =
      {
        txt = "&"
        hint = "Name of the entity that this one targets."
      }
      targetname: =
      {
        txt = "&"
        hint = "Name of this entity, used as a target by another entity."
      }
      notfree: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in free for all games."
      }
      notteam: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in team games."
      }
      notsingle: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in single player games."
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning."$0D
               "-1 = never respawn automatically,"$0D
               "which can be used with targeted spawning."
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn time."
      }
      count: =
      {
        txt = "&"
        hint = "override quantity or duration on most items."
      }
    }

    weapon_phaser:form =
    {
      bbox = '-2 -2 0 8 2 4'
      mdl = "models/weapons2/phaser/phaser_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_compressionrifle:form =
    {
      bbox = '-12 -2 -2 20 2 12'
      mdl = "models/weapons2/prifle/prifle_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_imod:form =
    {
      bbox = '-6 -4 -2 18 4 12'
      mdl = "models/weapons2/imod/imod2_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_scavenger:form =
    {
      bbox = '-6 -4 -2 22 4 10'
      mdl = "models/weapons2/scavenger/scavenger_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_stasisweapon:form =
    {
      bbox = '0 -10 0 20 4 10'
      mdl = "models/weapons2/stasis/stasis_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_grenadelauncher:form =
    {
      bbox = '-8 -4 -2 20 4 12'
      mdl = "models/weapons2/launcher/launcher_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_tetriondisruptor:form =
    {
      bbox = '-4 -8 -2 26 2 10'
      mdl = "models/weapons2/tpd/tpd_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_quantumburst:form =
    {
      bbox = '-12 -6 -4 16 6 10'
      mdl = "models/weapons2/q_burst/q_burst_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_dreadnought:form =
    {
      bbox = '-8 -6 -2 22 6 10'
      mdl = "models/weapons2/arc_welder/arc_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    ammo_compressionrifle:form =
    {
      help = "32 ammo for the compression rifle"
      bbox = '-16 -16 -16 16 16 16'
      mdl = "models/powerups/trek/prifle_ammo.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    ammo_imod:form =
    {
      help = "15 ammo for the I-MOD"
      bbox = '-8 -8 4 8 8 28'
      mdl = "models/powerups/trek/imod_ammo.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    ammo_scavenger:form =
    {
      help = "30 ammo for the scavenger rifle"
      bbox = '-8 -8 4 8 8 24'
      mdl = "models/powerups/trek/scavenger_ammo.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    ammo_stasis:form =
    {
      help = "15 ammo for the stasis weapon"
      bbox = '-4 -4 4 4 4 28'
      mdl = "models/powerups/trek/stasis_ammo.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    ammo_grenades:form =
    {
      help = "10 ammo for the grenade launcher"
      bbox = '-8 -8 4 8 8 28'
      mdl = "models/powerups/trek/glauncher_ammo.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    ammo_tetriondisruptor:form =
    {
      help = "40 ammo for the tetrYon disruptor"
      bbox = '-8 -8 4 8 8 24'
      mdl = "models/powerups/trek/tetrion_ammo.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    ammo_quantumburst:form =
    {
      help = "6 ammo for the quantum burst weapon"
      bbox = '-16 -16 -16 16 16 16'
      mdl = "models/powerups/trek/torpedo.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    ammo_dreadnought:form =
    {
      help = "40 ammo for the dreadnought/arc welder"
      bbox = '-16 -16 -16 16 16 16'
      mdl = "models/powerups/trek/arc_ammo.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_armor_shard:form =
    {
      help = "5 points of shields"
      bbox = '-4 -4 -8 4 4 8'
      mdl = "models/powerups/trek/armor_shard.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_armor_combat:form =
    {
      help = "50 points of shields"
      bbox = '-24 -24 0 24 24 40'
      mdl = "models/powerups/trek/armor_dark_green.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_armor_body:form =
    {
      help = "100 points of shields"
      bbox = '-24 -24 0 24 24 40'
      mdl = "models/powerups/trek/armor_trans_green.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_hypo_small:form =
    {
      help = "5 points of health, max of 200"
      bbox = '-2 -2 4 2 2 28'
      mdl = "models/powerups/trek/hypo_single.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_hypo:form =
    {
      help = "25 points of health, max of 100"
      bbox = '-4 -4 4 4 4 28'
      mdl = "models/powerups/trek/hypo_double.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    holdable_transporter:form =
    {
      help = "pick it up and it stays in your inventory until used, at which t"
       "ime you drop it in front of you and it still"$0D"kind of resides in yo"
       "ur inventory. when you use it _again_ it activates and anyone can walk"
       " through the transporter."
      bbox = '-16 -16 -16 16 16 16'
      mdl = "models/powerups/trek/transporter.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    holdable_medkit:form =
    {
      help = "pick it up and it stays in your inventory until used, at which t"
       "ime it sets your health to 100"
      bbox = '-16 -16 4 16 16 44'
      mdl = "models/powerups/trek/med_kit.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_quad:form =
    {
      help = "multiplies your weapon's damage for 30 seconds"
      bbox = '-16 -16 -8 16 16 16'
      mdl = "models/powerups/trek/quad_damage_1ed.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_enviro:form =
    {
      help = "20 seconds of invulnerability"
      bbox = '-24 -24 0 24 24 40'
      mdl = "models/powerups/trek/armor_gold.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_haste:form =
    {
      help = "for 30 seconds you run at %150 ofyour normal"$0D
              "speed and your firing delays are 3/4 as long"
      bbox = '-16 -16 -8 16 16 16'
      mdl = "models/powerups/trek/haste.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_invis:form =
    {
      help = "20 seconds of invisibility"
      bbox = '-8 -8 -8 8 8 20'
      mdl = "models/powerups/trek/invisible_1.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_regen:form =
    {
      help = "for 30 seconds you get 5 health every second, up to 200 health"
      bbox = '-16 -16 4 16 16 44'
      mdl = "models/powerups/trek/regen.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_flight:form =
    {
      help = "30 seconds of flight"
      bbox = '-12 -12 -12 12 12 20'
      mdl = "models/powerups/trek/flight.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    team_CTF_redflag:form =
    {
      help = "Only in CTF games"
      bbox = '-16 -16 0 16 16 68'
      mdl = "models/flags/flag_red.md3"
      t_commonspecifics = !
    }

    team_CTF_blueflag:form =
    {
      help = "Only in CTF games"
      bbox = '-16 -16 0 16 16 68'
      mdl = "models/flags/flag_blue.md3"
      t_commonspecifics = !
    }

    holdable_detpack:form =
    {
      help = "BLAMMO!"
      bbox = '-16 -16 0 16 16 20'
      mdl = "models/powerups/trek/detpak.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    item_seeker:form =
    {
      help = "30 seconds of seeker drone"
      bbox = '-12 -12 -8 12 12 12'
      mdl = "models/powerups/trek/flyer.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    holdable_shield:form =
    {
      help = "About 25 seconds or 250 hit points of a portashield."
      bbox = '-12 -12 -8 12 12 12'
      mdl = "models/powerups/trek/decoy.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    Holographic_decoy:form =
    {
      help = "About 1 minute of a holographic decoy."
      bbox = '-12 -12 -8 12 12 12'
      mdl = "models/powerups/trek/decoy.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_voyager_hypo:form =
    {
      bbox = '-2 -2 0 2 2 4'
      mdl = "models/weapons2/tricorder/hypo_w.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_borg_assimilator:form =
    {
      bbox = '-4 -2 -2 10 4 4'
      mdl = "models/weapons2/borg/hand.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    weapon_borg_weapon:form =
    {
      bbox = '-6 -2 -2 14 4 6'
      mdl = "models/weapons2/borg/claw-1.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "suspended"
      }
      t_commonspecifics = !
    }

    func_breakable:form =
    {
      help = "INVINCIBLE - can only be broken by being used"$0D"When destroyed"
       ", fires it's trigger and explodes"$0D22"targetname"$22" entities with "
       "matching target will fire it"$0D22"paintarget"$22" target to fire when"
       " hit (but not destroyed)"$0D22"wait"$22"        how long minimum to wa"
       "it between firing paintarget each time hit"$0D22"model2"$22"    .md3 m"
       "odel to also draw"$0D22"target"$22"    all entities with a matching ta"
       "rgetname will be used when this is destoryed"$0D22"health"$22"    defa"
       "ult is 10"$0D22"team"$22" - This cannot take damage from members of th"
       "is team (2 = blue, 1 = red)"$0D"Damage: default is none"$0D22"splashDa"
       "mage"$22" - damage to do (will make it explode on death)"$0D22"splashRa"
       "dius"$22" - radius for above damage"$0D22"material"$22" - sets the chu"
       "nk type:"$0D"0 - none (default)"$0D"1 - metal"$0D"2 - glass"$0D"3 - gl"
       "ass and metal"$0D"4 - wood"$0D"5 - stone"$0D"Don't know if these work:"
       $0D22"color"$22"        constantLight color"$0D22"light"$22"        con"
       "stantLight radius"
      spawnflags: =
      {
        typ = "X16"
        cap = "INVINCIBLE"
      }
      t_commonspecifics = !
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
      }
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      health: =
      {
        txt = "&"
        hint = "default is 10"
      }
      Damage: =
      {
        txt = "&"
        hint = "default is none"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "damage to do (will make it explode on death)"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "radius for above damage"
      }
      material: =
      { typ="C"
        txt = "&"
        hint = "sets the chunk type"
        items=
          "none (default)"$0D
          "metal"$0D
          "glass"$0D
          "glass and metal"$0D
          "wood"$0D
          "stone"
        values=
          "0"$0D
          "1"$0D
          "2"$0D
          "3"$0D
          "4"$0D
          "5"
      }
      color: =
      {
        txt = "&"
        hint = "constantLight color"
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
    }

    misc_model_breakable:form =
    {
      help = "SOLID - Movement is blocked by it, if not set, can still be brok"
       "en by explosions and shots if it has health"$0D"AUTOANIMATE - Will cyc"
       "le it's anim"$0D"DEADSOLID - Stay solid even when destroyed (in case d"
       "amage model is rather large)."$0D"NO_DMODEL - Makes it NOT display a d"
       "amage model when destroyed, even if one exists"$0D"INVINCIBLE - Can on"
       "ly be broken by being used"$0D22"model"$22"        arbitrary .md3 file"
       " to display"$0D22"health"$22"    how much health to have - default is "
       "zero (not breakable)  If you don't set the SOLID flag, but give it hea"
       "lth, it can be shot but will not block NPCs or players from moving"$0D
       $22"targetname"$22" when used, dies and displays damagemodel, if any (i"
       "f not, removes itself)"$0D22"target"$22" What to use when it dies"$0D22
       "paintarget"$22" target to fire when hit (but not destroyed)"$0D22"wait"
       $22"        how long minimum to wait between firing paintarget each tim"
       "e hit"$0D"Damage: default is none"$0D22"splashDamage"$22" - damage to "
       "do (will make it explode on death)"$0D22"splashRadius"$22" - radius fo"
       "r above damage"$0D22"team"$22" - This cannot take damage from members "
       "of this team (1 = red, 2 = blue)"$0D22"material"$22" - sets the chunk "
       "type:"$0D"0 - none (default)"$0D"1 - metal"$0D"2 - glass"$0D"3 - glass"
       " and metal"$0D"4 - wood"$0D"5 - stone"$0D"FIXME/TODO:"$0D"set size bet"
       "ter?"$0D"multiple damage models?"$0D"don't throw chunks on pain, or th"
       "row level 1 chunks only on pains?"$0D"custom explosion effect/sound?"
      mdl = "[model]"
      spawnflags: =
      {
        typ = "X1"
        cap = "SOLID"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "AUTOANIMATE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "DEADSOLID"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NO_DMODEL"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "INVINCIBLE"
      }
      t_commonspecifics = !
      model: =
      {
        txt = "&"
        hint = "arbitrary .md3 file to display"
        t_modelbrowser = !
      }
      t_model = !
      health: =
      {
        txt = "&"
        hint = "how much health to have - default is zero (not breakable)"$0D
               "If you don't set the SOLID flag, but give it health,"$0D
               "it can be shot but will not block NPCs or players from moving"
      }
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
      }
      team: =
      {
        txt = "&"
        hint = "This can not take damage from members of this team (1 = red, 2 = blue)"
      }
      Damage: =
      {
        txt = "&"
        hint = "default is none"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "damage to do (will make it explode on death)"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "radius for above damage"
      }
      material: =
      { typ="C"
        txt = "&"
        hint = "sets the chunk type"
        items=
          "none (default)"$0D
          "metal"$0D
          "glass"$0D
          "glass and metal"$0D
          "wood"$0D
          "stone"
        values=
          "0"$0D
          "1"$0D
          "2"$0D
          "3"$0D
          "4"$0D
          "5"
      }
    }

    misc_ammo_station:form =
    {
      help = $22"health"$22" - how much health the model has - default 60 (zer"
       "o makes non-breakable)"$0D22"target"$22" - what to use when it dies"$0D
       $22"paintarget"$22" - target to fire when hit (but not destroyed)"$0D22
       "count"$22" - the amount of health given when used (default 1000)"$0D22
       "team"$22" - This cannot take damage from members of this team and only"
       " members of this team can use it (1 = red, 2 = blue)"
      bbox = '-8 -12 -28 8 12 28'
      mdl = "models/mapobjects/dn/powercell.md3"
      t_commonspecifics = !
      health: =
      {
        txt = "&"
        hint = "how much health the model has"$0D
               "default 60 (zero makes non-breakable)"
      }
      paintarget: =
      {
        txt = "&"
        hint = "target to fire when hit (but not destroyed)"
      }
      team: =
      {
        txt = "&"
        hint = "This can not take damage from members of this team"$0D
               "and only members of this team can use it"$0D
               "(1 = red, 2 = blue)"
      }
    }

    info_player_deathmatch:form =
    {
      help = "potential spawning position for deathmatch games."$0D"The first "
       "time a player enters the game, they will be at an 'initial' spot."$0D"T"
       "argets will be fired when someone spawns in on them."$0D22"nobots"$22" "
       "will prevent bots from using this spot."$0D22"nohumans"$22" will preve"
       "nt non-bots from using this spot."
      bbox = '-16 -16 -32 16 16 32'
      mdl = "[editormodel]"
      spawnflags: =
      {
        typ = "X1"
        cap = "initial"
      }
      nobots: =
      {
        txt = "&"
        hint = "will prevent bots from using this spot"
      }
      nohumans: =
      {
        txt = "&"
        hint = "will prevent non-bots from using this spot"
      }
      editormodel = { typ="C" txt="editor model"
      hint ="Choose one of ten editor models to identify a location by."
      items=
        "arjofa_blue"$0D
        "arjofa_red"$0D
        "tolek_blue.md3"$0D
        "tolek_red"$0D
        "alexandria_blue"$0D
        "alexandria_red"$0D
        "foster_blue"$0D
        "foster_gold"$0D
        "foster_green"$0D
        "foster_red"
      values=
        "models/players2/arjofa/arjofa_blue.md3"$0D
        "models/players2/arjofa/arjofa_red.md3"$0D
        "models/players2/tolek/tolek_blue.md3"$0D
        "models/players2/tolek/tolek_red.md3"$0D
        "models/players2/alexandria/alexandria_blue.md3"$0D
        "models/players2/alexandria/alexandria_red.md3"$0D
        "models/players2/foster/foster_blue.md3"$0D
        "models/players2/foster/foster_gold.md3"$0D
        "models/players2/foster/foster_green.md3"$0D
        "models/players2/foster/foster_red.md3"
      }
    }

    info_player_start:form =
    {
      help = "equivelant to info_player_deathmatch"
      bbox = '-16 -16 -32 16 16 32'
      mdl = "models/players2/arjofa/arjofa.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "initial"
      }
      nobots: =
      {
        txt = "&"
        hint = "will prevent bots from using this spot"
      }
      nohumans: =
      {
        txt = "&"
        hint = "will prevent non-bots from using this spot"
      }
    }

    info_player_intermission:form =
    {
      help = "The intermission will be viewed from this point.  Target an info"
       "_notnull for the view direction."
      bbox = '-16 -16 -24 16 16 32'
      t_commonspecifics = !
    }

    fx_spark:form =
    {
      help = "Emits sparks at the specified point in the specified direction"$0D
       $22"target"$22" - ( optional ) direction to aim the sparks in, otherwis"
       "e, uses the angles set in the editor."$0D22"wait(2000)"$22"    - inter"
       "val between events (randomly twice as long)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "STARTOFF"
      }
      target: =
      {
        txt = "&"
        hint = "Name of the entity that this one targets."
      }
      targetname: =
      {
        txt = "&"
        hint = "Name of this entity, used as a target by another entity."
      }
      notfree: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in free for all games."
      }
      notteam: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in team games."
      }
      notsingle: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in single player games."
      }
      wait(2000): =
      {
        txt = "&"
        hint = "interval between events (randomly twice as long)"
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn time."
      }
      count: =
      {
        txt = "&"
        hint = "override quantity or duration on most items."
      }
    }

    fx_steam:form =
    {
      help = "Emits steam at the specified point in the specified direction. w"
       "ill point at a target if one is specified."$0D"right now, neither spaw"
       "nflag does anything. just give it a direction."$0D22"targetname"$22" -"
       " toggles on/off whenever used"$0D22"damage"$22" - damage to apply when"
       " caught in steam vent, default - zero damage (no damage). Don't add th"
       "is unless you really have to."
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "STARTOFF"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "BURSTS"
      }
      t_commonspecifics = !
      damage: =
      {
        txt = "&"
        hint = "damage to apply when caught in steam vent,"$0D
               "default - zero damage (no damage)."$0D
               "Don't add this unless you really have to."
      }
    }

    fx_bolt:form =
    {
      help = "Emits blue ( or borg green ) electric bolts from the specified p"
       "oint to the specified point"$0D"SPARKS - create impact sparks, probabl"
       "y best used for time delayed bolts"$0D"BORG - Make the bolts green"$0D
       $22"wait"$22" - seconds between bolts (0 is always on, default is 2.0, "
       "-1 for random number between 0 and 5), bolts are always on for 0.2 sec"
       "onds"$0D22"damage"$22" - damage per server frame (default 0)"$0D22"ran"
       "dom"$22" - bolt chaos (0.1 = too calm, 0.5 = default, 1.0 or higher = "
       "pretty wicked)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "SPARKS"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "BORG"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "TAPER"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "SMOOTH"
      }
      t_commonspecifics = !
      damage: =
      {
        txt = "&"
        hint = "damage per server frame (default 0)"
      }
    }

    fx_transporter:form =
    {
      help = "Emits transporter pad effect at the specified point. just rest i"
       "t flush on top of the pad."
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
    }

    fx_drip:form =
    {
      help = $22"damage"$22" -- type of drips. 0 = water, 1 = oil, 2 = green"$0D
       $22"random"$22" -- (0...1) degree of drippiness. 0 = one drip, 1 = Niag"
       "ara Falls"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "STARTOFF"
      }
      t_commonspecifics = !
      damage: =
      { typ="C"
        txt = "&"
        hint = "sets the chunk type"
        items=
          "water"$0D
          "oil"$0D
          "green"
        values=
          "0"$0D
          "1"$0D
          "2"
      }
    }

    item_botroam:form =
    {
      help = "Bots in MP will go to these spots when there's"$0D
             "nothing else to get- helps them patrol."
      bbox = '-12 -12 0 12 12 8'
      mdl = "models/powerups/trek/flag_base.md3"
      t_commonspecifics = !
    }

    func_group:form =
    {
      help = "Used to group brushes together just for editor convenience.  The"
       "y are turned into normal brushes by the utilities."
    }

    info_camp:form =
    {
      help = "Used as a positional target for calculations in the utilities (s"
       "potlights, etc), but removed during gameplay."
      bbox = '-4 -4 -4 4 4 4'
      t_commonspecifics = !
    }

    info_null:form =
    {
      help = "Used as a positional target for calculations in the utilities (s"
       "potlights, etc), but removed during gameplay."
      bbox = '-4 -4 -4 4 4 4'
      t_commonspecifics = !
    }

    info_notnull:form =
    {
      help = "Used as a positional target for in-game calculation, like jumppa"
       "d targets."$0D"target_position does the same thing"
      bbox = '-4 -4 -4 4 4 4'
      t_commonspecifics = !
    }

    light:form =
    {
      help = "Non-displayed light."$0D22"light"$22" overrides the default 300 "
       "intensity."$0D"'Linear' checkbox gives linear falloff instead of inver"
       "se square"$0D"'noIncidence' checkbox makes lighting smoother"$0D"Light"
       "s pointed at a target will be spotlights."$0D22"radius"$22" overrides "
       "the default 64 unit radius of a spotlight at the target point."
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "linear"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "noIncidence"
      }
      t_commonspecifics = !
      _color: =
      {
        txt = "&"
        hint = ""
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "overrides the default 300 intensity"
      }
      radius: =
      {
        txt = "&"
        hint = "overrides the default 64 unit radius"$0D
               "of a spotlight at the target point"
      }
    }

    misc_teleporter_dest:form =
    {
      help = "Point teleporters at these."$0D"Now that we don't have teleport "
       "destination pads, this is just"$0D"an info_notnull"
      bbox = '-32 -32 -24 32 32 -16'
      t_commonspecifics = !
    }

    misc_portal_surface:form =
    {
      help = "The portal surface nearest this entity will show a view from the"
       " targeted misc_portal_camera, or a mirror view if untargeted."$0D"This"
       " must be within 64 world units of the surface!"$0D"targetname - When u"
       "sed, cycles to the next misc_portal_camera it's targeted"$0D"wait - ma"
       "kes it auto-cycle between all cameras it's pointed at at intevervals o"
       "f specified number of seconds."$0D"cameras will be cycled through in t"
       "he order they were created on the map."
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
    }

    misc_portal_camera:form =
    {
      help = "The target for a misc_portal_surface.  You can set either angles"
       " or target another entity (NOT an info_null) to determine the directio"
       "n of view."$0D22"roll"$22" an angle modifier to orient the camera arou"
       "nd the target vector;"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "slowrotate"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "fastrotate"
      }
      t_commonspecifics = !
      roll: =
      {
        txt = "&"
        hint = "an angle modifier to orient the camera around the target vector"
      }
    }

    shooter_rocket:form =
    {
      help = "Fires at either the target or the current direction."$0D22"rando"
       "m"$22" the number of degrees of deviance from the taget. (1.0 default)"
      bbox = '-16 -16 -16 16 16 16'
      t_commonspecifics = !
    }

    shooter_plasma:form =
    {
      help = "Fires at either the target or the current direction."$0D22"rando"
       "m"$22" is the number of degrees of deviance from the taget. (1.0 defau"
       "lt)"
      bbox = '-16 -16 -16 16 16 16'
      t_commonspecifics = !
    }

    shooter_grenade:form =
    {
      help = "Fires at either the target or the current direction."$0D22"rando"
       "m"$22" is the number of degrees of deviance from the taget. (1.0 defau"
       "lt)"
      bbox = '-16 -16 -16 16 16 16'
      t_commonspecifics = !
    }

    func_door:form =
    {
      help = "START_OPEN    the door to moves to its destination when spawned,"
       " and operate in reverse.  It is used to temporarily or permanently clo"
       "se off an area when triggered (not useful for touch or takedamage door"
       "s)."$0D"x"$0D"CRUSHER        door will crush"$0D"TREK_DOOR    if set t"
       "his door will have a reduced auto trigger volume"$0D"FACE        if se"
       "t, this door requires you to be facing it before the trigger will fire"
       $0D22"model2"$22"    .md3 model to also draw"$0D22"angle"$22"        de"
       "termines the opening direction"$0D22"targetname"$22" if set, no touch "
       "field will be spawned and a remote button or trigger field activates t"
       "he door."$0D22"speed"$22"        movement speed (100 default)"$0D22"wa"
       "it"$22"        wait before returning (3 default, -1 = never return)"$0D
       $22"lip"$22"        lip remaining at end of move (8 default)"$0D22"dmg"$22
       "        damage to inflict when blocked (2 default)"$0D22"color"$22"   "
       "     constantLight color"$0D22"light"$22"        constantLight radius"$0D
       $22"health"$22"    if set, the door must be shot open"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OPEN"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "CRUSHER"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "TREK_DOOR"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "FACE"
      }
      t_commonspecifics = !
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      speed: =
      {
        txt = "&"
        hint = "movement speed (100 default)"
      }
      lip: =
      {
        txt = "&"
        hint = "lip remaining at end of move (8 default)"
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)"
      }
      color: =
      {
        txt = "&"
        hint = ""
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
      health: =
      {
        txt = "&"
        hint = "if set, the door must be shot open"
      }
    }

    func_plat:form =
    {
      help = "Plats are always drawn in the extended position so they will lig"
       "ht correctly."$0D"NO_TOUCH - instead of staying up as long as someone "
       "touches it, it will wait "$22"wait"$22" seconds and return"$0D22"lip"$22
       "        default 8, protrusion above rest position"$0D22"height"$22"   "
       " total height of movement, defaults to model height"$0D22"speed"$22"  "
       "      overrides default 200."$0D22"dmg"$22"        overrides default 2"
       $0D22"model2"$22"    .md3 model to also draw"$0D22"color"$22"        co"
       "nstantLight color"$0D22"light"$22"        constantLight radius"$0D22"w"
       "ait"$22"        how many seconds to wait before returning"
      spawnflags: =
      {
        typ = "X1"
        cap = "NO_TOUCH"
      }
      t_commonspecifics = !
      lip: =
      {
        txt = "&"
        hint = "default 8, protrusion above rest position"
      }
      height: =
      {
        txt = "&"
        hint = "total height of movement, defaults to model height"
      }
      speed: =
      {
        txt = "&"
        hint = "overrides default 200"
      }
      dmg: =
      {
        txt = "&"
        hint = "overrides default 2"
      }
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      color: =
      {
        txt = "&"
        hint = "constantLight color"
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
    }

    func_button:form =
    {
      help = "When a button is touched, it moves some distance in the directio"
       "n of it's angle, triggers all of it's targets, waits some time, then r"
       "eturns to it's original position where it can be triggered again."$0D22
       "model2"$22"    .md3 model to also draw"$0D22"angle"$22"        determi"
       "nes the opening direction"$0D22"target"$22"    all entities with a mat"
       "ching targetname will be used"$0D22"speed"$22"        override the def"
       "ault 40 speed"$0D22"wait"$22"        override the default 1 second wai"
       "t (-1 = never return)"$0D22"lip"$22"        override the default 4 pix"
       "el lip remaining at end of move"$0D22"health"$22"    if set, the butto"
       "n must be killed instead of touched"$0D22"color"$22"        constantLi"
       "ght color"$0D22"light"$22"        constantLight radius"
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
      lip: =
      {
        txt = "&"
        hint = "override the default 4 pixel lip remaining at end of move"
      }
      height: =
      {
        txt = "&"
        hint = "total height of movement, defaults to model height"
      }
      speed: =
      {
        txt = "&"
        hint = "override the default 40 speed"
      }
      dmg: =
      {
        txt = "&"
        hint = "overrides default 2"
      }
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      health: =
      {
        txt = "&"
        hint = "if set, the button must be killed instead of touched"
      }
      color: =
      {
        txt = "&"
        hint = "constantLight color"
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
    }

    path_corner:form =
    {
      help = "Train path corners."$0D"Target: next path corner and other targe"
       "ts to fire"$0D22"speed"$22" speed to move to the next corner"$0D22"wai"
       "t"$22" seconds to wait before behining move to next corner"
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
      speed: =
      {
        txt = "&"
        hint = "speed to move to the next corner"
      }
    }

    func_train:form =
    {
      help = "A train is a mover that moves between path_corner target points."
       $0D"Trains MUST HAVE AN ORIGIN BRUSH."$0D"The train spawns at the first"
       " target it is pointing at."$0D22"model2"$22"    .md3 model to also dra"
       "w"$0D22"speed"$22"        default 100"$0D22"dmg"$22"        default   "
       " 2"$0D22"noise"$22"        looping sound to play when the train is in "
       "motion"$0D22"target"$22"    next path corner"$0D22"color"$22"        c"
       "onstantLight color"$0D22"light"$22"        constantLight radius"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_ON"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "TOGGLE"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "BLOCK_STOPS"
      }
      t_commonspecifics = !
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      speed: =
      {
        txt = "&"
        hint = "default 100"
      }
      dmg: =
      {
        txt = "&"
        hint = "default	2"
      }
      noise: =
      {
        txt = "&"
        hint = "looping sound to play when the train is in motion"
        t_soundbrowser = !
      }
      color: =
      {
        txt = "&"
        hint = ""
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
    }

    func_static:form =
    {
      help = "A bmodel that just sits there, doing nothing.  Can be used for c"
       "onditional walls and models."$0D22"model2"$22"    .md3 model to also d"
       "raw"$0D22"color"$22"        constantLight color"$0D22"light"$22"      "
       "  constantLight radius"
      t_commonspecifics = !
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      color: =
      {
        txt = "&"
        hint = ""
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
    }

    func_forcefield:form =
    {
      help = "A bmodel that just sits there, doing nothing.  Can be used for c"
       "onditional walls and models."$0D22"model2"$22"    .md3 model to also d"
       "raw"$0D22"color"$22"        constantLight color"$0D22"light"$22"      "
       "  constantLight radius"$0D22"health"$22"    number of seconds field is"
       " on"$0D22"count"$22"        number of seconds field is off"$0D22"pos2"$22
       "        where the field goes when it's off"
      spawnflags: =
      {
        typ = "X1"
        cap = "USEABLE"
      }
      t_commonspecifics = !
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      color: =
      {
        txt = "&"
        hint = ""
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
      health: =
      {
        txt = "&"
        hint = "number of seconds field is on"
      }
      pos2: =
      {
        txt = "&"
        hint = "where the field goes when it's off"
      }
    }

    func_rotating:form =
    {
      help = "You need to have an origin brush as part of this entity.  The ce"
       "nter of that brush will be"$0D"the point around which it is rotated. I"
       "t will rotate around the Z axis by default.  You can"$0D"check either "
       "the X_AXIS or Y_AXIS box to change that."$0D22"model2"$22"    .md3 mod"
       "el to also draw"$0D22"speed"$22"        determines how fast it moves; "
       "default value is 100."$0D22"dmg"$22"        damage to inflict when blo"
       "cked (2 default)"$0D22"color"$22"        constantLight color"$0D22"lig"
       "ht"$22"        constantLight radius"$0D22"pos1"$22"        Angles to e"
       "nd up at in addition to current angles- pitch yaw and roll.  Eg: 0 90 "
       "45"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_ON"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "X_AXIS"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "Y_AXIS"
      }
      t_commonspecifics = !
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      speed: =
      {
        txt = "&"
        hint = "determines how fast it moves; default value is 100"
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)"
      }
      color: =
      {
        txt = "&"
        hint = ""
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
      pos1: =
      {
        txt = "&"
        hint = "Angles to end up at in addition to current angles"$0D
               "pitch yaw and roll.  Eg: 0 90 45 "
      }
    }

    func_bobbing:form =
    {
      help = "Normally bobs on the Z axis"$0D22"model2"$22"    .md3 model to a"
       "lso draw"$0D22"height"$22"    amplitude of bob (32 default)"$0D22"spee"
       "d"$22"        seconds to complete a bob cycle (4 default)"$0D22"phase"$22
       "        the 0.0 to 1.0 offset in the cycle to start at"$0D22"dmg"$22" "
       "       damage to inflict when blocked (2 default)"$0D22"color"$22"    "
       "    constantLight color"$0D22"light"$22"        constantLight radius"
      spawnflags: =
      {
        typ = "X1"
        cap = "X_AXIS"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "Y_AXIS"
      }
      t_commonspecifics = !
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      height: =
      {
        txt = "&"
        hint = "amplitude of bob (32 default)"
      }
      speed: =
      {
        txt = "&"
        hint = "seconds to complete a bob cycle (4 default)"
      }
      phase: =
      {
        txt = "&"
        hint = "the 0.0 to 1.0 offset in the cycle to start at"
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)"
      }
      color: =
      {
        txt = "&"
        hint = ""
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
    }

    func_pendulum:form =
    {
      help = "You need to have an origin brush as part of this entity."$0D"Pen"
       "dulums always swing north / south on unrotated models.  Add an angles "
       "field to the model to allow rotation in other directions."$0D"Pendulum"
       " frequency is a physical constant based on the length of the beam and "
       "gravity."$0D22"model2"$22"    .md3 model to also draw"$0D22"speed"$22" "
       "       the number of degrees each way the pendulum swings, (30 default"
       ")"$0D22"phase"$22"        the 0.0 to 1.0 offset in the cycle to start "
       "at"$0D22"dmg"$22"        damage to inflict when blocked (2 default)"$0D
       $22"color"$22"        constantLight color"$0D22"light"$22"        const"
       "antLight radius"
      t_commonspecifics = !
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      speed: =
      {
        txt = "&"
        hint = "the number of degrees each way the pendulum swings, (30 default)"
      }
      phase: =
      {
        txt = "&"
        hint = "the 0.0 to 1.0 offset in the cycle to start at"
      }
      dmg: =
      {
        txt = "&"
        hint = "damage to inflict when blocked (2 default)"
      }
      color: =
      {
        txt = "&"
        hint = ""
        Typ = "LN"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
    }

    worldspawn:form =
    {
      help = "Every map should have exactly one worldspawn."$0D22
       "targetname"$22" Name of this entity,"$0D
       "                    used as a target by another entity"$0D22
       "wait"$22"          Override the default wait before spawning"$0D22
       "music"$22"       Path to WAV or MP3 files"$0D
       "                   (e.g. "$22"music\intro.mp3 music\loopfile.mp3"$22")"$0D22
       "gravity"$22"      800 is default gravity"$0D22
       "message"$22"  Text to print during connection process"$0D22
       "infostring"$22"  String file to print during connection process,"$0D
       "                    like 'message' above but the text is in a file"$0D22
       "soundSet"$22" Ambient sound set to play"$0D
       "                   when map is started"$0D22
       "spawnscript"$22" Runs this script"$0D22
       "ambient"$22"  This is the levels ambient light intensity value,"$0D
       "                  e.g. 100"$0D22
       "_color"$22"     Light color (not the intensity, only the color)"$0D
       "                  used for the ambient light"$0D22


       "fraglimit"$22"   Overrides server's limit"$0D22
       "capturelimit"$22" Overrides server's capturelimit"$0D
       "                  (use with team AddScores)"$0D22
       "timelimit"$22"  Overrides server's timelimit"$0D22
       "timelimitWinningTeam"$22"    "$22"red"$22" or "$22"blue"$220D
       "                  This team will win when the timelimit runs out"


      spawnflags: =
      {
        typ = "X1"
        cap = "Unknown1"
      }
      targetname: =
      {
        txt = "&"
        hint = "Name of this entity, used as a target by another entity"
      }
      wait: =
      {
        txt = "&"
        hint = "Override the default wait before spawning"
      }
      music: =
      {
        txt = "&"
        hint = "Path to WAV or MP3 files (e.g. 'music\intro.mp3 music\loopfile.mp3')"
        t_soundbrowser = !
      }
      gravity: =
      {
        txt = "&"
        hint = "800 is default gravity"
      }
      message: =
      {
        txt = "&"
        hint = "Text to print during connection process"
      }
      infostring: =
      {
        txt = "&"
        hint = "String file to print during connection process,"$0D
               "like 'message' above but the text is in a file"
      }
      soundSet: =
      {
        txt = "&"
        hint = ""
        t_soundbrowser = !
      }
      spawnscript: =
      {
        txt = "&"
        hint = "Runs this script"
      }
      ambient: =
      {
        Txt = "&"
        Hint = "This is the levels ambient light intensity value, e.g. 100"
      }
      _color: =
      {
        Txt = "&"
        Typ = "LN"
        Hint = "Light color (not the intensity, only the color) used for the ambient light"
      }
	t_ta_worldspawn_settings = !
      fraglimit: =
      {
        txt = "&"
        hint = "overrides server's limit"
      }
      capturelimit: =
      {
        txt = "&"
        hint = "overrides server's capturelimit (use with team AddScores)"
      }
      timelimit: =
      {
        txt = "&"
        hint = "overrides server's timelimit"
      }
      timelimitWinningTeam: =
      {
        txt = "&"
        hint = $22"red"$22" or "$22"blue"$22" - this team will win when the timelimit runs out"
      }
    }

    target_give:form =
    {
      help = "Gives the activator all the items pointed to."
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
    }

    target_remove_powerups:form =
    {
      help = "takes away all the activators powerups."$0D"Used to drop flight "
       "powerups into death puts."
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
    }

    target_delay:form =
    {
      help = $22"wait"$22" seconds to pause before firing targets."$0D22"rando"
       "m"$22" delay variance, total delay = delay +/- random seconds"
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
    }

    target_score:form =
    {
      help = "TEAMSCORE - points are added to activator's team's score, not th"
       "e individual"$0D22"count"$22" number of points to add, default 1"$0D"T"
       "he activator is given this many points."
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "TEAMSCORE"
      }
      t_commonspecifics = !
    }

    target_print:form =
    {
      help = $22"message"$22"    text to print"$0D"If "$22"private"$22", only "
       "the activator gets the message.  If no checks, all clients get the mes"
       "sage."
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "redteam"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "blueteam"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "private"
      }
      t_commonspecifics = !
      message: =
      {
        txt = "&"
        hint = "text to print"
      }
    }

    target_speaker:form =
    {
      help = $22"noise"$22"        wav file to play"$0D"A global sound will pl"
       "ay full volume throughout the level."$0D"Activator sounds will play on"
       " the player that activated the target."$0D"Global and activator sounds"
       " can't be combined with looping."$0D"Normal sounds play each time the "
       "target is used."$0D"Looped sounds will be toggled by use functions."$0D
       "Multiple identical looping sounds will just increase volume without an"
       "y speed cost."$0D22"wait"$22" : Seconds between auto triggerings, 0 = "
       "don't auto trigger"$0D22"random"$22"    wait variance, default is 0"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "looped-on"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "looped-off"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "global"
      }
      spawnflags: =
      {
        typ = "X32"
        cap = "activator"
      }
      t_commonspecifics = !
      noise: =
      {
        txt = "&"
        hint = ""
        t_soundbrowser = !
      }
    }

    target_laser:form =
    {
      help = "When triggered, fires a laser.  You can either set a target or a"
       " direction."
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_ON"
      }
      t_commonspecifics = !
    }

    target_teleporter:form =
    {
      help = "The activator will be teleported away."
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
    }

    target_relay:form =
    {
      help = "This doesn't perform any actions except fire its targets."$0D"Th"
       "e activator can be forced to be from a certain team."$0D"if RANDOM is "
       "checked, only one of the targets will be fired, not all of them"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "RED_ONLY"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "BLUE_ONLY"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "RANDOM"
      }
      t_commonspecifics = !
    }

    target_kill:form =
    {
      help = "Kills the activator."
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
    }

    target_position:form =
    {
      help = "Used as a positional target for in-game calculation, like jumppa"
       "d targets."
      bbox = '-4 -4 -4 4 4 4'
      t_commonspecifics = !
    }

    target_location:form =
    {
      help = "Set "$22"message"$22" to the name of this location."$0D"Set "$22
       "count"$22" to 0-7 for color."$0D"0:white 1:red 2:green 3:yellow 4:blue"
       " 5:cyan 6:magenta 7:white"$0D"Closest target_location in sight used fo"
       "r the location, if none"$0D"in site, closest in distance"
      bbox = '-8 -8 -8 8 8 8'
      target: =
      {
        txt = "&"
        hint = "Name of the entity that this one targets."
      }
      targetname: =
      {
        txt = "&"
        hint = "Name of this entity, used as a target by another entity."
      }
      notfree: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in free for all games."
      }
      notteam: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in team games."
      }
      notsingle: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in single player games."
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning."$0D
               "-1 = never respawn automatically,"$0D
               "which can be used with targeted spawning."
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn time."
      }
      message: =
      {
        txt = "&"
        hint = "to the name of this location"
      }
      count: =
      { typ="C"
        txt = "&"
        hint = "to 0-7 for color"
        items=
          "white"$0D
          "red"$0D
          "green"$0D
          "yellow"$0D
          "blue"$0D
          "cyan"$0D
          "magenta"$0D
          "white"
        values=
          "0"$0D
          "1"$0D
          "2"$0D
          "3"$0D
          "4"$0D
          "5"$0D
          "6"$0D
          "7"
      }
    }

    target_counter:form =
    {
      help = "Acts as an intermediary for an action that takes multiple inputs"
       "."$0D"After the counter has been triggered "$22"count"$22" times (defa"
       "ult 2), it will fire all of it's targets and remove itself."
      bbox = '-4 -4 -4 4 4 4'
      t_commonspecifics = !
    }

    target_objective:form =
    {
      help = "When used, the objective in the <mapname>.efo with this objectiv"
       "e's "$22"count"$22" will be marked as completed"$0D"count - number of "
       "objective (as listed in the maps' <mapname>.efo)"$0D"NOTE: the objecti"
       "ve with the lowest "$22"count"$22" will be considered the current obje"
       "ctive"
      bbox = '-4 -4 -4 4 4 4'
      t_commonspecifics = !
    }

    team_CTF_redplayer:form =
    {
      help = "Only in CTF games.  Red players spawn here at game start."$0D"BO"
       "RGQUEEN - The player that is the Borg Queen will spawn here"
      bbox = '-16 -16 0 16 16 64'
      mdl = "[editormodel]"
      spawnflags: =
      {
        typ = "X1"
        cap = "BORGQUEEN"
        hint = "The player that is the Borg Queen will spawn here"
      }
      t_commonspecifics = !
      editormodel = { typ="C" txt="editor model"
      hint ="Choose one of four editor models to identify a location by."
      items=
        "arjofa_red"$0D
        "tolek_red"$0D
        "alexandria_red"$0D
        "foster_red"
      values=
        "models/players2/arjofa/arjofa_red.md3"$0D
        "models/players2/tolek/tolek_red.md3"$0D
        "models/players2/alexandria/alexandria_red.md3"$0D
        "models/players2/foster/foster_red.md3"
      }
    }

    team_CTF_blueplayer:form =
    {
      help = "Only in CTF games.  Blue players spawn here at game start."$0D"B"
       "ORGQUEEN - The player that is the Borg Queen will spawn here"
      bbox = '-16 -16 0 16 16 64'
      mdl = "[editormodel]"
      spawnflags: =
      {
        typ = "X1"
        cap = "BORGQUEEN"
        hint = "The player that is the Borg Queen will spawn here"
      }
      t_commonspecifics = !
      editormodel = { typ="C" txt="editor model"
      hint ="Choose one of four editor models to identify a location by."
      items=
        "arjofa_blue"$0D
        "tolek_blue.md3"$0D
        "alexandria_blue"$0D
        "foster_blue"
      values=
        "models/players2/arjofa/arjofa_blue.md3"$0D
        "models/players2/tolek/tolek_blue.md3"$0D
        "models/players2/alexandria/alexandria_blue.md3"$0D
        "models/players2/foster/foster_blue.md3"
      }
    }

    team_CTF_redspawn:form =
    {
      help = "potential spawning position for red team in CTF games, AFTER gam"
       "e start"$0D"Targets will be fired when someone spawns in on them."$0D"S"
       "TARTOFF - won't be considered as a spawn point until used"$0D"targetna"
       "me - when used, toggles between active and incative spawn point"
      bbox = '-16 -16 0 16 16 64'
      mdl = "[editormodel]"
      spawnflags: =
      {
        typ = "X1"
        cap = "STARTOFF"
        hint = "won't be considered as a spawn point until used"
      }
      t_commonspecifics = !
      editormodel = { typ="C" txt="editor model"
      hint ="Choose one of four editor models to identify a location by."
      items=
        "arjofa_red"$0D
        "tolek_red"$0D
        "alexandria_red"$0D
        "foster_red"
      values=
        "models/players2/arjofa/arjofa_red.md3"$0D
        "models/players2/tolek/tolek_red.md3"$0D
        "models/players2/alexandria/alexandria_red.md3"$0D
        "models/players2/foster/foster_red.md3"
      }
    }

    team_CTF_bluespawn:form =
    {
      help = "potential spawning position for blue team in CTF games, AFTER ga"
       "me start"$0D"Targets will be fired when someone spawns in on them."$0D
       "STARTOFF - won't be considered as a spawn point until used"$0D"targetn"
       "ame - when used, toggles between active and incative spawn point"
      bbox = '-16 -16 0 16 16 64'
      mdl = "[editormodel]"
      spawnflags: =
      {
        typ = "X1"
        cap = "STARTOFF"
        hint = "won't be considered as a spawn point until used"
      }
      t_commonspecifics = !
      editormodel = { typ="C" txt="editor model"
      hint ="Choose one of four editor models to identify a location by."
      items=
        "arjofa_blue"$0D
        "tolek_blue.md3"$0D
        "alexandria_blue"$0D
        "foster_blue"
      values=
        "models/players2/arjofa/arjofa_blue.md3"$0D
        "models/players2/tolek/tolek_blue.md3"$0D
        "models/players2/alexandria/alexandria_blue.md3"$0D
        "models/players2/foster/foster_blue.md3"
      }
    }

    trigger_multiple:form =
    {
      help = "RED_OK - People on the red team can fire this trigger"$0D"BLUE_O"
       "K - People on the blue team can fire this trigger"$0D"TEAM_ONLY - Only"
       " people on red or blue can fire this trigger (not TEAM_FREE like in st"
       "raight holomatch or spectators)"$0D22"wait"$22" : Seconds between trig"
       "gerings, 0.5 default, -1 = one time only."$0D22"random"$22"    wait va"
       "riance, default is 0"$0D"Variable sized repeatable trigger.  Must be t"
       "argeted at one or more entities."$0D"so, the basic time between firing"
       " is a random time between"$0D"(wait - random) and (wait + random)"
      spawnflags: =
      {
        typ = "X1"
        cap = "RED_OK"
        hint = "People on the red team can fire this trigger"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "BLUE_OK"
        hint = "People on the blue team can fire this trigger"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "TEAM_ONLY"
        hint = "Only people on red or blue can fire this trigger"$0D
               "(not TEAM_FREE like in straight holomatch or spectators)"
      }
      t_commonspecifics = !
    }

    trigger_always:form =
    {
      help = "This trigger will always fire.  It is activated by the world."
      bbox = '-8 -8 -8 8 8 8'
      t_commonspecifics = !
    }

    trigger_push:form =
    {
      help = "Must point at a target_position, which will be the apex of the l"
       "eap."$0D"This will be client side predicted, unlike target_push"
      t_commonspecifics = !
    }

    target_push:form =
    {
      help = "Pushes the activator in the direction.of angle, or towards a tar"
       "get apex."$0D22"speed"$22"        defaults to 1000"$0D"if "$22"ENERGYN"
       "OISE"$22", play energy noise instead of windfly"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "ENERGYNOISE"
        hint = "play energy noise instead of windfly"
      }
      t_commonspecifics = !
      speed: =
      {
        txt = "&"
        hint = "defaults to 1000"
      }
    }

    trigger_teleport:form =
    {
      help = "Allows client side prediction of teleportation events."$0D"Must "
       "point at a target_position, which will be the teleport destination."$0D
       "--------- spawnflags --------"$0D"If spectator is set, only spectators"
       " can use this teleport"$0D"Spectator teleporters are not normally plac"
       "ed in the editor, but are created"$0D"automatically near doors to allo"
       "w spectators to move through them"$0D"RANDOM -- send player to random "
       "info_player_deathmatch spawn point"$0D"----------- keys ------------"$0D
       "health -- default is original behavior (speed of 400), any other value"
       " will be the"$0D"speed at which the player is spewed forth from the tr"
       "anpsorter destination. -1"$0D"if you want no speed."
      spawnflags: =
      {
        typ = "X1"
        cap = "SPECTATOR"
        hint = "If spectator is set, only spectators can use this teleport"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "RANDOM"
        hint = "send player to random info_player_deathmatch spawn point"
      }
      t_commonspecifics = !
      health: =
      {
        txt = "&"
        hint = "default is original behavior (speed of 400)"
      }
    }

    trigger_hurt:form =
    {
      help = "Any entity that touches this will be hurt."$0D"It does dmg point"
       "s of damage each server frame"$0D"Targeting the trigger will toggle it"
       "s on / off state."$0D"SILENT            supresses playing the sound"$0D
       "SLOW            changes the damage rate to once per second"$0D"NO_PROT"
       "ECTION    *nothing* stops the damage"$0D22"dmg"$22"            default"
       " 5 (whole numbers only)"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OFF"
      }
      spawnflags: =
      {
        typ = "X4"
        cap = "SILENT"
        hint = "supresses playing the sound"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "NO_PROTECTION"
        hint = "*nothing* stops the damage"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "SLOW"
        hint = "changes the damage rate to once per second"
      }
      t_commonspecifics = !
      dmg: =
      {
        txt = "&"
        hint = "default 5 (whole numbers only)"
      }
    }

    func_timer:form =
    {
      help = "This should be renamed trigger_timer..."$0D"Repeatedly fires its"
       " targets."$0D"Can be turned on or off by using."$0D22"wait"$22"       "
       "     base time between triggering all targets, default is 1"$0D22"rand"
       "om"$22"        wait variance, default is 0"$0D"so, the basic time betw"
       "een firing is a random time between"$0D"(wait - random) and (wait + ra"
       "ndom)"
      bbox = '-8 -8 -8 8 8 8'
      spawnflags: =
      {
        typ = "X1"
        cap = "START_ON"
      }
      t_commonspecifics = !
    }

    misc_turret:form =
    {
      help = "Will aim and shoot at enemies"$0D"START_OFF - Starts off"$0D"ran"
       "dom - How far away an enemy can be for it to pick it up (default 512)"$0D
       "speed - How fast it turns (degrees per second, default 30)"$0D"wait   "
       " - How fast it shoots (shots per second, default 4, can't be less)"$0D
       "dmg    - How much damage each shot does (default 5)"$0D"health - How m"
       "uch damage it can take before exploding (default 100)"$0D"splashDamage"
       " - How much damage the explosion does"$0D"splashRadius - The random of"
       " the explosion"$0D"NOTE: If either of the above two are 0, it will not"
       " make an explosion"$0D"targetname - Toggles it on/off"$0D"target - Wha"
       "t to use when destroyed"$0D22"team"$22" - This cannot take damage from"
       " members of this team and will not target members of this team (1 = re"
       "d, 2 = blue)"
      bbox = '-8 -16 -8 40 16 28'
      mdl = "models/mapobjects/dn/gunturret.md3"
      spawnflags: =
      {
        typ = "X1"
        cap = "START_OFF"
      }
      t_commonspecifics = !
      speed: =
      {
        txt = "&"
        hint = "How fast it turns (degrees per second, default 30)"
      }
      dmg: =
      {
        txt = "&"
        hint = "How much damage each shot does (default 5)"
      }
      health: =
      {
        txt = "&"
        hint = "How much damage it can take before exploding (default 100)"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "How much damage the explosion does"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "The random of the explosion"$0D
               "NOTE: If either of the above two are 0,"$0D
               "it will not make an explosion"
      }
      team: =
      {
        txt = "&"
        hint = "This can not take damage from members of this team and"$0D
               "will not target members of this team (1 = red, 2 = blue)"
      }
    }

    misc_laser_arm:form =
    {
      help = "What it does when used depends on it's "$22"count"$22" (can be s"
       "et by a script)"$0D"count:"$0D"0 (default) - Fire in direction facing"$0D
       "1 turn left"$0D"2 turn right"$0D"3 aim up"$0D"4 aim down"$0D"speed - H"
       "ow fast it turns (degrees per second, default 30)"$0D"dmg    - How muc"
       "h damage the laser does 10 times a second (default 5 = 50 points per s"
       "econd)"$0D"wait  - How long the beam lasts, in seconds (default is 3)"$0D
       "targetname - to use it"$0D"target - What thing for it to be pointing a"
       "t to start with"$0D22"startRGBA"$22" - laser color, Red Green Blue Alp"
       "ha, range 0 to 1 (default  1.0 0.85 0.15 0.75 = Yellow-Orange)"
      bbox = '-16 -8 -20 16 8 16'
      mdl = "models/mapobjects/dn/laser_ed.md3"
      target: =
      {
        txt = "&"
        hint = "Name of the entity that this one targets."
      }
      targetname: =
      {
        txt = "&"
        hint = "Name of this entity, used as a target by another entity."
      }
      notfree: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in free for all games."
      }
      notteam: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in team games."
      }
      notsingle: =
      {
        txt = "&"
        hint = "if set to 1, don't spawn in single player games."
      }
      wait: =
      {
        txt = "&"
        hint = "override the default wait before respawning."$0D
               "-1 = never respawn automatically,"$0D
               "which can be used with targeted spawning."
      }
      random: =
      {
        txt = "&"
        hint = "random number of plus or minus seconds varied from the respawn time."
      }
      count: =
      { typ="C"
        txt = "&"
        hint = "0 (default) - Fire in direction facing"$0D
               "1 turn left"$0D
               "2 turn right"$0D
               "3 aim up"$0D
               "4 aim down"
        items=
          "fire ahead"$0D
          "turn left"$0D
          "turn right"$0D
          "aim up"$0D
          "aim down"
        values=
          "0"$0D
          "1"$0D
          "2"$0D
          "3"$0D
          "4"
      }
      speed: =
      {
        txt = "&"
        hint = "How fast it turns (degrees per second, default 30)"
      }
      dmg: =
      {
        txt = "&"
        hint = "How much damage the laser does 10 times a second (default 5 = 50 points per second)"
      }
      health: =
      {
        txt = "&"
        hint = "How much damage it can take before exploding (default 100)"
      }
      splashDamage: =
      {
        txt = "&"
        hint = "How much damage the explosion does"
      }
      splashRadius: =
      {
        txt = "&"
        hint = "The random of the explosion"$0D
               "NOTE: If either of the above two are 0,"$0D
               "it will not make an explosion"
      }
      team: =
      {
        txt = "&"
        hint = "This can not take damage from members of this team and"$0D
               "will not target members of this team (1 = red, 2 = blue)"
      }
      startRGBA: =
      {
        txt = "&"
        hint = "laser color, Red Green Blue Alpha, Pick the color here."$0D
               "(default  1.0 0.85 0.15 0.75 = Yellow-Orange)"$0D
               "Set the ALPHA (intensity-brightness) value below."$0D
               "Both must be set for this to work."
        Typ = "LN4"
      }
      startRGBA: =
      {
        txt = "&"
        hint = "Use to set the (fourth) Alpha (intensity-brightness) value for above."$0D
               "Both must be set for this to work."
        Typ = "E"
      }
      script_targetname: =
      {
        txt = "&"
        hint = "holds the interface to bring up."
      }
    }

    func_usable:form =
    {
      help = "START_OFF - the wall will not be there"$0D"AUTOANIM - If useing "
       "an md3, it will animate"$0D"ALWAYS_ON - Doesn't toggle on and off when"
       " used, just fires target"$0D"NOBLOCKCHECK - Will NOT turn on while som"
       "ething is inside it unless this is checked"$0D"A bmodel that can be us"
       "ed directly by the player's "$22"activate"$22" button"$0D22"targetname"
       $22" - When used, will toggle on and off"$0D22"target"$22"    Will fire"
       " this target every time it is toggled OFF"$0D22"model2"$22"    .md3 mo"
       "del to also draw"$0D22"color"$22"        constantLight color"$0D22"lig"
       "ht"$22"        constantLight radius"$0D22"wait"$22"        amount of t"
       "ime before the object is usable again (only valid with ALWAYS_ON flag)"
       $0D22"health"$22"    if it has health, it will be used whenever shot at"
       "/killed - if you want it to only be used once this way, set health to "
       "1"$0D22"team"$22" - This can only be used by this team (1 = red, 2 = "
       "blue)"
      spawnflags: =
      {
        typ = "X1"
        cap = "STARTOFF"
        hint = "the wall will not be there"
      }
      spawnflags: =
      {
        typ = "X2"
        cap = "AUTOANIM"
        hint = "If useing an md3, it will animate"
      }
      spawnflags: =
      {
        typ = "X8"
        cap = "ALWAYS_ON"
        hint = "Doesn't toggle on and off when used, just fires target"
      }
      spawnflags: =
      {
        typ = "X16"
        cap = "NOBLOCKCHECK"
        hint = "Will NOT turn on while something is inside it unless this is checked"$0D
               "A bmodel that can be used directly by the player's "$22"activate"$22" button"
      }
      t_commonspecifics = !
      model2: =
      {
        txt = "&"
        t_modelbrowser = !
      }
      t_model2 = !
      color: =
      {
        txt = "&"
        Typ = "LN"
        hint = "constantLight color"
      }
      light: =
      {
        txt = "&"
        hint = "constantLight radius"
      }
      health: =
      {
        txt = "&"
        hint = "if it has health, it will be used whenever shot at/killed"$0D
               "if you want it to only be used once this way, set health to 1"
      }
      team: =
      {
        txt = "&"
        hint = "This can only be used by this team (1 = red, 2 = blue)"
      }
    }
  }
}
