QQRKSRC1
//**************************************************************************
//QuArK -- Quake Army Knife -- 3D game editor
//Copyright (C) 1996-99 Armin Rigo
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either version 2
//of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
//Contact the author Armin Rigo by e-mail: arigo@planetquake.com
//or by mail: Armin Rigo, La Cure, 1854 Leysin, Switzerland.
//See also http://www.planetquake.com/quark
//**************************************************************************

// Configuration file for Sin


//    Version 5.11
// modified by tiglari with textures and entities
//  & lots of help & inputs from Eutectic

{
  QuArKProtected = "1"
  Description = "Base Sin data"
  Sin setup.qctx =
  {
    Game = "Sin"
    HTML = "help\index.html"
    SFSkills = '256 512 1024 2048'
    TexFlagsTransparent = '16 0.66670 32 0.33330'
    Palette = $0000000F0F0F1F1F1F2F2F2F3F3F3F4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9BAB
     $ABABBBBBBBCBCBCBDBDBDBEBEBEB634B235B431F533F1F4F3B1B47371B3F2F173B2B1733
     $27132F23132B1F13271B0F23170F1B130B170F0B130F070F0B075F5F6F5B5B675B535F57
     $4F5B534B534F474B473F433F3B3B3B3737332F2F2F2B2B2727272323231B1B1B17171713
     $13138F77537B6343735B3B674F2FCF974BA77B3B8B672F6F5327EB9F27CB8B23AF771F93
     $631B774F175B3B0F3F270B231707A73B2B9F2F23972B1B8B27137F1F0F73170B67170757
     $13004B0F00430F003B0F00330B002B0B00230B001B07001307007B5F4B7357436B533F67
     $4F3B5F4737574333533F2F4B372B4333273F2F2337271B2F2317271B131F170F170F0B0F
     $0B076F3B175F3717532F17432B17372313271B0F1B130B0F0B07B35B4FBF7B6FCB9B93D7
     $BBB7CBD7DFB3C7D39FB7C387A7B77397A75B879B47778B2F677F17536F134B670F435B0B
     $3F5307374B072F3F072733001F2B00171F000F1300070B0000008B5757834F4F7B474773
     $43436B3B3B6333335B2F2F572B2B4B23233F1F1F331B1B2B13131F0F0F130B0B0B070700
     $0000979F7B8F9773878B6B7F8363777B5F7373576B6B4F6363475B5B434F4F3B43433337
     $372B2F2F2323231B1717130F0F0B9F4B3F9343378B3B2F7F3727772F236B2B1B63231757
     $1F134F1B0F43170B37130B2B0F071F0B071707000B0000000000777BCF6F73C3676BB763
     $63A75B5B9B53578F4B4F7F4747733F3F673737572F2F4B27273F231F2F1B1723130F170B
     $07079BAB7B8F9F6F8797637B8B5773834B6777435F6F3B5767334B5B273F4F1B3743132F
     $3B0B232F071B23001317000B0F0000FF0023E70F3FD31B53BB275FA72F5F8F335F7B33FF
     $FFFFFFFFD3FFFFA7FFFF7FFFFF53FFFF27FFEB1FFFD717FFBF0FFFAB07FF9300EF7F00E3
     $6B00D35700C74700B73B00AB2B009B1F008F17007F0F007307005F00004700002F00001B
     $0000EF00003737FFFF00000000FF2B2B231B1B1713130FEB977FC373539F57337B3F1BEB
     $D3C7C7AB9BA78B77876B579F5B53

    TextureFlags:form =
    {
      Style = "5"
      Reset: =
      {
        Cap = "Reset to default"
        Typ = "B"
        Hint = "Reset all flags to the texture's default"
        Delete: =
        {
          Flags = ""
          Contents = ""
          Value = ""
          restitution = ''
          friction = ''
          animtime = ''
          nonlit = ''
          direct = ""
          directangle = ""
          directstyle = ""
          translucence = ''
          trans_angle = ""
          trans_mag = ''
          color = ""
        }
      }
      restitution: =
      {
         Typ = "EF001"
         Txt = "restitution: "
         Hint = "how vigoriously things bounce off it, floating point value"
      }
      friction: =
      {
         Typ = "EF001"
         Txt = "friction: "
         Hint = "How slippery"
      }
      Value: = {
        Typ = "E"
        Txt = "lightvalue"
        Hint = "intensity of light from surface, integer value"
      }
      direct: = {
        Typ = "E"
        Txt = "direct"
        Hint = "Light-value emitted from surface in `spotlite' mode. " $0D " As for example the effect of the sun thru a skylight.  Integer value"
      }
      directangle: = {
        Typ = "E"
        Txt = "directangle: "
        Hint = "Spread-angle of light emitted in spotlite (direct) mode." $0D "  Values 0..180 degrees"
      }
     nonlit: = {
        Typ = "EF001"
        Txt = "nonlitvalue"
        Hint = "If nonlit surface flag is set, the surface is not lighted externally," $0D " this sets its intrinsic light-level.  Value between 0 and 1"
     }

       color = {
         Typ = "L"
         Txt = "color (swatch)"
         Hint = "Color of light from radiating surfaces.  Click on the swatch, or can be specified numerically below"
       }
     color: = {
       Typ = "E"
       Txt = "color (coords)"
       Hint = "Color of light from radiating surfaces.  Triple of floats 0..1, or can be specified by clicking on the swatch above"
     }
      directstyle: = {
        Typ = "E"
        Txt = "directstyle"
        Hint = "Value is a string, label for grouping switchable lights"
      }
      translucence: = {
        Typ = "EF001"
        Txt = "translucence"
        Hint = "translucence value between 0..1.  Can't be used on scrolling textures."
      }
      trans_mag: = {
        Typ = "EF001"
        Txt = "trans_mag"
        Hint = "scrolling speed for scrolling textures, floating point value, pixels/sec" $0D "  `translate' surface flag must be checked for this to work"
      }
      trans_angle: = {
        Typ = "E"
        Txt = "trans_angle"
        Hint = "Angular offset to scrolling texture; value 0..180 degrees"
      }
     animtime: = {
        Typ = "EF001"
        Txt = "animtime"
        Hint = "Time to the next animation frame; floating point value"
     }
     Sep: = {Typ = "S"}  // separator

     Flags: = {
                 Txt="Sound"
                 Typ = "CL2013265920"
                 Items = "none" $0D "wood" $0D "metal" $0D "stone" $0D "concrete" $0D "dirt" $0D "flesh" $0D "grill" $0D "glass" $0D "fabric" $0D "monitor" $0D "gravel" $0D "vegetation" $0D "paper" $0D "duct" $0D "water"
                 Values = "0" $0D "134217728" $0D "268435456" $0D "402653184" $0D "536870912" $0D "671088640" $0D "805306368" $0D "939524096" $0D "1073741824" $0D "1207959552" $0D "1342177280" $0D "1476395008" $0D "1610612736" $0D "1744830464" $0D "1879048192" $0D "2013265920"
                 Hint = "Determines sound made when brush is walked on"
               }
      Sep: =
       {
         Typ = "S"
       }




      // PERLFLAGS


             // The following code was generated by the PERL script flagform.pl
             // from the data file sinflags.txt.  Don't modify this by hand.

            Flags:={Txt="Surface"
             Cap="light"
             Typ="X1"
            }
            Flags:={
             Cap="masked"
             Typ="X2"
            }
            Flags:={
             Cap="sky"
             Typ="X4"
            }
            Flags:={
             Cap="warping"
             Typ="X8"
            }
            Flags:={
             Cap="nonlit"
             Typ="X16"
            }
            Flags:={
             Cap="nofilter"
             Typ="X32"
            }
            Flags:={
             Cap="conveyor"
             Typ="X64"
            }
            Flags:={
             Cap="nodraw"
             Typ="X128"
            }
            Flags:={
             Cap="hint"
             Typ="X256"
            }
            Flags:={
             Cap="skip"
             Typ="X512"
            }
            Flags:={
             Cap="wavy"
             Typ="X1024"
            }
            Flags:={
             Cap="ricochet"
             Typ="X2048"
            }
            Flags:={
             Cap="prelit"
             Typ="X4096"
            }
            Flags:={
             Cap="mirror"
             Typ="X8192"
            }
            Flags:={
             Cap="console"
             Typ="X16384"
            }
            Flags:={
             Cap="usecolor"
             Typ="X32768"
            }
            Flags:={
             Cap="hardwareonly"
             Typ="X65536"
            }
            Flags:={
             Cap="damage"
             Typ="X131072"
            }
            Flags:={
             Cap="weak"
             Typ="X262144"
            }
            Flags:={
             Cap="normal"
             Typ="X524288"
            }
            Flags:={
             Cap="add"
             Typ="X1048576"
            }
            Flags:={
             Cap="envmapped"
             Typ="X2097152"
            }
            Flags:={
             Cap="random"
             Typ="X4194304"
            }
            Flags:={
             Cap="animate"
             Typ="X8388608"
            }
            Flags:={
             Cap="rndtime"
             Typ="X16777216"
            }
            Flags:={
             Cap="translate"
             Typ="X33554432"
            }
            Flags:={
             Cap="nomerge"
             Typ="X67108864"
            }
            Flags:={
             Cap="surfbit0"
             Typ="X134217728"
            }
            Flags:={
             Cap="surfbit1"
             Typ="X268435456"
            }
            Flags:={
             Cap="surfbit2"
             Typ="X536870912"
            }
            Flags:={
             Cap="surfbit3"
             Typ="X1073741824"
            }
            Contents:={Txt="Contents"
             Cap="solid"
             Typ="X1"
            }
            Contents:={
             Cap="window"
             Typ="X2"
            }
            Contents:={
             Cap="fence"
             Typ="X4"
            }
            Contents:={
             Cap="lava"
             Typ="X8"
            }
            Contents:={
             Cap="slime"
             Typ="X16"
            }
            Contents:={
             Cap="water"
             Typ="X32"
            }
            Contents:={
             Cap="mist"
             Typ="X64"
            }
            Contents:={
             Cap="playerclip"
             Typ="X65536"
            }
            Contents:={
             Cap="monsterclip"
             Typ="X131072"
            }
            Contents:={
             Cap="current_0"
             Typ="X262144"
            }
            Contents:={
             Cap="current_90"
             Typ="X524288"
            }
            Contents:={
             Cap="current_180"
             Typ="X1048576"
            }
            Contents:={
             Cap="current_270"
             Typ="X2097152"
            }
            Contents:={
             Cap="current_up"
             Typ="X4194304"
            }
            Contents:={
             Cap="current_dn"
             Typ="X8388608"
            }
            Contents:={
             Cap="origin"
             Typ="X16777216"
            }
            Contents:={
             Cap="monster"
             Typ="X33554432"
            }
            Contents:={
             Cap="corpse"
             Typ="X67108864"
            }
            Contents:={
             Cap="detail"
             Typ="X134217728"
            }
            Contents:={
             Cap="translucent"
             Typ="X268435456"
            }
            Contents:={
             Cap="ladder"
             Typ="X536870912"
            }

             // We now return to our normal programming.
       }

    SurfFlags:form =
    {
            Flags:={
             Cap="light"
             Typ="X1"
            }
            Flags:={
             Cap="masked"
             Typ="X2"
            }
            Flags:={
             Cap="sky"
             Typ="X4"
            }
            Flags:={
             Cap="warping"
             Typ="X8"
            }
            Flags:={
             Cap="nonlit"
             Typ="X16"
            }
            Flags:={
             Cap="nofilter"
             Typ="X32"
            }
            Flags:={
             Cap="conveyor"
             Typ="X64"
            }
            Flags:={
             Cap="nodraw"
             Typ="X128"
            }
            Flags:={
             Cap="hint"
             Typ="X256"
            }
            Flags:={
             Cap="skip"
             Typ="X512"
            }
            Flags:={
             Cap="wavy"
             Typ="X1024"
            }
            Flags:={
             Cap="ricochet"
             Typ="X2048"
            }
            Flags:={
             Cap="prelit"
             Typ="X4096"
            }
            Flags:={
             Cap="mirror"
             Typ="X8192"
            }
            Flags:={
             Cap="console"
             Typ="X16384"
            }
            Flags:={
             Cap="usecolor"
             Typ="X32768"
            }
            Flags:={
             Cap="hardwareonly"
             Typ="X65536"
            }
            Flags:={
             Cap="damage"
             Typ="X131072"
            }
            Flags:={
             Cap="weak"
             Typ="X262144"
            }
            Flags:={
             Cap="normal"
             Typ="X524288"
            }
            Flags:={
             Cap="add"
             Typ="X1048576"
            }
            Flags:={
             Cap="envmapped"
             Typ="X2097152"
            }
            Flags:={
             Cap="random"
             Typ="X4194304"
            }
            Flags:={
             Cap="animate"
             Typ="X8388608"
            }
            Flags:={
             Cap="rndtime"
             Typ="X16777216"
            }
            Flags:={
             Cap="translate"
             Typ="X33554432"
            }
            Flags:={
             Cap="nomerge"
             Typ="X67108864"
            }
      }

    ContFlags:form =
    {
            Contents:={Txt="Contents"
             Cap="solid"
             Typ="X1"
            }
            Contents:={
             Cap="window"
             Typ="X2"
            }
            Contents:={
             Cap="fence"
             Typ="X4"
            }
            Contents:={
             Cap="lava"
             Typ="X8"
            }
            Contents:={
             Cap="slime"
             Typ="X16"
            }
            Contents:={
             Cap="water"
             Typ="X32"
            }
            Contents:={
             Cap="mist"
             Typ="X64"
            }
            Contents:={
             Cap="playerclip"
             Typ="X65536"
            }
            Contents:={
             Cap="monsterclip"
             Typ="X131072"
            }
            Contents:={
             Cap="current_0"
             Typ="X262144"
            }
            Contents:={
             Cap="current_90"
             Typ="X524288"
            }
            Contents:={
             Cap="current_180"
             Typ="X1048576"
            }
            Contents:={
             Cap="current_270"
             Typ="X2097152"
            }
            Contents:={
             Cap="current_up"
             Typ="X4194304"
            }
            Contents:={
             Cap="current_dn"
             Typ="X8388608"
            }
            Contents:={
             Cap="origin"
             Typ="X16777216"
            }
            Contents:={
             Cap="monster"
             Typ="X33554432"
            }
            Contents:={
             Cap="corpse"
             Typ="X67108864"
            }
            Contents:={
             Cap="detail"
             Typ="X134217728"
            }
            Contents:={
             Cap="translucent"
             Typ="X268435456"
            }
            Contents:={
             Cap="ladder"
             Typ="X536870912"
            }
      }
  }

  NewFiles.qtx =
  {
    ToolBox = "New files..."
    Root = "Sin file types.qtxfolder"
    Sin file types.qtxfolder =
    {
      Texture.swl =
      {
        ;incl = "EmptyTexture"
      }
      Sin Pak.sin =
      {
      }
    }
  }



  NewMap:incl =
  {
    Game = "Sin"
    Root = "worldspawn:b"
    walltex:incl =
    {
      tex = "bank/wl_rufmarb"
    }
    floortex:incl =
    {
      tex = "bank/fl_bankfloor1"
    }
    ceiltex:incl =
    {
      tex = "bank/cl_bankceil"
    }
    worldspawn:b =
    {
      Border walls:g =
      {
        East wall:p =
        {
          west:f =
          {
            v = '256 0 270 256 0 398 256 128 270'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          east:f =
          {
            v = '272 0 270 272 128 270 272 0 398'
            tex = "bank/wl_rufmarb"
          }
          south:f =
          {
            v = '432 -192 270 560 -192 270 432 -192 398'
            tex = "bank/wl_rufmarb"
          }
          north:f =
          {
            v = '432 192 270 432 192 398 560 192 270'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          down:f =
          {
            v = '432 0 -96 432 128 -96 560 0 -96'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          up:f =
          {
            v = '432 0 96 560 0 96 432 128 96'
            tex = "bank/wl_rufmarb"
          }
        }
        West wall:p =
        {
          west:f =
          {
            v = '-272 0 270 -272 0 398 -272 128 270'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          east:f =
          {
            v = '-256 0 270 -256 128 270 -256 0 398'
            tex = "bank/wl_rufmarb"
          }
          south:f =
          {
            v = '432 -192 270 560 -192 270 432 -192 398'
            tex = "bank/wl_rufmarb"
          }
          north:f =
          {
            v = '432 192 270 432 192 398 560 192 270'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          down:f =
          {
            v = '432 0 -96 432 128 -96 560 0 -96'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          up:f =
          {
            v = '432 0 96 560 0 96 432 128 96'
            tex = "bank/wl_rufmarb"
          }
        }
        North wall:p =
        {
          west:f =
          {
            v = '-256 0 270 -256 0 398 -256 128 270'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          east:f =
          {
            v = '256 0 270 256 128 270 256 0 398'
            tex = "bank/wl_rufmarb"
          }
          south:f =
          {
            v = '432 192 270 560 192 270 432 192 398'
            tex = "bank/wl_rufmarb"
          }
          north:f =
          {
            v = '432 208 270 432 208 398 560 208 270'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          down:f =
          {
            v = '432 0 -96 432 128 -96 560 0 -96'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          up:f =
          {
            v = '432 0 96 560 0 96 432 128 96'
            tex = "bank/wl_rufmarb"
          }
        }
        South wall:p =
        {
          west:f =
          {
            v = '-256 0 270 -256 0 398 -256 128 270'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          east:f =
          {
            v = '256 0 270 256 128 270 256 0 398'
            tex = "bank/wl_rufmarb"
          }
          south:f =
          {
            v = '432 -208 270 560 -208 270 432 -208 398'
            tex = "bank/wl_rufmarb"
          }
          north:f =
          {
            v = '432 -192 270 432 -192 398 560 -192 270'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          down:f =
          {
            v = '432 0 -96 432 128 -96 560 0 -96'
            tex = "bank/wl_rufmarb"
            m = "1"
          }
          up:f =
          {
            v = '432 0 96 560 0 96 432 128 96'
            tex = "bank/wl_rufmarb"
          }
        }
        Sky:p =
        {
          west:f =
          {
            v = '-256 0 270 -256 0 398 -256 128 270'
            tex = "generic/misc/sky1"
            m = "1"
          }
          east:f =
          {
            v = '256 0 270 256 128 270 256 0 398'
            tex = "generic/misc/sky1"
          }
          south:f =
          {
            v = '432 -192 270 560 -192 270 432 -192 398'
            tex = "generic/misc/sky1"
          }
          north:f =
          {
            v = '432 192 270 432 192 398 560 192 270'
            tex = "generic/misc/sky1"
            m = "1"
          }
          down:f =
          {
            v = '432 0 96 432 128 96 560 0 96'
            tex = "generic/misc/sky1"
            m = "1"
          }
          up:f =
          {
            v = '432 0 112 560 0 112 432 128 112'
            tex = "generic/misc/sky1"
          }
        }
        Floor:p =
        {
          west:f =
          {
            v = '-256 0 270 -256 0 398 -256 128 270'
            tex = "bank/fl_bankfloor1"
            m = "1"
          }
          east:f =
          {
            v = '256 0 270 256 128 270 256 0 398'
            tex = "bank/fl_bankfloor1"
          }
          south:f =
          {
            v = '432 -192 270 560 -192 270 432 -192 398'
            tex = "bank/fl_bankfloor1"
          }
          north:f =
          {
            v = '432 192 270 432 192 398 560 192 270'
            tex = "bank/fl_bankfloor1"
            m = "1"
          }
          down:f =
          {
            v = '432 0 -112 432 128 -112 560 0 -112'
            tex = "bank/fl_bankfloor1"
            m = "1"
          }
          up:f =
          {
            v = '432 0 -96 560 0 -96 432 128 -96'
            tex = "bank/fl_bankfloor1"
          }
        }
      }
      info_player_start:e =
      {
        origin = "-144 0 -72"
        angle = "360"
      }
    }
  }
  Textures.qtx =
  {
    ToolBox = "Texture Browser..."
    Root = "Ritual Entertainment Textures.qtxfolder"
    Ritual Entertainment Textures.qtxfolder =
    {  // TEXT

      aqueduct.txlist =
      {
        aqueduct/cp_controls.wl =
        {
          i = "base"
        }
        aqueduct/cp_controls1.wl =
        {
          i = "base"
        }
        aqueduct/cp_controls2.wl =
        {
          i = "base"
        }
        aqueduct/cp_controls3.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_1.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_1_brk.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_2.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_2_brk.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_3.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_4.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_5.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_5a.wl =
        {
          i = "base"
        }
        aqueduct/lt_aqd_6.wl =
        {
          i = "base"
        }
        aqueduct/si_aqueduct.wl =
        {
          i = "base"
        }
        aqueduct/si_city.wl =
        {
          i = "base"
        }
        aqueduct/si_damsewage.wl =
        {
          i = "base"
        }
        aqueduct/si_freeport.wl =
        {
          i = "base"
        }
        aqueduct/si_highpress.wl =
        {
          i = "base"
        }
        aqueduct/si_highvolt.wl =
        {
          i = "base"
        }
        aqueduct/si_mancont.wl =
        {
          i = "base"
        }
        aqueduct/si_roadcl.wl =
        {
          i = "base"
        }
        aqueduct/si_sea.wl =
        {
          i = "base"
        }
        aqueduct/si_sewer.wl =
        {
          i = "base"
        }
        aqueduct/si_undertow.wl =
        {
          i = "base"
        }
        aqueduct/si_warninghp.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_1.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_10.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_10a.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_10a1.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_10b.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_10c.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_10d.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_11.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_11a.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_11b.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_11c.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_11d.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_1a.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_2.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_3.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_4.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_5.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_6.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_7.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_8.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_9.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_9a.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_9a1.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_9a2.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_9b.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_9c.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_9d.wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(blue).wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(elect).wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(green).wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(red).wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(sewage).wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(silver).wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(steam).wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(water).wl =
        {
          i = "base"
        }
        aqueduct/tr_aqd_pipe(yellow).wl =
        {
          i = "base"
        }
        aqueduct/tr_handle.wl =
        {
          i = "base"
        }
        aqueduct/tr_handle_blue(side).wl =
        {
          i = "base"
        }
        aqueduct/tr_handle_blue.wl =
        {
          i = "base"
        }
        aqueduct/tr_handle_red(side).wl =
        {
          i = "base"
        }
        aqueduct/tr_handle_red.wl =
        {
          i = "base"
        }
        aqueduct/tr_handle_yellow(side).wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_1.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_10.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_10a.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_11.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_12.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_13.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_14.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_14to15.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_15.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_16.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_17.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_18.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_19.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_2.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_20.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_21.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_22.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_23.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_24.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_25.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_26.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_27.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_28.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_29.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_2a.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_3.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_30.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_31.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_31a.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_32.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_33.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_34.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_35.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_36.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_37.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_38.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_39.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_4.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_40.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_41.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_42.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_43.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_44.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_44a.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_45.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_46.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_47.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_47a.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_48.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_49.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_5.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_50.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_51.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_52.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_53.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_54.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_55.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_56.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_57.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_58.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_59.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_6.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_7.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_7a.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_8.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_9.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_9a.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_door.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_mach1.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_mach2.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_mach3.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_mach4.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_mach5.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_mach6.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_mach7.wl =
        {
          i = "base"
        }
        aqueduct/wl_aqd_mach8.wl =
        {
          i = "base"
        }
        aqueduct/wl_mach_wh011.wl =
        {
          i = "base"
        }
        aqueduct/wl_mach_wh012.wl =
        {
          i = "base"
        }
        aqueduct/wl_ritlogo.wl =
        {
          i = "base"
        }
        aqueduct/wl_sewer_door.wl =
        {
          i = "base"
        }
        aqueduct/wl_sewer_pipedoor.wl =
        {
          i = "base"
        }

      }
      bank.txlist =
      {
        bank/0fl_esclate.wl =
        {
          i = "base"
        }
        bank/0fl_esclate2.wl =
        {
          i = "base"
        }
        bank/0wl_secbox3.wl =
        {
          i = "base"
        }
        bank/1fl_esclate.wl =
        {
          i = "base"
        }
        bank/1fl_esclate2.wl =
        {
          i = "base"
        }
        bank/1wl_secbox3.wl =
        {
          i = "base"
        }
        bank/2fl_esclate.wl =
        {
          i = "base"
        }
        bank/2fl_esclate2.wl =
        {
          i = "base"
        }
        bank/3fl_esclate.wl =
        {
          i = "base"
        }
        bank/3fl_esclate2.wl =
        {
          i = "base"
        }
        bank/4fl_esclate.wl =
        {
          i = "base"
        }
        bank/4fl_esclate2.wl =
        {
          i = "base"
        }
        bank/5fl_esclate.wl =
        {
          i = "base"
        }
        bank/5fl_esclate2.wl =
        {
          i = "base"
        }
        bank/6fl_esclate.wl =
        {
          i = "base"
        }
        bank/6fl_esclate2.wl =
        {
          i = "base"
        }
        bank/7fl_esclate.wl =
        {
          i = "base"
        }
        bank/7fl_esclate2.wl =
        {
          i = "base"
        }
        bank/cl_bankceil.wl =
        {
          i = "base"
        }
        bank/cl_bankceil2.wl =
        {
          i = "base"
        }
        bank/cl_bankceil3.wl =
        {
          i = "base"
        }
        bank/cl_bankplain.wl =
        {
          i = "base"
        }
        bank/cl_marbflat.wl =
        {
          i = "base"
        }
        bank/cl_marbflatplaq.wl =
        {
          i = "base"
        }
        bank/cp_bankmonitor.wl =
        {
          i = "base"
        }
        bank/cp_bankmonitor2.wl =
        {
          i = "base"
        }
        bank/cp_banksecurity.wl =
        {
          i = "base"
        }
        bank/cp_seccam1.wl =
        {
          i = "base"
        }
        bank/cp_seccam2.wl =
        {
          i = "base"
        }
        bank/cp_seccam3.wl =
        {
          i = "base"
        }
        bank/cp_seccam4.wl =
        {
          i = "base"
        }
        bank/fl_bank(broken).wl =
        {
          i = "base"
        }
        bank/fl_bankfloor1.wl =
        {
          i = "base"
        }
        bank/fl_gtmarb.wl =
        {
          i = "base"
        }
        bank/fl_wgmarb.wl =
        {
          i = "base"
        }
        bank/lt_bank_brk.wl =
        {
          i = "base"
        }
        bank/lt_bank_brk2.wl =
        {
          i = "base"
        }
        bank/si_atm.wl =
        {
          i = "base"
        }
        bank/si_bankfolder.wl =
        {
          i = "base"
        }
        bank/si_bankfolder2.wl =
        {
          i = "base"
        }
        bank/si_bankpaper1.wl =
        {
          i = "base"
        }
        bank/si_bankpaper2.wl =
        {
          i = "base"
        }
        bank/si_bankpaper3.wl =
        {
          i = "base"
        }
        bank/si_bankpaper4.wl =
        {
          i = "base"
        }
        bank/si_bankphoto.wl =
        {
          i = "base"
        }
        bank/si_bankphoto2.wl =
        {
          i = "base"
        }
        bank/si_bankphoto3.wl =
        {
          i = "base"
        }
        bank/si_bank_01.wl =
        {
          i = "base"
        }
        bank/si_bank_address.wl =
        {
          i = "base"
        }
        bank/si_bboard_bank.wl =
        {
          i = "base"
        }
        bank/si_bboard_bank1.wl =
        {
          i = "base"
        }
        bank/si_carloan.wl =
        {
          i = "base"
        }
        bank/si_customer.wl =
        {
          i = "base"
        }
        bank/si_employees.wl =
        {
          i = "base"
        }
        bank/si_money_1up.wl =
        {
          i = "base"
        }
        bank/si_money_1up_brt.wl =
        {
          i = "base"
        }
        bank/si_money_2up.wl =
        {
          i = "base"
        }
        bank/si_money_2up_brt.wl =
        {
          i = "base"
        }
        bank/si_money_side.wl =
        {
          i = "base"
        }
        bank/si_safety.wl =
        {
          i = "base"
        }
        bank/si_security.wl =
        {
          i = "base"
        }
        bank/si_tellers.wl =
        {
          i = "base"
        }
        bank/si_tellers2.wl =
        {
          i = "base"
        }
        bank/tr_brass.wl =
        {
          i = "base"
        }
        bank/tr_brass2.wl =
        {
          i = "base"
        }
        bank/tr_clockhand.wl =
        {
          i = "base"
        }
        bank/tr_dial1.wl =
        {
          i = "base"
        }
        bank/tr_dial2.wl =
        {
          i = "base"
        }
        bank/tr_gmarb.wl =
        {
          i = "base"
        }
        bank/tr_grmarb2.wl =
        {
          i = "base"
        }
        bank/tr_poles_gold.wl =
        {
          i = "base"
        }
        bank/tr_poles_rope.wl =
        {
          i = "base"
        }
        bank/tr_securitydoorplate.wl =
        {
          i = "base"
        }
        bank/tr_securitydoorplate2.wl =
        {
          i = "base"
        }
        bank/tr_sofa1.wl =
        {
          i = "base"
        }
        bank/tr_sofa2.wl =
        {
          i = "base"
        }
        bank/tr_sofa3.wl =
        {
          i = "base"
        }
        bank/tr_teller_drawer.wl =
        {
          i = "base"
        }
        bank/tr_teller_inside.wl =
        {
          i = "base"
        }
        bank/tr_vault.wl =
        {
          i = "base"
        }
        bank/tr_vault_doorplate.wl =
        {
          i = "base"
        }
        bank/tr_wmarb.wl =
        {
          i = "base"
        }
        bank/wl_atmfront.wl =
        {
          i = "base"
        }
        bank/wl_atmfront_brk.wl =
        {
          i = "base"
        }
        bank/wl_bankbricks.wl =
        {
          i = "base"
        }
        bank/wl_bankdoor.wl =
        {
          i = "base"
        }
        bank/wl_bankdoor2.wl =
        {
          i = "base"
        }
        bank/wl_bankdoor3.wl =
        {
          i = "base"
        }
        bank/wl_bankdoor4.wl =
        {
          i = "base"
        }
        bank/wl_bankmap.wl =
        {
          i = "base"
        }
        bank/wl_bankmap_brk.wl =
        {
          i = "base"
        }
        bank/wl_bankpic1.wl =
        {
          i = "base"
        }
        bank/wl_bankpic2.wl =
        {
          i = "base"
        }
        bank/wl_banksign.wl =
        {
          i = "base"
        }
        bank/wl_banktrim.wl =
        {
          i = "base"
        }
        bank/wl_bank_dail.wl =
        {
          i = "base"
        }
        bank/wl_bigwmarb.wl =
        {
          i = "base"
        }
        bank/wl_cashbox.wl =
        {
          i = "base"
        }
        bank/wl_clock.wl =
        {
          i = "base"
        }
        bank/wl_clock_brk.wl =
        {
          i = "base"
        }
        bank/wl_gbmarb.wl =
        {
          i = "base"
        }
        bank/wl_grnmarb.wl =
        {
          i = "base"
        }
        bank/wl_guncase.wl =
        {
          i = "base"
        }
        bank/wl_outbrick.wl =
        {
          i = "base"
        }
        bank/wl_outbrick2.wl =
        {
          i = "base"
        }
        bank/wl_outbrick3.wl =
        {
          i = "base"
        }
        bank/wl_outbrick4.wl =
        {
          i = "base"
        }
        bank/wl_outbrick5.wl =
        {
          i = "base"
        }
        bank/wl_outbrick6.wl =
        {
          i = "base"
        }
        bank/wl_phone1.wl =
        {
          i = "base"
        }
        bank/wl_phone2.wl =
        {
          i = "base"
        }
        bank/wl_phone_brk.wl =
        {
          i = "base"
        }
        bank/wl_rufmarb.wl =
        {
          i = "base"
        }
        bank/wl_rufmarb2.wl =
        {
          i = "base"
        }
        bank/wl_rufmarb3.wl =
        {
          i = "base"
        }
        bank/wl_rufmarb4.wl =
        {
          i = "base"
        }
        bank/wl_rufmarbplaq.wl =
        {
          i = "base"
        }
        bank/wl_secbox.wl =
        {
          i = "base"
        }
        bank/wl_secbox2.wl =
        {
          i = "base"
        }
        bank/wl_small_vault.wl =
        {
          i = "base"
        }
        bank/wl_soa.wl =
        {
          i = "base"
        }
        bank/wl_tmarbd.wl =
        {
          i = "base"
        }
        bank/wl_tmarbd2.wl =
        {
          i = "base"
        }
        bank/wl_tmarbd3.wl =
        {
          i = "base"
        }
        bank/wl_tmarbflat.wl =
        {
          i = "base"
        }
        bank/wl_twood.wl =
        {
          i = "base"
        }
        bank/wl_twood1.wl =
        {
          i = "base"
        }
        bank/wl_twood2.wl =
        {
          i = "base"
        }
        bank/wl_twood3.wl =
        {
          i = "base"
        }
        bank/wl_twood4.wl =
        {
          i = "base"
        }
        bank/wl_vault_door.wl =
        {
          i = "base"
        }
        bank/wl_vault_hinge.wl =
        {
          i = "base"
        }
        bank/wl_vault_wall.wl =
        {
          i = "base"
        }
        bank/wl_wbpillar.wl =
        {
          i = "base"
        }
        bank/wl_wbpillar2.wl =
        {
          i = "base"
        }
        bank/wl_wmarbgt.wl =
        {
          i = "base"
        }

        cutdowntiles.txlist =
        {
          bank/cutdowntiles/cl_bankplain.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/tr_brass.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/tr_gmarb.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/tr_poles_gold.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/tr_poles_rope.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/tr_sofa1.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/tr_sofa3.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/tr_wmarb.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/wl_bigwmarb.wl =
          {
            i = "base"
          }
          bank/cutdowntiles/wl_wbpillar2.wl =
          {
            i = "base"
          }

        }
      }
      biomech.txlist =
      {
        biomech/0cp_mech1.wl =
        {
          i = "base"
        }
        biomech/0cp_ocil.wl =
        {
          i = "base"
        }
        biomech/0mech_screen.wl =
        {
          i = "base"
        }
        biomech/0mech_screen2.wl =
        {
          i = "base"
        }
        biomech/0miss.wl =
        {
          i = "base"
        }
        biomech/0missle_map.wl =
        {
          i = "base"
        }
        biomech/0ok_screen.wl =
        {
          i = "base"
        }
        biomech/0sintek_screen.wl =
        {
          i = "base"
        }
        biomech/0si_ccenter.wl =
        {
          i = "base"
        }
        biomech/0wl_techwall1cpu.wl =
        {
          i = "base"
        }
        biomech/0wl_techwall1cpu_brk.wl =
        {
          i = "base"
        }
        biomech/0worldmap_missle.wl =
        {
          i = "base"
        }
        biomech/1cp_mech1.wl =
        {
          i = "base"
        }
        biomech/1cp_ocil.wl =
        {
          i = "base"
        }
        biomech/1mech_screen.wl =
        {
          i = "base"
        }
        biomech/1mech_screen2.wl =
        {
          i = "base"
        }
        biomech/1miss.wl =
        {
          i = "base"
        }
        biomech/1missle_map.wl =
        {
          i = "base"
        }
        biomech/1ok_screen.wl =
        {
          i = "base"
        }
        biomech/1sintek_screen.wl =
        {
          i = "base"
        }
        biomech/1si_ccenter.wl =
        {
          i = "base"
        }
        biomech/1wl_techwall1cpu.wl =
        {
          i = "base"
        }
        biomech/1worldmap_missle.wl =
        {
          i = "base"
        }
        biomech/2cp_mech1.wl =
        {
          i = "base"
        }
        biomech/2cp_ocil.wl =
        {
          i = "base"
        }
        biomech/2mech_screen.wl =
        {
          i = "base"
        }
        biomech/2mech_screen2.wl =
        {
          i = "base"
        }
        biomech/2miss.wl =
        {
          i = "base"
        }
        biomech/2missle_map.wl =
        {
          i = "base"
        }
        biomech/2ok_screen.wl =
        {
          i = "base"
        }
        biomech/2sintek_screen.wl =
        {
          i = "base"
        }
        biomech/2worldmap_missle.wl =
        {
          i = "base"
        }
        biomech/3cp_mech1.wl =
        {
          i = "base"
        }
        biomech/3mech_screen.wl =
        {
          i = "base"
        }
        biomech/3mech_screen2.wl =
        {
          i = "base"
        }
        biomech/3miss.wl =
        {
          i = "base"
        }
        biomech/3missle_map.wl =
        {
          i = "base"
        }
        biomech/3worldmap_missle.wl =
        {
          i = "base"
        }
        biomech/4missle_map.wl =
        {
          i = "base"
        }
        biomech/4worldmap_missle.wl =
        {
          i = "base"
        }
        biomech/bluepipe_chem.wl =
        {
          i = "base"
        }
        biomech/bluepipe_diwater.wl =
        {
          i = "base"
        }
        biomech/bluepipe_oxyg.wl =
        {
          i = "base"
        }
        biomech/bluepipe_waste.wl =
        {
          i = "base"
        }
        biomech/cp_big1.wl =
        {
          i = "base"
        }
        biomech/cp_big2.wl =
        {
          i = "base"
        }
        biomech/cp_big_thrall.wl =
        {
          i = "base"
        }
        biomech/cp_mech_chart.wl =
        {
          i = "base"
        }
        biomech/cp_screens.wl =
        {
          i = "base"
        }
        biomech/cp_screens1.wl =
        {
          i = "base"
        }
        biomech/cp_screens2.wl =
        {
          i = "base"
        }
        biomech/cp_small.wl =
        {
          i = "base"
        }
        biomech/cp_small1.wl =
        {
          i = "base"
        }
        biomech/cp_small2.wl =
        {
          i = "base"
        }
        biomech/fl_biomech1(logo).wl =
        {
          i = "base"
        }
        biomech/fl_biomech1.wl =
        {
          i = "base"
        }
        biomech/missle_map.wl =
        {
          i = "base"
        }
        biomech/si_airlock.wl =
        {
          i = "base"
        }
        biomech/si_arrow.wl =
        {
          i = "base"
        }
        biomech/si_bboard_bio.wl =
        {
          i = "base"
        }
        biomech/si_bboard_bio1.wl =
        {
          i = "base"
        }
        biomech/si_chemdispose.wl =
        {
          i = "base"
        }
        biomech/si_cleanroom.wl =
        {
          i = "base"
        }
        biomech/si_computer.wl =
        {
          i = "base"
        }
        biomech/si_disign.wl =
        {
          i = "base"
        }
        biomech/si_emerg.wl =
        {
          i = "base"
        }
        biomech/si_fab1.wl =
        {
          i = "base"
        }
        biomech/si_fab2.wl =
        {
          i = "base"
        }
        biomech/si_fab3.wl =
        {
          i = "base"
        }
        biomech/si_fabarea.wl =
        {
          i = "base"
        }
        biomech/si_helopad.wl =
        {
          i = "base"
        }
        biomech/si_matrix.wl =
        {
          i = "base"
        }
        biomech/si_noentry.wl =
        {
          i = "base"
        }
        biomech/si_security.wl =
        {
          i = "base"
        }
        biomech/si_uplink.wl =
        {
          i = "base"
        }
        biomech/si_wastereclam.wl =
        {
          i = "base"
        }
        biomech/tr_bluegray.wl =
        {
          i = "base"
        }
        biomech/tr_bluestripe.wl =
        {
          i = "base"
        }
        biomech/tr_bluestripe2.wl =
        {
          i = "base"
        }
        biomech/tr_boltcrete.wl =
        {
          i = "base"
        }
        biomech/tr_boltcretelite.wl =
        {
          i = "base"
        }
        biomech/tr_bolttrim.wl =
        {
          i = "base"
        }
        biomech/tr_bptech.wl =
        {
          i = "base"
        }
        biomech/tr_cattrim.wl =
        {
          i = "base"
        }
        biomech/tr_convey_belt.wl =
        {
          i = "base"
        }
        biomech/tr_convey_belt_metal.wl =
        {
          i = "base"
        }
        biomech/tr_part1.wl =
        {
          i = "base"
        }
        biomech/tr_part10.wl =
        {
          i = "base"
        }
        biomech/tr_part2.wl =
        {
          i = "base"
        }
        biomech/tr_part3.wl =
        {
          i = "base"
        }
        biomech/tr_part4.wl =
        {
          i = "base"
        }
        biomech/tr_part5.wl =
        {
          i = "base"
        }
        biomech/tr_part6.wl =
        {
          i = "base"
        }
        biomech/tr_part7.wl =
        {
          i = "base"
        }
        biomech/tr_part8.wl =
        {
          i = "base"
        }
        biomech/tr_part9.wl =
        {
          i = "base"
        }
        biomech/tr_shinypart.wl =
        {
          i = "base"
        }
        biomech/tr_techtrim1.wl =
        {
          i = "base"
        }
        biomech/tr_techtrim2.wl =
        {
          i = "base"
        }
        biomech/tr_white.wl =
        {
          i = "base"
        }
        biomech/wl_bmpanel1.wl =
        {
          i = "base"
        }
        biomech/wl_bmpanel2.wl =
        {
          i = "base"
        }
        biomech/wl_bmpanel3.wl =
        {
          i = "base"
        }
        biomech/wl_bptech1.wl =
        {
          i = "base"
        }
        biomech/wl_btech1.wl =
        {
          i = "base"
        }
        biomech/wl_btech2.wl =
        {
          i = "base"
        }
        biomech/wl_btech3.wl =
        {
          i = "base"
        }
        biomech/wl_btech4.wl =
        {
          i = "base"
        }
        biomech/wl_btech5.wl =
        {
          i = "base"
        }
        biomech/wl_btech6.wl =
        {
          i = "base"
        }
        biomech/wl_diampat.wl =
        {
          i = "base"
        }
        biomech/wl_firewall.wl =
        {
          i = "base"
        }
        biomech/wl_interlok.wl =
        {
          i = "base"
        }
        biomech/wl_newtech1.wl =
        {
          i = "base"
        }
        biomech/wl_newtech2.wl =
        {
          i = "base"
        }
        biomech/wl_newtech3.wl =
        {
          i = "base"
        }
        biomech/wl_ordtech.wl =
        {
          i = "base"
        }
        biomech/wl_tantile1.wl =
        {
          i = "base"
        }
        biomech/wl_tantile2.wl =
        {
          i = "base"
        }
        biomech/wl_tantile3.wl =
        {
          i = "base"
        }
        biomech/wl_tantile4.wl =
        {
          i = "base"
        }
        biomech/wl_techdoor1.wl =
        {
          i = "base"
        }
        biomech/wl_techpatrn.wl =
        {
          i = "base"
        }
        biomech/wl_techpatrn2.wl =
        {
          i = "base"
        }
        biomech/wl_techwall1.wl =
        {
          i = "base"
        }
        biomech/wl_techwall1_2.wl =
        {
          i = "base"
        }
        biomech/wl_techwall1_3.wl =
        {
          i = "base"
        }
        biomech/wl_techwall2.wl =
        {
          i = "base"
        }
        biomech/wl_whitewall1.wl =
        {
          i = "base"
        }
        biomech/wl_whitewall2.wl =
        {
          i = "base"
        }
        biomech/worldmap_missle.wl =
        {
          i = "base"
        }

        larger_tiles.txlist =
        {
          biomech/larger_tiles/tr_bluestripe.wl =
          {
            i = "base"
          }
          biomech/larger_tiles/tr_bluestripe2.wl =
          {
            i = "base"
          }
          biomech/larger_tiles/tr_pipe4.wl =
          {
            i = "base"
          }
          biomech/larger_tiles/tr_techtrim1.wl =
          {
            i = "base"
          }
          biomech/larger_tiles/tr_techtrim2.wl =
          {
            i = "base"
          }

        }
      }
      chemical.txlist =
      {
        chemical/cl_chem1.wl =
        {
          i = "base"
        }
        chemical/cl_chem2.wl =
        {
          i = "base"
        }
        chemical/cp_candymach.wl =
        {
          i = "base"
        }
        chemical/cp_candymach_brk.wl =
        {
          i = "base"
        }
        chemical/cp_candymach_side.wl =
        {
          i = "base"
        }
        chemical/cp_candymach_top.wl =
        {
          i = "base"
        }
        chemical/cp_chemsec1.wl =
        {
          i = "base"
        }
        chemical/cp_chemsec2.wl =
        {
          i = "base"
        }
        chemical/cp_chemsec3.wl =
        {
          i = "base"
        }
        chemical/cp_chemsec4.wl =
        {
          i = "base"
        }
        chemical/cp_chemsec5.wl =
        {
          i = "base"
        }
        chemical/cp_chemsec6.wl =
        {
          i = "base"
        }
        chemical/cp_chemsec7.wl =
        {
          i = "base"
        }
        chemical/cp_main.wl =
        {
          i = "base"
        }
        chemical/cp_met1.wl =
        {
          i = "base"
        }
        chemical/cp_met2.wl =
        {
          i = "base"
        }
        chemical/cp_met3.wl =
        {
          i = "base"
        }
        chemical/cp_met4.wl =
        {
          i = "base"
        }
        chemical/cp_metout.wl =
        {
          i = "base"
        }
        chemical/cp_securt_01.wl =
        {
          i = "base"
        }
        chemical/cp_securt_02.wl =
        {
          i = "base"
        }
        chemical/cp_sprayer.wl =
        {
          i = "base"
        }
        chemical/fl_bath1(green).wl =
        {
          i = "base"
        }
        chemical/fl_bath2.wl =
        {
          i = "base"
        }
        chemical/fl_bath3(green).wl =
        {
          i = "base"
        }
        chemical/fl_bath4.wl =
        {
          i = "base"
        }
        chemical/fl_chem1.wl =
        {
          i = "base"
        }
        chemical/fl_chem2.wl =
        {
          i = "base"
        }
        chemical/fl_elevator.wl =
        {
          i = "base"
        }
        chemical/fl_hall1.wl =
        {
          i = "base"
        }
        chemical/fl_hall2.wl =
        {
          i = "base"
        }
        chemical/fl_lockeroom.wl =
        {
          i = "base"
        }
        chemical/fl_lockeroom2.wl =
        {
          i = "base"
        }
        chemical/fl_pipeplate.wl =
        {
          i = "base"
        }
        chemical/fl_pipeplate2.wl =
        {
          i = "base"
        }
        chemical/li_chem01.wl =
        {
          i = "base"
        }
        chemical/li_chem01_brk.wl =
        {
          i = "base"
        }
        chemical/li_chem02.wl =
        {
          i = "base"
        }
        chemical/si_alarm.wl =
        {
          i = "base"
        }
        chemical/si_area1a.wl =
        {
          i = "base"
        }
        chemical/si_area2a.wl =
        {
          i = "base"
        }
        chemical/si_area5a.wl =
        {
          i = "base"
        }
        chemical/si_area9a.wl =
        {
          i = "base"
        }
        chemical/si_bboard_chem1.wl =
        {
          i = "base"
        }
        chemical/si_bboard_chem1a.wl =
        {
          i = "base"
        }
        chemical/si_bboard_chem2.wl =
        {
          i = "base"
        }
        chemical/si_bboard_chem2a.wl =
        {
          i = "base"
        }
        chemical/si_bboard_chem2b.wl =
        {
          i = "base"
        }
        chemical/si_bioscan.wl =
        {
          i = "base"
        }
        chemical/si_check.wl =
        {
          i = "base"
        }
        chemical/si_coolsysa.wl =
        {
          i = "base"
        }
        chemical/si_donotenter.wl =
        {
          i = "base"
        }
        chemical/si_easta.wl =
        {
          i = "base"
        }
        chemical/si_northa.wl =
        {
          i = "base"
        }
        chemical/si_paper1.wl =
        {
          i = "base"
        }
        chemical/si_paper2.wl =
        {
          i = "base"
        }
        chemical/si_paper3.wl =
        {
          i = "base"
        }
        chemical/si_paper4.wl =
        {
          i = "base"
        }
        chemical/si_paper5.wl =
        {
          i = "base"
        }
        chemical/si_southa.wl =
        {
          i = "base"
        }
        chemical/si_u4storage.wl =
        {
          i = "base"
        }
        chemical/si_wastea.wl =
        {
          i = "base"
        }
        chemical/si_watera.wl =
        {
          i = "base"
        }
        chemical/si_westa.wl =
        {
          i = "base"
        }
        chemical/tr_achem1.wl =
        {
          i = "base"
        }
        chemical/tr_achem2.wl =
        {
          i = "base"
        }
        chemical/tr_achem3.wl =
        {
          i = "base"
        }
        chemical/tr_achem4.wl =
        {
          i = "base"
        }
        chemical/tr_achem5.wl =
        {
          i = "base"
        }
        chemical/tr_achem6.wl =
        {
          i = "base"
        }
        chemical/tr_achem7.wl =
        {
          i = "base"
        }
        chemical/tr_achem8.wl =
        {
          i = "base"
        }
        chemical/tr_achem9.wl =
        {
          i = "base"
        }
        chemical/tr_bench.wl =
        {
          i = "base"
        }
        chemical/tr_blackrub.wl =
        {
          i = "base"
        }
        chemical/tr_chem(orange).wl =
        {
          i = "base"
        }
        chemical/tr_chem1.wl =
        {
          i = "base"
        }
        chemical/tr_chem2.wl =
        {
          i = "base"
        }
        chemical/tr_chem3.wl =
        {
          i = "base"
        }
        chemical/tr_chem4.wl =
        {
          i = "base"
        }
        chemical/tr_chem5(orange).wl =
        {
          i = "base"
        }
        chemical/tr_chem5.wl =
        {
          i = "base"
        }
        chemical/tr_chem6(orange).wl =
        {
          i = "base"
        }
        chemical/tr_chem6.wl =
        {
          i = "base"
        }
        chemical/tr_chem7(orange).wl =
        {
          i = "base"
        }
        chemical/tr_chem7.wl =
        {
          i = "base"
        }
        chemical/tr_drain.wl =
        {
          i = "base"
        }
        chemical/tr_fanblade1.wl =
        {
          i = "base"
        }
        chemical/tr_fanblade2.wl =
        {
          i = "base"
        }
        chemical/tr_ladder(orange).wl =
        {
          i = "base"
        }
        chemical/tr_pipe1.wl =
        {
          i = "base"
        }
        chemical/tr_pipe2.wl =
        {
          i = "base"
        }
        chemical/tr_pipe3.wl =
        {
          i = "base"
        }
        chemical/tr_pipe4.wl =
        {
          i = "base"
        }
        chemical/tr_pipe5.wl =
        {
          i = "base"
        }
        chemical/tr_pipe6.wl =
        {
          i = "base"
        }
        chemical/tr_pipe7.wl =
        {
          i = "base"
        }
        chemical/tr_pipe8.wl =
        {
          i = "base"
        }
        chemical/tr_pipeplate.wl =
        {
          i = "base"
        }
        chemical/tr_showerhead.wl =
        {
          i = "base"
        }
        chemical/tr_stall(gold).wl =
        {
          i = "base"
        }
        chemical/tr_stall2(gold).wl =
        {
          i = "base"
        }
        chemical/tr_tape1.wl =
        {
          i = "base"
        }
        chemical/tr_tape2.wl =
        {
          i = "base"
        }
        chemical/wl_achem10.wl =
        {
          i = "base"
        }
        chemical/wl_achem12.wl =
        {
          i = "base"
        }
        chemical/wl_achem12a.wl =
        {
          i = "base"
        }
        chemical/wl_achem3.wl =
        {
          i = "base"
        }
        chemical/wl_achem4.wl =
        {
          i = "base"
        }
        chemical/wl_achem7.wl =
        {
          i = "base"
        }
        chemical/wl_achem7a.wl =
        {
          i = "base"
        }
        chemical/wl_achem7_trim.wl =
        {
          i = "base"
        }
        chemical/wl_achem8.wl =
        {
          i = "base"
        }
        chemical/wl_achem9.wl =
        {
          i = "base"
        }
        chemical/wl_bathdoor.wl =
        {
          i = "base"
        }
        chemical/wl_bathdoor2.wl =
        {
          i = "base"
        }
        chemical/wl_bbpanel.wl =
        {
          i = "base"
        }
        chemical/wl_behind_mirror.wl =
        {
          i = "base"
        }
        chemical/wl_chem1.wl =
        {
          i = "base"
        }
        chemical/wl_chem10.wl =
        {
          i = "base"
        }
        chemical/wl_chem11.wl =
        {
          i = "base"
        }
        chemical/wl_chem11_0.wl =
        {
          i = "base"
        }
        chemical/wl_chem11_01.wl =
        {
          i = "base"
        }
        chemical/wl_chem11_02.wl =
        {
          i = "base"
        }
        chemical/wl_chem11_05.wl =
        {
          i = "base"
        }
        chemical/wl_chem11_09.wl =
        {
          i = "base"
        }
        chemical/wl_chem12.wl =
        {
          i = "base"
        }
        chemical/wl_chem13.wl =
        {
          i = "base"
        }
        chemical/wl_chem14.wl =
        {
          i = "base"
        }
        chemical/wl_chem15.wl =
        {
          i = "base"
        }
        chemical/wl_chem16.wl =
        {
          i = "base"
        }
        chemical/wl_chem17.wl =
        {
          i = "base"
        }
        chemical/wl_chem18.wl =
        {
          i = "base"
        }
        chemical/wl_chem19.wl =
        {
          i = "base"
        }
        chemical/wl_chem2.wl =
        {
          i = "base"
        }
        chemical/wl_chem20.wl =
        {
          i = "base"
        }
        chemical/wl_chem21.wl =
        {
          i = "base"
        }
        chemical/wl_chem22.wl =
        {
          i = "base"
        }
        chemical/wl_chem23.wl =
        {
          i = "base"
        }
        chemical/wl_chem24.wl =
        {
          i = "base"
        }
        chemical/wl_chem25.wl =
        {
          i = "base"
        }
        chemical/wl_chem26.wl =
        {
          i = "base"
        }
        chemical/wl_chem27.wl =
        {
          i = "base"
        }
        chemical/wl_chem28.wl =
        {
          i = "base"
        }
        chemical/wl_chem29.wl =
        {
          i = "base"
        }
        chemical/wl_chem3.wl =
        {
          i = "base"
        }
        chemical/wl_chem30.wl =
        {
          i = "base"
        }
        chemical/wl_chem31.wl =
        {
          i = "base"
        }
        chemical/wl_chem32.wl =
        {
          i = "base"
        }
        chemical/wl_chem33.wl =
        {
          i = "base"
        }
        chemical/wl_chem34.wl =
        {
          i = "base"
        }
        chemical/wl_chem35.wl =
        {
          i = "base"
        }
        chemical/wl_chem4.wl =
        {
          i = "base"
        }
        chemical/wl_chem5.wl =
        {
          i = "base"
        }
        chemical/wl_chem6.wl =
        {
          i = "base"
        }
        chemical/wl_chem7.wl =
        {
          i = "base"
        }
        chemical/wl_chem8.wl =
        {
          i = "base"
        }
        chemical/wl_chem9.wl =
        {
          i = "base"
        }
        chemical/wl_corkboard.wl =
        {
          i = "base"
        }
        chemical/wl_corkboard2.wl =
        {
          i = "base"
        }
        chemical/wl_doorchem.wl =
        {
          i = "base"
        }
        chemical/wl_doortrim.wl =
        {
          i = "base"
        }
        chemical/wl_door_chem2.wl =
        {
          i = "base"
        }
        chemical/wl_door_u4.wl =
        {
          i = "base"
        }
        chemical/wl_elev_door.wl =
        {
          i = "base"
        }
        chemical/wl_elev_inside.wl =
        {
          i = "base"
        }
        chemical/wl_glass2doors.wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(1).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(2).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(3).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(4).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(5).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(6).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(7).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(lab1).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(lab2).wl =
        {
          i = "base"
        }
        chemical/wl_glassdoors(lab3).wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_1.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_10.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_2.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_3.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_4.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_5.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_6.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_7.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_8.wl =
        {
          i = "base"
        }
        chemical/wl_labdoor_9.wl =
        {
          i = "base"
        }
        chemical/wl_lab_sign.wl =
        {
          i = "base"
        }
        chemical/wl_locker.wl =
        {
          i = "base"
        }
        chemical/wl_lockeroom5(green).wl =
        {
          i = "base"
        }
        chemical/wl_lockeroom6(green).wl =
        {
          i = "base"
        }
        chemical/wl_lockeroom7(green).wl =
        {
          i = "base"
        }
        chemical/wl_lockeroom7.wl =
        {
          i = "base"
        }
        chemical/wl_pipeplat1.wl =
        {
          i = "base"
        }
        chemical/wl_pipevent.wl =
        {
          i = "base"
        }
        chemical/wl_stalldoor.wl =
        {
          i = "base"
        }
        chemical/wl_stallside.wl =
        {
          i = "base"
        }
        chemical/wl_techplates.wl =
        {
          i = "base"
        }

        larger_tiles.txlist =
        {
          chemical/larger_tiles/tr_bench.wl =
          {
            i = "base"
          }
          chemical/larger_tiles/tr_pipe4.wl =
          {
            i = "base"
          }
          chemical/larger_tiles/wl_doorchem.wl =
          {
            i = "base"
          }
          chemical/larger_tiles/wl_elev_door.wl =
          {
            i = "base"
          }

        }
      }
      contarea.txlist =
      {
        contarea/0cp_acpanel1.wl =
        {
          i = "base"
        }
        contarea/0cp_acpanel2.wl =
        {
          i = "base"
        }
        contarea/0cp_catemp.wl =
        {
          i = "base"
        }
        contarea/0cp_catemp2.wl =
        {
          i = "base"
        }
        contarea/1cp_acpanel1.wl =
        {
          i = "base"
        }
        contarea/1cp_acpanel2.wl =
        {
          i = "base"
        }
        contarea/1cp_catemp.wl =
        {
          i = "base"
        }
        contarea/1cp_catemp2.wl =
        {
          i = "base"
        }
        contarea/2cp_acpanel1.wl =
        {
          i = "base"
        }
        contarea/2cp_acpanel2.wl =
        {
          i = "base"
        }
        contarea/2cp_catemp.wl =
        {
          i = "base"
        }
        contarea/2cp_catemp2.wl =
        {
          i = "base"
        }
        contarea/br_cleantop2.wl =
        {
          i = "base"
        }
        contarea/br_silvercan.wl =
        {
          i = "base"
        }
        contarea/cl_caconc3.wl =
        {
          i = "base"
        }
        contarea/cl_cascratch.wl =
        {
          i = "base"
        }
        contarea/cl_tanceil.wl =
        {
          i = "base"
        }
        contarea/cp_bigsign1.wl =
        {
          i = "base"
        }
        contarea/cp_bigsign2.wl =
        {
          i = "base"
        }
        contarea/cp_blues.wl =
        {
          i = "base"
        }
        contarea/cp_cacpu1.wl =
        {
          i = "base"
        }
        contarea/cp_cacpu2.wl =
        {
          i = "base"
        }
        contarea/cp_cacpu3.wl =
        {
          i = "base"
        }
        contarea/cp_cametalbase.wl =
        {
          i = "base"
        }
        contarea/cp_catechmetal.wl =
        {
          i = "base"
        }
        contarea/cp_catechmetal2.wl =
        {
          i = "base"
        }
        contarea/cp_catechscrn.wl =
        {
          i = "base"
        }
        contarea/cp_metalbase.wl =
        {
          i = "base"
        }
        contarea/dr_cadoor1.wl =
        {
          i = "base"
        }
        contarea/fl_contconc1.wl =
        {
          i = "base"
        }
        contarea/fl_contconc2.wl =
        {
          i = "base"
        }
        contarea/fl_contconc3.wl =
        {
          i = "base"
        }
        contarea/fl_contconc4.wl =
        {
          i = "base"
        }
        contarea/fl_gvblood.wl =
        {
          i = "base"
        }
        contarea/fl_gvcement.wl =
        {
          i = "base"
        }
        contarea/fl_gvcement2.wl =
        {
          i = "base"
        }
        contarea/fl_gvcementbld.wl =
        {
          i = "base"
        }
        contarea/li_gvround.wl =
        {
          i = "base"
        }
        contarea/li_gvvent1.wl =
        {
          i = "base"
        }
        contarea/li_gvvent2.wl =
        {
          i = "base"
        }
        contarea/si_cont57.wl =
        {
          i = "base"
        }
        contarea/si_level1.wl =
        {
          i = "base"
        }
        contarea/si_level2.wl =
        {
          i = "base"
        }
        contarea/si_level3.wl =
        {
          i = "base"
        }
        contarea/si_scaldingwater.wl =
        {
          i = "base"
        }
        contarea/tr_contconc.wl =
        {
          i = "base"
        }
        contarea/tr_gvholes.wl =
        {
          i = "base"
        }
        contarea/tr_gvvent.wl =
        {
          i = "base"
        }
        contarea/tr_gvventbld.wl =
        {
          i = "base"
        }
        contarea/tr_holes.wl =
        {
          i = "base"
        }
        contarea/tr_holesbld.wl =
        {
          i = "base"
        }
        contarea/tr_pstuff.wl =
        {
          i = "base"
        }
        contarea/tr_rivetsbld.wl =
        {
          i = "base"
        }
        contarea/wa_blood.wl =
        {
          i = "base"
        }
        contarea/wl_blade.wl =
        {
          i = "base"
        }
        contarea/wl_caconc.wl =
        {
          i = "base"
        }
        contarea/wl_caconc2.wl =
        {
          i = "base"
        }
        contarea/wl_casteel.wl =
        {
          i = "base"
        }
        contarea/wl_casteelbld.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall0.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall0bld.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall0bld2.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall0bld3.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall0bld4.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall1.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall2.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall2bld.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall3.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall3bld.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall4.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall4bld.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall5.wl =
        {
          i = "base"
        }
        contarea/wl_gvwall5bld.wl =
        {
          i = "base"
        }
        contarea/wl_gvwallsin.wl =
        {
          i = "base"
        }
        contarea/wl_shadow.wl =
        {
          i = "base"
        }
        contarea/wl_tanctile.wl =
        {
          i = "base"
        }
        contarea/wl_tanpanel.wl =
        {
          i = "base"
        }
        contarea/wl_tanpanel1.wl =
        {
          i = "base"
        }
        contarea/wl_tanpanel2.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall1.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall1bigred.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall1red.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall2.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall2red.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall3.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall3red.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall4.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall5.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall6.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall7.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall8.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall9.wl =
        {
          i = "base"
        }
        contarea/wl_tanwall9red.wl =
        {
          i = "base"
        }

      }
      coral.txlist =
      {
        coral/cl_cconc.wl =
        {
          i = "base"
        }
        coral/fl_cconc.wl =
        {
          i = "base"
        }
        coral/fl_grungmetal1.wl =
        {
          i = "base"
        }
        coral/fl_sand3.wl =
        {
          i = "base"
        }
        coral/li_redc.wl =
        {
          i = "base"
        }
        coral/li_redround.wl =
        {
          i = "base"
        }
        coral/wl_algae.wl =
        {
          i = "base"
        }
        coral/wl_coral1.wl =
        {
          i = "base"
        }
        coral/wl_coral2.wl =
        {
          i = "base"
        }
        coral/wl_coral3.wl =
        {
          i = "base"
        }
        coral/wl_coral4.wl =
        {
          i = "base"
        }
        coral/wl_coral5.wl =
        {
          i = "base"
        }
        coral/wl_coral6.wl =
        {
          i = "base"
        }
        coral/wl_coral7.wl =
        {
          i = "base"
        }
        coral/wl_coral8.wl =
        {
          i = "base"
        }
        coral/wl_coral9.wl =
        {
          i = "base"
        }
        coral/wl_crrock.wl =
        {
          i = "base"
        }
        coral/wl_crrock2.wl =
        {
          i = "base"
        }
        coral/wl_crrock3.wl =
        {
          i = "base"
        }
        coral/wl_crrock4.wl =
        {
          i = "base"
        }
        coral/wl_redmetal(rock).wl =
        {
          i = "base"
        }
        coral/wl_redmetal.wl =
        {
          i = "base"
        }
        coral/wl_redmetala.wl =
        {
          i = "base"
        }
        coral/wl_sandrock1.wl =
        {
          i = "base"
        }
        coral/wl_sandrock2.wl =
        {
          i = "base"
        }
        coral/wl_sandrock3.wl =
        {
          i = "base"
        }
        coral/wl_sandrock4.wl =
        {
          i = "base"
        }
        coral/wl_sandrock5.wl =
        {
          i = "base"
        }
        coral/wl_sandrock6.wl =
        {
          i = "base"
        }
        coral/wl_sandrock7.wl =
        {
          i = "base"
        }
        coral/wl_sandrock8.wl =
        {
          i = "base"
        }
        coral/wl_searock.wl =
        {
          i = "base"
        }
        coral/wl_searock2.wl =
        {
          i = "base"
        }

      }
      csite.txlist =
      {
        csite/dualrail2.wl =
        {
          i = "base"
        }
        csite/fl_cement_csite.wl =
        {
          i = "base"
        }
        csite/li_yelo_tubeb.wl =
        {
          i = "base"
        }
        csite/lt_yelo_tubeb_brk.wl =
        {
          i = "base"
        }
        csite/railend2.wl =
        {
          i = "base"
        }
        csite/razerwire.wl =
        {
          i = "base"
        }
        csite/siderails2.wl =
        {
          i = "base"
        }
        csite/si_award.wl =
        {
          i = "base"
        }
        csite/si_comingsoon.wl =
        {
          i = "base"
        }
        csite/si_eastman1.wl =
        {
          i = "base"
        }
        csite/si_eastman2.wl =
        {
          i = "base"
        }
        csite/si_explo.wl =
        {
          i = "base"
        }
        csite/si_fakk2.wl =
        {
          i = "base"
        }
        csite/si_hha.wl =
        {
          i = "base"
        }
        csite/si_julies.wl =
        {
          i = "base"
        }
        csite/si_letter.wl =
        {
          i = "base"
        }
        csite/si_letter2.wl =
        {
          i = "base"
        }
        csite/si_letter3.wl =
        {
          i = "base"
        }
        csite/si_letter4.wl =
        {
          i = "base"
        }
        csite/si_maw.wl =
        {
          i = "base"
        }
        csite/si_plans1.wl =
        {
          i = "base"
        }
        csite/si_plans2.wl =
        {
          i = "base"
        }
        csite/si_plans3.wl =
        {
          i = "base"
        }
        csite/si_propcond.wl =
        {
          i = "base"
        }
        csite/si_scan16.wl =
        {
          i = "base"
        }
        csite/si_watermainc.wl =
        {
          i = "base"
        }
        csite/tr_beam.wl =
        {
          i = "base"
        }
        csite/tr_beam2.wl =
        {
          i = "base"
        }
        csite/tr_beam3.wl =
        {
          i = "base"
        }
        csite/tr_blueprints.wl =
        {
          i = "base"
        }
        csite/tr_blueprints2.wl =
        {
          i = "base"
        }
        csite/tr_blueprint_back.wl =
        {
          i = "base"
        }
        csite/tr_blueprint_sides.wl =
        {
          i = "base"
        }
        csite/tr_cement3.wl =
        {
          i = "base"
        }
        csite/tr_drinking_cup.wl =
        {
          i = "base"
        }
        csite/tr_mblack.wl =
        {
          i = "base"
        }
        csite/tr_msteel.wl =
        {
          i = "base"
        }
        csite/tr_trailer(logo).wl =
        {
          i = "base"
        }
        csite/tr_trailer.wl =
        {
          i = "base"
        }
        csite/tr_trailer2.wl =
        {
          i = "base"
        }
        csite/tr_trailer3.wl =
        {
          i = "base"
        }
        csite/tr_trailer3a.wl =
        {
          i = "base"
        }
        csite/tr_trailer4.wl =
        {
          i = "base"
        }
        csite/tr_trailera.wl =
        {
          i = "base"
        }
        csite/tr_wheelbarrow_in.wl =
        {
          i = "base"
        }
        csite/tr_wheelbarrow_out.wl =
        {
          i = "base"
        }
        csite/tr_wood_rough.wl =
        {
          i = "base"
        }
        csite/wl_briknbrak.wl =
        {
          i = "base"
        }
        csite/wl_cabinet(sintek).wl =
        {
          i = "base"
        }
        csite/wl_cabinet(tan).wl =
        {
          i = "base"
        }
        csite/wl_cabinet2(tan).wl =
        {
          i = "base"
        }
        csite/wl_cabinet3(sintek).wl =
        {
          i = "base"
        }
        csite/wl_cabinet3(tan).wl =
        {
          i = "base"
        }
        csite/wl_comingsoon.wl =
        {
          i = "base"
        }
        csite/wl_door_trailer(inside).wl =
        {
          i = "base"
        }
        csite/wl_door_trailer.wl =
        {
          i = "base"
        }
        csite/wl_drywall1.wl =
        {
          i = "base"
        }
        csite/wl_drywall2.wl =
        {
          i = "base"
        }
        csite/wl_drywall3.wl =
        {
          i = "base"
        }
        csite/wl_eviction.wl =
        {
          i = "base"
        }
        csite/wl_flakeboard.wl =
        {
          i = "base"
        }
        csite/wl_flakeboard2.wl =
        {
          i = "base"
        }
        csite/wl_flakeboard3.wl =
        {
          i = "base"
        }
        csite/wl_msteel.wl =
        {
          i = "base"
        }
        csite/wl_msteel2.wl =
        {
          i = "base"
        }
        csite/wl_msteel3.wl =
        {
          i = "base"
        }
        csite/wl_oldeconc.wl =
        {
          i = "base"
        }
        csite/wl_pillar.wl =
        {
          i = "base"
        }
        csite/wl_shitter.wl =
        {
          i = "base"
        }
        csite/wl_shitter1.wl =
        {
          i = "base"
        }
        csite/wl_shitter_roof.wl =
        {
          i = "base"
        }
        csite/wl_trailer.wl =
        {
          i = "base"
        }
        csite/wl_trailer3.wl =
        {
          i = "base"
        }
        csite/wl_traileroof.wl =
        {
          i = "base"
        }
        csite/wl_usewitconcscrape.wl =
        {
          i = "base"
        }
        csite/wl_woodold.wl =
        {
          i = "base"
        }
        csite/wl_woodold2.wl =
        {
          i = "base"
        }
        csite/wl_woodold3.wl =
        {
          i = "base"
        }

      }
      ctf_tiles.txlist =
      {
        ctf_tiles/cl_tanceil.wl =
        {
          i = "base"
        }
        ctf_tiles/fl_contconc4.wl =
        {
          i = "base"
        }
        ctf_tiles/fl_gvcement.wl =
        {
          i = "base"
        }
        ctf_tiles/fl_gvcement2(blue).wl =
        {
          i = "base"
        }
        ctf_tiles/fl_gvcement2.wl =
        {
          i = "base"
        }
        ctf_tiles/fl_gvcementbld(blue).wl =
        {
          i = "base"
        }
        ctf_tiles/fl_gvcementbld.wl =
        {
          i = "base"
        }
        ctf_tiles/li_gvround.wl =
        {
          i = "base"
        }
        ctf_tiles/li_gvvent2.wl =
        {
          i = "base"
        }
        ctf_tiles/tr_holes.wl =
        {
          i = "base"
        }
        ctf_tiles/tr_uwb(blue).wl =
        {
          i = "base"
        }
        ctf_tiles/tr_uwb2(blue).wl =
        {
          i = "base"
        }
        ctf_tiles/tr_uwb5(blue).wl =
        {
          i = "base"
        }
        ctf_tiles/wa_blue1.wl =
        {
          i = "base"
        }
        ctf_tiles/wa_sewer1.wl =
        {
          i = "base"
        }
        ctf_tiles/wa_wawa.wl =
        {
          i = "base"
        }
        ctf_tiles/wa_wawa2.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gbwall1.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gbwall2.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall0.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall0bld.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall0bld2.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall0bld3.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall0bld4.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall1.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall2(blue).wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall2(red).wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall2.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall2bld.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall4.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwall4bld.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_gvwallsin.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_steelmid.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_steelmid2.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_tanctile.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_tanpanel.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_tanwall2.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_tanwall4.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_tanwall7(blue).wl =
        {
          i = "base"
        }
        ctf_tiles/wl_tanwall7.wl =
        {
          i = "base"
        }
        ctf_tiles/wl_tanwall8(blue).wl =
        {
          i = "base"
        }
        ctf_tiles/wl_tanwall8.wl =
        {
          i = "base"
        }

        set1.txlist =
        {
          ctf_tiles/set1/fl_gvcement2(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/fl_gvcementbld(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/tr_gvvent(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/tr_gvvent(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_gvwall2(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_gvwall2(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall1bigred(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall1bigred(bluer).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall1red(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall1red(bluer).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall2red(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall2red(bluer).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall3red(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall3red(bluer).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall7(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall8(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set1/wl_tanwall9(blue).wl =
          {
            i = "base"
          }

        }
        set2.txlist =
        {
          ctf_tiles/set2/dr_hqdoor(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set2/hcwall6_2(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set2/tr_hcbg1(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set2/tr_hcbg2(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set2/tr_hqblue(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set2/wl_gvwall_hq.wl =
          {
            i = "base"
          }
          ctf_tiles/set2/wl_hchorz2(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set2/wl_hchorz4(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set2/wl_hcwall14(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set2/wl_hcwallend2(red).wl =
          {
            i = "base"
          }

        }
        set3.txlist =
        {
          ctf_tiles/set3/wl_aqd_43(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set3/wl_aqd_43(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set3/wl_aqd_44(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set3/wl_aqd_44(red).wl =
          {
            i = "base"
          }
          ctf_tiles/set3/wl_aqd_5(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set3/wl_aqd_9(blue).wl =
          {
            i = "base"
          }
          ctf_tiles/set3/wl_aqd_9(red).wl =
          {
            i = "base"
          }

        }
      }
      dam.txlist =
      {
        dam/cp_dam_col1.wl =
        {
          i = "base"
        }
        dam/cp_dam_offline.wl =
        {
          i = "base"
        }
        dam/cp_dam_turbine.wl =
        {
          i = "base"
        }
        dam/cp_dam_waterflow.wl =
        {
          i = "base"
        }
        dam/fl_damnew(logo).wl =
        {
          i = "base"
        }
        dam/fl_damnew.wl =
        {
          i = "base"
        }
        dam/fl_dam_logo.wl =
        {
          i = "base"
        }
        dam/fl_dam_logo2.wl =
        {
          i = "base"
        }
        dam/fl_dan_manhole.wl =
        {
          i = "base"
        }
        dam/fl_dan_manhole2.wl =
        {
          i = "base"
        }
        dam/fl_sand.wl =
        {
          i = "base"
        }
        dam/fl_sidewalk.wl =
        {
          i = "base"
        }
        dam/grnrock4.wl =
        {
          i = "base"
        }
        dam/li_walllight3_brk.wl =
        {
          i = "base"
        }
        dam/si_bboard.wl =
        {
          i = "base"
        }
        dam/si_bboard2.wl =
        {
          i = "base"
        }
        dam/si_bboard3.wl =
        {
          i = "base"
        }
        dam/si_dam.wl =
        {
          i = "base"
        }
        dam/si_damphoto.wl =
        {
          i = "base"
        }
        dam/si_dam_photo1.wl =
        {
          i = "base"
        }
        dam/si_dam_photo2.wl =
        {
          i = "base"
        }
        dam/si_dam_photo3.wl =
        {
          i = "base"
        }
        dam/si_dam_photo4.wl =
        {
          i = "base"
        }
        dam/si_dam_photo5.wl =
        {
          i = "base"
        }
        dam/si_dam_photo6.wl =
        {
          i = "base"
        }
        dam/si_dam_photo7.wl =
        {
          i = "base"
        }
        dam/si_dam_photo8.wl =
        {
          i = "base"
        }
        dam/si_dam_plack.wl =
        {
          i = "base"
        }
        dam/si_dam_plack2.wl =
        {
          i = "base"
        }
        dam/si_fww_personnel.wl =
        {
          i = "base"
        }
        dam/si_i19.wl =
        {
          i = "base"
        }
        dam/si_intake.wl =
        {
          i = "base"
        }
        dam/si_intaketower.wl =
        {
          i = "base"
        }
        dam/si_nobungee.wl =
        {
          i = "base"
        }
        dam/si_nofish.wl =
        {
          i = "base"
        }
        dam/si_nopark.wl =
        {
          i = "base"
        }
        dam/si_ob1.wl =
        {
          i = "base"
        }
        dam/si_ob2.wl =
        {
          i = "base"
        }
        dam/si_paradox.wl =
        {
          i = "base"
        }
        dam/si_shutdown.wl =
        {
          i = "base"
        }
        dam/si_tunnel.wl =
        {
          i = "base"
        }
        dam/si_turbine.wl =
        {
          i = "base"
        }
        dam/si_turbine2.wl =
        {
          i = "base"
        }
        dam/tr_ltgreenvent.wl =
        {
          i = "base"
        }
        dam/tr_oldmetal2.wl =
        {
          i = "base"
        }
        dam/tr_pipeholes.wl =
        {
          i = "base"
        }
        dam/wa_water1.wl =
        {
          i = "base"
        }
        dam/wa_water2.wl =
        {
          i = "base"
        }
        dam/wl_dam(inside).wl =
        {
          i = "base"
        }
        dam/wl_dam(ouside).wl =
        {
          i = "base"
        }
        dam/wl_damdoor.wl =
        {
          i = "base"
        }
        dam/wl_damwall.wl =
        {
          i = "base"
        }
        dam/wl_damwall2.wl =
        {
          i = "base"
        }
        dam/wl_damwall3.wl =
        {
          i = "base"
        }
        dam/wl_damwallpipe.wl =
        {
          i = "base"
        }
        dam/wl_damwindow128.wl =
        {
          i = "base"
        }
        dam/wl_damwindow64.wl =
        {
          i = "base"
        }
        dam/wl_dam_elev(2).wl =
        {
          i = "base"
        }
        dam/wl_dam_elev(3).wl =
        {
          i = "base"
        }
        dam/wl_dam_elev.wl =
        {
          i = "base"
        }
        dam/wl_dam_gith.wl =
        {
          i = "base"
        }
        dam/wl_dam_logo.wl =
        {
          i = "base"
        }
        dam/wl_dam_plaintan.wl =
        {
          i = "base"
        }
        dam/wl_dam_sun.wl =
        {
          i = "base"
        }
        dam/wl_dam_u4.wl =
        {
          i = "base"
        }
        dam/wl_dam_u4a.wl =
        {
          i = "base"
        }
        dam/wl_grock1.wl =
        {
          i = "base"
        }
        dam/wl_grock2.wl =
        {
          i = "base"
        }
        dam/wl_grock3.wl =
        {
          i = "base"
        }
        dam/wl_inside_elev.wl =
        {
          i = "base"
        }
        dam/wl_metal23.wl =
        {
          i = "base"
        }
        dam/wl_metal23_small.wl =
        {
          i = "base"
        }
        dam/wl_metal24.wl =
        {
          i = "base"
        }
        dam/wl_metal25.wl =
        {
          i = "base"
        }
        dam/wl_metal26.wl =
        {
          i = "base"
        }
        dam/wl_metal27.wl =
        {
          i = "base"
        }
        dam/wl_metal28.wl =
        {
          i = "base"
        }
        dam/wl_metal29a.wl =
        {
          i = "base"
        }
        dam/wl_metal29b.wl =
        {
          i = "base"
        }
        dam/wl_metal29c.wl =
        {
          i = "base"
        }
        dam/wl_metal30.wl =
        {
          i = "base"
        }
        dam/wl_metal31a.wl =
        {
          i = "base"
        }
        dam/wl_metal31b.wl =
        {
          i = "base"
        }
        dam/wl_metal31c.wl =
        {
          i = "base"
        }
        dam/wl_metal32.wl =
        {
          i = "base"
        }
        dam/wl_metal33.wl =
        {
          i = "base"
        }
        dam/wl_metal33a.wl =
        {
          i = "base"
        }
        dam/wl_metal33b.wl =
        {
          i = "base"
        }
        dam/wl_metal36a.wl =
        {
          i = "base"
        }
        dam/wl_metal36b.wl =
        {
          i = "base"
        }
        dam/wl_metal36c.wl =
        {
          i = "base"
        }
        dam/wl_metal42.wl =
        {
          i = "base"
        }
        dam/wl_metal43.wl =
        {
          i = "base"
        }
        dam/wl_newdam.wl =
        {
          i = "base"
        }
        dam/wl_newdam2.wl =
        {
          i = "base"
        }
        dam/wl_platebigrivs.wl =
        {
          i = "base"
        }
        dam/wl_rockbig1.wl =
        {
          i = "base"
        }
        dam/wl_rockbig2.wl =
        {
          i = "base"
        }
        dam/wl_rocksmall.wl =
        {
          i = "base"
        }
        dam/si_bboard3.wl =
        {
          i = "base"
        }

      }
      docks.txlist =
      {
        docks/0cp_little4.wl =
        {
          i = "base"
        }
        docks/1cp_little4.wl =
        {
          i = "base"
        }
        docks/2cp_little4.wl =
        {
          i = "base"
        }
        docks/3cp_little4.wl =
        {
          i = "base"
        }
        docks/cp_little1.wl =
        {
          i = "base"
        }
        docks/cp_little2.wl =
        {
          i = "base"
        }
        docks/cp_little3.wl =
        {
          i = "base"
        }
        docks/cp_newcpanel1.wl =
        {
          i = "base"
        }
        docks/cp_newcpanel1_brk.wl =
        {
          i = "base"
        }
        docks/cp_newcpanel2.wl =
        {
          i = "base"
        }
        docks/cp_newcpanel3.wl =
        {
          i = "base"
        }
        docks/cp_stscrn1.wl =
        {
          i = "base"
        }
        docks/cp_stscrn1_brk.wl =
        {
          i = "base"
        }
        docks/cp_stscrn2.wl =
        {
          i = "base"
        }
        docks/cp_stscrn3.wl =
        {
          i = "base"
        }
        docks/cp_stscrn4.wl =
        {
          i = "base"
        }
        docks/cp_stscrn5.wl =
        {
          i = "base"
        }
        docks/dr_dfrontdoor1.wl =
        {
          i = "base"
        }
        docks/dr_dfrontdoor2.wl =
        {
          i = "base"
        }
        docks/dr_dockdoor1.wl =
        {
          i = "base"
        }
        docks/dr_dockdoorsml.wl =
        {
          i = "base"
        }
        docks/si_bboard1.wl =
        {
          i = "base"
        }
        docks/si_bboard10.wl =
        {
          i = "base"
        }
        docks/si_bboard11.wl =
        {
          i = "base"
        }
        docks/si_bboard12.wl =
        {
          i = "base"
        }
        docks/si_bboard13.wl =
        {
          i = "base"
        }
        docks/si_bboard2.wl =
        {
          i = "base"
        }
        docks/si_bboard3.wl =
        {
          i = "base"
        }
        docks/si_bboard4.wl =
        {
          i = "base"
        }
        docks/si_bboard5.wl =
        {
          i = "base"
        }
        docks/si_bboard6.wl =
        {
          i = "base"
        }
        docks/si_bboard7.wl =
        {
          i = "base"
        }
        docks/si_bboard8.wl =
        {
          i = "base"
        }
        docks/si_bboard9.wl =
        {
          i = "base"
        }
        docks/tr_pole.wl =
        {
          i = "base"
        }
        docks/tr_rustymtl.wl =
        {
          i = "base"
        }
        docks/tr_rustymtl2.wl =
        {
          i = "base"
        }
        docks/wa_watery.wl =
        {
          i = "base"
        }
        docks/wl_bconcv.wl =
        {
          i = "base"
        }
        docks/wl_darkbluemetal.wl =
        {
          i = "base"
        }
        docks/wl_darkbluemetal16.wl =
        {
          i = "base"
        }
        docks/wl_darkbluemetal2.wl =
        {
          i = "base"
        }
        docks/wl_dbluepaint1.wl =
        {
          i = "base"
        }
        docks/wl_dbluepaint2.wl =
        {
          i = "base"
        }
        docks/wl_dbluepaint3.wl =
        {
          i = "base"
        }
        docks/wl_dgoldpaint2.wl =
        {
          i = "base"
        }
        docks/wl_dock(bluemet).wl =
        {
          i = "base"
        }
        docks/wl_dock2(bluemet).wl =
        {
          i = "base"
        }
        docks/wl_dockbarnc1.wl =
        {
          i = "base"
        }
        docks/wl_dockbarnc2.wl =
        {
          i = "base"
        }
        docks/wl_dockbarnc3.wl =
        {
          i = "base"
        }
        docks/wl_dockmetflat.wl =
        {
          i = "base"
        }
        docks/wl_dockrust(plain).wl =
        {
          i = "base"
        }
        docks/wl_dockrust1.wl =
        {
          i = "base"
        }
        docks/wl_dockrust2.wl =
        {
          i = "base"
        }
        docks/wl_dockrust3(plain).wl =
        {
          i = "base"
        }
        docks/wl_dockrust3.wl =
        {
          i = "base"
        }
        docks/wl_steelcont.wl =
        {
          i = "base"
        }
        docks/si_bboard11.wl =
        {
          i = "base"
        }
        docks/si_bboard4.wl =
        {
          i = "base"
        }
        docks/si_bboard6.wl =
        {
          i = "base"
        }
        docks/si_bboard7.wl =
        {
          i = "base"
        }
        docks/si_bboard8.wl =
        {
          i = "base"
        }

      }
      dredd.txlist =
      {
        dredd/black.wl =
        {
          i = "base"
        }
        dredd/blackbright.wl =
        {
          i = "base"
        }
        dredd/carpet1.wl =
        {
          i = "base"
        }
        dredd/carpet2.wl =
        {
          i = "base"
        }
        dredd/carpet3.wl =
        {
          i = "base"
        }
        dredd/cl_holt.wl =
        {
          i = "base"
        }
        dredd/wl_caconcoswald.wl =
        {
          i = "base"
        }
        dredd/wl_window1.wl =
        {
          i = "base"
        }
        dredd/wl_window1a.wl =
        {
          i = "base"
        }
        dredd/wl_window2.wl =
        {
          i = "base"
        }
        dredd/wl_window2a.wl =
        {
          i = "base"
        }
        dredd/wl_window3a.wl =
        {
          i = "base"
        }
        dredd/wl_window4a.wl =
        {
          i = "base"
        }
        dredd/wl_window5.wl =
        {
          i = "base"
        }
        dredd/wl_window5a.wl =
        {
          i = "base"
        }

        large_tiles.txlist =
        {
          dredd/large_tiles/carpet1.wl =
          {
            i = "base"
          }
          dredd/large_tiles/carpet2.wl =
          {
            i = "base"
          }
          dredd/large_tiles/carpet3.wl =
          {
            i = "base"
          }
          dredd/large_tiles/wl_window1a.wl =
          {
            i = "base"
          }
          dredd/large_tiles/wl_window2a.wl =
          {
            i = "base"
          }
          dredd/large_tiles/wl_window3a.wl =
          {
            i = "base"
          }
          dredd/large_tiles/wl_window4a.wl =
          {
            i = "base"
          }
          dredd/large_tiles/wl_window5a.wl =
          {
            i = "base"
          }

        }
      }
      fl_ruftilereddrty1.txlist =
      {
        fl_ruftilereddrty1.wl =
        {
          i = "base"
        }

      }
      fl_ruftilereddrty2.txlist =
      {
        fl_ruftilereddrty2.wl =
        {
          i = "base"
        }

      }
      generic.txlist =
      {
        barrel.txlist =
        {
          generic/barrel/br_brown.wl =
          {
            i = "base"
          }
          generic/barrel/br_cleantop.wl =
          {
            i = "base"
          }
          generic/barrel/br_corrosiveside.wl =
          {
            i = "base"
          }
          generic/barrel/br_corrosivetop.wl =
          {
            i = "base"
          }
          generic/barrel/br_red.wl =
          {
            i = "base"
          }
          generic/barrel/br_sinrust.wl =
          {
            i = "base"
          }
          generic/barrel/br_sinrust2.wl =
          {
            i = "base"
          }
          generic/barrel/br_sinrusttop.wl =
          {
            i = "base"
          }

        }
        ceiling.txlist =
        {
          generic/ceiling/cl_clean1.wl =
          {
            i = "base"
          }
          generic/ceiling/cl_curcuits.wl =
          {
            i = "base"
          }
          generic/ceiling/cl_divit.wl =
          {
            i = "base"
          }
          generic/ceiling/cl_steel.wl =
          {
            i = "base"
          }
          generic/ceiling/cl_steelblurred.wl =
          {
            i = "base"
          }
          generic/ceiling/cl_vent.wl =
          {
            i = "base"
          }
          generic/ceiling/cl_vent1.wl =
          {
            i = "base"
          }
          generic/ceiling/cl_watertight.wl =
          {
            i = "base"
          }

        }
        comp_panel.txlist =
        {
          generic/comp_panel/0_cp_ok_button2.wl =
          {
            i = "base"
          }
          generic/comp_panel/0_cp_panel1.wl =
          {
            i = "base"
          }
          generic/comp_panel/0_earth_spin.wl =
          {
            i = "base"
          }
          generic/comp_panel/1_cp_ok_button2.wl =
          {
            i = "base"
          }
          generic/comp_panel/1_cp_panel1.wl =
          {
            i = "base"
          }
          generic/comp_panel/1_earth_spin.wl =
          {
            i = "base"
          }
          generic/comp_panel/2_cp_panel1.wl =
          {
            i = "base"
          }
          generic/comp_panel/2_earth_spin.wl =
          {
            i = "base"
          }
          generic/comp_panel/3_cp_panel1.wl =
          {
            i = "base"
          }
          generic/comp_panel/3_earth_spin.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_alarm_off.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_alarm_on.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_blown1.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_blown2.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_blown3.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_camerascreen.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_idel(blue).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_idel(gren).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_idel(orag).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_idel(yel).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_locked(blue).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_locked(gren).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_locked(orag).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_locked(yel).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_open(blue).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_open(gren).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_open(orag).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_card_open(yel).wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_circpanel.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_circpanel2.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_circpanel3.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_cpucase.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_cpugrn.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_cpusmal.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elevcall_active1.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elevcall_active2.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elevcall_nonactive.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elev_down_active1.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elev_down_active2.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elev_down_nonactive.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elev_up_active1.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elev_up_active2.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_elev_up_nonactive.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_kb_nonuse.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_kb_use.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_keyb.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_keyboard.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_keyboardsmall.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_monitor1.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_newmetal.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_ok_button.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_ok_button2.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_panel1.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_securt_brk.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_side1.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_static1.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_static2.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_static3.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_switch_off.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_switch_on.wl =
          {
            i = "base"
          }
          generic/comp_panel/cp_unit_red.wl =
          {
            i = "base"
          }

        }
        cut_tiles.txlist =
        {
          generic/cut_tiles/tr_pipe(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_pipe17a(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_pipe17b(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_pipe17c(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_pipeburn(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_piperust(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_piperust2(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_pipe_magma(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_pipe_steam(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/tr_pipe_water(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement1(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement15(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement16(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement1a(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement2(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement3(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement3_logo(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement4(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement4b(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement4c(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement4_logo(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement6(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement7(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement7_logo(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement8(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement8_logo(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_cement9(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal11a(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal11b(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal11c(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal13(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal16(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal17a(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal3(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal4(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal5(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal7(s).wl =
          {
            i = "base"
          }
          generic/cut_tiles/wl_metal8(s).wl =
          {
            i = "base"
          }

        }
        floor_cement.txlist =
        {
          generic/floor_cement/fl_blackmarb.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_blackmarb2.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_blahtiles.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_blahtilesvent.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_bluebrick.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_cement.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_cement1.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_cement2.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_cementmanhole.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_cementsoot.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_cementsoot2.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_checktile1.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_checktile2.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_concdrain.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_concrete1.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_concwarn.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_marble1.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_redtile.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_tar.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_tar2.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_tarnish.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_tarstripe.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_warn.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_warndrain.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_whitegrid.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_wwfloor1.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_wwfloor2.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_wwfloor3.wl =
          {
            i = "base"
          }
          generic/floor_cement/fl_wwfloor4.wl =
          {
            i = "base"
          }

          larger_tiles.txlist =
          {
            generic/floor_cement/larger_tiles/fl_blahtiles.wl =
            {
              i = "base"
            }

          }
        }
        floor_metal.txlist =
        {
          generic/floor_metal/fl_brdrgrate.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_brz.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_catwalk.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetal.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetala.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetalb.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetalba.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetalc.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetalca.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetald.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetale.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkbluemetalf.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkdiam.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetal(trim).wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetal.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetala(trim).wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetala.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetalb(trim).wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetalb.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetalc.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetald.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetale.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetalf.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetalg.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_darkmetalh.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_diamwhite.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor1.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor2.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor3.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor4.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor5.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor6.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor7.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor8.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor9.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_floor9_2.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_grate.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_grate1.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_grate2.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_grate3.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_grate4.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_grate5.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_grate6.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_graystuf.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_grill.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_iron.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_irona.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_metalgrip.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_metalgrip2.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_metalgrip3.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_metplat2.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_metplate.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_rustymetal.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_rustymetal2.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_silo1.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_silo2.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_tanstone.wl =
          {
            i = "base"
          }
          generic/floor_metal/fl_tanstonea.wl =
          {
            i = "base"
          }
          generic/floor_metal/tr_diam.wl =
          {
            i = "base"
          }

          larger_tiles.txlist =
          {
            generic/floor_metal/larger_tiles/fl_brdrgrate.wl =
            {
              i = "base"
            }
            generic/floor_metal/larger_tiles/fl_grill.wl =
            {
              i = "base"
            }

          }
        }
        floor_organic.txlist =
        {
          generic/floor_organic/fl_crackmud.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_dirt.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_dirt2.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_dirtgrass.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_dirtgrass2.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_grass.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_grass1.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_grass2.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_gravel1.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_mud1_0.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_woodplanks.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_woodplanks2.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_woodplanks3.wl =
          {
            i = "base"
          }
          generic/floor_organic/fl_woodplanks4.wl =
          {
            i = "base"
          }

          larger_tiles.txlist =
          {
            generic/floor_organic/larger_tiles/fl_dirt.wl =
            {
              i = "base"
            }

          }
        }
        light.txlist =
        {
          generic/light/lightone2.wl =
          {
            i = "base"
          }
          generic/light/li_blackwarn.wl =
          {
            i = "base"
          }
          generic/light/li_blaklite.wl =
          {
            i = "base"
          }
          generic/light/li_blklite_small.wl =
          {
            i = "base"
          }
          generic/light/li_bluea.wl =
          {
            i = "base"
          }
          generic/light/li_blueb.wl =
          {
            i = "base"
          }
          generic/light/li_blueband.wl =
          {
            i = "base"
          }
          generic/light/li_bluelite.wl =
          {
            i = "base"
          }
          generic/light/li_bluelite2.wl =
          {
            i = "base"
          }
          generic/light/li_bluelitea_brk.wl =
          {
            i = "base"
          }
          generic/light/li_bluelite_brk.wl =
          {
            i = "base"
          }
          generic/light/li_bluesquare.wl =
          {
            i = "base"
          }
          generic/light/li_bluesquare2.wl =
          {
            i = "base"
          }
          generic/light/li_bluesquare_brk.wl =
          {
            i = "base"
          }
          generic/light/li_bluewarn.wl =
          {
            i = "base"
          }
          generic/light/li_blue_status_light.wl =
          {
            i = "base"
          }
          generic/light/li_blue_status_light_brk.wl =
          {
            i = "base"
          }
          generic/light/li_bluish_long.wl =
          {
            i = "base"
          }
          generic/light/li_bluish_long_brk.wl =
          {
            i = "base"
          }
          generic/light/li_blumetal_spot.wl =
          {
            i = "base"
          }
          generic/light/li_blumetal_spot2.wl =
          {
            i = "base"
          }
          generic/light/li_blu_speck.wl =
          {
            i = "base"
          }
          generic/light/li_blu_speck2.wl =
          {
            i = "base"
          }
          generic/light/li_blu_speck3.wl =
          {
            i = "base"
          }
          generic/light/li_blu_speck4.wl =
          {
            i = "base"
          }
          generic/light/li_blu_speck4_brk.wl =
          {
            i = "base"
          }
          generic/light/li_flourescent_tube.wl =
          {
            i = "base"
          }
          generic/light/li_flourescent_tube2.wl =
          {
            i = "base"
          }
          generic/light/li_flourescent_tube2_brk.wl =
          {
            i = "base"
          }
          generic/light/li_flourescent_tube2_dirty.wl =
          {
            i = "base"
          }
          generic/light/li_flourescent_tube_brk.wl =
          {
            i = "base"
          }
          generic/light/li_flourescent_tube_dirty.wl =
          {
            i = "base"
          }
          generic/light/li_greenlite.wl =
          {
            i = "base"
          }
          generic/light/li_greenwarn.wl =
          {
            i = "base"
          }
          generic/light/li_grid_aqua.wl =
          {
            i = "base"
          }
          generic/light/li_grid_beige.wl =
          {
            i = "base"
          }
          generic/light/li_grid_blue.wl =
          {
            i = "base"
          }
          generic/light/li_grid_green.wl =
          {
            i = "base"
          }
          generic/light/li_grid_orange.wl =
          {
            i = "base"
          }
          generic/light/li_grid_red.wl =
          {
            i = "base"
          }
          generic/light/li_grid_white.wl =
          {
            i = "base"
          }
          generic/light/li_grid_yellow.wl =
          {
            i = "base"
          }
          generic/light/li_grnpanellight.wl =
          {
            i = "base"
          }
          generic/light/li_grnpanellight_brk.wl =
          {
            i = "base"
          }
          generic/light/li_gvround_brk.wl =
          {
            i = "base"
          }
          generic/light/li_gvvent1_brk.wl =
          {
            i = "base"
          }
          generic/light/li_gvvent2_brk.wl =
          {
            i = "base"
          }
          generic/light/li_lamp.wl =
          {
            i = "base"
          }
          generic/light/li_purplite.wl =
          {
            i = "base"
          }
          generic/light/li_purpwarn.wl =
          {
            i = "base"
          }
          generic/light/li_redlite.wl =
          {
            i = "base"
          }
          generic/light/li_redround_brk.wl =
          {
            i = "base"
          }
          generic/light/li_redstrips.wl =
          {
            i = "base"
          }
          generic/light/li_redstrips_brk.wl =
          {
            i = "base"
          }
          generic/light/li_redwarn.wl =
          {
            i = "base"
          }
          generic/light/li_red_status_light.wl =
          {
            i = "base"
          }
          generic/light/li_sintek_spot.wl =
          {
            i = "base"
          }
          generic/light/li_spot2.wl =
          {
            i = "base"
          }
          generic/light/li_spot3.wl =
          {
            i = "base"
          }
          generic/light/li_spot4.wl =
          {
            i = "base"
          }
          generic/light/li_spot5.wl =
          {
            i = "base"
          }
          generic/light/li_square.wl =
          {
            i = "base"
          }
          generic/light/li_square_brk.wl =
          {
            i = "base"
          }
          generic/light/li_steellight.wl =
          {
            i = "base"
          }
          generic/light/li_tanlite3.wl =
          {
            i = "base"
          }
          generic/light/li_tanlite3a.wl =
          {
            i = "base"
          }
          generic/light/li_wallight.wl =
          {
            i = "base"
          }
          generic/light/li_wallight2.wl =
          {
            i = "base"
          }
          generic/light/li_wallight3.wl =
          {
            i = "base"
          }
          generic/light/li_wallight4.wl =
          {
            i = "base"
          }
          generic/light/li_wallight4_brk.wl =
          {
            i = "base"
          }
          generic/light/li_walllight2_brk.wl =
          {
            i = "base"
          }
          generic/light/li_watertight.wl =
          {
            i = "base"
          }
          generic/light/li_whitelight.wl =
          {
            i = "base"
          }
          generic/light/li_yellowlite.wl =
          {
            i = "base"
          }
          generic/light/li_yellowlite2.wl =
          {
            i = "base"
          }
          generic/light/li_yellowlite3.wl =
          {
            i = "base"
          }
          generic/light/li_yellowlite_brk.wl =
          {
            i = "base"
          }
          generic/light/li_yellowwarn.wl =
          {
            i = "base"
          }
          generic/light/li_yellow_lite_brk.wl =
          {
            i = "base"
          }
          generic/light/li_yellow_long.wl =
          {
            i = "base"
          }
          generic/light/li_yellow_spot.wl =
          {
            i = "base"
          }
          generic/light/li_yellow_status_light.wl =
          {
            i = "base"
          }
          generic/light/li_yello_spot_sml.wl =
          {
            i = "base"
          }
          generic/light/li_yelo_tubea.wl =
          {
            i = "base"
          }
          generic/light/li_yelo_tubeb.wl =
          {
            i = "base"
          }
          generic/light/li_yelo_tubeb_brk.wl =
          {
            i = "base"
          }
          generic/light/lt_blueband_brk.wl =
          {
            i = "base"
          }
          generic/light/lt_darkmetal.wl =
          {
            i = "base"
          }
          generic/light/lt_darkmetal2.wl =
          {
            i = "base"
          }
          generic/light/lt_darkmetal3.wl =
          {
            i = "base"
          }
          generic/light/lt_darkmetal4.wl =
          {
            i = "base"
          }
          generic/light/lt_yellow_spot_brk.wl =
          {
            i = "base"
          }
          generic/light/lt_yello_spot_sml_brk.wl =
          {
            i = "base"
          }

        }
        misc.txlist =
        {
          generic/misc/black.wl =
          {
            i = "base"
          }
          generic/misc/clip.wl =
          {
            i = "base"
          }
          generic/misc/envmap1.wl =
          {
            i = "base"
          }
          generic/misc/envmap2.wl =
          {
            i = "base"
          }
          generic/misc/envmap3.wl =
          {
            i = "base"
          }
          generic/misc/envmap4.wl =
          {
            i = "base"
          }
          generic/misc/envmap5.wl =
          {
            i = "base"
          }
          generic/misc/envmap6.wl =
          {
            i = "base"
          }
          generic/misc/envmap7.wl =
          {
            i = "base"
          }
          generic/misc/envmap8.wl =
          {
            i = "base"
          }
          generic/misc/fence.wl =
          {
            i = "base"
          }
          generic/misc/green.wl =
          {
            i = "base"
          }
          generic/misc/hint.wl =
          {
            i = "base"
          }
          generic/misc/light.wl =
          {
            i = "base"
          }
          generic/misc/monster.wl =
          {
            i = "base"
          }
          generic/misc/ocrana.wl =
          {
            i = "base"
          }
          generic/misc/origin.wl =
          {
            i = "base"
          }
          generic/misc/pat_envmap1.wl =
          {
            i = "base"
          }
          generic/misc/red.wl =
          {
            i = "base"
          }
          generic/misc/region.wl =
          {
            i = "base"
          }
          generic/misc/scale.wl =
          {
            i = "base"
          }
          generic/misc/skip.wl =
          {
            i = "base"
          }
          generic/misc/sky1.wl =
          {
            i = "base"
          }
          generic/misc/trigger.wl =
          {
            i = "base"
          }
          generic/misc/volumetric_base.wl =
          {
            i = "base"
          }
          generic/misc/volumetric_fade.wl =
          {
            i = "base"
          }
          generic/misc/volumetric_fade2.wl =
          {
            i = "base"
          }
          generic/misc/volumetric_top.wl =
          {
            i = "base"
          }
          generic/misc/white.wl =
          {
            i = "base"
          }

        }
        sign.txlist =
        {
          generic/sign/eliz1.wl =
          {
            i = "base"
          }
          generic/sign/family.wl =
          {
            i = "base"
          }
          generic/sign/hipdm1-plate.wl =
          {
            i = "base"
          }
          generic/sign/holt.wl =
          {
            i = "base"
          }
          generic/sign/levelord.wl =
          {
            i = "base"
          }
          generic/sign/pcgcover.wl =
          {
            i = "base"
          }
          generic/sign/pczcover(small).wl =
          {
            i = "base"
          }
          generic/sign/pczcover.wl =
          {
            i = "base"
          }
          generic/sign/si_b2xxx.wl =
          {
            i = "base"
          }
          generic/sign/si_billbrasky.wl =
          {
            i = "base"
          }
          generic/sign/si_cnp.wl =
          {
            i = "base"
          }
          generic/sign/si_danger.wl =
          {
            i = "base"
          }
          generic/sign/si_diamond.wl =
          {
            i = "base"
          }
          generic/sign/si_elexisreport.wl =
          {
            i = "base"
          }
          generic/sign/si_eon_schematics.wl =
          {
            i = "base"
          }
          generic/sign/si_fish.wl =
          {
            i = "base"
          }
          generic/sign/si_folder1.wl =
          {
            i = "base"
          }
          generic/sign/si_folder2.wl =
          {
            i = "base"
          }
          generic/sign/si_folder3.wl =
          {
            i = "base"
          }
          generic/sign/si_hardhats.wl =
          {
            i = "base"
          }
          generic/sign/si_hardhatsb.wl =
          {
            i = "base"
          }
          generic/sign/si_letter2.wl =
          {
            i = "base"
          }
          generic/sign/si_letter3.wl =
          {
            i = "base"
          }
          generic/sign/si_letter4.wl =
          {
            i = "base"
          }
          generic/sign/si_mag.wl =
          {
            i = "base"
          }
          generic/sign/si_mag2.wl =
          {
            i = "base"
          }
          generic/sign/si_memo1.wl =
          {
            i = "base"
          }
          generic/sign/si_memo2.wl =
          {
            i = "base"
          }
          generic/sign/si_memoboyd.wl =
          {
            i = "base"
          }
          generic/sign/si_mwdanger.wl =
          {
            i = "base"
          }
          generic/sign/si_mwdangerb.wl =
          {
            i = "base"
          }
          generic/sign/si_news.wl =
          {
            i = "base"
          }
          generic/sign/si_noentry.wl =
          {
            i = "base"
          }
          generic/sign/si_nosmoke.wl =
          {
            i = "base"
          }
          generic/sign/si_paper.wl =
          {
            i = "base"
          }
          generic/sign/si_paper2.wl =
          {
            i = "base"
          }
          generic/sign/si_planearium.wl =
          {
            i = "base"
          }
          generic/sign/si_planearium_old.wl =
          {
            i = "base"
          }
          generic/sign/si_pressrelease.wl =
          {
            i = "base"
          }
          generic/sign/si_reconah.wl =
          {
            i = "base"
          }
          generic/sign/si_report(stock).wl =
          {
            i = "base"
          }
          generic/sign/si_russian.wl =
          {
            i = "base"
          }
          generic/sign/si_sintek_advert.wl =
          {
            i = "base"
          }
          generic/sign/si_slickwilly.wl =
          {
            i = "base"
          }
          generic/sign/si_tvguide.wl =
          {
            i = "base"
          }
          generic/sign/si_txplate.wl =
          {
            i = "base"
          }
          generic/sign/si_vanity.wl =
          {
            i = "base"
          }
          generic/sign/si_vultorn.wl =
          {
            i = "base"
          }
          generic/sign/si_warning1.wl =
          {
            i = "base"
          }
          generic/sign/si_warning10.wl =
          {
            i = "base"
          }
          generic/sign/si_warning11.wl =
          {
            i = "base"
          }
          generic/sign/si_warning12.wl =
          {
            i = "base"
          }
          generic/sign/si_warning13.wl =
          {
            i = "base"
          }
          generic/sign/si_warning14.wl =
          {
            i = "base"
          }
          generic/sign/si_warning15.wl =
          {
            i = "base"
          }
          generic/sign/si_warning16.wl =
          {
            i = "base"
          }
          generic/sign/si_warning2.wl =
          {
            i = "base"
          }
          generic/sign/si_warning3.wl =
          {
            i = "base"
          }
          generic/sign/si_warning4.wl =
          {
            i = "base"
          }
          generic/sign/si_warning5.wl =
          {
            i = "base"
          }
          generic/sign/si_warning6.wl =
          {
            i = "base"
          }
          generic/sign/si_warning7.wl =
          {
            i = "base"
          }
          generic/sign/si_warning8.wl =
          {
            i = "base"
          }
          generic/sign/si_warning9.wl =
          {
            i = "base"
          }
          generic/sign/si_watchstep.wl =
          {
            i = "base"
          }
          generic/sign/si_zoo.wl =
          {
            i = "base"
          }

        }
        temp.txlist =
        {
          generic/temp/bluepipe.wl =
          {
            i = "base"
          }
          generic/temp/orangepipe.wl =
          {
            i = "base"
          }
          generic/temp/redpipe.wl =
          {
            i = "base"
          }
          generic/temp/si_ritualweb.wl =
          {
            i = "base"
          }
          generic/temp/si_tits.wl =
          {
            i = "base"
          }
          generic/temp/tealpipe.wl =
          {
            i = "base"
          }

        }
        trim.txlist =
        {
          generic/trim/tr_beam_joiner.wl =
          {
            i = "base"
          }
          generic/trim/tr_beam_normal.wl =
          {
            i = "base"
          }
          generic/trim/tr_beam_normalrivet.wl =
          {
            i = "base"
          }
          generic/trim/tr_blue.wl =
          {
            i = "base"
          }
          generic/trim/tr_bolt.wl =
          {
            i = "base"
          }
          generic/trim/tr_brownbolts.wl =
          {
            i = "base"
          }
          generic/trim/tr_brownpanel.wl =
          {
            i = "base"
          }
          generic/trim/tr_bump1.wl =
          {
            i = "base"
          }
          generic/trim/tr_bump2.wl =
          {
            i = "base"
          }
          generic/trim/tr_cleantanmetal.wl =
          {
            i = "base"
          }
          generic/trim/tr_curcuit_board.wl =
          {
            i = "base"
          }
          generic/trim/tr_darkgreenpanel.wl =
          {
            i = "base"
          }
          generic/trim/tr_dirtytanmetal.wl =
          {
            i = "base"
          }
          generic/trim/tr_doortrak.wl =
          {
            i = "base"
          }
          generic/trim/tr_drain.wl =
          {
            i = "base"
          }
          generic/trim/tr_ducts(jm).wl =
          {
            i = "base"
          }
          generic/trim/tr_ducts.wl =
          {
            i = "base"
          }
          generic/trim/tr_grate4.wl =
          {
            i = "base"
          }
          generic/trim/tr_greenpanel1.wl =
          {
            i = "base"
          }
          generic/trim/tr_greenriv.wl =
          {
            i = "base"
          }
          generic/trim/tr_greymetal.wl =
          {
            i = "base"
          }
          generic/trim/tr_grid_link.wl =
          {
            i = "base"
          }
          generic/trim/tr_grid_link2.wl =
          {
            i = "base"
          }
          generic/trim/tr_grid_link3.wl =
          {
            i = "base"
          }
          generic/trim/tr_grid_link4.wl =
          {
            i = "base"
          }
          generic/trim/tr_grill01.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip2.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip3.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip4.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip4a.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip5.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip5a.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip6.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip7.wl =
          {
            i = "base"
          }
          generic/trim/tr_hazstrip8.wl =
          {
            i = "base"
          }
          generic/trim/tr_inset.wl =
          {
            i = "base"
          }
          generic/trim/tr_inset_pipe.wl =
          {
            i = "base"
          }
          generic/trim/tr_iron_beam.wl =
          {
            i = "base"
          }
          generic/trim/tr_keyboard.wl =
          {
            i = "base"
          }
          generic/trim/tr_ladder_clean.wl =
          {
            i = "base"
          }
          generic/trim/tr_ladder_darkmetal.wl =
          {
            i = "base"
          }
          generic/trim/tr_ladder_rusty.wl =
          {
            i = "base"
          }
          generic/trim/tr_ladder_yellow.wl =
          {
            i = "base"
          }
          generic/trim/tr_light_thing.wl =
          {
            i = "base"
          }
          generic/trim/tr_litegreenpanel.wl =
          {
            i = "base"
          }
          generic/trim/tr_ltbluemetal.wl =
          {
            i = "base"
          }
          generic/trim/tr_ltbluemetal2.wl =
          {
            i = "base"
          }
          generic/trim/tr_ltgreenmetal.wl =
          {
            i = "base"
          }
          generic/trim/tr_ltgreenmetal2.wl =
          {
            i = "base"
          }
          generic/trim/tr_medkit.wl =
          {
            i = "base"
          }
          generic/trim/tr_medkit2.wl =
          {
            i = "base"
          }
          generic/trim/tr_medkit3.wl =
          {
            i = "base"
          }
          generic/trim/tr_medkit4.wl =
          {
            i = "base"
          }
          generic/trim/tr_metal1.wl =
          {
            i = "base"
          }
          generic/trim/tr_metal2.wl =
          {
            i = "base"
          }
          generic/trim/tr_metal_clean.wl =
          {
            i = "base"
          }
          generic/trim/tr_metal_clean2.wl =
          {
            i = "base"
          }
          generic/trim/tr_metal_clean3.wl =
          {
            i = "base"
          }
          generic/trim/tr_metal_clean4.wl =
          {
            i = "base"
          }
          generic/trim/tr_metal_rods.wl =
          {
            i = "base"
          }
          generic/trim/tr_mwpipes1.wl =
          {
            i = "base"
          }
          generic/trim/tr_mwpipes2.wl =
          {
            i = "base"
          }
          generic/trim/tr_mwpipes3a.wl =
          {
            i = "base"
          }
          generic/trim/tr_mwpipes3b.wl =
          {
            i = "base"
          }
          generic/trim/tr_mwpipes4a.wl =
          {
            i = "base"
          }
          generic/trim/tr_mwpipes4b.wl =
          {
            i = "base"
          }
          generic/trim/tr_openwire_panel.wl =
          {
            i = "base"
          }
          generic/trim/tr_pipegray.wl =
          {
            i = "base"
          }
          generic/trim/tr_piperun1.wl =
          {
            i = "base"
          }
          generic/trim/tr_pipes3.wl =
          {
            i = "base"
          }
          generic/trim/tr_pipes_colored.wl =
          {
            i = "base"
          }
          generic/trim/tr_pipetangle.wl =
          {
            i = "base"
          }
          generic/trim/tr_redpanel.wl =
          {
            i = "base"
          }
          generic/trim/tr_ribbed.wl =
          {
            i = "base"
          }
          generic/trim/tr_rivets.wl =
          {
            i = "base"
          }
          generic/trim/tr_rivet_plain.wl =
          {
            i = "base"
          }
          generic/trim/tr_rivet_plain2.wl =
          {
            i = "base"
          }
          generic/trim/tr_steelblurred.wl =
          {
            i = "base"
          }
          generic/trim/tr_vertpipes.wl =
          {
            i = "base"
          }
          generic/trim/tr_warning_stripe.wl =
          {
            i = "base"
          }
          generic/trim/tr_wire_mesh1.wl =
          {
            i = "base"
          }
          generic/trim/tr_wire_mesh2.wl =
          {
            i = "base"
          }
          generic/trim/tr_wire_mesh3.wl =
          {
            i = "base"
          }
          generic/trim/tr_yellowcaution.wl =
          {
            i = "base"
          }
          generic/trim/tr_yellowcaution2.wl =
          {
            i = "base"
          }
          generic/trim/tr_yellowchecks.wl =
          {
            i = "base"
          }
          generic/trim/tr_yellowcorrosive.wl =
          {
            i = "base"
          }
          generic/trim/tr_yellowpaint.wl =
          {
            i = "base"
          }
          generic/trim/tr_yellow_latter.wl =
          {
            i = "base"
          }
          generic/trim/tr_yellow_latter2.wl =
          {
            i = "base"
          }
          generic/trim/_tr_pipegray_mask.wl =
          {
            i = "base"
          }

          larger_tiles.txlist =
          {
            generic/trim/larger_tiles/tr_beam_normalrivet.wl =
            {
              i = "base"
            }
            generic/trim/larger_tiles/tr_hazstrip4a.wl =
            {
              i = "base"
            }
            generic/trim/larger_tiles/tr_hazstrip5.wl =
            {
              i = "base"
            }
            generic/trim/larger_tiles/tr_metal1.wl =
            {
              i = "base"
            }

          }
        }
        wall_cement.txlist =
        {
          generic/wall_cement/cwall1.wl =
          {
            i = "base"
          }
          generic/wall_cement/metalflo_moss1.wl =
          {
            i = "base"
          }
          generic/wall_cement/sinlogo.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_brick2.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_brick2btm.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement1.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement10.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement11.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement12.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement13.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement14.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement15.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement15a.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement15b.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement16.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement17.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement1a.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement2.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement3.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement3_logo.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement4.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement4a.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement4b.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement4c.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement5.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement6.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement7.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement8.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cement9.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cinderdark.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cinderlight.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_cindermedium.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_concpipes.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_concscrape.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_concwet.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_concwetpipes.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_dirtybrick.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_dirtybrick2.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_drywal.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_drywall.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_drywall2.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_drywall3.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_drywall3a.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_drywall_trim.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_drywall_trima.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_marb1.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_marb2.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_oldconc.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_oldconc2.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_oldconc_fade_in-out.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_oldcrete_dang.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_osh.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_polymer.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_redconc1.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_rockwall1.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_rock_anglea.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_rock_angleb.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_rock_trianglea.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_rock_triangleb.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_rotcrete.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_rotcrete_dang.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_tanstone.wl =
          {
            i = "base"
          }
          generic/wall_cement/wl_tanstonea.wl =
          {
            i = "base"
          }

          larger_tiles.txlist =
          {
            generic/wall_cement/larger_tiles/wl_cement1.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement10.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement13.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement14.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement15.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement1a.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement2.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement3.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement3_logo.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement4.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement4b.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement4c.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement6.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement7.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement8.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_cement9.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_drywal.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_drywall.wl =
            {
              i = "base"
            }
            generic/wall_cement/larger_tiles/wl_drywall_trim.wl =
            {
              i = "base"
            }

          }
        }
        wall_metal1.txlist =
        {
          generic/wall_metal1/0wl_grpipe3.wl =
          {
            i = "base"
          }
          generic/wall_metal1/1wl_grpipe3.wl =
          {
            i = "base"
          }
          generic/wall_metal1/2wl_grpipe3.wl =
          {
            i = "base"
          }
          generic/wall_metal1/3wl_grpipe3.wl =
          {
            i = "base"
          }
          generic/wall_metal1/4wl_grpipe3.wl =
          {
            i = "base"
          }
          generic/wall_metal1/bluepipe.wl =
          {
            i = "base"
          }
          generic/wall_metal1/fl_mesh.wl =
          {
            i = "base"
          }
          generic/wall_metal1/fl_meshsin.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_bluemetal.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_bluemetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal3.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal3a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal3b.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal4.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal4a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal4b.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal5.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal6.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal6a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal7.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal7a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal7b.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal8.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal8a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal8b.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_cleantanmetal9.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_clink32.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_clink32_brk.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_clinkfence.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal10.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal11.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal12.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal13.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal14.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal14a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal14b.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal15.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal15a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal15b.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal7.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal7a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal7b.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal8.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal8a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_darkbluemetal8b.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_dbluemetal.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_dbluemetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_dgreenmetal.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_dgreenmetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_divit.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_elevator_shaft.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_greenlit.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_greenlit2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_grpipe1.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_grpipe2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_ironbeams4.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal10.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal10a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal13.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal13a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal14.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal15.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal16.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal34.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal35.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metalpanel1.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metalpanel2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal_blu.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal_brwna.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal_brwnb.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal_brwnc.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_metal_square.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_pipe1.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_rivpanel.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_sintek1.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_steel.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_steeldiamond1.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_steelpanel1.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_tech1weathered.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall1.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall10.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall11.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall12.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall14.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall15.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall16.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall3.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall4.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall5.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall7.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall8.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall9.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_wall9a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_yellowmetal.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_yellowmetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_yellowmetal2a.wl =
          {
            i = "base"
          }
          generic/wall_metal1/wl_yellowmetala.wl =
          {
            i = "base"
          }

          larger_tiles.txlist =
          {
            generic/wall_metal1/larger_tiles/bluepipe.wl =
            {
              i = "base"
            }
            generic/wall_metal1/larger_tiles/fl_mesh.wl =
            {
              i = "base"
            }
            generic/wall_metal1/larger_tiles/wl_metal13.wl =
            {
              i = "base"
            }
            generic/wall_metal1/larger_tiles/wl_metal_blu.wl =
            {
              i = "base"
            }

          }
        }
        wall_metal2.txlist =
        {
          generic/wall_metal2/tr_pipe2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/tr_pipe3.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_airwall.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_arches.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_awall.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_blue1.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_blue2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_blue_metal_plate.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_bronzepanel1.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_bronzepanel2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_bronzepanel3.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_bronzewall1.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_bronzewall2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkbluemetal.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkbluemetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkbluemetal3.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkbluemetal4.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkbluemetal5.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkbluemetal6.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkbluemetal9.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal10.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal11.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal12.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal13.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal3.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal4.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal5.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal7.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal8.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_darkmetal9.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_dirtycement.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_dirtycement2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_dirtytanmetal.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_graymetal.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_graymetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_graymetal3.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_graymetal4.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_graymetal5.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_graymetal6.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_hallwy.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal11a.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal11b.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal11c.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal12.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal12a.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal16.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal17.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal18.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal18a.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal18b.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal18c.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal18d.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal20.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal21.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal22.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal3.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal4.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal5.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal7.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal8.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal9.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_metal_plate.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_pipe.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_pipeburn.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_piperust.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_piperust2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_pipework.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_pipework2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_platesdirt.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rotpipe.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rotpipe1.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rotpipe_emerg.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rotpipe_nostrip.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustybluemetal3a.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal10.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal10a.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal11.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal12(trim).wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal13.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal14(trim).wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal14(trim2).wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal15.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal2.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal3.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal4.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal5.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal6.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal7.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal8.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetal9.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustymetala.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustypipes.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustypipesa.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_rustypipesb.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_wall13.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_warnrail.wl =
          {
            i = "base"
          }
          generic/wall_metal2/wl_yellowmetal3.wl =
          {
            i = "base"
          }

          larger_tiles.txlist =
          {
            generic/wall_metal2/larger_tiles/wl_metal11a.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal11b.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal11c.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal16.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal17.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal3.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal4.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal5.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal7.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_metal8.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_pipe.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_pipeburn.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_piperust.wl =
            {
              i = "base"
            }
            generic/wall_metal2/larger_tiles/wl_wall13.wl =
            {
              i = "base"
            }

          }
        }
        wall_organic.txlist =
        {
          generic/wall_organic/wl_bigboards.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_boarded.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_box1.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_box2.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_cabinet(wood).wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_cabinet2(wood).wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_glass.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_glass2.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_plank_board.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_plank_board2.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_redrock.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_rock.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_rock1.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_rockchip1.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_rockchip2.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_rock_dk.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_rock_dk_coral.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_rock_rougha.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_rock_roughb.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_volcrok.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_woodsteel.wl =
          {
            i = "base"
          }
          generic/wall_organic/wl_woodwarn.wl =
          {
            i = "base"
          }

          larger_tiles.txlist =
          {
            generic/wall_organic/larger_tiles/wl_rock_dk.wl =
            {
              i = "base"
            }

          }
        }
        wall_vents.txlist =
        {
          generic/wall_vents/rnd_drain.wl =
          {
            i = "base"
          }
          generic/wall_vents/tr_pipehole.wl =
          {
            i = "base"
          }
          generic/wall_vents/tr_rnd_drain.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_metal_groove.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_portal.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_steeldiavent.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_vent1.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_vent1a.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_vent2.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_vent_large.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_vent_long.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_vent_long2.wl =
          {
            i = "base"
          }
          generic/wall_vents/wl_vent_round.wl =
          {
            i = "base"
          }

        }
        water.txlist =
        {
          generic/water/wa_dingy.wl =
          {
            i = "base"
          }
          generic/water/wa_dingy2.wl =
          {
            i = "base"
          }

        }
      }
      geotherm.txlist =
      {
        geotherm/0cp_cstack1.wl =
        {
          i = "base"
        }
        geotherm/0cp_lava_check.wl =
        {
          i = "base"
        }
        geotherm/0cp_lava_check2.wl =
        {
          i = "base"
        }
        geotherm/0cp_panel2.wl =
        {
          i = "base"
        }
        geotherm/0cp_panel_station.wl =
        {
          i = "base"
        }
        geotherm/0cp_scrn1.wl =
        {
          i = "base"
        }
        geotherm/0cp_scrn2.wl =
        {
          i = "base"
        }
        geotherm/0la_hot.wl =
        {
          i = "base"
        }
        geotherm/0si_caution.wl =
        {
          i = "base"
        }
        geotherm/0wl_lava_monitor.wl =
        {
          i = "base"
        }
        geotherm/0_liftbutton_off.wl =
        {
          i = "base"
        }
        geotherm/0_liftbutton_on.wl =
        {
          i = "base"
        }
        geotherm/1cp_cstack1.wl =
        {
          i = "base"
        }
        geotherm/1cp_lava_check.wl =
        {
          i = "base"
        }
        geotherm/1cp_lava_check2.wl =
        {
          i = "base"
        }
        geotherm/1cp_panel2.wl =
        {
          i = "base"
        }
        geotherm/1cp_panel_station.wl =
        {
          i = "base"
        }
        geotherm/1cp_scrn1.wl =
        {
          i = "base"
        }
        geotherm/1cp_scrn2.wl =
        {
          i = "base"
        }
        geotherm/1la_hot.wl =
        {
          i = "base"
        }
        geotherm/1si_caution.wl =
        {
          i = "base"
        }
        geotherm/1wl_lava_monitor.wl =
        {
          i = "base"
        }
        geotherm/1_liftbutton_off.wl =
        {
          i = "base"
        }
        geotherm/1_liftbutton_on.wl =
        {
          i = "base"
        }
        geotherm/2cp_scrn1.wl =
        {
          i = "base"
        }
        geotherm/2cp_scrn2.wl =
        {
          i = "base"
        }
        geotherm/2la_hot.wl =
        {
          i = "base"
        }
        geotherm/3cp_scrn1.wl =
        {
          i = "base"
        }
        geotherm/3cp_scrn2.wl =
        {
          i = "base"
        }
        geotherm/3la_hot.wl =
        {
          i = "base"
        }
        geotherm/4cp_scrn1.wl =
        {
          i = "base"
        }
        geotherm/4cp_scrn2.wl =
        {
          i = "base"
        }
        geotherm/4la_hot.wl =
        {
          i = "base"
        }
        geotherm/calender2.wl =
        {
          i = "base"
        }
        geotherm/cp_front1.wl =
        {
          i = "base"
        }
        geotherm/cp_panel1.wl =
        {
          i = "base"
        }
        geotherm/cp_panel3.wl =
        {
          i = "base"
        }
        geotherm/cp_panel_station.wl =
        {
          i = "base"
        }
        geotherm/cp_screen1.wl =
        {
          i = "base"
        }
        geotherm/fl_pipe17a.wl =
        {
          i = "base"
        }
        geotherm/fl_pipe17b.wl =
        {
          i = "base"
        }
        geotherm/fl_pipe17c.wl =
        {
          i = "base"
        }
        geotherm/la_01.wl =
        {
          i = "base"
        }
        geotherm/la_crusty.wl =
        {
          i = "base"
        }
        geotherm/la_magswirl.wl =
        {
          i = "base"
        }
        geotherm/si_control.wl =
        {
          i = "base"
        }
        geotherm/si_cyphen.wl =
        {
          i = "base"
        }
        geotherm/si_geotherm.wl =
        {
          i = "base"
        }
        geotherm/si_hydro.wl =
        {
          i = "base"
        }
        geotherm/si_pump1.wl =
        {
          i = "base"
        }
        geotherm/si_pump2.wl =
        {
          i = "base"
        }
        geotherm/si_pump3.wl =
        {
          i = "base"
        }
        geotherm/si_pump4.wl =
        {
          i = "base"
        }
        geotherm/si_pump5.wl =
        {
          i = "base"
        }
        geotherm/si_pump6.wl =
        {
          i = "base"
        }
        geotherm/si_temp.wl =
        {
          i = "base"
        }
        geotherm/si_therm.wl =
        {
          i = "base"
        }
        geotherm/sp_addposter.wl =
        {
          i = "base"
        }
        geotherm/sp_levelord.wl =
        {
          i = "base"
        }
        geotherm/tr_chairback.wl =
        {
          i = "base"
        }
        geotherm/tr_chairseat.wl =
        {
          i = "base"
        }
        geotherm/tr_chairtrim.wl =
        {
          i = "base"
        }
        geotherm/tr_dial.wl =
        {
          i = "base"
        }
        geotherm/tr_grip1.wl =
        {
          i = "base"
        }
        geotherm/tr_lava_burn2.wl =
        {
          i = "base"
        }
        geotherm/tr_pipemagma.wl =
        {
          i = "base"
        }
        geotherm/tr_pipemagma2.wl =
        {
          i = "base"
        }
        geotherm/tr_pipesteam.wl =
        {
          i = "base"
        }
        geotherm/tr_pipesteam2.wl =
        {
          i = "base"
        }
        geotherm/tr_pipewater.wl =
        {
          i = "base"
        }
        geotherm/tr_pipewater2.wl =
        {
          i = "base"
        }
        geotherm/tr_redlever.wl =
        {
          i = "base"
        }
        geotherm/wa_blue1.wl =
        {
          i = "base"
        }
        geotherm/wl_caution_brk.wl =
        {
          i = "base"
        }
        geotherm/wl_caverock.wl =
        {
          i = "base"
        }
        geotherm/wl_elevator_shaft2.wl =
        {
          i = "base"
        }
        geotherm/wl_elevator_shaft3.wl =
        {
          i = "base"
        }
        geotherm/wl_lavamud1.wl =
        {
          i = "base"
        }
        geotherm/wl_lavarck2.wl =
        {
          i = "base"
        }
        geotherm/wl_lavarock1.wl =
        {
          i = "base"
        }
        geotherm/wl_lava_monitor.wl =
        {
          i = "base"
        }
        geotherm/wl_locker(b).wl =
        {
          i = "base"
        }
        geotherm/wl_locker(b)side.wl =
        {
          i = "base"
        }
        geotherm/wl_locker(b2).wl =
        {
          i = "base"
        }
        geotherm/wl_locker(b2)side.wl =
        {
          i = "base"
        }
        geotherm/wl_locker(g).wl =
        {
          i = "base"
        }
        geotherm/wl_locker(g)side.wl =
        {
          i = "base"
        }
        geotherm/wl_locker(w).wl =
        {
          i = "base"
        }
        geotherm/wl_locker(w)side.wl =
        {
          i = "base"
        }
        geotherm/_moltenm.wl =
        {
          i = "base"
        }

        cut_tiles.txlist =
        {
          geotherm/cut_tiles/tr_pipe(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_pipe17a(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_pipe17b(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_pipe17c(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_pipeburn(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_piperust(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_piperust2(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_pipe_magma(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_pipe_steam(s).wl =
          {
            i = "base"
          }
          geotherm/cut_tiles/tr_pipe_water(s).wl =
          {
            i = "base"
          }

        }
        larger_tiles.txlist =
        {
          geotherm/larger_tiles/0wl_lava_monitor.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/1wl_lava_monitor.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/fl_pipe17a.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/fl_pipe17b.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/fl_pipe17c.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/tr_lava_burn2.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/tr_pipemagma.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/tr_pipemagma2.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/tr_pipesteam.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/tr_pipesteam2.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/tr_pipewater.wl =
          {
            i = "base"
          }
          geotherm/larger_tiles/tr_pipewater2.wl =
          {
            i = "base"
          }

        }
      }
      hq.txlist =
      {
        hq/cp_cpbluecase.wl =
        {
          i = "base"
        }
        hq/cp_cpcasefrnt.wl =
        {
          i = "base"
        }
        hq/cp_cpcaseside.wl =
        {
          i = "base"
        }
        hq/cp_hccpu1.wl =
        {
          i = "base"
        }
        hq/cp_hccpu2.wl =
        {
          i = "base"
        }
        hq/cp_hccpu3.wl =
        {
          i = "base"
        }
        hq/cp_hccpu4.wl =
        {
          i = "base"
        }
        hq/dr_hqdoor.wl =
        {
          i = "base"
        }
        hq/fl_hcfloor1.wl =
        {
          i = "base"
        }
        hq/fl_hcfloor2.wl =
        {
          i = "base"
        }
        hq/fl_hcfloor3.wl =
        {
          i = "base"
        }
        hq/fl_helopad_hq.wl =
        {
          i = "base"
        }
        hq/hcwall6_2.wl =
        {
          i = "base"
        }
        hq/hoganpose1.wl =
        {
          i = "base"
        }
        hq/hoganpose2.wl =
        {
          i = "base"
        }
        hq/hoganpose3.wl =
        {
          i = "base"
        }
        hq/hoganpose4.wl =
        {
          i = "base"
        }
        hq/hoganpose5.wl =
        {
          i = "base"
        }
        hq/hoganpose6.wl =
        {
          i = "base"
        }
        hq/ladder_test1.wl =
        {
          i = "base"
        }
        hq/ladder_test2.wl =
        {
          i = "base"
        }
        hq/ladder_test3.wl =
        {
          i = "base"
        }
        hq/ladder_test4.wl =
        {
          i = "base"
        }
        hq/li_hclite1.wl =
        {
          i = "base"
        }
        hq/li_hclite2.wl =
        {
          i = "base"
        }
        hq/li_hclite3.wl =
        {
          i = "base"
        }
        hq/li_hclite4.wl =
        {
          i = "base"
        }
        hq/misc_green.wl =
        {
          i = "base"
        }
        hq/misc_red.wl =
        {
          i = "base"
        }
        hq/si_aquatic.wl =
        {
          i = "base"
        }
        hq/si_combat.wl =
        {
          i = "base"
        }
        hq/si_hqfiring.wl =
        {
          i = "base"
        }
        hq/si_hqsniper.wl =
        {
          i = "base"
        }
        hq/si_noncomp.wl =
        {
          i = "base"
        }
        hq/si_sewer.wl =
        {
          i = "base"
        }
        hq/si_skeet.wl =
        {
          i = "base"
        }
        hq/si_specenforca.wl =
        {
          i = "base"
        }
        hq/si_specenforcb.wl =
        {
          i = "base"
        }
        hq/si_specweptest.wl =
        {
          i = "base"
        }
        hq/si_traditional.wl =
        {
          i = "base"
        }
        hq/si_traina.wl =
        {
          i = "base"
        }
        hq/si_trainb.wl =
        {
          i = "base"
        }
        hq/si_urban.wl =
        {
          i = "base"
        }
        hq/si_weapon.wl =
        {
          i = "base"
        }
        hq/si_weptest.wl =
        {
          i = "base"
        }
        hq/tr_bleachersfrnt.wl =
        {
          i = "base"
        }
        hq/tr_bleacherstop.wl =
        {
          i = "base"
        }
        hq/tr_botmain.wl =
        {
          i = "base"
        }
        hq/tr_bottred.wl =
        {
          i = "base"
        }
        hq/tr_bottredside.wl =
        {
          i = "base"
        }
        hq/tr_hcbg1.wl =
        {
          i = "base"
        }
        hq/tr_hcbg2.wl =
        {
          i = "base"
        }
        hq/tr_hcdark1.wl =
        {
          i = "base"
        }
        hq/tr_hcdark2.wl =
        {
          i = "base"
        }
        hq/tr_hcmarbflat.wl =
        {
          i = "base"
        }
        hq/tr_hctrim1.wl =
        {
          i = "base"
        }
        hq/tr_hqblue.wl =
        {
          i = "base"
        }
        hq/tr_hqgray.wl =
        {
          i = "base"
        }
        hq/tr_orange.wl =
        {
          i = "base"
        }
        hq/tr_stair1.wl =
        {
          i = "base"
        }
        hq/wl_cabinet(hq).wl =
        {
          i = "base"
        }
        hq/wl_cabinet2(hq).wl =
        {
          i = "base"
        }
        hq/wl_cabinet3(hq).wl =
        {
          i = "base"
        }
        hq/wl_cabinet4(hq).wl =
        {
          i = "base"
        }
        hq/wl_cabinet5(hq).wl =
        {
          i = "base"
        }
        hq/wl_cubicle128.wl =
        {
          i = "base"
        }
        hq/wl_cubicle64.wl =
        {
          i = "base"
        }
        hq/wl_glass4.wl =
        {
          i = "base"
        }
        hq/wl_glass5.wl =
        {
          i = "base"
        }
        hq/wl_hcglass.wl =
        {
          i = "base"
        }
        hq/wl_hchorz1.wl =
        {
          i = "base"
        }
        hq/wl_hchorz2.wl =
        {
          i = "base"
        }
        hq/wl_hchorz3.wl =
        {
          i = "base"
        }
        hq/wl_hchorz4.wl =
        {
          i = "base"
        }
        hq/wl_hcshaft1.wl =
        {
          i = "base"
        }
        hq/wl_hcshaft2.wl =
        {
          i = "base"
        }
        hq/wl_hcwall1.wl =
        {
          i = "base"
        }
        hq/wl_hcwall10.wl =
        {
          i = "base"
        }
        hq/wl_hcwall11.wl =
        {
          i = "base"
        }
        hq/wl_hcwall12.wl =
        {
          i = "base"
        }
        hq/wl_hcwall13.wl =
        {
          i = "base"
        }
        hq/wl_hcwall14.wl =
        {
          i = "base"
        }
        hq/wl_hcwall15.wl =
        {
          i = "base"
        }
        hq/wl_hcwall16.wl =
        {
          i = "base"
        }
        hq/wl_hcwall1_2.wl =
        {
          i = "base"
        }
        hq/wl_hcwall2.wl =
        {
          i = "base"
        }
        hq/wl_hcwall3.wl =
        {
          i = "base"
        }
        hq/wl_hcwall3_2.wl =
        {
          i = "base"
        }
        hq/wl_hcwall4.wl =
        {
          i = "base"
        }
        hq/wl_hcwall5.wl =
        {
          i = "base"
        }
        hq/wl_hcwall6.wl =
        {
          i = "base"
        }
        hq/wl_hcwall7.wl =
        {
          i = "base"
        }
        hq/wl_hcwall8.wl =
        {
          i = "base"
        }
        hq/wl_hcwallend1.wl =
        {
          i = "base"
        }
        hq/wl_hcwallend2.wl =
        {
          i = "base"
        }
        hq/wl_hcwallplain.wl =
        {
          i = "base"
        }
        hq/wl_holoback.wl =
        {
          i = "base"
        }
        hq/wl_holobum.wl =
        {
          i = "base"
        }
        hq/wl_holocivfem.wl =
        {
          i = "base"
        }
        hq/wl_holocivmale.wl =
        {
          i = "base"
        }
        hq/wl_hologrunt.wl =
        {
          i = "base"
        }
        hq/wl_hologuer.wl =
        {
          i = "base"
        }
        hq/wl_holosarge.wl =
        {
          i = "base"
        }
        hq/wl_hqwood.wl =
        {
          i = "base"
        }
        hq/wl_shaft3.wl =
        {
          i = "base"
        }
        hq/wl_shaftvent.wl =
        {
          i = "base"
        }
        hq/wl_target1.wl =
        {
          i = "base"
        }
        hq/wl_target2.wl =
        {
          i = "base"
        }
        hq/wl_window1sm.wl =
        {
          i = "base"
        }

      }
      intro.txlist =
      {
        intro/candy.wl =
        {
          i = "base"
        }
        intro/fl_road1.wl =
        {
          i = "base"
        }
        intro/fl_road1a.wl =
        {
          i = "base"
        }
        intro/fl_roofgravel.wl =
        {
          i = "base"
        }
        intro/fl_roofgravel2.wl =
        {
          i = "base"
        }
        intro/prosintek.wl =
        {
          i = "base"
        }
        intro/wl_bldgbrick.wl =
        {
          i = "base"
        }
        intro/wl_bldgbrick2.wl =
        {
          i = "base"
        }
        intro/wl_bldgbrick2a.wl =
        {
          i = "base"
        }
        intro/wl_bldgbricka.wl =
        {
          i = "base"
        }
        intro/wl_building1.wl =
        {
          i = "base"
        }
        intro/wl_building1a.wl =
        {
          i = "base"
        }
        intro/wl_building2.wl =
        {
          i = "base"
        }
        intro/wl_building2a.wl =
        {
          i = "base"
        }
        intro/wl_building3.wl =
        {
          i = "base"
        }
        intro/wl_building3a.wl =
        {
          i = "base"
        }
        intro/wl_building3b.wl =
        {
          i = "base"
        }
        intro/wl_building4.wl =
        {
          i = "base"
        }
        intro/wl_building4a.wl =
        {
          i = "base"
        }
        intro/wl_building5.wl =
        {
          i = "base"
        }
        intro/wl_building5a.wl =
        {
          i = "base"
        }
        intro/wl_building9.wl =
        {
          i = "base"
        }
        intro/wl_loveewe.wl =
        {
          i = "base"
        }
        intro/wl_newbldg1.wl =
        {
          i = "base"
        }
        intro/wl_newbldg10.wl =
        {
          i = "base"
        }
        intro/wl_newbldg10_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg11.wl =
        {
          i = "base"
        }
        intro/wl_newbldg11_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg12.wl =
        {
          i = "base"
        }
        intro/wl_newbldg13.wl =
        {
          i = "base"
        }
        intro/wl_newbldg13_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg14.wl =
        {
          i = "base"
        }
        intro/wl_newbldg14_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg15.wl =
        {
          i = "base"
        }
        intro/wl_newbldg15_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg16.wl =
        {
          i = "base"
        }
        intro/wl_newbldg16_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg1_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg2.wl =
        {
          i = "base"
        }
        intro/wl_newbldg3.wl =
        {
          i = "base"
        }
        intro/wl_newbldg3_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg4.wl =
        {
          i = "base"
        }
        intro/wl_newbldg4_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg5.wl =
        {
          i = "base"
        }
        intro/wl_newbldg5_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg6.wl =
        {
          i = "base"
        }
        intro/wl_newbldg6_sml.wl =
        {
          i = "base"
        }
        intro/wl_newbldg7.wl =
        {
          i = "base"
        }
        intro/wl_newbldg8.wl =
        {
          i = "base"
        }
        intro/wl_newbldg9.wl =
        {
          i = "base"
        }
        intro/wl_newbldg9_sml.wl =
        {
          i = "base"
        }
        intro/wl_outbrick.wl =
        {
          i = "base"
        }
        intro/wl_outbrick1a.wl =
        {
          i = "base"
        }
        intro/wl_outbrick2.wl =
        {
          i = "base"
        }
        intro/wl_outbrick3.wl =
        {
          i = "base"
        }
        intro/wl_outbrick4.wl =
        {
          i = "base"
        }
        intro/wl_outbrick5.wl =
        {
          i = "base"
        }
        intro/wl_outbrick6.wl =
        {
          i = "base"
        }
        intro/wl_ritual_dm.wl =
        {
          i = "base"
        }
        intro/wl_rockwall.wl =
        {
          i = "base"
        }
        intro/wl_shit1.wl =
        {
          i = "base"
        }
        intro/wl_stone.wl =
        {
          i = "base"
        }
        intro/wl_window1.wl =
        {
          i = "base"
        }
        intro/wl_window10.wl =
        {
          i = "base"
        }
        intro/wl_window10a.wl =
        {
          i = "base"
        }
        intro/wl_window11.wl =
        {
          i = "base"
        }
        intro/wl_window11a.wl =
        {
          i = "base"
        }
        intro/wl_window12.wl =
        {
          i = "base"
        }
        intro/wl_window12a.wl =
        {
          i = "base"
        }
        intro/wl_window1a.wl =
        {
          i = "base"
        }
        intro/wl_window2.wl =
        {
          i = "base"
        }
        intro/wl_window2a.wl =
        {
          i = "base"
        }
        intro/wl_window3.wl =
        {
          i = "base"
        }
        intro/wl_window3a.wl =
        {
          i = "base"
        }
        intro/wl_window3b.wl =
        {
          i = "base"
        }
        intro/wl_window3c.wl =
        {
          i = "base"
        }
        intro/wl_window4.wl =
        {
          i = "base"
        }
        intro/wl_window4a.wl =
        {
          i = "base"
        }
        intro/wl_window5.wl =
        {
          i = "base"
        }
        intro/wl_window5a.wl =
        {
          i = "base"
        }
        intro/wl_window6.wl =
        {
          i = "base"
        }
        intro/wl_window7.wl =
        {
          i = "base"
        }
        intro/wl_window7a.wl =
        {
          i = "base"
        }
        intro/wl_window7b.wl =
        {
          i = "base"
        }
        intro/wl_window8.wl =
        {
          i = "base"
        }
        intro/wl_window9.wl =
        {
          i = "base"
        }
        intro/wl_window9a.wl =
        {
          i = "base"
        }
        intro/wl_window9b.wl =
        {
          i = "base"
        }

      }
      jungle.txlist =
      {
        jungle/fl_grass.wl =
        {
          i = "base"
        }
        jungle/fl_jungleaves.wl =
        {
          i = "base"
        }
        jungle/fl_jungleaves2.wl =
        {
          i = "base"
        }
        jungle/fl_jungrass.wl =
        {
          i = "base"
        }
        jungle/si_beta.wl =
        {
          i = "base"
        }
        jungle/si_delta.wl =
        {
          i = "base"
        }
        jungle/si_gamma.wl =
        {
          i = "base"
        }
        jungle/si_gorge.wl =
        {
          i = "base"
        }
        jungle/si_junglemap.wl =
        {
          i = "base"
        }
        jungle/si_sigma.wl =
        {
          i = "base"
        }
        jungle/sky4.wl =
        {
          i = "base"
        }
        jungle/sky4dark.wl =
        {
          i = "base"
        }
        jungle/sky4super.wl =
        {
          i = "base"
        }
        jungle/wl_bark1.wl =
        {
          i = "base"
        }
        jungle/wl_bigleaf1.wl =
        {
          i = "base"
        }
        jungle/wl_concrete.wl =
        {
          i = "base"
        }
        jungle/wl_concrete2.wl =
        {
          i = "base"
        }
        jungle/wl_fern1.wl =
        {
          i = "base"
        }
        jungle/wl_fern2.wl =
        {
          i = "base"
        }
        jungle/wl_fern3.wl =
        {
          i = "base"
        }
        jungle/wl_leaf1.wl =
        {
          i = "base"
        }
        jungle/wl_mose.wl =
        {
          i = "base"
        }
        jungle/wl_mose2.wl =
        {
          i = "base"
        }
        jungle/wl_palmbark1.wl =
        {
          i = "base"
        }
        jungle/wl_palmbark2.wl =
        {
          i = "base"
        }
        jungle/wl_rock.wl =
        {
          i = "base"
        }
        jungle/wl_rock_grass1.wl =
        {
          i = "base"
        }
        jungle/wl_rock_grass2.wl =
        {
          i = "base"
        }
        jungle/wl_rock_grass3.wl =
        {
          i = "base"
        }
        jungle/wl_rock_vine.wl =
        {
          i = "base"
        }
        jungle/wl_rock_vine2.wl =
        {
          i = "base"
        }
        jungle/wl_root1.wl =
        {
          i = "base"
        }
        jungle/wl_root2.wl =
        {
          i = "base"
        }
        jungle/wl_trees1.wl =
        {
          i = "base"
        }
        jungle/wl_trees2.wl =
        {
          i = "base"
        }
        jungle/wl_vines.wl =
        {
          i = "base"
        }
        jungle/wl_vines2.wl =
        {
          i = "base"
        }

        larger_tiles.txlist =
        {
          jungle/larger_tiles/fl_jungrass.wl =
          {
            i = "base"
          }

        }
      }
      mansion.txlist =
      {
        mansion/0wl_tvscreen1.wl =
        {
          i = "base"
        }
        mansion/1wl_tvscreen1.wl =
        {
          i = "base"
        }
        mansion/2wl_tvscreen1.wl =
        {
          i = "base"
        }
        mansion/3wl_tvscreen1.wl =
        {
          i = "base"
        }
        mansion/anne.wl =
        {
          i = "base"
        }
        mansion/arrows.wl =
        {
          i = "base"
        }
        mansion/cl_conc.wl =
        {
          i = "base"
        }
        mansion/cl_concwood.wl =
        {
          i = "base"
        }
        mansion/cp_earthscrn.wl =
        {
          i = "base"
        }
        mansion/cp_speakers.wl =
        {
          i = "base"
        }
        mansion/cp_stereo.wl =
        {
          i = "base"
        }
        mansion/cp_tv.wl =
        {
          i = "base"
        }
        mansion/cp_tv_brk.wl =
        {
          i = "base"
        }
        mansion/daughter.wl =
        {
          i = "base"
        }
        mansion/dino.wl =
        {
          i = "base"
        }
        mansion/father.wl =
        {
          i = "base"
        }
        mansion/fl_bathtiles.wl =
        {
          i = "base"
        }
        mansion/fl_blacktilepatrn.wl =
        {
          i = "base"
        }
        mansion/fl_brownbrick.wl =
        {
          i = "base"
        }
        mansion/fl_graybricks.wl =
        {
          i = "base"
        }
        mansion/fl_greencarpet1.wl =
        {
          i = "base"
        }
        mansion/fl_mag1.wl =
        {
          i = "base"
        }
        mansion/fl_mag2.wl =
        {
          i = "base"
        }
        mansion/fl_pooltableau.wl =
        {
          i = "base"
        }
        mansion/fl_pooltableau2.wl =
        {
          i = "base"
        }
        mansion/fl_redcarpet1.wl =
        {
          i = "base"
        }
        mansion/fl_redchecks.wl =
        {
          i = "base"
        }
        mansion/fl_rug1.wl =
        {
          i = "base"
        }
        mansion/fl_rug1_1.wl =
        {
          i = "base"
        }
        mansion/fl_rug2.wl =
        {
          i = "base"
        }
        mansion/fl_rug2_1.wl =
        {
          i = "base"
        }
        mansion/fl_rug3.wl =
        {
          i = "base"
        }
        mansion/fl_tilepatrn.wl =
        {
          i = "base"
        }
        mansion/fl_woodmarb.wl =
        {
          i = "base"
        }
        mansion/fl_woodplanks.wl =
        {
          i = "base"
        }
        mansion/fl_woodtile.wl =
        {
          i = "base"
        }
        mansion/fl_woodtile1.wl =
        {
          i = "base"
        }
        mansion/fl_woodtile2.wl =
        {
          i = "base"
        }
        mansion/gericau7.wl =
        {
          i = "base"
        }
        mansion/li_conclite.wl =
        {
          i = "base"
        }
        mansion/li_concwood.wl =
        {
          i = "base"
        }
        mansion/li_marbceil.wl =
        {
          i = "base"
        }
        mansion/mother.wl =
        {
          i = "base"
        }
        mansion/oink.wl =
        {
          i = "base"
        }
        mansion/oink_mag.wl =
        {
          i = "base"
        }
        mansion/painting.wl =
        {
          i = "base"
        }
        mansion/si_icon4.wl =
        {
          i = "base"
        }
        mansion/si_medcover.wl =
        {
          i = "base"
        }
        mansion/si_mutantshow.wl =
        {
          i = "base"
        }
        mansion/si_mutantshow2.wl =
        {
          i = "base"
        }
        mansion/si_slgcover.wl =
        {
          i = "base"
        }
        mansion/si_thelord.wl =
        {
          i = "base"
        }
        mansion/torso.wl =
        {
          i = "base"
        }
        mansion/tr_couchuno.wl =
        {
          i = "base"
        }
        mansion/tr_couchuno2.wl =
        {
          i = "base"
        }
        mansion/tr_darkwood.wl =
        {
          i = "base"
        }
        mansion/tr_picframe.wl =
        {
          i = "base"
        }
        mansion/tr_picframe1.wl =
        {
          i = "base"
        }
        mansion/tr_picframe2.wl =
        {
          i = "base"
        }
        mansion/tr_picframe3.wl =
        {
          i = "base"
        }
        mansion/tr_picframe4.wl =
        {
          i = "base"
        }
        mansion/tr_redpatrn.wl =
        {
          i = "base"
        }
        mansion/tr_tabletop.wl =
        {
          i = "base"
        }
        mansion/tr_woodcorner.wl =
        {
          i = "base"
        }
        mansion/tr_woodridge.wl =
        {
          i = "base"
        }
        mansion/tr_woodridge1.wl =
        {
          i = "base"
        }
        mansion/tr_woodridge2.wl =
        {
          i = "base"
        }
        mansion/warriorchic.wl =
        {
          i = "base"
        }
        mansion/wl_angel.wl =
        {
          i = "base"
        }
        mansion/wl_ballz.wl =
        {
          i = "base"
        }
        mansion/wl_ballz2.wl =
        {
          i = "base"
        }
        mansion/wl_ballz3.wl =
        {
          i = "base"
        }
        mansion/wl_ballz4.wl =
        {
          i = "base"
        }
        mansion/wl_bigbricks.wl =
        {
          i = "base"
        }
        mansion/wl_big_c.wl =
        {
          i = "base"
        }
        mansion/wl_books.wl =
        {
          i = "base"
        }
        mansion/wl_books1.wl =
        {
          i = "base"
        }
        mansion/wl_books2.wl =
        {
          i = "base"
        }
        mansion/wl_books3.wl =
        {
          i = "base"
        }
        mansion/wl_books4.wl =
        {
          i = "base"
        }
        mansion/wl_books5.wl =
        {
          i = "base"
        }
        mansion/wl_books6.wl =
        {
          i = "base"
        }
        mansion/wl_books7.wl =
        {
          i = "base"
        }
        mansion/wl_books8.wl =
        {
          i = "base"
        }
        mansion/wl_bookside.wl =
        {
          i = "base"
        }
        mansion/wl_bookstop.wl =
        {
          i = "base"
        }
        mansion/wl_csome.wl =
        {
          i = "base"
        }
        mansion/wl_darkwoodpanel.wl =
        {
          i = "base"
        }
        mansion/wl_darkwoodpanel2.wl =
        {
          i = "base"
        }
        mansion/wl_exvoto.wl =
        {
          i = "base"
        }
        mansion/wl_flameorama.wl =
        {
          i = "base"
        }
        mansion/wl_fossil1.wl =
        {
          i = "base"
        }
        mansion/wl_fossil2.wl =
        {
          i = "base"
        }
        mansion/wl_jb_door(inside).wl =
        {
          i = "base"
        }
        mansion/wl_jb_door.wl =
        {
          i = "base"
        }
        mansion/wl_latex1.wl =
        {
          i = "base"
        }
        mansion/wl_mandoor.wl =
        {
          i = "base"
        }
        mansion/wl_mansionwall1.wl =
        {
          i = "base"
        }
        mansion/wl_mansionwall2.wl =
        {
          i = "base"
        }
        mansion/wl_man_door.wl =
        {
          i = "base"
        }
        mansion/wl_nawtydrawls.wl =
        {
          i = "base"
        }
        mansion/wl_nude.wl =
        {
          i = "base"
        }
        mansion/wl_oohfah1.wl =
        {
          i = "base"
        }
        mansion/wl_oohfah2.wl =
        {
          i = "base"
        }
        mansion/wl_oohfah2b.wl =
        {
          i = "base"
        }
        mansion/wl_pantydrawl.wl =
        {
          i = "base"
        }
        mansion/wl_pantydrawl2.wl =
        {
          i = "base"
        }
        mansion/wl_pantydrawl3.wl =
        {
          i = "base"
        }
        mansion/wl_pantydrawl4.wl =
        {
          i = "base"
        }
        mansion/wl_prettyvirgin.wl =
        {
          i = "base"
        }
        mansion/wl_purplebitch.wl =
        {
          i = "base"
        }
        mansion/wl_redbitch.wl =
        {
          i = "base"
        }
        mansion/wl_redmarb.wl =
        {
          i = "base"
        }
        mansion/wl_redpaper.wl =
        {
          i = "base"
        }
        mansion/wl_redtassletrim.wl =
        {
          i = "base"
        }
        mansion/wl_redtassletrim2.wl =
        {
          i = "base"
        }
        mansion/wl_redwallpaper.wl =
        {
          i = "base"
        }
        mansion/wl_redwallpaper2.wl =
        {
          i = "base"
        }
        mansion/wl_rockwall.wl =
        {
          i = "base"
        }
        mansion/wl_sartodrawing.wl =
        {
          i = "base"
        }
        mansion/wl_seatcusion.wl =
        {
          i = "base"
        }
        mansion/wl_skelpic.wl =
        {
          i = "base"
        }
        mansion/wl_stone.wl =
        {
          i = "base"
        }
        mansion/wl_tanmarb.wl =
        {
          i = "base"
        }
        mansion/wl_tanmarb2.wl =
        {
          i = "base"
        }
        mansion/wl_whippit.wl =
        {
          i = "base"
        }
        mansion/wl_wood1.wl =
        {
          i = "base"
        }
        mansion/wl_wooddark.wl =
        {
          i = "base"
        }
        mansion/wl_woodred.wl =
        {
          i = "base"
        }
        mansion/wl_wood_door.wl =
        {
          i = "base"
        }

      }
      metalworks.txlist =
      {
        metalworks/chain.wl =
        {
          i = "base"
        }
        metalworks/console5.wl =
        {
          i = "base"
        }
        metalworks/cp_console.wl =
        {
          i = "base"
        }
        metalworks/cp_console2.wl =
        {
          i = "base"
        }
        metalworks/cp_console3.wl =
        {
          i = "base"
        }
        metalworks/cp_console4.wl =
        {
          i = "base"
        }
        metalworks/cp_console6.wl =
        {
          i = "base"
        }
        metalworks/cp_hand_id.wl =
        {
          i = "base"
        }
        metalworks/cp_mwloading1.wl =
        {
          i = "base"
        }
        metalworks/cp_mwloading2.wl =
        {
          i = "base"
        }
        metalworks/cp_mwloading3.wl =
        {
          i = "base"
        }
        metalworks/cp_mwloading4.wl =
        {
          i = "base"
        }
        metalworks/doortrim1.wl =
        {
          i = "base"
        }
        metalworks/dualrail1.wl =
        {
          i = "base"
        }
        metalworks/fl_mwfoor4.wl =
        {
          i = "base"
        }
        metalworks/fl_mwfoor5.wl =
        {
          i = "base"
        }
        metalworks/fl_stair_side.wl =
        {
          i = "base"
        }
        metalworks/fl_stair_top.wl =
        {
          i = "base"
        }
        metalworks/hook.wl =
        {
          i = "base"
        }
        metalworks/lightspec.wl =
        {
          i = "base"
        }
        metalworks/li_blue.wl =
        {
          i = "base"
        }
        metalworks/li_ltblue.wl =
        {
          i = "base"
        }
        metalworks/li_ltorange.wl =
        {
          i = "base"
        }
        metalworks/li_met2.wl =
        {
          i = "base"
        }
        metalworks/li_yellow(new1).wl =
        {
          i = "base"
        }
        metalworks/li_yellow(new2).wl =
        {
          i = "base"
        }
        metalworks/li_yellow(new3).wl =
        {
          i = "base"
        }
        metalworks/li_yellow.wl =
        {
          i = "base"
        }
        metalworks/railbutt3.wl =
        {
          i = "base"
        }
        metalworks/railbutt4.wl =
        {
          i = "base"
        }
        metalworks/railend.wl =
        {
          i = "base"
        }
        metalworks/siderails.wl =
        {
          i = "base"
        }
        metalworks/si_authorized.wl =
        {
          i = "base"
        }
        metalworks/si_coal.wl =
        {
          i = "base"
        }
        metalworks/si_coke.wl =
        {
          i = "base"
        }
        metalworks/si_cooling.wl =
        {
          i = "base"
        }
        metalworks/si_furcontrol.wl =
        {
          i = "base"
        }
        metalworks/si_furnace1.wl =
        {
          i = "base"
        }
        metalworks/si_furnace2.wl =
        {
          i = "base"
        }
        metalworks/si_heater1.wl =
        {
          i = "base"
        }
        metalworks/si_heater2.wl =
        {
          i = "base"
        }
        metalworks/si_highvolt.wl =
        {
          i = "base"
        }
        metalworks/si_industrial.wl =
        {
          i = "base"
        }
        metalworks/si_intake.wl =
        {
          i = "base"
        }
        metalworks/si_iron.wl =
        {
          i = "base"
        }
        metalworks/si_iron2.wl =
        {
          i = "base"
        }
        metalworks/si_lime.wl =
        {
          i = "base"
        }
        metalworks/si_mwcaution.wl =
        {
          i = "base"
        }
        metalworks/si_mwsintek.wl =
        {
          i = "base"
        }
        metalworks/si_oxygen.wl =
        {
          i = "base"
        }
        metalworks/si_pipe_exhaust.wl =
        {
          i = "base"
        }
        metalworks/si_pipe_oxygen.wl =
        {
          i = "base"
        }
        metalworks/si_restricted.wl =
        {
          i = "base"
        }
        metalworks/si_scrap.wl =
        {
          i = "base"
        }
        metalworks/si_slag.wl =
        {
          i = "base"
        }
        metalworks/tr_convey_belt2.wl =
        {
          i = "base"
        }
        metalworks/tr_mcleanpipe.wl =
        {
          i = "base"
        }
        metalworks/tr_mcleanpipe2.wl =
        {
          i = "base"
        }
        metalworks/tr_mrustypipe2a.wl =
        {
          i = "base"
        }
        metalworks/tr_mrustypipea.wl =
        {
          i = "base"
        }
        metalworks/tr_mwpipeblue.wl =
        {
          i = "base"
        }
        metalworks/tr_mwpipegold.wl =
        {
          i = "base"
        }
        metalworks/tr_mwpipehaz.wl =
        {
          i = "base"
        }
        metalworks/wl_arches_small.wl =
        {
          i = "base"
        }
        metalworks/wl_breakarea.wl =
        {
          i = "base"
        }
        metalworks/wl_breakarea2.wl =
        {
          i = "base"
        }
        metalworks/wl_hotshit3.wl =
        {
          i = "base"
        }
        metalworks/wl_mmachine1.wl =
        {
          i = "base"
        }
        metalworks/wl_mmachine2.wl =
        {
          i = "base"
        }
        metalworks/wl_mmachinetrim1.wl =
        {
          i = "base"
        }
        metalworks/wl_mmachinetrim2.wl =
        {
          i = "base"
        }
        metalworks/wl_mrailing.wl =
        {
          i = "base"
        }
        metalworks/wl_msinlogo.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall(red).wl =
        {
          i = "base"
        }
        metalworks/wl_mwall10.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall11.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall12.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall13.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall13trim.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall14.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall15.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall16.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall17.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall18.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall18trim.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall19.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall20.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall21.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall22.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall23.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall24.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall25.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall26.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall3.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall4.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall5.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall6.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall7.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall7a.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall7trim.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall8.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall8trim.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall9.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall9a.wl =
        {
          i = "base"
        }
        metalworks/wl_mwall9trim.wl =
        {
          i = "base"
        }
        metalworks/wl_mwdoor.wl =
        {
          i = "base"
        }
        metalworks/wl_mwdoor1.wl =
        {
          i = "base"
        }
        metalworks/wl_mwdoor2.wl =
        {
          i = "base"
        }
        metalworks/wl_mwdoor3.wl =
        {
          i = "base"
        }
        metalworks/wl_mwdoor4.wl =
        {
          i = "base"
        }
        metalworks/wl_mwdoor5.wl =
        {
          i = "base"
        }
        metalworks/wl_mwdoor6.wl =
        {
          i = "base"
        }
        metalworks/wl_mwdoor7.wl =
        {
          i = "base"
        }
        metalworks/_moltenm.wl =
        {
          i = "base"
        }
        metalworks/_moltenm2.wl =
        {
          i = "base"
        }

      }
      oilrig.txlist =
      {
        oilrig/0map_secretplan.wl =
        {
          i = "base"
        }
        oilrig/1map_secretplan.wl =
        {
          i = "base"
        }
        oilrig/books.wl =
        {
          i = "base"
        }
        oilrig/cabnet.wl =
        {
          i = "base"
        }
        oilrig/com.wl =
        {
          i = "base"
        }
        oilrig/cp_monitor2_brk.wl =
        {
          i = "base"
        }
        oilrig/cp_monitor3_brk.wl =
        {
          i = "base"
        }
        oilrig/cp_monitor_brk.wl =
        {
          i = "base"
        }
        oilrig/cp_yellow1.wl =
        {
          i = "base"
        }
        oilrig/cp_yellow1_brk.wl =
        {
          i = "base"
        }
        oilrig/cp_yellowsml1.wl =
        {
          i = "base"
        }
        oilrig/cp_yellowsml2.wl =
        {
          i = "base"
        }
        oilrig/cp_yellside.wl =
        {
          i = "base"
        }
        oilrig/floorgrid.wl =
        {
          i = "base"
        }
        oilrig/fl_oilrig(logo).wl =
        {
          i = "base"
        }
        oilrig/li_lamp_white.wl =
        {
          i = "base"
        }
        oilrig/li_outdoor_spot.wl =
        {
          i = "base"
        }
        oilrig/li_outdoor_spot2.wl =
        {
          i = "base"
        }
        oilrig/li_outdoor_spot3.wl =
        {
          i = "base"
        }
        oilrig/li_outdoor_spot4.wl =
        {
          i = "base"
        }
        oilrig/li_outdoor_spot_brk.wl =
        {
          i = "base"
        }
        oilrig/monitor.wl =
        {
          i = "base"
        }
        oilrig/monitor2.wl =
        {
          i = "base"
        }
        oilrig/monitor3.wl =
        {
          i = "base"
        }
        oilrig/monitor4_1.wl =
        {
          i = "base"
        }
        oilrig/monitor4_2.wl =
        {
          i = "base"
        }
        oilrig/monitor4_3.wl =
        {
          i = "base"
        }
        oilrig/monitor4_4.wl =
        {
          i = "base"
        }
        oilrig/monitor5_1.wl =
        {
          i = "base"
        }
        oilrig/monitor5_2.wl =
        {
          i = "base"
        }
        oilrig/monitor5_3.wl =
        {
          i = "base"
        }
        oilrig/ovendoor.wl =
        {
          i = "base"
        }
        oilrig/ovenguages.wl =
        {
          i = "base"
        }
        oilrig/ovenvent.wl =
        {
          i = "base"
        }
        oilrig/owater0.wl =
        {
          i = "base"
        }
        oilrig/owater1.wl =
        {
          i = "base"
        }
        oilrig/owater10.wl =
        {
          i = "base"
        }
        oilrig/owater11.wl =
        {
          i = "base"
        }
        oilrig/owater12.wl =
        {
          i = "base"
        }
        oilrig/owater13.wl =
        {
          i = "base"
        }
        oilrig/owater14.wl =
        {
          i = "base"
        }
        oilrig/owater15.wl =
        {
          i = "base"
        }
        oilrig/owater2.wl =
        {
          i = "base"
        }
        oilrig/owater3.wl =
        {
          i = "base"
        }
        oilrig/owater4.wl =
        {
          i = "base"
        }
        oilrig/owater5.wl =
        {
          i = "base"
        }
        oilrig/owater6.wl =
        {
          i = "base"
        }
        oilrig/owater7.wl =
        {
          i = "base"
        }
        oilrig/owater8.wl =
        {
          i = "base"
        }
        oilrig/owater9.wl =
        {
          i = "base"
        }
        oilrig/plate.wl =
        {
          i = "base"
        }
        oilrig/si_bboard_oil.wl =
        {
          i = "base"
        }
        oilrig/stove.wl =
        {
          i = "base"
        }
        oilrig/stovetop.wl =
        {
          i = "base"
        }
        oilrig/tr_bunk(top).wl =
        {
          i = "base"
        }
        oilrig/tr_bunk(under).wl =
        {
          i = "base"
        }
        oilrig/tr_drinking_cup_blu.wl =
        {
          i = "base"
        }
        oilrig/tr_drinking_cup_clear.wl =
        {
          i = "base"
        }
        oilrig/tr_drinking_cup_grn.wl =
        {
          i = "base"
        }
        oilrig/tr_oldmetal.wl =
        {
          i = "base"
        }
        oilrig/tr_oven_metal.wl =
        {
          i = "base"
        }
        oilrig/tr_pipes.wl =
        {
          i = "base"
        }
        oilrig/tr_pipes2.wl =
        {
          i = "base"
        }
        oilrig/tr_redmetal.wl =
        {
          i = "base"
        }
        oilrig/tr_rustmetal.wl =
        {
          i = "base"
        }
        oilrig/tr_tower.wl =
        {
          i = "base"
        }
        oilrig/tr_yellowventa.wl =
        {
          i = "base"
        }
        oilrig/wa_darkocean.wl =
        {
          i = "base"
        }
        oilrig/wa_darkocean2.wl =
        {
          i = "base"
        }
        oilrig/wa_darkocean3.wl =
        {
          i = "base"
        }
        oilrig/wa_dark_watery.wl =
        {
          i = "base"
        }
        oilrig/wa_oceanwater.wl =
        {
          i = "base"
        }
        oilrig/wa_oceanwater2.wl =
        {
          i = "base"
        }
        oilrig/wa_oil.wl =
        {
          i = "base"
        }
        oilrig/wl_cabnet2.wl =
        {
          i = "base"
        }
        oilrig/wl_furnace(oil).wl =
        {
          i = "base"
        }
        oilrig/wl_furnace(oil)2.wl =
        {
          i = "base"
        }
        oilrig/wl_insidelev_oil.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil1.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil10.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil11.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil12.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil2.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil3.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil4.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil5.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil6.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil7.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil8.wl =
        {
          i = "base"
        }
        oilrig/wl_mach_oil9.wl =
        {
          i = "base"
        }
        oilrig/wl_map_secretplan.wl =
        {
          i = "base"
        }
        oilrig/wl_map_secretplan_brk.wl =
        {
          i = "base"
        }
        oilrig/wl_metal29.wl =
        {
          i = "base"
        }
        oilrig/wl_metal31.wl =
        {
          i = "base"
        }
        oilrig/wl_metal36.wl =
        {
          i = "base"
        }
        oilrig/wl_metal37.wl =
        {
          i = "base"
        }
        oilrig/wl_metal38.wl =
        {
          i = "base"
        }
        oilrig/wl_metal39.wl =
        {
          i = "base"
        }
        oilrig/wl_metal40.wl =
        {
          i = "base"
        }
        oilrig/wl_metal40a.wl =
        {
          i = "base"
        }
        oilrig/wl_metal40b.wl =
        {
          i = "base"
        }
        oilrig/wl_metal40c.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41a.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41b.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41c.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41d.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41e.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41f.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41g.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41h.wl =
        {
          i = "base"
        }
        oilrig/wl_metal41i.wl =
        {
          i = "base"
        }
        oilrig/wl_metal44.wl =
        {
          i = "base"
        }
        oilrig/wl_metal45.wl =
        {
          i = "base"
        }
        oilrig/wl_oilrig(door).wl =
        {
          i = "base"
        }
        oilrig/wl_oilrig(door)00.wl =
        {
          i = "base"
        }
        oilrig/wl_oilrig(door)01.wl =
        {
          i = "base"
        }
        oilrig/wl_oilrig(door)02.wl =
        {
          i = "base"
        }
        oilrig/wl_oilrig(door)2.wl =
        {
          i = "base"
        }
        oilrig/wl_oil_ele(door1).wl =
        {
          i = "base"
        }
        oilrig/wl_oil_ele(door2).wl =
        {
          i = "base"
        }
        oilrig/wl_yellowbeat.wl =
        {
          i = "base"
        }
        oilrig/wl_yellowpipes.wl =
        {
          i = "base"
        }
        oilrig/wl_yellowtek.wl =
        {
          i = "base"
        }
        oilrig/wl_yellowtek2.wl =
        {
          i = "base"
        }

      }
      phoenix.txlist =
      {
        phoenix/0final.wl =
        {
          i = "base"
        }
        phoenix/1final.wl =
        {
          i = "base"
        }
        phoenix/2final.wl =
        {
          i = "base"
        }
        phoenix/cl_muntceil1.wl =
        {
          i = "base"
        }
        phoenix/cl_muntceil2.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix1.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix2.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix3.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix4.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix5.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix6.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix7.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix8.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix9.wl =
        {
          i = "base"
        }
        phoenix/cp_phoenix_broken.wl =
        {
          i = "base"
        }
        phoenix/fl_muntfloor1.wl =
        {
          i = "base"
        }
        phoenix/fl_muntfloor2.wl =
        {
          i = "base"
        }
        phoenix/fl_muntfloor3.wl =
        {
          i = "base"
        }
        phoenix/fl_muntfloor4.wl =
        {
          i = "base"
        }
        phoenix/fl_muntfloor5.wl =
        {
          i = "base"
        }
        phoenix/fl_muntfloor6.wl =
        {
          i = "base"
        }
        phoenix/fl_muntfloor7.wl =
        {
          i = "base"
        }
        phoenix/fl_muntfloor8.wl =
        {
          i = "base"
        }
        phoenix/fl_muntflr1.wl =
        {
          i = "base"
        }
        phoenix/fl_muntflr2.wl =
        {
          i = "base"
        }
        phoenix/fl_muntflr3.wl =
        {
          i = "base"
        }
        phoenix/fl_pdesign1.wl =
        {
          i = "base"
        }
        phoenix/fl_pdesign2.wl =
        {
          i = "base"
        }
        phoenix/li_bluestrip.wl =
        {
          i = "base"
        }
        phoenix/li_redmuntlight.wl =
        {
          i = "base"
        }
        phoenix/li_redmuntlight2.wl =
        {
          i = "base"
        }
        phoenix/li_redmuntlight3.wl =
        {
          i = "base"
        }
        phoenix/siding3.wl =
        {
          i = "base"
        }
        phoenix/si_bal.wl =
        {
          i = "base"
        }
        phoenix/si_confer.wl =
        {
          i = "base"
        }
        phoenix/si_cont.wl =
        {
          i = "base"
        }
        phoenix/si_mach.wl =
        {
          i = "base"
        }
        phoenix/si_main.wl =
        {
          i = "base"
        }
        phoenix/si_obsev.wl =
        {
          i = "base"
        }
        phoenix/si_planearium_small.wl =
        {
          i = "base"
        }
        phoenix/si_teles.wl =
        {
          i = "base"
        }
        phoenix/tr_diatrim.wl =
        {
          i = "base"
        }
        phoenix/tr_diatrim2.wl =
        {
          i = "base"
        }
        phoenix/tr_diatrim3.wl =
        {
          i = "base"
        }
        phoenix/tr_diatrim4.wl =
        {
          i = "base"
        }
        phoenix/tr_mpipes.wl =
        {
          i = "base"
        }
        phoenix/tr_munttrim1.wl =
        {
          i = "base"
        }
        phoenix/tr_munttrim2.wl =
        {
          i = "base"
        }
        phoenix/tr_munttrim3.wl =
        {
          i = "base"
        }
        phoenix/tr_munttrim4.wl =
        {
          i = "base"
        }
        phoenix/tr_pgpanel1.wl =
        {
          i = "base"
        }
        phoenix/tr_pgpanel2.wl =
        {
          i = "base"
        }
        phoenix/tr_pgtrim1.wl =
        {
          i = "base"
        }
        phoenix/tr_pgtrim2.wl =
        {
          i = "base"
        }
        phoenix/tr_phconc1.wl =
        {
          i = "base"
        }
        phoenix/tr_phconc2.wl =
        {
          i = "base"
        }
        phoenix/tr_phconc3.wl =
        {
          i = "base"
        }
        phoenix/tr_phconc4.wl =
        {
          i = "base"
        }
        phoenix/tr_phconc5.wl =
        {
          i = "base"
        }
        phoenix/tr_phyellow.wl =
        {
          i = "base"
        }
        phoenix/tr_screenempty.wl =
        {
          i = "base"
        }
        phoenix/tr_siding1.wl =
        {
          i = "base"
        }
        phoenix/tr_siding2.wl =
        {
          i = "base"
        }
        phoenix/wl_muntplain.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall1.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall2.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall3.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall4.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall5.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall6.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall7.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall7a.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall8.wl =
        {
          i = "base"
        }
        phoenix/wl_muntwall9.wl =
        {
          i = "base"
        }
        phoenix/wl_obvdoor.wl =
        {
          i = "base"
        }
        phoenix/wl_obvdoor2.wl =
        {
          i = "base"
        }
        phoenix/wl_pgpanel1.wl =
        {
          i = "base"
        }
        phoenix/wl_pgpanel2.wl =
        {
          i = "base"
        }
        phoenix/wl_pgpanel3.wl =
        {
          i = "base"
        }
        phoenix/wl_phconc1.wl =
        {
          i = "base"
        }
        phoenix/wl_phconc2.wl =
        {
          i = "base"
        }
        phoenix/wl_phconc3.wl =
        {
          i = "base"
        }
        phoenix/wl_phconc4.wl =
        {
          i = "base"
        }
        phoenix/wl_phconc5.wl =
        {
          i = "base"
        }
        phoenix/wl_tempdoor.wl =
        {
          i = "base"
        }

      }
      powerstation.txlist =
      {
        powerstation/wl_power1.wl =
        {
          i = "base"
        }
        powerstation/wl_power10.wl =
        {
          i = "base"
        }
        powerstation/wl_power11.wl =
        {
          i = "base"
        }
        powerstation/wl_power12.wl =
        {
          i = "base"
        }
        powerstation/wl_power2.wl =
        {
          i = "base"
        }
        powerstation/wl_power3.wl =
        {
          i = "base"
        }
        powerstation/wl_power4.wl =
        {
          i = "base"
        }
        powerstation/wl_power5.wl =
        {
          i = "base"
        }
        powerstation/wl_power6.wl =
        {
          i = "base"
        }
        powerstation/wl_power7.wl =
        {
          i = "base"
        }
        powerstation/wl_power8.wl =
        {
          i = "base"
        }
        powerstation/wl_power9.wl =
        {
          i = "base"
        }
        powerstation/wl_powertom.wl =
        {
          i = "base"
        }

      }
      sewer.txlist =
      {
        sewer/tr_rustymetal(stairs).wl =
        {
          i = "base"
        }
        sewer/tr_rustymetal(stairs)2.wl =
        {
          i = "base"
        }
        sewer/tr_rustymetal(stairs)3.wl =
        {
          i = "base"
        }
        sewer/tr_rustymetal(stairs)4.wl =
        {
          i = "base"
        }
        sewer/tr_rustymetal(stairs)5.wl =
        {
          i = "base"
        }
        sewer/tr_rustymetal(stairs)6.wl =
        {
          i = "base"
        }
        sewer/wl_graymetal.wl =
        {
          i = "base"
        }
        sewer/wl_graymetal2.wl =
        {
          i = "base"
        }
        sewer/wl_rustymetal.wl =
        {
          i = "base"
        }
        sewer/wl_rustymetal17.wl =
        {
          i = "base"
        }
        sewer/wl_rustymetal2.wl =
        {
          i = "base"
        }
        sewer/wl_rustymetal3.wl =
        {
          i = "base"
        }
        sewer/wl_rustymetal4.wl =
        {
          i = "base"
        }
        sewer/wl_rustymetal7.wl =
        {
          i = "base"
        }
        sewer/wl_rustymetal8.wl =
        {
          i = "base"
        }

      }
      silo.txlist =
      {
        silo/cp_hand_id_red.wl =
        {
          i = "base"
        }
        silo/fl_army1.wl =
        {
          i = "base"
        }
        silo/fl_army2.wl =
        {
          i = "base"
        }
        silo/fl_army3.wl =
        {
          i = "base"
        }
        silo/fl_army4.wl =
        {
          i = "base"
        }
        silo/fl_helopad.wl =
        {
          i = "base"
        }
        silo/fl_sand.wl =
        {
          i = "base"
        }
        silo/fl_sand2.wl =
        {
          i = "base"
        }
        silo/fl_sand3.wl =
        {
          i = "base"
        }
        silo/misc_gas.wl =
        {
          i = "base"
        }
        silo/si_access.wl =
        {
          i = "base"
        }
        silo/si_arrow.wl =
        {
          i = "base"
        }
        silo/si_bboard_silo.wl =
        {
          i = "base"
        }
        silo/si_blackassa.wl =
        {
          i = "base"
        }
        silo/si_fallout.wl =
        {
          i = "base"
        }
        silo/si_federal.wl =
        {
          i = "base"
        }
        silo/si_flooded.wl =
        {
          i = "base"
        }
        silo/si_floodedarea.wl =
        {
          i = "base"
        }
        silo/si_launchbay.wl =
        {
          i = "base"
        }
        silo/si_launchsilo.wl =
        {
          i = "base"
        }
        silo/si_nuke1.wl =
        {
          i = "base"
        }
        silo/si_nuke2.wl =
        {
          i = "base"
        }
        silo/si_powerstation.wl =
        {
          i = "base"
        }
        silo/si_silo1.wl =
        {
          i = "base"
        }
        silo/si_silo1_b.wl =
        {
          i = "base"
        }
        silo/si_silo2.wl =
        {
          i = "base"
        }
        silo/si_silo2_b.wl =
        {
          i = "base"
        }
        silo/si_silo3.wl =
        {
          i = "base"
        }
        silo/si_silo3_b.wl =
        {
          i = "base"
        }
        silo/si_silobook.wl =
        {
          i = "base"
        }
        silo/si_warningtss.wl =
        {
          i = "base"
        }
        silo/tr_bunk(top)2.wl =
        {
          i = "base"
        }
        silo/tr_green1.wl =
        {
          i = "base"
        }
        silo/tr_limegreen.wl =
        {
          i = "base"
        }
        silo/wl_armydoor.wl =
        {
          i = "base"
        }
        silo/wl_elevfloor.wl =
        {
          i = "base"
        }
        silo/wl_elevinside.wl =
        {
          i = "base"
        }
        silo/wl_green1.wl =
        {
          i = "base"
        }
        silo/wl_green10.wl =
        {
          i = "base"
        }
        silo/wl_green11.wl =
        {
          i = "base"
        }
        silo/wl_green12.wl =
        {
          i = "base"
        }
        silo/wl_green13.wl =
        {
          i = "base"
        }
        silo/wl_green14.wl =
        {
          i = "base"
        }
        silo/wl_green15.wl =
        {
          i = "base"
        }
        silo/wl_green16.wl =
        {
          i = "base"
        }
        silo/wl_green17.wl =
        {
          i = "base"
        }
        silo/wl_green2.wl =
        {
          i = "base"
        }
        silo/wl_green3.wl =
        {
          i = "base"
        }
        silo/wl_green4.wl =
        {
          i = "base"
        }
        silo/wl_green5.wl =
        {
          i = "base"
        }
        silo/wl_green6.wl =
        {
          i = "base"
        }
        silo/wl_green7.wl =
        {
          i = "base"
        }
        silo/wl_green8.wl =
        {
          i = "base"
        }
        silo/wl_green9(not_finished).wl =
        {
          i = "base"
        }
        silo/wl_green9.wl =
        {
          i = "base"
        }
        silo/wl_limegreen1.wl =
        {
          i = "base"
        }
        silo/wl_limegreen1a.wl =
        {
          i = "base"
        }
        silo/wl_limegreen2.wl =
        {
          i = "base"
        }
        silo/wl_limegreen3.wl =
        {
          i = "base"
        }
        silo/wl_limegreen4.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo1.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo10.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo11.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo12.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo13.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo14.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo15.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo16.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo17.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo18.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo19.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo2.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo20.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo21.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo22.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo23.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo24.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo3(brk).wl =
        {
          i = "base"
        }
        silo/wl_mach_silo3.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo4.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo5.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo6.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo7.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo8.wl =
        {
          i = "base"
        }
        silo/wl_mach_silo9.wl =
        {
          i = "base"
        }
        silo/wl_pipes(trim).wl =
        {
          i = "base"
        }
        silo/wl_pipes2(trim).wl =
        {
          i = "base"
        }
        silo/wl_rockblack1.wl =
        {
          i = "base"
        }
        silo/wl_rockblack2.wl =
        {
          i = "base"
        }
        silo/wl_rockbottom1.wl =
        {
          i = "base"
        }
        silo/wl_rockbottom2.wl =
        {
          i = "base"
        }
        silo/wl_rockmid1.wl =
        {
          i = "base"
        }
        silo/wl_rockmid2.wl =
        {
          i = "base"
        }
        silo/wl_rockmid3.wl =
        {
          i = "base"
        }
        silo/wl_rocktop1.wl =
        {
          i = "base"
        }
        silo/wl_rocktop2.wl =
        {
          i = "base"
        }
        silo/wl_rocktopred.wl =
        {
          i = "base"
        }
        silo/wl_rockwhite1.wl =
        {
          i = "base"
        }
        silo/wl_rockwhite2.wl =
        {
          i = "base"
        }
        silo/wl_rockwhite3.wl =
        {
          i = "base"
        }
        silo/wl_rockwhite4.wl =
        {
          i = "base"
        }
        silo/wl_rockwhite5.wl =
        {
          i = "base"
        }
        silo/wl_rockwhite6.wl =
        {
          i = "base"
        }
        silo/wl_silo1.wl =
        {
          i = "base"
        }
        silo/wl_silo10(trim).wl =
        {
          i = "base"
        }
        silo/wl_silo11.wl =
        {
          i = "base"
        }
        silo/wl_silo12(trim).wl =
        {
          i = "base"
        }
        silo/wl_silo13.wl =
        {
          i = "base"
        }
        silo/wl_silo2.wl =
        {
          i = "base"
        }
        silo/wl_silo3.wl =
        {
          i = "base"
        }
        silo/wl_silo4.wl =
        {
          i = "base"
        }
        silo/wl_silo5(trim).wl =
        {
          i = "base"
        }
        silo/wl_silo6(trim).wl =
        {
          i = "base"
        }
        silo/wl_silo7.wl =
        {
          i = "base"
        }
        silo/wl_silo8.wl =
        {
          i = "base"
        }
        silo/wl_silo9.wl =
        {
          i = "base"
        }
        silo/wl_silo_door.wl =
        {
          i = "base"
        }
        silo/wl_silo_elevdoor.wl =
        {
          i = "base"
        }
        silo/wl_silo_elevdoor2.wl =
        {
          i = "base"
        }
        silo/wl_silo_elevinside.wl =
        {
          i = "base"
        }
        silo/wl_tank.wl =
        {
          i = "base"
        }

      }
      sporn.txlist =
      {
        sporn/si_blackassa.wl =
        {
          i = "base"
        }

      }
      subway.txlist =
      {
        subway/0li_trainwarn.wl =
        {
          i = "base"
        }
        subway/1li_trainwarn.wl =
        {
          i = "base"
        }
        subway/cl_swctile1.wl =
        {
          i = "base"
        }
        subway/cl_swctile2.wl =
        {
          i = "base"
        }
        subway/firergb.wl =
        {
          i = "base"
        }
        subway/fl_escal.wl =
        {
          i = "base"
        }
        subway/fl_escalunder.wl =
        {
          i = "base"
        }
        subway/fl_rufflr1.wl =
        {
          i = "base"
        }
        subway/fl_ruftile1.wl =
        {
          i = "base"
        }
        subway/fl_ruftile2.wl =
        {
          i = "base"
        }
        subway/fl_ruftileblood.wl =
        {
          i = "base"
        }
        subway/fl_ruftiledrty1.wl =
        {
          i = "base"
        }
        subway/fl_ruftiledrty2.wl =
        {
          i = "base"
        }
        subway/fl_ruftilered1.wl =
        {
          i = "base"
        }
        subway/fl_ruftilered2.wl =
        {
          i = "base"
        }
        subway/fl_ruftiletrash1.wl =
        {
          i = "base"
        }
        subway/fl_ruftiletrash2.wl =
        {
          i = "base"
        }
        subway/fl_ruftiletrash3.wl =
        {
          i = "base"
        }
        subway/fl_subwfloor.wl =
        {
          i = "base"
        }
        subway/fl_trash1.wl =
        {
          i = "base"
        }
        subway/fl_trash2.wl =
        {
          i = "base"
        }
        subway/fl_trash3.wl =
        {
          i = "base"
        }
        subway/si_doc-sin.wl =
        {
          i = "base"
        }
        subway/si_mensroom.wl =
        {
          i = "base"
        }
        subway/si_sinchick.wl =
        {
          i = "base"
        }
        subway/si_subsign1.wl =
        {
          i = "base"
        }
        subway/si_subsign2.wl =
        {
          i = "base"
        }
        subway/si_subsignarrow.wl =
        {
          i = "base"
        }
        subway/si_subway.wl =
        {
          i = "base"
        }
        subway/si_swnoentry.wl =
        {
          i = "base"
        }
        subway/si_wash-dc.wl =
        {
          i = "base"
        }
        subway/si_wash-dc_brk.wl =
        {
          i = "base"
        }
        subway/si_womsroom.wl =
        {
          i = "base"
        }
        subway/tr_plainblue.wl =
        {
          i = "base"
        }
        subway/tr_subseat1.wl =
        {
          i = "base"
        }
        subway/tr_subseat2.wl =
        {
          i = "base"
        }
        subway/tr_subseat3.wl =
        {
          i = "base"
        }
        subway/tr_substep.wl =
        {
          i = "base"
        }
        subway/tr_swwarn1.wl =
        {
          i = "base"
        }
        subway/tr_swwarn2.wl =
        {
          i = "base"
        }
        subway/tr_trainvent.wl =
        {
          i = "base"
        }
        subway/wa_subdingy.wl =
        {
          i = "base"
        }
        subway/wl_bluecrap.wl =
        {
          i = "base"
        }
        subway/wl_subad1.wl =
        {
          i = "base"
        }
        subway/wl_subcar1.wl =
        {
          i = "base"
        }
        subway/wl_subcar2.wl =
        {
          i = "base"
        }
        subway/wl_subcar3.wl =
        {
          i = "base"
        }
        subway/wl_subcarinside.wl =
        {
          i = "base"
        }
        subway/wl_subdoor1.wl =
        {
          i = "base"
        }
        subway/wl_swconc1.wl =
        {
          i = "base"
        }
        subway/wl_swconc2.wl =
        {
          i = "base"
        }
        subway/wl_swconc3.wl =
        {
          i = "base"
        }
        subway/wl_swconc3_2.wl =
        {
          i = "base"
        }
        subway/wl_swconc4.wl =
        {
          i = "base"
        }
        subway/wl_swconc4_2.wl =
        {
          i = "base"
        }
        subway/wl_swconc5.wl =
        {
          i = "base"
        }
        subway/wl_swpipes.wl =
        {
          i = "base"
        }
        subway/wl_swwall1.wl =
        {
          i = "base"
        }
        subway/wl_swwall2.wl =
        {
          i = "base"
        }
        subway/wl_swwall3.wl =
        {
          i = "base"
        }
        subway/wl_swwallu4.wl =
        {
          i = "base"
        }
        subway/wl_swwallvolt.wl =
        {
          i = "base"
        }
        subway/wl_vanityad.wl =
        {
          i = "base"
        }

      }
      thrall.txlist =
      {
        thrall/cl_feedceil.wl =
        {
          i = "base"
        }
        thrall/fl_feedfloor.wl =
        {
          i = "base"
        }
        thrall/fl_pitfloor.wl =
        {
          i = "base"
        }
        thrall/tr_tbtrim.wl =
        {
          i = "base"
        }
        thrall/wl_feedwall.wl =
        {
          i = "base"
        }
        thrall/wl_feedwall2.wl =
        {
          i = "base"
        }
        thrall/wl_pitwall.wl =
        {
          i = "base"
        }
        thrall/wl_pitwallblood.wl =
        {
          i = "base"
        }
        thrall/wl_tbtrim1.wl =
        {
          i = "base"
        }
        thrall/wl_tbwall1.wl =
        {
          i = "base"
        }
        thrall/wl_tbwall1_2.wl =
        {
          i = "base"
        }
        thrall/wl_tbwall2.wl =
        {
          i = "base"
        }
        thrall/wl_tbwall3.wl =
        {
          i = "base"
        }
        thrall/wl_tbwall4.wl =
        {
          i = "base"
        }
        thrall/wl_tbwall5.wl =
        {
          i = "base"
        }
        thrall/wl_tbwall6.wl =
        {
          i = "base"
        }
        thrall/wl_tbwood.wl =
        {
          i = "base"
        }

      }
      warehouse.txlist =
      {
        warehouse/br_crate1.wl =
        {
          i = "base"
        }
        warehouse/br_crate1top.wl =
        {
          i = "base"
        }
        warehouse/br_crate2a.wl =
        {
          i = "base"
        }
        warehouse/br_crate2side.wl =
        {
          i = "base"
        }
        warehouse/br_crate2side2.wl =
        {
          i = "base"
        }
        warehouse/br_crate2top.wl =
        {
          i = "base"
        }
        warehouse/br_crate3a.wl =
        {
          i = "base"
        }
        warehouse/br_crate3b.wl =
        {
          i = "base"
        }
        warehouse/br_crate_largemetal.wl =
        {
          i = "base"
        }
        warehouse/br_crate_largemetal2.wl =
        {
          i = "base"
        }
        warehouse/br_crate_lc.wl =
        {
          i = "base"
        }
        warehouse/br_crate_u4.wl =
        {
          i = "base"
        }
        warehouse/br_crate_vc.wl =
        {
          i = "base"
        }
        warehouse/bt_metaldoors.wl =
        {
          i = "base"
        }
        warehouse/cp_netlink.wl =
        {
          i = "base"
        }
        warehouse/cp_wh.wl =
        {
          i = "base"
        }
        warehouse/cp_whside.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(arrow).wl =
        {
          i = "base"
        }
        warehouse/fl_wh(arrow)2.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(arrow)3.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(arrow)4.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(arrow)5.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(arrow)6.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(arrow)7.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(gate).wl =
        {
          i = "base"
        }
        warehouse/fl_wh(gate)a.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(gate)b.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(gate)c.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(gate)d.wl =
        {
          i = "base"
        }
        warehouse/fl_wh(gate)e.wl =
        {
          i = "base"
        }
        warehouse/fl_wh1.wl =
        {
          i = "base"
        }
        warehouse/fl_wh2.wl =
        {
          i = "base"
        }
        warehouse/fl_wh3.wl =
        {
          i = "base"
        }
        warehouse/fl_wh4.wl =
        {
          i = "base"
        }
        warehouse/fl_wh5.wl =
        {
          i = "base"
        }
        warehouse/fl_wh6.wl =
        {
          i = "base"
        }
        warehouse/fl_wh7(logo).wl =
        {
          i = "base"
        }
        warehouse/fl_wh7(logo)2.wl =
        {
          i = "base"
        }
        warehouse/fl_wh7(stripe).wl =
        {
          i = "base"
        }
        warehouse/fl_wh7.wl =
        {
          i = "base"
        }
        warehouse/li_yelo_tubeb_brk.wl =
        {
          i = "base"
        }
        warehouse/si_alarm2(trim).wl =
        {
          i = "base"
        }
        warehouse/si_alarm2.wl =
        {
          i = "base"
        }
        warehouse/si_ap.wl =
        {
          i = "base"
        }
        warehouse/si_authperson.wl =
        {
          i = "base"
        }
        warehouse/si_bboard_wh.wl =
        {
          i = "base"
        }
        warehouse/si_bboard_wh1.wl =
        {
          i = "base"
        }
        warehouse/si_bboard_wh2.wl =
        {
          i = "base"
        }
        warehouse/si_bboard_wh3.wl =
        {
          i = "base"
        }
        warehouse/si_bboard_wh4.wl =
        {
          i = "base"
        }
        warehouse/si_giggler.wl =
        {
          i = "base"
        }
        warehouse/si_loadzone.wl =
        {
          i = "base"
        }
        warehouse/si_noenter.wl =
        {
          i = "base"
        }
        warehouse/si_nopark.wl =
        {
          i = "base"
        }
        warehouse/si_nopark2.wl =
        {
          i = "base"
        }
        warehouse/si_nosolic.wl =
        {
          i = "base"
        }
        warehouse/si_nosomke2.wl =
        {
          i = "base"
        }
        warehouse/si_pcg.wl =
        {
          i = "base"
        }
        warehouse/si_permit.wl =
        {
          i = "base"
        }
        warehouse/si_permit2.wl =
        {
          i = "base"
        }
        warehouse/si_pressrelease.wl =
        {
          i = "base"
        }
        warehouse/tr_ducts.wl =
        {
          i = "base"
        }
        warehouse/tr_rafters.wl =
        {
          i = "base"
        }
        warehouse/tr_red01.wl =
        {
          i = "base"
        }
        warehouse/tr_red02.wl =
        {
          i = "base"
        }
        warehouse/tr_red03.wl =
        {
          i = "base"
        }
        warehouse/tr_tabletop.wl =
        {
          i = "base"
        }
        warehouse/tr_tabletop_side.wl =
        {
          i = "base"
        }
        warehouse/tr_wh1.wl =
        {
          i = "base"
        }
        warehouse/tr_wh2.wl =
        {
          i = "base"
        }
        warehouse/tr_wh3.wl =
        {
          i = "base"
        }
        warehouse/tr_wh4.wl =
        {
          i = "base"
        }
        warehouse/tr_wh5.wl =
        {
          i = "base"
        }
        warehouse/tr_wh6.wl =
        {
          i = "base"
        }
        warehouse/tr_wh_purl01.wl =
        {
          i = "base"
        }
        warehouse/tr_wh_red01.wl =
        {
          i = "base"
        }
        warehouse/tr_yellow01.wl =
        {
          i = "base"
        }
        warehouse/tr_yellow02.wl =
        {
          i = "base"
        }
        warehouse/tr_yellow03.wl =
        {
          i = "base"
        }
        warehouse/wl_box.wl =
        {
          i = "base"
        }
        warehouse/wl_box2.wl =
        {
          i = "base"
        }
        warehouse/wl_crate(reforced).wl =
        {
          i = "base"
        }
        warehouse/wl_crate(reforced)2.wl =
        {
          i = "base"
        }
        warehouse/wl_crate(reforced)3.wl =
        {
          i = "base"
        }
        warehouse/wl_crate(reforced)4.wl =
        {
          i = "base"
        }
        warehouse/wl_door1.wl =
        {
          i = "base"
        }
        warehouse/wl_door2.wl =
        {
          i = "base"
        }
        warehouse/wl_door3(0).wl =
        {
          i = "base"
        }
        warehouse/wl_door3(02).wl =
        {
          i = "base"
        }
        warehouse/wl_door3(1).wl =
        {
          i = "base"
        }
        warehouse/wl_door3(2).wl =
        {
          i = "base"
        }
        warehouse/wl_door3(3).wl =
        {
          i = "base"
        }
        warehouse/wl_door3.wl =
        {
          i = "base"
        }
        warehouse/wl_door4.wl =
        {
          i = "base"
        }
        warehouse/wl_door5.wl =
        {
          i = "base"
        }
        warehouse/wl_door6(ap).wl =
        {
          i = "base"
        }
        warehouse/wl_door6.wl =
        {
          i = "base"
        }
        warehouse/wl_furnace(door).wl =
        {
          i = "base"
        }
        warehouse/wl_furnace.wl =
        {
          i = "base"
        }
        warehouse/wl_furnace2.wl =
        {
          i = "base"
        }
        warehouse/wl_furnace3.wl =
        {
          i = "base"
        }
        warehouse/wl_furnace4.wl =
        {
          i = "base"
        }
        warehouse/wl_furnace5.wl =
        {
          i = "base"
        }
        warehouse/wl_furnace6.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh01.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh011.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh012.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh02.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh03.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh04.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh05.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh06.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh06a.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh06b.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh07.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh08.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh08a.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh08b.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh09.wl =
        {
          i = "base"
        }
        warehouse/wl_mach_wh10.wl =
        {
          i = "base"
        }
        warehouse/wl_reddoor.wl =
        {
          i = "base"
        }
        warehouse/wl_reddoor2.wl =
        {
          i = "base"
        }
        warehouse/wl_safe(inside).wl =
        {
          i = "base"
        }
        warehouse/wl_safe.wl =
        {
          i = "base"
        }
        warehouse/wl_truck(inside).wl =
        {
          i = "base"
        }
        warehouse/wl_truck(logo).wl =
        {
          i = "base"
        }
        warehouse/wl_truck(logo)2.wl =
        {
          i = "base"
        }
        warehouse/wl_truck(roof).wl =
        {
          i = "base"
        }
        warehouse/wl_truck(tan).wl =
        {
          i = "base"
        }
        warehouse/wl_truck(tan)2.wl =
        {
          i = "base"
        }
        warehouse/wl_truck(tan)logo.wl =
        {
          i = "base"
        }
        warehouse/wl_truck(tan)logo2.wl =
        {
          i = "base"
        }
        warehouse/wl_truck.wl =
        {
          i = "base"
        }
        warehouse/wl_truck2.wl =
        {
          i = "base"
        }
        warehouse/wl_wh1.wl =
        {
          i = "base"
        }
        warehouse/wl_wh10.wl =
        {
          i = "base"
        }
        warehouse/wl_wh11.wl =
        {
          i = "base"
        }
        warehouse/wl_wh12.wl =
        {
          i = "base"
        }
        warehouse/wl_wh13.wl =
        {
          i = "base"
        }
        warehouse/wl_wh14.wl =
        {
          i = "base"
        }
        warehouse/wl_wh15.wl =
        {
          i = "base"
        }
        warehouse/wl_wh16.wl =
        {
          i = "base"
        }
        warehouse/wl_wh17.wl =
        {
          i = "base"
        }
        warehouse/wl_wh18.wl =
        {
          i = "base"
        }
        warehouse/wl_wh2.wl =
        {
          i = "base"
        }
        warehouse/wl_wh3.wl =
        {
          i = "base"
        }
        warehouse/wl_wh4.wl =
        {
          i = "base"
        }
        warehouse/wl_wh5.wl =
        {
          i = "base"
        }
        warehouse/wl_wh6.wl =
        {
          i = "base"
        }
        warehouse/wl_wh7.wl =
        {
          i = "base"
        }
        warehouse/wl_wh8.wl =
        {
          i = "base"
        }
        warehouse/wl_wh9.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_purl01.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_purl02.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_purl03.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_red02.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_red03.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_red04.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_yell01.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_yell02.wl =
        {
          i = "base"
        }
        warehouse/wl_wh_yell03.wl =
        {
          i = "base"
        }

        larger_tiles.txlist =
        {
          warehouse/larger_tiles/si_authperson.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/si_loadzone.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/si_noenter.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/si_nopark.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/si_nosolic.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/si_permit.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/si_permit3.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/tr_wh1.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/tr_wh1a.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/tr_wh2.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/wl_door1.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/wl_door2.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/wl_wh1.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/wl_wh10.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/wl_wh11.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/wl_wh12.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/wl_wh14.wl =
          {
            i = "base"
          }
          warehouse/larger_tiles/wl_wh9.wl =
          {
            i = "base"
          }

        }
      }
      waterbase.txlist =
      {
        waterbase/0cp_cstack1.wl =
        {
          i = "base"
        }
        waterbase/0_keyaccess.wl =
        {
          i = "base"
        }
        waterbase/0_li_warngrn.wl =
        {
          i = "base"
        }
        waterbase/0_li_warnred.wl =
        {
          i = "base"
        }
        waterbase/0_li_warnylw.wl =
        {
          i = "base"
        }
        waterbase/0_restrictsign.wl =
        {
          i = "base"
        }
        waterbase/1cp_cstack1.wl =
        {
          i = "base"
        }
        waterbase/1_keyaccess.wl =
        {
          i = "base"
        }
        waterbase/1_li_warngrn.wl =
        {
          i = "base"
        }
        waterbase/1_li_warnred.wl =
        {
          i = "base"
        }
        waterbase/1_li_warnylw.wl =
        {
          i = "base"
        }
        waterbase/1_restrictsign.wl =
        {
          i = "base"
        }
        waterbase/2_keyaccess.wl =
        {
          i = "base"
        }
        waterbase/2_li_warngrn.wl =
        {
          i = "base"
        }
        waterbase/2_li_warnred.wl =
        {
          i = "base"
        }
        waterbase/2_li_warnylw.wl =
        {
          i = "base"
        }
        waterbase/2_restrictsign.wl =
        {
          i = "base"
        }
        waterbase/cl_grnpanel.wl =
        {
          i = "base"
        }
        waterbase/cl_metalpanel1.wl =
        {
          i = "base"
        }
        waterbase/cl_metalpanelite1.wl =
        {
          i = "base"
        }
        waterbase/cl_metalvent1.wl =
        {
          i = "base"
        }
        waterbase/cp_blown1.wl =
        {
          i = "base"
        }
        waterbase/cp_blown2.wl =
        {
          i = "base"
        }
        waterbase/cp_blown3.wl =
        {
          i = "base"
        }
        waterbase/cp_circscrn.wl =
        {
          i = "base"
        }
        waterbase/cp_circscrn2.wl =
        {
          i = "base"
        }
        waterbase/cp_circscrn3.wl =
        {
          i = "base"
        }
        waterbase/cp_circscrn4.wl =
        {
          i = "base"
        }
        waterbase/cp_cputarg.wl =
        {
          i = "base"
        }
        waterbase/cp_green.wl =
        {
          i = "base"
        }
        waterbase/cp_grnpanel1.wl =
        {
          i = "base"
        }
        waterbase/cp_grnpanel2.wl =
        {
          i = "base"
        }
        waterbase/cp_metpanl1.wl =
        {
          i = "base"
        }
        waterbase/cp_rugged_kboard.wl =
        {
          i = "base"
        }
        waterbase/cp_wpanel1.wl =
        {
          i = "base"
        }
        waterbase/cp_wscrn1.wl =
        {
          i = "base"
        }
        waterbase/fl_coral2.wl =
        {
          i = "base"
        }
        waterbase/si_danger.wl =
        {
          i = "base"
        }
        waterbase/si_explos.wl =
        {
          i = "base"
        }
        waterbase/si_gensign.wl =
        {
          i = "base"
        }
        waterbase/si_nofire.wl =
        {
          i = "base"
        }
        waterbase/tr_beam_barnaclle.wl =
        {
          i = "base"
        }
        waterbase/tr_beam_tarnish.wl =
        {
          i = "base"
        }
        waterbase/tr_beam_tranbarnkl.wl =
        {
          i = "base"
        }
        waterbase/tr_beam_trans.wl =
        {
          i = "base"
        }
        waterbase/tr_emerg_pipe.wl =
        {
          i = "base"
        }
        waterbase/tr_greenpanel1.wl =
        {
          i = "base"
        }
        waterbase/tr_lamp.wl =
        {
          i = "base"
        }
        waterbase/tr_uwb(blue).wl =
        {
          i = "base"
        }
        waterbase/tr_uwb2(blue).wl =
        {
          i = "base"
        }
        waterbase/tr_uwb3(blue).wl =
        {
          i = "base"
        }
        waterbase/tr_uwb4(blue).wl =
        {
          i = "base"
        }
        waterbase/tr_uwb5(blue).wl =
        {
          i = "base"
        }
        waterbase/wa_blue1.wl =
        {
          i = "base"
        }
        waterbase/wa_ocean.wl =
        {
          i = "base"
        }
        waterbase/wa_sewer1.wl =
        {
          i = "base"
        }
        waterbase/wa_wawa.wl =
        {
          i = "base"
        }
        waterbase/wa_wawa2.wl =
        {
          i = "base"
        }
        waterbase/wa_yuck1.wl =
        {
          i = "base"
        }
        waterbase/wl_basedoor.wl =
        {
          i = "base"
        }
        waterbase/wl_basedoor2.wl =
        {
          i = "base"
        }
        waterbase/wl_duct1.wl =
        {
          i = "base"
        }
        waterbase/wl_ductvent1.wl =
        {
          i = "base"
        }
        waterbase/wl_gbwall1.wl =
        {
          i = "base"
        }
        waterbase/wl_gbwall2.wl =
        {
          i = "base"
        }
        waterbase/wl_grnpanel1.wl =
        {
          i = "base"
        }
        waterbase/wl_grnpanel2.wl =
        {
          i = "base"
        }
        waterbase/wl_grnwall1.wl =
        {
          i = "base"
        }
        waterbase/wl_grpipe1hole.wl =
        {
          i = "base"
        }
        waterbase/wl_insidelev_uwb.wl =
        {
          i = "base"
        }
        waterbase/wl_metalflo_brnkl.wl =
        {
          i = "base"
        }
        waterbase/wl_metalflo_brnkltrans.wl =
        {
          i = "base"
        }
        waterbase/wl_piperusthole.wl =
        {
          i = "base"
        }
        waterbase/wl_sewersign.wl =
        {
          i = "base"
        }
        waterbase/wl_steel1.wl =
        {
          i = "base"
        }
        waterbase/wl_steellite1.wl =
        {
          i = "base"
        }
        waterbase/wl_steelmid.wl =
        {
          i = "base"
        }
        waterbase/wl_steelmid2.wl =
        {
          i = "base"
        }
        waterbase/wl_steelvent1.wl =
        {
          i = "base"
        }
        waterbase/wl_uwbase(door).wl =
        {
          i = "base"
        }
        waterbase/wl_uwbase(door)00.wl =
        {
          i = "base"
        }
        waterbase/wl_uwbase(door)01.wl =
        {
          i = "base"
        }
        waterbase/wl_uwbase(door)02.wl =
        {
          i = "base"
        }
        waterbase/wl_uwbase(door)2.wl =
        {
          i = "base"
        }
        waterbase/wl_uwb_ele(door1).wl =
        {
          i = "base"
        }
        waterbase/wl_uwb_ele(door2).wl =
        {
          i = "base"
        }

        larger_tiles.txlist =
        {
          waterbase/larger_tiles/tr_emerg_pipe.wl =
          {
            i = "base"
          }

        }
      }
      waterworks.txlist =
      {
        waterworks/0_cp_bargraph.wl =
        {
          i = "base"
        }
        waterworks/0_cp_circle.wl =
        {
          i = "base"
        }
        waterworks/0_cp_pump.wl =
        {
          i = "base"
        }
        waterworks/1_cp_bargraph.wl =
        {
          i = "base"
        }
        waterworks/1_cp_circle.wl =
        {
          i = "base"
        }
        waterworks/1_cp_pump.wl =
        {
          i = "base"
        }
        waterworks/2_cp_bargraph.wl =
        {
          i = "base"
        }
        waterworks/2_cp_circle.wl =
        {
          i = "base"
        }
        waterworks/3_cp_circle.wl =
        {
          i = "base"
        }
        waterworks/cp_electricbox(grey).wl =
        {
          i = "base"
        }
        waterworks/cp_electricbox(red).wl =
        {
          i = "base"
        }
        waterworks/cp_pcfront.wl =
        {
          i = "base"
        }
        waterworks/cp_pcfront2.wl =
        {
          i = "base"
        }
        waterworks/cp_pump.wl =
        {
          i = "base"
        }
        waterworks/cp_wwcontrols.wl =
        {
          i = "base"
        }
        waterworks/cp_wwcontrols2.wl =
        {
          i = "base"
        }
        waterworks/cp_wwcontrols2_brk.wl =
        {
          i = "base"
        }
        waterworks/cp_wwcontrols3.wl =
        {
          i = "base"
        }
        waterworks/cp_wwcontrols3_brk.wl =
        {
          i = "base"
        }
        waterworks/cp_wwcontrols_brk.wl =
        {
          i = "base"
        }
        waterworks/cp_wwside.wl =
        {
          i = "base"
        }
        waterworks/cp_wwside1.wl =
        {
          i = "base"
        }
        waterworks/door_smooth_window.wl =
        {
          i = "base"
        }
        waterworks/dualrail2.wl =
        {
          i = "base"
        }
        waterworks/dualrail6.wl =
        {
          i = "base"
        }
        waterworks/fl_mrblfloor1.wl =
        {
          i = "base"
        }
        waterworks/fl_ww01.wl =
        {
          i = "base"
        }
        waterworks/fl_ww02.wl =
        {
          i = "base"
        }
        waterworks/fl_ww03.wl =
        {
          i = "base"
        }
        waterworks/fl_wworks(white).wl =
        {
          i = "base"
        }
        waterworks/fl_wworks(white)2.wl =
        {
          i = "base"
        }
        waterworks/fl_wworks(white)logo.wl =
        {
          i = "base"
        }
        waterworks/railend2.wl =
        {
          i = "base"
        }
        waterworks/railend3.wl =
        {
          i = "base"
        }
        waterworks/siderails2.wl =
        {
          i = "base"
        }
        waterworks/siderails3.wl =
        {
          i = "base"
        }
        waterworks/siderails4.wl =
        {
          i = "base"
        }
        waterworks/siderails5.wl =
        {
          i = "base"
        }
        waterworks/si_b1.wl =
        {
          i = "base"
        }
        waterworks/si_b2.wl =
        {
          i = "base"
        }
        waterworks/si_b3.wl =
        {
          i = "base"
        }
        waterworks/si_controlroom.wl =
        {
          i = "base"
        }
        waterworks/si_drainage.wl =
        {
          i = "base"
        }
        waterworks/si_fwtp.wl =
        {
          i = "base"
        }
        waterworks/si_intake.wl =
        {
          i = "base"
        }
        waterworks/si_l1.wl =
        {
          i = "base"
        }
        waterworks/si_l2.wl =
        {
          i = "base"
        }
        waterworks/si_l3.wl =
        {
          i = "base"
        }
        waterworks/si_lock1.wl =
        {
          i = "base"
        }
        waterworks/si_lock2.wl =
        {
          i = "base"
        }
        waterworks/si_lock3.wl =
        {
          i = "base"
        }
        waterworks/si_lock4.wl =
        {
          i = "base"
        }
        waterworks/si_lock5.wl =
        {
          i = "base"
        }
        waterworks/si_lock6.wl =
        {
          i = "base"
        }
        waterworks/si_lockentry.wl =
        {
          i = "base"
        }
        waterworks/si_manualrelease.wl =
        {
          i = "base"
        }
        waterworks/si_mixlocks.wl =
        {
          i = "base"
        }
        waterworks/si_noleaning.wl =
        {
          i = "base"
        }
        waterworks/si_observation.wl =
        {
          i = "base"
        }
        waterworks/si_pump1.wl =
        {
          i = "base"
        }
        waterworks/si_pump2.wl =
        {
          i = "base"
        }
        waterworks/si_pump3.wl =
        {
          i = "base"
        }
        waterworks/si_pump4.wl =
        {
          i = "base"
        }
        waterworks/si_pump5.wl =
        {
          i = "base"
        }
        waterworks/si_pump6.wl =
        {
          i = "base"
        }
        waterworks/si_sewage.wl =
        {
          i = "base"
        }
        waterworks/si_sewer.wl =
        {
          i = "base"
        }
        waterworks/si_waterflow.wl =
        {
          i = "base"
        }
        waterworks/si_wwdanger.wl =
        {
          i = "base"
        }
        waterworks/si_wwdown.wl =
        {
          i = "base"
        }
        waterworks/si_wwhighvolt.wl =
        {
          i = "base"
        }
        waterworks/si_wwstep.wl =
        {
          i = "base"
        }
        waterworks/si_wwup.wl =
        {
          i = "base"
        }
        waterworks/si_wwwet.wl =
        {
          i = "base"
        }
        waterworks/si_ww_big.wl =
        {
          i = "base"
        }
        waterworks/si_ww_big2.wl =
        {
          i = "base"
        }
        waterworks/si_ww_blue.wl =
        {
          i = "base"
        }
        waterworks/si_ww_clarif.wl =
        {
          i = "base"
        }
        waterworks/si_ww_clarif2.wl =
        {
          i = "base"
        }
        waterworks/si_ww_clarif_pump.wl =
        {
          i = "base"
        }
        waterworks/si_ww_fsystem.wl =
        {
          i = "base"
        }
        waterworks/si_ww_intake.wl =
        {
          i = "base"
        }
        waterworks/si_ww_plantoo.wl =
        {
          i = "base"
        }
        waterworks/si_ww_poutfall.wl =
        {
          i = "base"
        }
        waterworks/si_ww_red.wl =
        {
          i = "base"
        }
        waterworks/si_ww_sewage.wl =
        {
          i = "base"
        }
        waterworks/si_ww_sewagev.wl =
        {
          i = "base"
        }
        waterworks/si_ww_sintake.wl =
        {
          i = "base"
        }
        waterworks/si_ww_sipump.wl =
        {
          i = "base"
        }
        waterworks/si_ww_yellow.wl =
        {
          i = "base"
        }
        waterworks/tr_red.wl =
        {
          i = "base"
        }
        waterworks/tr_redroof.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim1.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim10.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim11.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim12.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim13.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim2.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim3.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim4.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim5.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim5a.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim6.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim7.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim7a.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim8.wl =
        {
          i = "base"
        }
        waterworks/tr_wwtrim9.wl =
        {
          i = "base"
        }
        waterworks/wl_cement1.wl =
        {
          i = "base"
        }
        waterworks/wl_machine1.wl =
        {
          i = "base"
        }
        waterworks/wl_machine2.wl =
        {
          i = "base"
        }
        waterworks/wl_machine3.wl =
        {
          i = "base"
        }
        waterworks/wl_machine4.wl =
        {
          i = "base"
        }
        waterworks/wl_machine_si1.wl =
        {
          i = "base"
        }
        waterworks/wl_machine_si2.wl =
        {
          i = "base"
        }
        waterworks/wl_machine_si3.wl =
        {
          i = "base"
        }
        waterworks/wl_machine_si7.wl =
        {
          i = "base"
        }
        waterworks/wl_machine_vent.wl =
        {
          i = "base"
        }
        waterworks/wl_redroof.wl =
        {
          i = "base"
        }
        waterworks/wl_waterdoor.wl =
        {
          i = "base"
        }
        waterworks/wl_waterdoor2.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall1.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall10.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall2.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall3.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall4.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall5.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall6.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall7.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall8.wl =
        {
          i = "base"
        }
        waterworks/wl_wwall9.wl =
        {
          i = "base"
        }
        waterworks/wl_ww_mach1.wl =
        {
          i = "base"
        }
        waterworks/wl_ww_mach2.wl =
        {
          i = "base"
        }
        waterworks/wl_ww_mach3.wl =
        {
          i = "base"
        }
        waterworks/wl_ww_mach4.wl =
        {
          i = "base"
        }
        waterworks/wl_ww_mach5.wl =
        {
          i = "base"
        }
        waterworks/wl_ww_mach6.wl =
        {
          i = "base"
        }
        waterworks/wl_ww_mach7.wl =
        {
          i = "base"
        }
        waterworks/ww_door2(outside).wl =
        {
          i = "base"
        }
        waterworks/ww_door2.wl =
        {
          i = "base"
        }

      }
      xenomorphic.txlist =
      {
        xenomorphic/0cp_xcpu1.wl =
        {
          i = "base"
        }
        xenomorphic/0cp_xcpu2.wl =
        {
          i = "base"
        }
        xenomorphic/0_cp_panel2.wl =
        {
          i = "base"
        }
        xenomorphic/0_cp_panel3_1.wl =
        {
          i = "base"
        }
        xenomorphic/0_cp_panel5.wl =
        {
          i = "base"
        }
        xenomorphic/0_cp_virus36.wl =
        {
          i = "base"
        }
        xenomorphic/0_natas.wl =
        {
          i = "base"
        }
        xenomorphic/0_xbaby.wl =
        {
          i = "base"
        }
        xenomorphic/0_xlord.wl =
        {
          i = "base"
        }
        xenomorphic/1cp_xcpu1.wl =
        {
          i = "base"
        }
        xenomorphic/1cp_xcpu2.wl =
        {
          i = "base"
        }
        xenomorphic/1_cp_panel2.wl =
        {
          i = "base"
        }
        xenomorphic/1_cp_panel3_1.wl =
        {
          i = "base"
        }
        xenomorphic/1_cp_panel5.wl =
        {
          i = "base"
        }
        xenomorphic/1_cp_virus36.wl =
        {
          i = "base"
        }
        xenomorphic/1_natas.wl =
        {
          i = "base"
        }
        xenomorphic/1_xbaby.wl =
        {
          i = "base"
        }
        xenomorphic/1_xlord.wl =
        {
          i = "base"
        }
        xenomorphic/2cp_xcpu1.wl =
        {
          i = "base"
        }
        xenomorphic/2cp_xcpu2.wl =
        {
          i = "base"
        }
        xenomorphic/2_cp_panel2.wl =
        {
          i = "base"
        }
        xenomorphic/2_cp_virus36.wl =
        {
          i = "base"
        }
        xenomorphic/2_xbaby.wl =
        {
          i = "base"
        }
        xenomorphic/3_cp_panel2.wl =
        {
          i = "base"
        }
        xenomorphic/3_cp_virus36.wl =
        {
          i = "base"
        }
        xenomorphic/cl_round_light.wl =
        {
          i = "base"
        }
        xenomorphic/cl_round_plate.wl =
        {
          i = "base"
        }
        xenomorphic/cp_boils.wl =
        {
          i = "base"
        }
        xenomorphic/cp_brain.wl =
        {
          i = "base"
        }
        xenomorphic/cp_clit.wl =
        {
          i = "base"
        }
        xenomorphic/cp_guts.wl =
        {
          i = "base"
        }
        xenomorphic/cp_hand.wl =
        {
          i = "base"
        }
        xenomorphic/cp_lung.wl =
        {
          i = "base"
        }
        xenomorphic/cp_panel3_1.wl =
        {
          i = "base"
        }
        xenomorphic/cp_panel4.wl =
        {
          i = "base"
        }
        xenomorphic/cp_panel5_2.wl =
        {
          i = "base"
        }
        xenomorphic/cp_scabe.wl =
        {
          i = "base"
        }
        xenomorphic/cp_scabe2.wl =
        {
          i = "base"
        }
        xenomorphic/cp_virus.wl =
        {
          i = "base"
        }
        xenomorphic/cp_virus2.wl =
        {
          i = "base"
        }
        xenomorphic/cp_virus33.wl =
        {
          i = "base"
        }
        xenomorphic/cp_xdna1.wl =
        {
          i = "base"
        }
        xenomorphic/cp_xenodt.wl =
        {
          i = "base"
        }
        xenomorphic/cp_xenodt2.wl =
        {
          i = "base"
        }
        xenomorphic/cp_xeno_brk.wl =
        {
          i = "base"
        }
        xenomorphic/fl_grip_dirty.wl =
        {
          i = "base"
        }
        xenomorphic/lt_darkmetal.wl =
        {
          i = "base"
        }
        xenomorphic/lt_darkmetal2.wl =
        {
          i = "base"
        }
        xenomorphic/lt_darkmetal3.wl =
        {
          i = "base"
        }
        xenomorphic/lt_darkmetal4.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno1.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno10.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno2.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno3.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno4.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno5.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno6.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno7.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno8.wl =
        {
          i = "base"
        }
        xenomorphic/lt_xeno9.wl =
        {
          i = "base"
        }
        xenomorphic/si_value.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_biohaz(clean).wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_biohaz.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_danger.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_emf.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_gr.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_hood(clean).wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_hood.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_incub.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_micro(clean).wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_micro.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_ms.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_nc.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_osg.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_sa.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_u4(clean).wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_u4.wl =
        {
          i = "base"
        }
        xenomorphic/si_xeno_vc.wl =
        {
          i = "base"
        }
        xenomorphic/tr_xeno(red1).wl =
        {
          i = "base"
        }
        xenomorphic/tr_xeno(red2).wl =
        {
          i = "base"
        }
        xenomorphic/tr_xeno(red3).wl =
        {
          i = "base"
        }
        xenomorphic/wa_scum.wl =
        {
          i = "base"
        }
        xenomorphic/wl_door_flesh1.wl =
        {
          i = "base"
        }
        xenomorphic/wl_door_flesh2.wl =
        {
          i = "base"
        }
        xenomorphic/wl_door_flesh_trim.wl =
        {
          i = "base"
        }
        xenomorphic/wl_door_flesh_trim2.wl =
        {
          i = "base"
        }
        xenomorphic/wl_industrial_1.wl =
        {
          i = "base"
        }
        xenomorphic/wl_industrial_4.wl =
        {
          i = "base"
        }
        xenomorphic/wl_industrial_5.wl =
        {
          i = "base"
        }
        xenomorphic/wl_interlock.wl =
        {
          i = "base"
        }
        xenomorphic/wl_interlock2.wl =
        {
          i = "base"
        }
        xenomorphic/wl_interlock3.wl =
        {
          i = "base"
        }
        xenomorphic/wl_metrust.wl =
        {
          i = "base"
        }
        xenomorphic/wl_metrust_sin.wl =
        {
          i = "base"
        }
        xenomorphic/wl_organs3.wl =
        {
          i = "base"
        }
        xenomorphic/wl_scabs.wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red1).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red10).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red11).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red12).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red13).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red14)_2.wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red14)_3.wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red14)_8.wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red14)_9.wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red2).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red3).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red4).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red5).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red6).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red7).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red8).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xeno(red9).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xenodoor(red).wl =
        {
          i = "base"
        }
        xenomorphic/wl_xenodoor(red)trim.wl =
        {
          i = "base"
        }
        xenomorphic/wl_xenoorg1.wl =
        {
          i = "base"
        }
        xenomorphic/wl_xenoorg2.wl =
        {
          i = "base"
        }
        xenomorphic/wl_xenotek1.wl =
        {
          i = "base"
        }

      }



    } // TEXT
  }


  NewEntities.qtx =
  {
    ToolBox = "New map items..."
    Root = "Sin Entities.qtxfolder"


    // ENTQTX
     Sin Entities.qtxfolder = {
     Ammo.qtxfolder = {
       Ammo_10mm:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo Bullet Weapons - 10mm (Large)"
         model = "10mm.def"
       }
       Ammo_50mm:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo 50mm - HV Chain Gun"
         model = "50mm.def"
       }
       Ammo_Magnum:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo Bullet Weapons - Magnum (Small)"
         model = "357.def"
       }
       Ammo_Plasma:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo Energy Weapons - Plasma (Small)"
         model = "plasma.def"
       }
       Ammo_Pulse:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo Energy Weapons - Pulse Rifle (Large)"
         model = "pulse_ammo.def"
       }
       Ammo_Rockets:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo Rockets"
         model = "rockets.def"
       }
       Ammo_Shotgun:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo Shotgun"
         model = "shotgunclip.def"
       }
       Ammo_SniperRifle:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo Sniper Rifle"
         model = "sniper_ammo.def"
       }
       Ammo_SpearGun:e =
       {
         origin = "0 0 0"
         ;desc = "Ammo Spear Gun - Pack"
         model = "spear_ammo.def"
       }
       Ammo_SpiderMine:e =
       {
         origin = "0 0 0"
         ;desc = "Spider Mines Ammo Container"
         model = "mine.def"
       }
     }
     Animals.qtxfolder = {
       Animals_Bat:e =
       {
         origin = "0 0 0"
         ;desc = "Bat"
         model = "bat.def"
       }
       Animals_BatLow:e =
       {
         origin = "0 0 0"
         ;desc = "Bat Low-Poly"
         model = "batlow.def"
       }
       Animals_Fish:e =
       {
         origin = "0 0 0"
         ;desc = "Fish"
         model = "fish.def"
         angle = "0"
       }
       Animals_Pigeon:e =
       {
         origin = "0 0 0"
         ;desc = "Pigeon"
         model = "pigeon.def"
       }
       Animals_Rat:e =
       {
         origin = "0 0 0"
         ;desc = "Rat"
         model = "rat.def"
       }
     TropicalFish.qtxfolder = {
       Animals_TropicalFish_Blue:e =
       {
         origin = "0 0 0"
         model = "fish_blue.def"
       }
       Animals_TropicalFish_Dope1:e =
       {
         origin = "0 0 0"
         ;desc = "Dopefish #1"
         model = "fish_dope1.def"
       }
       Animals_TropicalFish_Dope2:e =
       {
         origin = "0 0 0"
         ;desc = "Dopefish #2"
         model = "fish_dope2.def"
       }
       Animals_TropicalFish_Green:e =
       {
         origin = "0 0 0"
         model = "fish_green.def"
       }
       Animals_TropicalFish_Yellow:e =
       {
         origin = "0 0 0"
         model = "fish_yellow.def"
       }
     }
     }
     Armor.qtxfolder = {
       Armor_FlakJacket:e =
       {
         origin = "0 0 0"
         ;desc = "Flak Jacket"
         model = "flakjack.def"
       }
       Armor_FlakPants:e =
       {
         origin = "0 0 0"
         ;desc = "Flak Pants"
         model = "flakpants.def"
       }
       Armor_RiotHelmet:e =
       {
         origin = "0 0 0"
         ;desc = "Riot Helmet"
         model = "riothelm.def"
       }
     }
     Boss.qtxfolder = {
       Boss_EonAndPeon:e =
       {
         origin = "0 0 0"
         ;desc = "Eon and Peon"
         model = "boss_peon.def"
         angle = "0"
       }
       Boss_ThrallMaster:e =
       {
         origin = "0 0 0"
         ;desc = "Thrallmaster"
         model = "thrall.def"
         angle = "0"
       }
     }
     Health.qtxfolder = {
       Health_005:e =
       {
         origin = "0 0 0"
         ;desc = "Health Powerup-Small - 5"
         model = "health_small.def"
       }
       Health_020:e =
       {
         origin = "0 0 0"
         ;desc = "Health Powerup-Normal - 20"
         model = "health.def"
       }
       Health_050:e =
       {
         origin = "0 0 0"
         ;desc = "Health Powerup-Large - 50 - Red"
         model = "health_large.def"
       }
       Health_100:e =
       {
         origin = "0 0 0"
         ;desc = "Health Powerup- 100 - Medkit"
         model = "health_medkit.def"
       }
       Health_Apple:e =
       {
         origin = "0 0 0"
         ;desc = "Apple"
         model = "health_apple.def"
       }
       Health_Banana:e =
       {
         origin = "0 0 0"
         ;desc = "Banana"
         model = "health_banana.def"
       }
       Health_CheesyPoofs:e =
       {
         origin = "0 0 0"
         ;desc = "Cheesy Poofs - Yummy"
         model = "health_poofs.def"
       }
       Health_Cookies:e =
       {
         origin = "0 0 0"
         ;desc = "Cookies"
         model = "health_cookies.def"
       }
       Health_IceCream:e =
       {
         origin = "0 0 0"
         ;desc = "Ice Cream"
         model = "health_icecream.def"
       }
       Health_Milk:e =
       {
         origin = "0 0 0"
         ;desc = "Milk Carton"
         model = "health_milk.def"
       }
       Health_Pizza:e =
       {
         origin = "0 0 0"
         ;desc = "Pizza"
         model = "health_pizza.def"
       }
       Health_Sandwich:e =
       {
         origin = "0 0 0"
         ;desc = "Sandwich"
         model = "health_sandwich.def"
       }
       Health_SeaRation:e =
       {
         origin = "0 0 0"
         ;desc = "Sea Ration"
         model = "health_searation.def"
       }
       Health_Soda:e =
       {
         origin = "0 0 0"
         ;desc = "Soda Pop"
         model = "health_soda.def"
       }
       Health_U4:e =
       {
         origin = "0 0 0"
         ;desc = "Health Powerup-Small - 20"
         model = "health_u4.def"
       }
     }
     Hero.qtxfolder = {
       Hero_Blade:e =
       {
         origin = "0 0 0"
         ;desc = "Blade (Our Hero)"
         model = "pl_blade.def"
       }
       Hero_Elexis:e =
       {
         origin = "0 0 0"
         ;desc = "Elexis Sinclaire"
         model = "pl_elexis.def"
       }
     HCOfficer1.qtxfolder = {
       Hero_HCOfficer1_AssaultRifle:e =
       {
         origin = "0 0 0"
         ;desc = "HC Officer 1 with Assault Rifle"
         model = "hcofficer1_ass.def"
       }
       Hero_HCOfficer1_Magnum:e =
       {
         origin = "0 0 0"
         ;desc = "HC Officer 1 with Magnum"
         model = "hcofficer1_mag.def"
         angle = "0"
       }
       Hero_HCOfficer1_NoWeapon:e =
       {
         origin = "0 0 0"
         ;desc = "HC Officer 1 with No Weapon"
         model = "hcofficer1_none.def"
         angle = "0"
       }
       Hero_HCOfficer1_Shotgun:e =
       {
         origin = "0 0 0"
         ;desc = "HC Officer 1 with Shotgun"
         model = "hcofficer1_shtg.def"
       }
     }
     HCOfficer2.qtxfolder = {
       Hero_HCOfficer2_AssaultRifle:e =
       {
         origin = "0 0 0"
         ;desc = "HC Officer 2 with Assault Rifle"
         model = "hcofficer2_ass.def"
       }
       Hero_HCOfficer2_Magnum:e =
       {
         origin = "0 0 0"
         ;desc = "HC Officer 2 with Magnum"
         model = "hcofficer2_mag.def"
       }
       Hero_HCOfficer2_NoWeapon:e =
       {
         origin = "0 0 0"
         ;desc = "HC Officer 2 with No Weapon"
         model = "hcofficer2_none.def"
         angle = "0"
       }
       Hero_HCOfficer2_Shotgun:e =
       {
         origin = "0 0 0"
         ;desc = "HC Officer 2 with Shotgun"
         model = "hcofficer2_shtg.def"
       }
     }
       Hero_JC:e =
       {
         origin = "0 0 0"
         ;desc = "JC"
         model = "pl_jc.def"
       }
     Military.qtxfolder = {
       Hero_Military_1LyinginBed:e =
       {
         origin = "0 0 0"
         ;desc = "Military #1 - Guy in Bed"
         model = "military1.def"
         angle = "0"
       }
       Hero_Military_2Injured:e =
       {
         origin = "0 0 0"
         ;desc = "Military #2 - Sitting injured"
         model = "military2.def"
         angle = "0"
       }
       Hero_Military_3Medic:e =
       {
         origin = "0 0 0"
         ;desc = "Military #3 - Medic"
         model = "military3.def"
       }
       Hero_Military_4Leader:e =
       {
         origin = "0 0 0"
         ;desc = "Military #4 - Guy who is the leader"
         model = "military4.def"
         angle = "0"
       }
     }
     }
     Innocent.qtxfolder = {
       Innocent_Bum1:e =
       {
         origin = "0 0 0"
         model = "bum.def"
       }
       Innocent_Bum1Sitting:e =
       {
         origin = "0 0 0"
         ;desc = "Bum 1 - Sitting"
         model = "bum_sit.def"
       }
       Innocent_Bum1Sleeping:e =
       {
         origin = "0 0 0"
         ;desc = "Bum 1 - Sleeping"
         model = "bum_sleep.def"
         angle = "0"
       }
       Innocent_Bum2:e =
       {
         origin = "0 0 0"
         model = "bum2.def"
       }
       Innocent_Bum2Sitting:e =
       {
         origin = "0 0 0"
         ;desc = "Bum 2 - Sitting"
         model = "bum2_sit.def"
       }
       Innocent_Bum2Sleeping:e =
       {
         origin = "0 0 0"
         ;desc = "Bum 2 - Sleeping"
         model = "bum2_sleep.def"
       }
       Innocent_ChemFemale:e =
       {
         origin = "0 0 0"
         ;desc = "Chem Plant Female"
         model = "chemfem.def"
         angle = "0"
       }
       Innocent_DeadGuy:e =
       {
         origin = "0 0 0"
         ;desc = "Dead Guy with missing hand."
         model = "deadguy.def"
         angle = "0"
       }
       Innocent_FemaleCivilian:e =
       {
         origin = "0 0 0"
         ;desc = "Female Civilian"
         model = "civfemale.def"
         angle = "0"
       }
       Innocent_MaleCivilian:e =
       {
         origin = "0 0 0"
         ;desc = "Male Civilian"
         model = "civmale.def"
       }
       Innocent_XenoBody:e =
       {
         origin = "0 0 0"
         ;desc = "Xeno Body"
         model = "xeno_body.def"
       }
     }
     Inventory.qtxfolder = {
       Inventory_BlueCard:e =
       {
         origin = "0 0 0"
         ;desc = "Blue Security Card"
         model = "card_blu.def"
       }
       Inventory_ChemBioSuit:e =
       {
         origin = "0 0 0"
         ;desc = "Chem Bio-Suit"
         model = "chemsuit.def"
       }
       Inventory_Decoder:e =
       {
         origin = "0 0 0"
         ;desc = "Computer Decoder"
         model = "code.def"
       }
       Inventory_GlowStick:e =
       {
         origin = "0 0 0"
         ;desc = "Greeeeeeen Glowstick"
         model = "glowstick.def"
       }
       Inventory_GreenCard:e =
       {
         origin = "0 0 0"
         ;desc = "Green Security Card"
         model = "card_grn.def"
       }
       Inventory_Hand:e =
       {
         origin = "0 0 0"
         ;desc = "Hand"
         model = "hand.def"
         angle = "0"
       }
       Inventory_IdentCard:e =
       {
         origin = "0 0 0"
         ;desc = "Identification Card"
         model = "identcard.def"
       }
       Inventory_OrangeCard:e =
       {
         origin = "0 0 0"
         ;desc = "Orange Security Card"
         model = "card_orng.def"
       }
       Inventory_YellowCard:e =
       {
         origin = "0 0 0"
         ;desc = "Yellow Security Card"
         model = "card_yel.def"
       }
     }
     Monster.qtxfolder = {
       Monster_Bachrodai:e =
       {
         origin = "0 0 0"
         ;desc = "Bachrodai"
         model = "bacrodai.def"
       }
       Monster_Beecadrone:e =
       {
         origin = "0 0 0"
         ;desc = "Beecadrone"
         model = "bee.def"
       }
       Monster_ConstrucWorker:e =
       {
         origin = "0 0 0"
         ;desc = "Construction Worker"
         model = "cworker.def"
       }
       Monster_ConstructForeman:e =
       {
         origin = "0 0 0"
         ;desc = "Construction Foreman"
         model = "foreman.def"
         angle = "0"
       }
       Monster_DarkCaptain:e =
       {
         origin = "0 0 0"
         ;desc = "Dark Captain"
         model = "dark.def"
       }
       Monster_Eon:e =
       {
         origin = "0 0 0"
         ;desc = "Eon"
         model = "eon.def"
       }
       Monster_EvilBlade:e =
       {
         origin = "0 0 0"
         ;desc = "Evil Blade (Our Alter Ego)"
         model = "evil_blade.def"
       }
     Grunt.qtxfolder = {
       Monster_Grunt_AssaultRifle:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt with Assault Rifle"
         model = "grunt_ass.def"
       }
       Monster_Grunt_ChainGun:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt with Chain Gun"
         model = "grunt_hv.def"
       }
       Monster_Grunt_GrenadeLauncher:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt with Grenade Launcher"
         model = "grunt_gren.def"
         angle = "0"
       }
       Monster_Grunt_Magnum:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt with Magnum"
         model = "grunt_mag.def"
       }
       Monster_Grunt_NoWeapon:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt with No Weapon"
         model = "grunt_none.def"
       }
       Monster_Grunt_RocketLauncher:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt with Rocket Launcher"
         model = "grunt_rckt.def"
       }
       Monster_Grunt_Shotgun:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt with Shotgun"
         model = "grunt_shtg.def"
       }
     }
     GruntCapt.qtxfolder = {
       Monster_GruntCapt_AssaultRifle:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt Captain with Assault Rifle"
         model = "gruntcapt_ass.def"
       }
       Monster_GruntCapt_ChainGun:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt Captain with Chain Gun"
         model = "gruntcapt_hv.def"
       }
       Monster_GruntCapt_GrenadeLauncher:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt Captain with Grenade Launcher"
         model = "gruntcapt_gren.def"
       }
       Monster_GruntCapt_Magnum:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt Captain with Magnum"
         model = "gruntcapt_mag.def"
       }
       Monster_GruntCapt_NoWeapon:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt Captain with No Weapon"
         model = "gruntcapt_none.def"
         angle = "0"
       }
       Monster_GruntCapt_RocketLauncher:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt Captain with Rocket Launcher"
         model = "gruntcapt_rckt.def"
         angle = "0"
       }
       Monster_GruntCapt_Shotgun:e =
       {
         origin = "0 0 0"
         ;desc = "Grunt Captain with Shotgun"
         model = "gruntcapt_shtg.def"
       }
     }
     Guerilla.qtxfolder = {
       Monster_Guerilla_AssaultRifle:e =
       {
         origin = "0 0 0"
         ;desc = "Guerilla Soldier with Assault Rifle"
         model = "guerilla_ass.def"
       }
       Monster_Guerilla_ChainGun:e =
       {
         origin = "0 0 0"
         ;desc = "Guerilla Soldier with a Chain Gun"
         model = "guerilla_hv.def"
       }
       Monster_Guerilla_Magnum:e =
       {
         origin = "0 0 0"
         ;desc = "Guerilla Soldier with Magnum"
         model = "guerilla_mag.def"
       }
       Monster_Guerilla_NoWeapon:e =
       {
         origin = "0 0 0"
         ;desc = "Guerilla Soldier with No Weapon"
         model = "guerilla_none.def"
       }
       Monster_Guerilla_RocketLauncher:e =
       {
         origin = "0 0 0"
         ;desc = "Guerilla Soldier with Rocket Launcher"
         model = "guerilla_rckt.def"
       }
       Monster_Guerilla_Shotgun:e =
       {
         origin = "0 0 0"
         ;desc = "Guerilla Soldier with Shotgun"
         model = "guerilla_shtg.def"
       }
     }
       Monster_Mancini:e =
       {
         origin = "0 0 0"
         ;desc = "Mancini"
         model = "mancini.def"
       }
       Monster_Manumit:e =
       {
         origin = "0 0 0"
         ;desc = "Manumit"
         model = "manumit.def"
         angle = "0"
       }
       Monster_MetalWorker:e =
       {
         origin = "0 0 0"
         ;desc = "Metal Works Worker"
         model = "mworker.def"
       }
       Monster_Nautic:e =
       {
         origin = "0 0 0"
         ;desc = "Nautic"
         model = "nautic.def"
       }
       Monster_OilRigWorker:e =
       {
         origin = "0 0 0"
         ;desc = "Oil Rig Worker"
         model = "oworker.def"
       }
       Monster_Peon:e =
       {
         origin = "0 0 0"
         ;desc = "Peon"
         model = "peon.def"
         angle = "0"
       }
       Monster_Pinphat:e =
       {
         origin = "0 0 0"
         ;desc = "Pinphat"
         model = "pinphat.def"
       }
       Monster_Reconah:e =
       {
         origin = "0 0 0"
         ;desc = "Reconah"
         model = "reconah.def"
       }
       Monster_Seabonite:e =
       {
         origin = "0 0 0"
         ;desc = "Seabonite"
         model = "sea.def"
       }
       Monster_SeaboniteCaptain:e =
       {
         origin = "0 0 0"
         ;desc = "Seabonite Captain - Red Suit markings"
         model = "sea_capt.def"
       }
       Monster_SecurityRover:e =
       {
         origin = "0 0 0"
         ;desc = "Security Rover"
         model = "secrover.def"
       }
       Monster_Securton:e =
       {
         origin = "0 0 0"
         ;desc = "Securton"
         model = "securton.def"
       }
       Monster_Sergeant:e =
       {
         origin = "0 0 0"
         ;desc = "Sergeant"
         model = "sarge.def"
       }
       Monster_Sniper:e =
       {
         origin = "0 0 0"
         ;desc = "sniper"
         model = "sniper.def"
         angle = "0"
       }
     Thug.qtxfolder = {
       Monster_Thug_4Cinematic:e =
       {
         origin = "0 0 0"
         ;desc = "Thug for Cinematic"
         model = "thug_cine.def"
       }
       Monster_Thug_AssaultRifle:e =
       {
         origin = "0 0 0"
         ;desc = "Thug with Assault Rifle"
         model = "thug_ass.def"
       }
       Monster_Thug_Magnum:e =
       {
         origin = "0 0 0"
         ;desc = "Thug with Magnum"
         model = "thug_mag.def"
       }
       Monster_Thug_NoWeapon:e =
       {
         origin = "0 0 0"
         ;desc = "Thug with No Weapon"
         model = "thug_none.def"
       }
       Monster_Thug_PulseRifle:e =
       {
         origin = "0 0 0"
         ;desc = "Thug with Pulse Rifle"
         model = "thug_pulse.def"
       }
       Monster_Thug_RocketLauncher:e =
       {
         origin = "0 0 0"
         ;desc = "Thug with Rocket Launcher"
         model = "thug_rckt.def"
       }
       Monster_Thug_Shotgun:e =
       {
         origin = "0 0 0"
         ;desc = "Thug with Shotgun"
         model = "thug_shtg.def"
       }
     }
       Monster_Vultorn:e =
       {
         origin = "0 0 0"
         ;desc = "Vultorn"
         model = "vultorn.def"
       }
       Monster_VultornSmall:e =
       {
         origin = "0 0 0"
         ;desc = "Vultorn Small"
         model = "vultorn_small.def"
       }
       Monster_WarehouseForeman:e =
       {
         origin = "0 0 0"
         ;desc = "Warehouse Foreman - Civilian Male"
         model = "foreman_warehouse.def"
         angle = "0"
       }
     }
     Neutral.qtxfolder = {
       Neutral_ChemicalWorker:e =
       {
         origin = "0 0 0"
         ;desc = "Chemical Plant Worker-Suited Up"
         model = "chem.def"
       }
       Neutral_LabWorker:e =
       {
         origin = "0 0 0"
         ;desc = "Lab Worker"
         model = "lab.def"
         angle = "0"
       }
       Neutral_OilRigForeman:e =
       {
         origin = "0 0 0"
         ;desc = "Oilrig Foreman"
         model = "foreman_oilrig.def"
         angle = "0"
       }
       Neutral_Scientist:e =
       {
         origin = "0 0 0"
         ;desc = "Scientist Type Guy"
         model = "scientist.def"
         angle = "0"
       }
     Technician.qtxfolder = {
       Neutral_Technician_ChemicalWorker:e =
       {
         origin = "0 0 0"
         model = "tech_chem.def"
       }
       Neutral_Technician_Freeport:e =
       {
         origin = "0 0 0"
         model = "tech_freeport.def"
       }
       Neutral_Technician_Marine:e =
       {
         origin = "0 0 0"
         model = "tech_marine.def"
         angle = "0"
       }
       Neutral_Technician_SinTEK:e =
       {
         origin = "0 0 0"
         model = "tech_sintek.def"
       }
     }
     }
     Powerup.qtxfolder = {
       Powerup_Adrenaline:e =
       {
         origin = "0 0 0"
         ;desc = "Adrenaline Boost - Temporary 200 Health"
         model = "adren.def"
       }
       Powerup_Cloaking:e =
       {
         origin = "0 0 0"
         ;desc = "Cloaking Device (PODD) - Invisibility"
         model = "cloak.def"
       }
       Powerup_Oxygen:e =
       {
         origin = "0 0 0"
         ;desc = "Oxygen"
         model = "oxygen.def"
       }
       Powerup_ScubaGear:e =
       {
         origin = "0 0 0"
         ;desc = "Rebreather Unit"
         model = "scubagear.def"
       }
       Powerup_Shield:e =
       {
         origin = "0 0 0"
         ;desc = "Photonic Shield - Invincibility"
         model = "shield.def"
       }
       Powerup_U4:e =
       {
         origin = "0 0 0"
         ;desc = "U4 container"
         model = "u4.def"
       }
       Powerup_U4Vial:e =
       {
         origin = "0 0 0"
         ;desc = "U4 Injector - 60 second Mutant powerup"
         model = "u4vial.def"
       }
     }
     Projectile.qtxfolder = {
       Projectile_Betty:e =
       {
         origin = "0 0 0"
         ;desc = "Bouncing Betty Projectile."
         model = "betty.def"
       }
       Projectile_BettySpike:e =
       {
         origin = "0 0 0"
         ;desc = "Spike projectile from Bouncing Betty"
         model = "bettyspike.def"
       }
       Projectile_BulletShell:e =
       {
         origin = "0 0 0"
         model = "shell.def"
       }
       Projectile_DrunkMissile:e =
       {
         origin = "0 0 0"
         ;desc = "Rocket"
         model = "trocket.def"
       }
       Projectile_Grenade:e =
       {
         origin = "0 0 0"
         ;desc = "Grenade"
         model = "grenade.def"
       }
       Projectile_HVShell:e =
       {
         origin = "0 0 0"
         ;desc = "HV Chain Gun Shell"
         model = "hvshell.def"
       }
       Projectile_Rocket:e =
       {
         origin = "0 0 0"
         ;desc = "Rocket"
         model = "rocket.def"
       }
       Projectile_ShotgunShell:e =
       {
         origin = "0 0 0"
         ;desc = "Shotgun Shell - Shotgun Casing"
         model = "sgshell.def"
       }
       Projectile_Skeet:e =
       {
         origin = "0 0 0"
         model = "skeet.def"
       }
       Projectile_Spear:e =
       {
         origin = "0 0 0"
         ;desc = "Spear"
         model = "spear.def"
       }
     }
     cinematic.qtxfolder = {
       cinematic_blade:e =
       {
         origin = "0 0 0"
         ;desc = "Blade used for Cinematics"
         model = "cine_blade.def"
       }
       cinematic_elexis:e =
       {
         origin = "0 0 0"
         ;desc = "Elexis Sinclaire used for Cinematics"
         model = "cine_elexis.def"
       }
       cinematic_jc:e =
       {
         origin = "0 0 0"
         ;desc = "JC used for Cinematics"
         model = "cine_jc.def"
       }
       cinematic_mancini:e =
       {
         origin = "0 0 0"
         model = "cine_mancini.def"
         angle = "0"
       }
       cinematic_manumit:e =
       {
         origin = "0 0 0"
         ;desc = "Cinematic Manumit"
         model = "cine_manumit.def"
         angle = "0"
       }
       cinematic_thug:e =
       {
         origin = "0 0 0"
         ;desc = "Thug for Cinematic"
         model = "cine_thug.def"
         angle = "0"
       }
     }
       console:b =
       {
         ;incl = "defpoly"
       }
     deskitems.qtxfolder = {
       deskitems_beaker:e =
       {
         origin = "0 0 0"
         ;desc = "Lab Beaker"
         model = "beaker.def"
       }
       deskitems_beercan:e =
       {
         origin = "0 0 0"
         ;desc = "SinTek Beercan"
         model = "beercan.def"
       }
       deskitems_blueprints:e =
       {
         origin = "0 0 0"
         ;desc = "Blueprints"
         model = "blueprints_desk.def"
         angle = "0"
       }
     book.qtxfolder = {
       deskitems_book_closed:e =
       {
         origin = "0 0 0"
         model = "bookclosed.def"
       }
       deskitems_book_closed2:e =
       {
         origin = "0 0 0"
         model = "bookclosed2.def"
       }
       deskitems_book_closed3:e =
       {
         origin = "0 0 0"
         model = "bookclosed3.def"
       }
       deskitems_book_closed4:e =
       {
         origin = "0 0 0"
         model = "bookclosed4.def"
         angle = "0"
       }
       deskitems_book_open:e =
       {
         origin = "0 0 0"
         model = "bookopen.def"
       }
     }
       deskitems_bunsenburner:e =
       {
         origin = "0 0 0"
         model = "bunsen.def"
       }
       deskitems_calendar1:e =
       {
         origin = "0 0 0"
         ;desc = "Calendar #1"
         model = "calendar1.def"
       }
       deskitems_calendar2:e =
       {
         origin = "0 0 0"
         ;desc = "Calendar #2"
         model = "calendar2.def"
       }
       deskitems_calendar3:e =
       {
         origin = "0 0 0"
         ;desc = "Calendar #3"
         model = "calendar3.def"
       }
       deskitems_cdrack:e =
       {
         origin = "0 0 0"
         ;desc = "CD Rack"
         model = "cd.def"
       }
       deskitems_clamp:e =
       {
         origin = "0 0 0"
         ;desc = "Clamp"
         model = "clamp.def"
       }
       deskitems_coffeemug:e =
       {
         origin = "0 0 0"
         ;desc = "Coffee Mug with SinTek Logo"
         model = "coffeemug.def"
       }
     coffeemugs.qtxfolder = {
       deskitems_coffeemugs_blue:e =
       {
         origin = "0 0 0"
         ;desc = "Coffee Mug-Blue"
         model = "coffeemug4.def"
       }
       deskitems_coffeemugs_fcblogo:e =
       {
         origin = "0 0 0"
         ;desc = "Coffee Mug-FCB Logo"
         model = "coffeemug2.def"
       }
       deskitems_coffeemugs_sinteklogo:e =
       {
         origin = "0 0 0"
         ;desc = "Coffee Mug-SinTEK Logo"
         model = "coffeemug1.def"
       }
       deskitems_coffeemugs_yellow:e =
       {
         origin = "0 0 0"
         ;desc = "Coffee Mug-Yellow"
         model = "coffeemug3.def"
       }
     }
     cpu.qtxfolder = {
       deskitems_cpu_case:e =
       {
         origin = "0 0 0"
         ;desc = "CPU Case"
         model = "cpu_case.def"
       }
       deskitems_cpu_keyboard:e =
       {
         origin = "0 0 0"
         ;desc = "CPU Keyboard"
         model = "cpu_keyboard.def"
       }
       deskitems_cpu_keyboarduseable:e =
       {
         origin = "0 0 0"
         ;desc = "CPU Keyboard - For usable consoles"
         model = "cpu_keyboard_use.def"
       }
     monitor.qtxfolder = {
       deskitems_cpu_monitor:e =
       {
         origin = "0 0 0"
         ;desc = "CPU Monitor"
         model = "cpu_monitor.def"
       }
       deskitems_cpu_monitor_jc:e =
       {
         origin = "0 0 0"
         ;desc = "CPU Monitor JC"
         model = "cpu_monitorjc.def"
       }
       deskitems_cpu_monitor_manumit:e =
       {
         origin = "0 0 0"
         ;desc = "CPU Monitor w/ Manumit schematics"
         model = "cpu_monitor_manumit.def"
       }
     }
       deskitems_cpu_monitoruseable:e =
       {
         origin = "0 0 0"
         ;desc = "CPU Monitor - For usable consoles"
         model = "cpu_monitor_use.def"
       }
     }
       deskitems_cupandpens:e =
       {
         origin = "0 0 0"
         ;desc = "Cup and Pens"
         model = "cupandpens.def"
       }
       deskitems_folder1:e =
       {
         origin = "0 0 0"
         ;desc = "Desk Folder #1"
         model = "folder1.def"
       }
       deskitems_folder2:e =
       {
         origin = "0 0 0"
         ;desc = "Desk Folder #2"
         model = "folder2.def"
       }
       deskitems_icecream:e =
       {
         origin = "0 0 0"
         ;desc = "Ice Cream container"
         model = "icecream.def"
       }
       deskitems_lamp:e =
       {
         origin = "0 0 0"
         ;desc = "Desk Lamp"
         model = "desklamp.def"
       }
       deskitems_mouse:e =
       {
         origin = "0 0 0"
         ;desc = "Mouse for Computer"
         model = "mouse.def"
       }
       deskitems_phone1:e =
       {
         origin = "0 0 0"
         ;desc = "Desk Phone #1"
         model = "phone1.def"
       }
       deskitems_phone2:e =
       {
         origin = "0 0 0"
         ;desc = "Desk Phone #2"
         model = "phone2.def"
         angle = "0"
       }
       deskitems_playingcards:e =
       {
         origin = "0 0 0"
         ;desc = "Playing Cards"
         model = "cards.def"
       }
       deskitems_scissors:e =
       {
         origin = "0 0 0"
         ;desc = "Pair of Scissors"
         model = "scissors.def"
       }
       deskitems_softdrink:e =
       {
         origin = "0 0 0"
         ;desc = "Soda Can"
         model = "coke.def"
       }
       deskitems_software1:e =
       {
         origin = "0 0 0"
         ;desc = "Software Item #1"
         model = "software1.def"
       }
       deskitems_software3:e =
       {
         origin = "0 0 0"
         ;desc = "Software Item #3"
         model = "software3.def"
       }
       deskitems_tablelamp:e =
       {
         origin = "0 0 0"
         ;desc = "Table Lamp"
         model = "lamp.def"
       }
       deskitems_telescope1:e =
       {
         origin = "0 0 0"
         model = "scope1.def"
         angle = "0"
       }
       deskitems_telescope2:e =
       {
         origin = "0 0 0"
         ;desc = "SPECIAL CASE-Attach extra box around upper portion"
         model = "scope2.def"
         angle = "0"
       }
       deskitems_testtube:e =
       {
         origin = "0 0 0"
         ;desc = "Test Tube-For Labs"
         model = "testtube.def"
       }
       deskitems_tray:e =
       {
         origin = "0 0 0"
         ;desc = "Small metal lab tray"
         model = "tray.def"
       }
     }
       detail:b =
       {
         ;desc = "Used to fake details brushes."
         ;incl = "defpoly"
       }
     func.qtxfolder = {
       func_areaportal:b =
       {
         ;desc = "This is a non-visible variable size entity that divides the world into areas that are seperated when this portal is not activated. Must be enclosed in the middle of a door and should extend (height and width wise) into the door's surrounding frame (which must be made strictly from regular world brushes and not entities or detail brushes)."
         ;incl = "defpoly"
       }
       func_beam:e =
       {
         origin = "0 0 0"
         ;desc = "Beam effect."
       }
       func_box:b =
       {
         ;desc = "Explodable box that falls when boxes below it are destroyed. This can be made to spawn items, weapons, ammo, etc. and trigger its targets when destroyed."
         ;incl = "defpoly"
       }
       func_breakawaywall:b =
       {
         ;desc = "Special walltype that removes itself when triggered" $0D "  Will also trigger any func_areaportals that it targets."
         ;incl = "defpoly"
       }
       func_camera:b =
       {
         ;desc = "Camera used for cinematic sequences."
         ;incl = "defpoly"
       }
       func_clipbox:e =
       {
         origin = "0 0 0"
         ;desc = "Invisible bounding box used like a clip brush."
       }
       func_door:b =
       {
         ;desc = "Common sliding door."
         ;incl = "defpoly"
       }
       func_earthquake:e =
       {
         origin = "0 0 0"
         ;desc = "Causes a localized earthquake when triggered."
       }
       func_exploder:e =
       {
         origin = "0 0 0"
         ;desc = "Spawns an sprite based explosion effect when triggered. This can also trigger targets and call threads."
       }
       func_explodingwall:b =
       {
         ;desc = "Wall that falls down with an explosion effect when triggered or damaged."
         ;incl = "defpoly"
       }
       func_glass:b =
       {
         ;desc = "controls shattering for glass objects"
         ;incl = "defpoly"
       }
       func_group:b =
       {
         ;desc = "Not an entity. Merely an editor convenience used to group brushes together."
         ;incl = "defpoly"
       }
       func_illusionary:b =
       {
         ;desc = "Entity's brush will be visible but not solid and lets you walk through it. If "$22"targetname"$22" is set, this can be removed during the game by having a trigger's "$22"killtarget"$22" key point to it or by using the 'remove' script command."
         ;incl = "defpoly"
       }
       func_launcher:b =
       {
         ;desc = "Variable size entity that launches projectiles when triggered."
         ;incl = "defpoly"
       }
       func_multi_exploder:b =
       {
         ;desc = "Spawns multiple sprite based explosion effects when triggered."
         ;incl = "defpoly"
       }
       func_remove:b =
       {
         ;desc = "Used for area lighting. Brush will remove itself from the world when map starts, only the light emitted by its faces will remain."
         ;incl = "defpoly"
       }
       func_respawn:e =
       {
         origin = "0 0 0"
         ;desc = "This will spawn a model when triggered."
       }
       func_rotatingdoor:b =
       {
         ;desc = "Rotating door."
         angle = "0"
         ;incl = "defpoly"
       }
       func_scriptdoor:b =
       {
         ;desc = "Script door. Opening and closing movement/rotation must be done with script threads. By default, doors must be used to open. Doors that touch are automatically teamed and operate as a single unit. Only doors of the same type that touch can be teamed."
         angle = "0"
         ;incl = "defpoly"
       }
       func_scriptmodel:e =
       {
         origin = "0 0 0"
         ;desc = "This will spawn a script slave model completely dependent on script commands for its behavior."
       }
       func_scriptobject:b =
       {
         ;desc = "Script slave brush model completely dependent on script commands for its behavior. Use for any moving mechanism other than doors."
         ;incl = "defpoly"
       }
       func_scriptorigin:e =
       {
         origin = "0 0 0"
         ;desc = "Used as an alternate origin for objects."
       }
       func_securitycamera:e =
       {
         origin = "0 0 0"
         ;desc = "Camera used for security cameras. Has a visible model."
         model = "camera.def"
       }
       func_shatter:b =
       {
         ;desc = "For shattering objects other than glass."
         ;incl = "defpoly"
       }
       func_spawn:e =
       {
         origin = "0 0 0"
         ;desc = "Spawns a model when triggered."
       }
       func_spawnchain:e =
       {
         origin = "0 0 0"
         ;desc = "Tries to spawn a model out of sight when triggered."
       }
       func_spawnoutofsight:e =
       {
         origin = "0 0 0"
         ;desc = "This will try to spawn a model out of sight when triggered."
       }
       func_throwobject:e =
       {
         origin = "0 0 0"
         ;desc = "This is a model actors can pickup and throw at players or other actors."
       }
       func_volumetric:b =
       {
         ;desc = "Use this to make non-solid volumes for fog effects etc."
         ;incl = "defpoly"
       }
       func_wall:b =
       {
         ;desc = "Solid wall removable by killtargetting or scripting"
         ;incl = "defpoly"
       }
     }
     furniture.qtxfolder = {
       furniture_alter:e =
       {
         origin = "0 0 0"
         ;desc = "Rituals Sacrificial Stone Alter"
         model = "alter.def"
       }
       furniture_cabinet:e =
       {
         origin = "0 0 0"
         ;desc = "Large Metal Storage Cabinet"
         model = "cabinet.def"
       }
       furniture_chair1:e =
       {
         origin = "0 0 0"
         model = "chair.def"
       }
       furniture_chair2:e =
       {
         origin = "0 0 0"
         model = "chair1.def"
       }
       furniture_chair3:e =
       {
         origin = "0 0 0"
         model = "chair2.def"
       }
     chairs.qtxfolder = {
       furniture_chairs_largeblack:e =
       {
         origin = "0 0 0"
         ;desc = "High back office chair-Black"
         model = "chair_large2.def"
         angle = "0"
       }
       furniture_chairs_largered:e =
       {
         origin = "0 0 0"
         ;desc = "High back office chair-Red"
         model = "chair_large1.def"
       }
       furniture_chairs_smallblue:e =
       {
         origin = "0 0 0"
         ;desc = "Small desk chair-Blue"
         model = "chair_small2.def"
       }
       furniture_chairs_smallgreen:e =
       {
         origin = "0 0 0"
         ;desc = "Small desk chair-Green"
         model = "chair_small1.def"
       }
     }
       furniture_coatrack:e =
       {
         origin = "0 0 0"
         ;desc = "Coat Rack"
         model = "coatrack.def"
       }
     }
     fx.qtxfolder = {
       fx_bubbles:e =
       {
         origin = "0 0 0"
         ;desc = "Bubble generator"
         model = "bubbles.def"
       }
       fx_explosion:e =
       {
         origin = "0 0 0"
         ;desc = "Explosion"
         model = "sphere3.def"
       }
       fx_fire:e =
       {
         origin = "0 0 0"
         ;desc = "This creates a fire sprite."
       }
       fx_firegen:e =
       {
         origin = "0 0 0"
         ;desc = "Fire Generator"
         model = "firegen.def"
       }
       fx_laser:e =
       {
         origin = "0 0 0"
         ;desc = "Laser"
         model = "laser.def"
       }
       fx_muzzleflash:e =
       {
         origin = "0 0 0"
         ;desc = "Muzzle Flash"
         model = "muzflash1.def"
       }
       fx_muzzleflash2:e =
       {
         origin = "0 0 0"
         ;desc = "Muzzle Flash 2"
         model = "muzflash2.def"
       }
       fx_pulsebeam:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Beam"
         model = "beam.def"
       }
       fx_pulsebeam2:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Beam 2"
         model = "beam2.def"
       }
       fx_pulseline:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Trailing Beam Line"
         model = "ln.def"
       }
       fx_pulsesphere:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Sphere Explosion"
         model = "psphere.def"
       }
       fx_smokegen:e =
       {
         origin = "0 0 0"
         ;desc = "Smoke Generator"
         model = "smokegen.def"
       }
       fx_sprite:e =
       {
         origin = "0 0 0"
         ;desc = "Sprite generator."
         model = "fxsprite.def"
       }
       fx_steamgen:e =
       {
         origin = "0 0 0"
         ;desc = "Steam Generator"
         model = "steamgen.def"
       }
       fx_uwshock:e =
       {
         origin = "0 0 0"
         ;desc = "Shock effect used in UWPASS"
         model = "uwshock.def"
       }
     }
     gib.qtxfolder = {
       gib_Arm:e =
       {
         origin = "0 0 0"
         ;desc = "Arm Gib"
         model = "gibarm.def"
       }
       gib_Concrete1:e =
       {
         origin = "0 0 0"
         ;desc = "Concrete Gib 1"
         model = "concrete1.def"
       }
       gib_Concrete2:e =
       {
         origin = "0 0 0"
         ;desc = "Concrete Gib 2"
         model = "concrete2.def"
       }
       gib_Concrete3:e =
       {
         origin = "0 0 0"
         ;desc = "Concrete Gib 3"
         model = "concrete3.def"
       }
       gib_Concrete4:e =
       {
         origin = "0 0 0"
         ;desc = "Concrete Gib 4"
         model = "concrete4.def"
       }
       gib_Concrete5:e =
       {
         origin = "0 0 0"
         ;desc = "Concrete Gib 5"
         model = "concrete5.def"
       }
       gib_Head:e =
       {
         origin = "0 0 0"
         ;desc = "Head Gib"
         model = "gibhead.def"
       }
       gib_Leg:e =
       {
         origin = "0 0 0"
         ;desc = "Leg Gib"
         model = "gibleg.def"
       }
       gib_ReconahArm:e =
       {
         origin = "0 0 0"
         ;desc = "Reconah Arm"
         model = "recbio_arm.def"
       }
       gib_ReconahGun:e =
       {
         origin = "0 0 0"
         ;desc = "Reconah Gun"
         model = "recbio_gun.def"
         angle = "0"
       }
       gib_ReconahLeg:e =
       {
         origin = "0 0 0"
         ;desc = "Reconah Leg"
         model = "recbio_leg.def"
       }
       gib_ReconahTorso:e =
       {
         origin = "0 0 0"
         ;desc = "Reconah Torso"
         model = "recbio_torso.def"
         angle = "0"
       }
       gib_Rib:e =
       {
         origin = "0 0 0"
         ;desc = "Rib Gib"
         model = "gibribs.def"
       }
       gib_feather:e =
       {
         origin = "0 0 0"
         ;desc = "Feather"
         model = "feather.def"
       }
       gib_gib1:e =
       {
         origin = "0 0 0"
         model = "gib1.def"
       }
       gib_gib2:e =
       {
         origin = "0 0 0"
         model = "gib2.def"
       }
       gib_torso:e =
       {
         origin = "0 0 0"
         ;desc = "Torso Gib"
         model = "gibtorso.def"
       }
     }
     info.qtxfolder = {
       info_grav_pathnode:e =
       {
         origin = "0 0 0"
         ;desc = "Gravity pathnode: attracts players who walk within its set radius. You can daisy-chain these in a path and the first node in the path must have the HEADNODE spawnflag set. The players can be attracted to any node in the path depending on which is closest to them. Activating or deactivating the head node with script commands (acticate,deactivate) will activate or deactivate all the nodes in the path."
       }
       info_notnull:e =
       {
         origin = "0 0 0"
         ;desc = "Used as a positional target for func_beam, func_launcher and trigger_pushany."
       }
       info_null:e =
       {
         origin = "0 0 0"
         ;desc = "Used as a positional target for lights (spotlight effect)."
       }
       info_pathnode:e =
       {
         origin = "0 0 0"
         ;desc = "Path location nodes used for actor control in scripts. They are used mainly to make them move around from one place to another and do stuff using script commands."
       }
     player.qtxfolder = {
       info_player_coop:e =
       {
         origin = "0 0 0"
         ;desc = "Potential spawning position for coop games."
       }
       info_player_deathmatch:e =
       {
         origin = "0 0 0"
         ;desc = "Potential spawning position for deathmatch games."
       }
       info_player_intermission:e =
       {
         origin = "0 0 0"
       }
       info_player_start:e =
       {
         origin = "0 0 0"
         ;desc = "The normal starting point for a level."
       }
     }
       info_splinepath:e =
       {
         origin = "0 0 0"
         ;desc = "Script Object Spline Path Node."
         model = "spline.def"
       }
     }
     inventory.qtxfolder = {
       inventory_U4Sample:e =
       {
         origin = "0 0 0"
         ;desc = "U4 Sample"
         model = "u4_sample.def"
       }
       inventory_blueprints:e =
       {
         origin = "0 0 0"
         ;desc = "Blueprints"
         model = "blueprints.def"
       }
       inventory_candybar:e =
       {
         origin = "0 0 0"
         ;desc = "Candy Bar"
         model = "candybar.def"
       }
       inventory_coin:e =
       {
         origin = "0 0 0"
         ;desc = "Coin"
         model = "coin.def"
       }
       inventory_comlink:e =
       {
         origin = "0 0 0"
         ;desc = "Remote Communications Device"
         model = "comlink.def"
       }
       inventory_cookies:e =
       {
         origin = "0 0 0"
         ;desc = "Cookies"
         model = "cookies.def"
       }
       inventory_dollar:e =
       {
         origin = "0 0 0"
         ;desc = "Dollar Money - A thin little dollar"
         model = "dollar.def"
       }
       inventory_envelope:e =
       {
         origin = "0 0 0"
         ;desc = "Package"
         model = "envelope.def"
       }
       inventory_evidence:e =
       {
         origin = "0 0 0"
         ;desc = "Evidence envelope"
         model = "evidence.def"
       }
       inventory_genericpulsepart:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Weapon Part - Place only one per level."
       }
       inventory_keyring:e =
       {
         origin = "0 0 0"
         ;desc = "Keys for locked doors"
         model = "keys.def"
       }
       inventory_moneybag:e =
       {
         origin = "0 0 0"
         ;desc = "Money bags from heist that you can pick-up"
         model = "moneybag_inv.def"
       }
       inventory_passcode:e =
       {
         origin = "0 0 0"
         ;desc = "Password Paper"
         model = "password.def"
       }
       inventory_pulsepart1:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Weapon Part #1"
         model = "pulsepart1.def"
       }
       inventory_pulsepart2:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Weapon Part #2"
         model = "pulsepart2.def"
       }
       inventory_pulsepart3:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Weapon Part #3"
         model = "pulsepart3.def"
       }
       inventory_silencer:e =
       {
         origin = "0 0 0"
         ;desc = "Silencer for Magnum & Assault Rifle"
         model = "silencer.def"
       }
     }
     items.qtxfolder = {
       items_CheesyPoofs:e =
       {
         origin = "0 0 0"
         ;desc = "Cheesy Poofs - Yummy"
         model = "poofs.def"
       }
       items_alarm:e =
       {
         origin = "0 0 0"
         ;desc = "alarm"
         model = "alarm.def"
         angle = "0"
       }
       items_axepick:e =
       {
         origin = "0 0 0"
         ;desc = "Pickaxe"
         model = "axepick.def"
       }
       items_bag:e =
       {
         origin = "0 0 0"
         ;desc = "Cement Bag"
         model = "bag.def"
       }
       items_battery:e =
       {
         origin = "0 0 0"
         model = "battery.def"
       }
       items_bellalarm:e =
       {
         origin = "0 0 0"
         ;desc = "bell_alarm"
         model = "bell_alarm.def"
         angle = "0"
       }
       items_belt:e =
       {
         origin = "0 0 0"
         model = "belt.def"
       }
       items_briefcase:e =
       {
         origin = "0 0 0"
         model = "briefcase.def"
       }
     bulb.qtxfolder = {
       items_bulb_off:e =
       {
         origin = "0 0 0"
         ;desc = "Hanging Bulb Off"
         model = "bulb_off.def"
       }
       items_bulb_on:e =
       {
         origin = "0 0 0"
         ;desc = "Hanging Bulb"
         model = "bulb.def"
       }
     }
       items_doorbell:e =
       {
         origin = "0 0 0"
         ;desc = "Doorbell"
         model = "doorbell.def"
       }
       items_fireaxe:e =
       {
         origin = "0 0 0"
         ;desc = "Fireaxe"
         model = "axefire.def"
       }
       items_glasses:e =
       {
         origin = "0 0 0"
         ;desc = "Glasses"
         model = "glasses.def"
       }
       items_hammer1:e =
       {
         origin = "0 0 0"
         ;desc = "Large Sledgehammer"
         model = "hammer1.def"
       }
       items_hammer2:e =
       {
         origin = "0 0 0"
         model = "hammer2.def"
       }
       items_hanglite:e =
       {
         origin = "0 0 0"
         ;desc = "Hanging light fixture"
         model = "hanglite.def"
       }
     hanglite1.qtxfolder = {
       items_hanglite1_off:e =
       {
         origin = "0 0 0"
         ;desc = "Hanging light fixture Off"
         model = "hanglight1_off.def"
       }
       items_hanglite1_on:e =
       {
         origin = "0 0 0"
         ;desc = "Hanging light fixture"
         model = "hanglight1.def"
       }
     }
     hanglite2.qtxfolder = {
       items_hanglite2_off:e =
       {
         origin = "0 0 0"
         ;desc = "Hanging light fixture Off"
         model = "hanglight2_off.def"
       }
       items_hanglite2_on:e =
       {
         origin = "0 0 0"
         ;desc = "Hanging light fixture"
         model = "hanglight2.def"
       }
     }
       items_hanglite3:e =
       {
         origin = "0 0 0"
         ;desc = "Hanging light fixture"
         model = "hanglite3.def"
       }
       items_hardhat:e =
       {
         origin = "0 0 0"
         model = "hardhat.def"
       }
       items_moneybag:e =
       {
         origin = "0 0 0"
         ;desc = "Money bag from heist"
         model = "moneybag.def"
       }
       items_toolbox:e =
       {
         origin = "0 0 0"
         ;desc = "Toolbox"
         model = "toolbox.def"
       }
     }
       lensflare:e =
       {
         origin = "0 0 0"
         ;desc = "Lensflare effect sprite."
       }
     light.qtxfolder = {
       light:e =
       {
         origin = "0 0 0"
         ;desc = "Can't get "$22"on_style"$22" and "$22"off_style"$22" to work .." $0D "  "$22"and I don't know why Capteen!"$22""
       }
       light_ramp:e =
       {
         origin = "0 0 0"
       }
     }
     misc.qtxfolder = {
       misc_medkit:b =
       {
         ;desc = "Variable size entity both visible and solid in the game. This heals players to their max health when used."
         ;incl = "defpoly"
       }
       misc_oxygen:b =
       {
         ;desc = "Variable size entity. This will reset the drowning time when touched - only responds to players."
         ;incl = "defpoly"
       }
     teleporter.qtxfolder = {
       misc_teleporter:b =
       {
         ;desc = "Touching this entity will teleport players to the targeted misc_teleporter_destination."
         ;incl = "defpoly"
       }
       misc_teleporter_dest:e =
       {
         origin = "0 0 0"
         ;desc = "Teleporter destination location. Point a misc_teleporter at this."
         angle = "0"
       }
     }
     }
     plant.qtxfolder = {
       plant_banktree:e =
       {
         origin = "0 0 0"
         ;desc = "Small Potted Tree"
         model = "banktree.def"
       }
       plant_citytree:e =
       {
         origin = "0 0 0"
         ;desc = "SPECIAL CASE-Attach extra box around upper portion"
         model = "citytree.def"
       }
       plant_coral:e =
       {
         origin = "0 0 0"
         ;desc = "Coral Plant-Spindly"
         model = "corplant.def"
         angle = "0"
       }
     coraltypes.qtxfolder = {
       plant_coraltypes_blue:e =
       {
         origin = "0 0 0"
         ;desc = "Coral Plant-Spindly-Blue"
         model = "corplant2.def"
       }
       plant_coraltypes_brown:e =
       {
         origin = "0 0 0"
         ;desc = "Coral Plant-Spindly-Brown Redish"
         model = "corplant3.def"
       }
       plant_coraltypes_green:e =
       {
         origin = "0 0 0"
         ;desc = "Coral Plant-Spindly-Green"
         model = "corplant1.def"
       }
     }
       plant_flower:e =
       {
         origin = "0 0 0"
         model = "flower.def"
       }
       plant_palmtree:e =
       {
         origin = "0 0 0"
         ;desc = "Palmtree"
         model = "palmtree.def"
       }
       plant_plant:e =
       {
         origin = "0 0 0"
         model = "plant1.def"
       }
       plant_seaweed:e =
       {
         origin = "0 0 0"
         model = "seaweed.def"
       }
       plant_shrub:e =
       {
         origin = "0 0 0"
         model = "shrub.def"
       }
       plant_tree:e =
       {
         origin = "0 0 0"
         ;desc = "Tree"
         model = "tree1.def"
       }
     }
       skeetlauncher:b =
       {
         ;desc = "The skeetlauncher used in the Hardcorps Training Center."
         ;incl = "defpoly"
       }
     trap.qtxfolder = {
       trap_bouncingbetty:e =
       {
         origin = "0 0 0"
         ;desc = "Bouncing Betty trap."
         model = "iris.def"
       }
       trap_camgun:e =
       {
         origin = "0 0 0"
         ;desc = "Rotating security machine gun turret that tracks and fires at players. This is the ceiling 4 barrel model."
         model = "camgun2.def"
         angle = "0"
       }
       trap_claymore:e =
       {
         origin = "0 0 0"
         model = "claymore.def"
       }
       trap_dynamite:e =
       {
         origin = "0 0 0"
         ;desc = "Dynamite Trap"
         model = "dynamite.def"
       }
     missilelauncher.qtxfolder = {
       trap_missilelauncher_base:e =
       {
         origin = "0 0 0"
         ;desc = "Missile Launcher - Base."
         model = "launcher_base.def"
       }
       trap_missilelauncher_top:e =
       {
         origin = "0 0 0"
         ;desc = "Missile Launcher - Top."
         model = "launcher_top.def"
       }
     }
       trap_oldlauncher:e =
       {
         origin = "0 0 0"
         ;desc = "Old Launcher Model"
         model = "launcher.def"
       }
     rocketturret.qtxfolder = {
       trap_rocketturret:e =
       {
         origin = "0 0 0"
         ;desc = "Guided rocket turret complete with base."
         model = "rockturtop.def"
         angle = "0"
       }
       trap_rocketturret_base:e =
       {
         origin = "0 0 0"
         ;desc = "Rocket turret."
         model = "rockturbase.def"
       }
     }
     securityturret.qtxfolder = {
       trap_securityturret:e =
       {
         origin = "0 0 0"
         ;desc = "Rotating security machine gun turret."
         model = "turtop.def"
       }
       trap_securityturret_base:e =
       {
         origin = "0 0 0"
         ;desc = "Death to vermin"
         model = "turbase.def"
       }
     }
     }
     trigger.qtxfolder = {
       trigger_SetLightStyle:e =
       {
         origin = "0 0 0"
         ;desc = "Used for controlling surface based light sources."
       }
       trigger_camerause:b =
       {
         ;desc = "Variable size trigger activates a camera."
         ;incl = "defpoly"
       }
       trigger_changelevel:b =
       {
         ;desc = "Level-change trigger."
         ;incl = "defpoly"
       }
       trigger_damagetargets:b =
       {
         ;desc = "Player-damaging trigger"
         ;incl = "defpoly"
       }
       trigger_damagetargetsfixed:e =
       {
         origin = "0 0 0"
         ;desc = "Fixed size version of trigger_damagetargets"
       }
       trigger_damagethreshold:b =
       {
         ;desc = "Trigger damaging targets after taking a big enough hit."
         ;incl = "defpoly"
       }
       trigger_exit:b =
       {
         ;desc = "Variable size trigger displaying Exit sign."
         ;incl = "defpoly"
       }
       trigger_hurt:b =
       {
         ;desc = "Variable size trigger thats will inflict damage when touched."
         ;incl = "defpoly"
       }
       trigger_lightramp:e =
       {
         origin = "0 0 0"
         ;desc = "Ramps light values on surface based light sources."
       }
       trigger_multiple:b =
       {
         ;desc = "Variable size repeatable trigger."
         ;incl = "defpoly"
       }
       trigger_mutate:b =
       {
         ;desc = "Transform players into a mutant."
         ;incl = "defpoly"
       }
       trigger_once:b =
       {
         ;desc = "One-shot trigger"
         ;incl = "defpoly"
       }
       trigger_particles:e =
       {
         origin = "0 0 0"
         ;desc = "This will spawn particles when triggered."
       }
       trigger_push:b =
       {
         ;desc = "Variable size trigger. Pushes players, monsters, actors and projectiles as if they were caught in a heavy wind when touched."
         angle = "0"
         ;incl = "defpoly"
       }
       trigger_pushany:b =
       {
         ;desc = "Same thing as a trigger_push but will push entities in any direction set by "$22"angles"$22"."
         ;incl = "defpoly"
       }
       trigger_randomparticles:e =
       {
         origin = "0 0 0"
         ;desc = "This will spawn particles at random time intervals when triggered."
       }
       trigger_randomspeaker:e =
       {
         origin = "0 0 0"
         ;desc = "This will play a sound at random time intervals when triggered. Don't use this with ambient looping sounds."
       }
       trigger_relay:e =
       {
         origin = "0 0 0"
         ;desc = "This fixed size trigger cannot be touched, it can only be activated by other triggers and act as an intermediary to trigger other entities."
       }
       trigger_secret:b =
       {
         ;desc = "Variable size secret counter trigger."
         ;incl = "defpoly"
       }
       trigger_speaker:e =
       {
         origin = "0 0 0"
         ;desc = "Variable size trigger. This will call the script thread when touched or killed. Can also trigger its targets."
       }
       trigger_thread:b =
       {
         ;desc = "Calls a script thread when touched or killed."
         ;incl = "defpoly"
       }
       trigger_use:b =
       {
         ;desc = "Variable size trigger that fires its targets when simultanously touched and 'used' by a player."
         ;incl = "defpoly"
       }
       trigger_useonce:b =
       {
         ;desc = "Variable size trigger that fires its targets when simultanously touched and 'used' by a player. Triggers once, then removes itself."
         ;incl = "defpoly"
       }
     }
     vehicles.qtxfolder = {
       vehicles_HCBoat:e =
       {
         origin = "0 0 0"
         ;desc = "Hardcorps Boat"
         model = "hcboat.def"
       }
       vehicles_Sub:e =
       {
         origin = "0 0 0"
         ;desc = "Sub"
         model = "sub.def"
       }
     atv.qtxfolder = {
       vehicles_atv:e =
       {
         origin = "0 0 0"
         ;desc = "ATV"
         model = "atv.def"
         angle = "0"
       }
       vehicles_atv_backtire:e =
       {
         origin = "0 0 0"
         ;desc = "ATV Tire"
         model = "atvtire_back.def"
       }
       vehicles_atv_fronttire:e =
       {
         origin = "0 0 0"
         ;desc = "ATV Tire"
         model = "atvtire_front.def"
       }
     }
       vehicles_bulldozer:e =
       {
         origin = "0 0 0"
         ;desc = "Bulldozer"
         model = "bulldozer.def"
         angle = "0"
       }
       vehicles_car:e =
       {
         origin = "0 0 0"
         ;desc = "Street Cars - Five skins"
         model = "car.def"
         angle = "0"
       }
       vehicles_crane:e =
       {
         origin = "0 0 0"
         ;desc = "Crane"
         model = "crane.def"
       }
       vehicles_forklift:e =
       {
         origin = "0 0 0"
         ;desc = "Forklift"
         model = "forklift.def"
         angle = "0"
       }
     humv.qtxfolder = {
       vehicles_humv_backtire:e =
       {
         origin = "0 0 0"
         ;desc = "HUMV Tire"
         model = "humv_back_tire.def"
       }
       vehicles_humv_fronttire:e =
       {
         origin = "0 0 0"
         ;desc = "HUMV Tire"
         model = "humv_front_tire.def"
       }
       vehicles_humv_tire:e =
       {
         origin = "0 0 0"
         ;desc = "HUMV Tire"
         model = "humv_tire.def"
         angle = "0"
       }
     }
       vehicles_humvlowpoly:e =
       {
         origin = "0 0 0"
         model = "humv_low.def"
       }
     lamprey.qtxfolder = {
       vehicles_lamprey:e =
       {
         origin = "0 0 0"
         ;desc = "Lamprey Helicopter"
         model = "lamprey.def"
       }
       vehicles_lamprey_rotors:e =
       {
         origin = "0 0 0"
         ;desc = "Lamprey Rotors"
         model = "lamprey_rotors.def"
       }
       vehicles_lamprey_sintek:e =
       {
         origin = "0 0 0"
         ;desc = "Lamprey Sintek Helicopter"
         model = "lamprey_sintek.def"
       }
     }
       vehicles_minitruck:e =
       {
         origin = "0 0 0"
         ;desc = "Mini Truck - Street scenes - Low Poly"
         model = "minitrucklow.def"
       }
       vehicles_truck:e =
       {
         origin = "0 0 0"
         ;desc = "Troop Transport Truck"
         model = "truck.def"
         angle = "0"
       }
       vehicles_van:e =
       {
         origin = "0 0 0"
         ;desc = "Cool Grue Van"
         model = "van.def"
       }
     }
       waypoint:e =
       {
         origin = "0 0 0"
         ;desc = "Used as a positioning device for objects."
       }
     weapon.qtxfolder = {
       weapon_assaultrifle:e =
       {
         origin = "0 0 0"
         ;desc = "Assault Rifle - World Model"
         model = "genbullet.def"
       }
       weapon_heligun:e =
       {
         origin = "0 0 0"
         model = "heligun.def"
       }
       weapon_highvelocitygun:e =
       {
         origin = "0 0 0"
         ;desc = "HV Chain Gun - World Model"
         model = "hvgun.def"
       }
       weapon_magnum:e =
       {
         origin = "0 0 0"
         model = "magnum.def"
       }
       weapon_pulserifle:e =
       {
         origin = "0 0 0"
         ;desc = "Pulse Rifle - World Model"
         model = "pulse2.def"
       }
       weapon_quantumd:e =
       {
         origin = "0 0 0"
         ;desc = "Quantum Destabilizer - World Model"
         model = "quantum.def"
       }
       weapon_rocketlauncher:e =
       {
         origin = "0 0 0"
         ;desc = "Rocket Launcher - World Model"
         model = "rlaunch.def"
       }
       weapon_shotgun:e =
       {
         origin = "0 0 0"
         model = "shotgun.def"
       }
       weapon_sledgehammer:e =
       {
         origin = "0 0 0"
         ;desc = "Sledge Hammer"
         model = "sledgeham.def"
       }
       weapon_sniperrifle:e =
       {
         origin = "0 0 0"
         ;desc = "Sniper Rifle - World Model"
         model = "sniperrifle.def"
       }
       weapon_speargun:e =
       {
         origin = "0 0 0"
         ;desc = "Speargun"
         model = "speargun.def"
       }
       weapon_stun:e =
       {
         origin = "0 0 0"
         ;desc = "Stun gun - World Model"
         model = "stun.def"
       }
       weapon_wrench:e =
       {
         origin = "0 0 0"
         model = "wrench.def"
       }
     }
     world.qtxfolder = {
       world_FireExtinguisher:e =
       {
         origin = "0 0 0"
         ;desc = "Fire Extinguisher"
         model = "fire_ext.def"
       }
       world_acduct:e =
       {
         origin = "0 0 0"
         ;desc = "Air Conditioning Duct"
         model = "acduct.def"
       }
       world_acvent:e =
       {
         origin = "0 0 0"
         ;desc = "Air Conditioner Vent"
         model = "acvent.def"
       }
       world_barrel:e =
       {
         origin = "0 0 0"
         ;desc = "Large Metal Trash Container"
         model = "can.def"
       }
       world_blockade:e =
       {
         origin = "0 0 0"
         ;desc = "Blockade Saw-Horse"
         model = "blockade.def"
       }
       world_boxfan:e =
       {
         origin = "0 0 0"
         ;desc = "Box Fan"
         model = "boxfan.def"
       }
       world_bullhorn:e =
       {
         origin = "0 0 0"
         ;desc = "Bull Horn"
         model = "bullhorn.def"
         angle = "0"
       }
       world_firebarrel:e =
       {
         origin = "0 0 0"
         ;desc = "Large Metal Trash Container with fire spewing from it!!!"
         model = "firecan.def"
       }
       world_firelog:e =
       {
         origin = "0 0 0"
         ;desc = "Logs for the Fire"
         model = "firelog.def"
         angle = "0"
       }
       world_hydrant:e =
       {
         origin = "0 0 0"
         ;desc = "Fire Hydrant"
         model = "hydrant.def"
       }
       world_mailbox:e =
       {
         origin = "0 0 0"
         ;desc = "US Mailbox"
         model = "mailbox.def"
       }
       world_meter:e =
       {
         origin = "0 0 0"
         ;desc = "Parking Meter"
         model = "meter.def"
       }
       world_newsbox:e =
       {
         origin = "0 0 0"
         ;desc = "Newspaper Dispenser"
         model = "news.def"
         angle = "0"
       }
       world_o2tank:e =
       {
         origin = "0 0 0"
         ;desc = "O2 Tank"
         model = "o2tank.def"
       }
       world_portolet:e =
       {
         origin = "0 0 0"
         model = "portolet.def"
       }
       world_propane:e =
       {
         origin = "0 0 0"
         ;desc = "Propane Tank"
         model = "propane.def"
       }
       world_safelite:e =
       {
         origin = "0 0 0"
         ;desc = "Emergency Light - Red"
         model = "safelite.def"
       }
       world_shipcrate:e =
       {
         origin = "0 0 0"
         model = "shipcrate.def"
       }
     sign.qtxfolder = {
       world_sign_large:e =
       {
         origin = "0 0 0"
         ;desc = "Vanity Billboard"
         model = "signbig.def"
         angle = "0"
       }
       world_sign_ritual:e =
       {
         origin = "0 0 0"
         ;desc = "Ritual Billboard"
         model = "ritualsign.def"
       }
       world_sign_small:e =
       {
         origin = "0 0 0"
         ;desc = "Your Ad Here Billboard"
         model = "signsmall.def"
         angle = "0"
       }
       world_sign_street:e =
       {
         origin = "0 0 0"
         ;desc = "Street Sign-Lamar and McKinney"
         model = "streetsign.def"
       }
     }
       world_sink:e =
       {
         origin = "0 0 0"
         ;desc = "Bathroom Sink"
         model = "sink.def"
       }
       world_streetlight:e =
       {
         origin = "0 0 0"
         ;desc = "Streetlight"
         model = "streetlight.def"
       }
       world_toilet:e =
       {
         origin = "0 0 0"
         ;desc = "Toilet"
         model = "toilet.def"
       }
       world_torch:e =
       {
         origin = "0 0 0"
         ;desc = "Torch for Fire"
         model = "torch.def"
       }
       world_trashcan1:e =
       {
         origin = "0 0 0"
         ;desc = "Trash Can-Round and Metal"
         model = "trashcan1.def"
       }
       world_trashcan2:e =
       {
         origin = "0 0 0"
         ;desc = "Trash Can-Square and Plastic"
         model = "trashcan2.def"
       }
       world_trashcan3:e =
       {
         origin = "0 0 0"
         ;desc = "Desk Trash Can-Small and Plastic"
         model = "trashcan3.def"
       }
       world_urinal:e =
       {
         origin = "0 0 0"
         ;desc = "Urinal"
         model = "urinal.def"
         angle = "0"
       }
       world_usflag:e =
       {
         origin = "0 0 0"
         ;desc = "US Flag-Animated"
         model = "flag.def"
       }
       world_wirespool:e =
       {
         origin = "0 0 0"
         ;desc = "Wirespool, found at construction sites"
         model = "wirespool.def"
       }
       world_wreckingball:e =
       {
         origin = "0 0 0"
         ;desc = "Wrecking Ball."
         model = "wreckball.def"
       }
     }
       worldspawn:b =
       {
         ;desc = "Owner of the world.  Only mess with keys & flags."
         ;incl = "defpoly"
       }
     }
    // ENTQTX

  }

  Entity forms.qctx =
  { // ENTFRM
    Ammo_10mm:form =
    {
     Help = "Ammo Bullet Weapons - 10mm (Large)"
     bbox = '-10.56 -16.16 0.00  10.56 16.16 18.07 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Ammo_50mm:form =
    {
     Help = "Ammo 50mm - HV Chain Gun"
     bbox = '-12.48 -19.10 0.00  12.48 19.10 21.35 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Ammo_Magnum:form =
    {
     Help = "Ammo Bullet Weapons - Magnum (Small)"
     bbox = '-2.00 -5.15 0.00  2.00 4.30 15.64 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Ammo_Plasma:form =
    {
     Help = "Ammo Energy Weapons - Plasma (Small)"
     bbox = '-2.49 -2.88 -0.00  2.49 2.87 32.59 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Ammo_Pulse:form =
    {
     Help = "Ammo Energy Weapons - Pulse Rifle (Large)"
     bbox = '-2.24 -7.51 0.00  2.26 7.49 35.25 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Ammo_Rockets:form =
    {
     Help = "Ammo Rockets"
     bbox = '-13.56 -12.04 0.00  9.93 12.06 23.96 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Ammo_Shotgun:form =
    {
     Help = "Ammo Shotgun"
     bbox = '-5.70 -5.67 0.00  5.73 5.67 10.91 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Ammo_SniperRifle:form =
    {
     Help = "Ammo Sniper Rifle"
     bbox = '-1.88 -6.95 -0.89  1.88 6.95 13.55 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Ammo_SpearGun:form =
    {
     Help = "Ammo Spear Gun - Pack"
     bbox = '0.00 -3.03 -1.24  71.14 2.98 1.31 1'
    }
    Ammo_SpiderMine:form =
    {
     Help = "Spider Mines Ammo Container"
     bbox = '-8.36 -8.81 0.00  8.27 7.82 19.74 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_Bat:form =
    {
     Help = "Bat"
     bbox = '-14.81 -19.59 -18.69  6.24 18.85 12.72 1'
    }
    Animals_BatLow:form =
    {
     Help = "Bat Low-Poly"
     bbox = '-15.22 -22.44 -20.05  9.07 22.92 16.66 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_Fish:form =
    {
     Help = "Fish"
     bbox = '-28.19 -7.08 -0.64  21.58 7.08 26.14 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal1" $0D "normal2" $0D "normal3"
       values = "normal1" $0D "normal2" $0D "normal3"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_Pigeon:form =
    {
     Help = "Pigeon"
     bbox = '-19.16 -24.63 -4.01  56.57 24.55 31.45 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_Rat:form =
    {
     Help = "Rat"
     bbox = '-24.60 -5.85 -1.27  13.21 5.63 15.17 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_TropicalFish_Blue:form =
    {
     Help = "No help yet"
     bbox = '-28.19 -7.08 -0.64  21.58 7.08 26.14 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_TropicalFish_Dope1:form =
    {
     Help = "Dopefish #1"
     bbox = '-33.83 -8.50 -0.76  25.90 8.50 31.37 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_TropicalFish_Dope2:form =
    {
     Help = "Dopefish #2"
     bbox = '-33.83 -8.50 -0.76  25.90 8.50 31.37 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_TropicalFish_Green:form =
    {
     Help = "No help yet"
     bbox = '-33.83 -8.50 -0.76  25.90 8.50 31.37 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Animals_TropicalFish_Yellow:form =
    {
     Help = "No help yet"
     bbox = '-28.19 -7.08 -0.64  21.58 7.08 26.14 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Armor_FlakJacket:form =
    {
     Help = "Flak Jacket"
     bbox = '-12.56 -10.42 0.00  12.56 10.42 5.79 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Armor_FlakPants:form =
    {
     Help = "Flak Pants"
     bbox = '-21.16 -6.24 0.00  15.36 11.01 4.26 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Armor_RiotHelmet:form =
    {
     Help = "Riot Helmet"
     bbox = '-14.20 -8.95 0.00  10.04 8.86 17.99 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Boss_EonAndPeon:form =
    {
     Help = "Eon and Peon"
     bbox = '-183.76 -192.21 -70.65  226.10 196.75 499.93 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "newpeon" $0D "peon"
       values = "newpeon" $0D "peon"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Boss_ThrallMaster:form =
    {
     Help = "Thrallmaster"
     bbox = '-358.55 -383.45 -48.72  508.52 432.14 596.15 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "thrall_base1" $0D "thrall_base2" $0D "thrall_base2"
       values = "normal" $0D "thrall_base1" $0D "thrall_base2" $0D "thrall_base2"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_005:form =
    {
     Help = "Health Powerup-Small - 5"
     bbox = '-2.46 -2.84 -0.00  2.46 2.84 25.17 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_020:form =
    {
     Help = "Health Powerup-Normal - 20"
     bbox = '-2.46 -2.84 -0.00  2.46 2.84 25.17 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_050:form =
    {
     Help = "Health Powerup-Large - 50 - Red"
     bbox = '-2.91 -3.36 0.00  2.91 3.36 26.41 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_100:form =
    {
     Help = "Health Powerup- 100 - Medkit"
     bbox = '-2.56 -8.90 -0.00  7.95 8.78 24.46 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_Apple:form =
    {
     Help = "Apple"
     bbox = '-2.47 -2.34 0.00  2.42 2.29 4.87 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_Banana:form =
    {
     Help = "Banana"
     bbox = '-10.20 -3.07 0.00  9.91 4.24 3.25 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_CheesyPoofs:form =
    {
     Help = "Cheesy Poofs - Yummy"
     bbox = '-7.12 -4.46 0.00  7.12 4.46 3.10 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_Cookies:form =
    {
     Help = "Cookies"
     bbox = '-8.90 -5.57 0.00  8.90 5.57 3.88 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_IceCream:form =
    {
     Help = "Ice Cream"
     bbox = '-7.29 -8.42 0.00  7.29 8.42 11.83 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_Milk:form =
    {
     Help = "Milk Carton"
     bbox = '-2.67 -2.84 0.00  2.67 2.84 13.46 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_Pizza:form =
    {
     Help = "Pizza"
     bbox = '-6.21 -8.19 0.00  9.71 7.84 1.68 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_Sandwich:form =
    {
     Help = "Sandwich"
     bbox = '-5.96 -7.24 0.00  5.96 7.24 4.03 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_SeaRation:form =
    {
     Help = "Sea Ration"
     bbox = '-3.29 -3.80 0.00  3.29 3.80 3.31 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_Soda:form =
    {
     Help = "Soda Pop"
     bbox = '-1.47 -1.69 0.00  1.47 1.69 6.51 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Health_U4:form =
    {
     Help = "Health Powerup-Small - 20"
     bbox = '-1.91 -2.20 0.00  1.91 2.20 17.59 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Hero_Blade:form =
    {
     Help = "Blade (Our Hero)"
     bbox = '-58.34 -50.39 -51.10  70.83 48.66 125.40 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Hero_Elexis:form =
    {
     Help = "Elexis Sinclaire"
     bbox = '-49.56 -33.96 -50.50  49.28 40.24 89.46 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Hero_HCOfficer1_AssaultRifle:form =
    {
     Help = "HC Officer 1 with Assault Rifle"
     bbox = '-65.61 -49.15 -4.38  54.53 43.17 84.80 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Hero_HCOfficer1_Magnum:form =
    {
     Help = "HC Officer 1 with Magnum"
     bbox = '-65.61 -49.15 -4.38  54.53 43.17 84.80 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Hero_HCOfficer1_NoWeapon:form =
    {
     Help = "HC Officer 1 with No Weapon"
     bbox = '-65.61 -49.15 -4.38  54.53 43.17 84.80 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Hero_HCOfficer1_Shotgun:form =
    {
     Help = "HC Officer 1 with Shotgun"
     bbox = '-65.61 -49.15 -4.38  54.53 43.17 84.80 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Hero_HCOfficer2_AssaultRifle:form =
    {
     Help = "HC Officer 2 with Assault Rifle"
     bbox = '-64.50 -48.32 -4.30  53.60 42.44 83.37 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Hero_HCOfficer2_Magnum:form =
    {
     Help = "HC Officer 2 with Magnum"
     bbox = '-64.50 -48.32 -4.30  53.60 42.44 83.37 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Hero_HCOfficer2_NoWeapon:form =
    {
     Help = "HC Officer 2 with No Weapon"
     bbox = '-64.50 -48.32 -4.30  53.60 42.44 83.37 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Hero_HCOfficer2_Shotgun:form =
    {
     Help = "HC Officer 2 with Shotgun"
     bbox = '-64.50 -48.32 -4.30  53.60 42.44 83.37 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Hero_JC:form =
    {
     Help = "JC"
     bbox = '-47.89 -33.66 -46.90  47.64 39.37 109.34 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Hero_Military_1LyinginBed:form =
    {
     Help = "Military #1 - Guy in Bed"
     bbox = '-33.61 -19.74 -2.51  47.83 19.30 25.11 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Hero_Military_2Injured:form =
    {
     Help = "Military #2 - Sitting injured"
     bbox = '-15.60 -34.53 -1.33  54.57 40.50 38.17 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Hero_Military_3Medic:form =
    {
     Help = "Military #3 - Medic"
     bbox = '-47.12 -32.13 -2.69  53.12 35.86 44.39 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Hero_Military_4Leader:form =
    {
     Help = "Military #4 - Guy who is the leader"
     bbox = '-19.60 -33.07 -2.92  64.98 32.35 76.03 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Innocent_Bum1:form =
    {
     Help = "No help yet"
     bbox = '-53.08 -42.18 -39.07  49.60 45.22 87.56 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Innocent_Bum1Sitting:form =
    {
     Help = "Bum 1 - Sitting"
     bbox = '-11.02 -34.29 -2.73  40.15 34.07 43.29 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Innocent_Bum1Sleeping:form =
    {
     Help = "Bum 1 - Sleeping"
     bbox = '-14.59 -44.19 -4.65  56.44 34.10 32.16 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Innocent_Bum2:form =
    {
     Help = "No help yet"
     bbox = '-53.08 -42.18 -39.07  42.61 45.22 87.56 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Innocent_Bum2Sitting:form =
    {
     Help = "Bum 2 - Sitting"
     bbox = '-11.02 -34.29 -2.73  40.15 34.07 43.29 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Innocent_Bum2Sleeping:form =
    {
     Help = "Bum 2 - Sleeping"
     bbox = '-14.59 -44.19 -4.65  56.44 34.10 32.16 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Innocent_ChemFemale:form =
    {
     Help = "Chem Plant Female"
     bbox = '-57.62 -34.71 -54.30  64.10 38.12 80.18 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     painthreshold: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Innocent_DeadGuy:form =
    {
     Help = "Dead Guy with missing hand."
     bbox = '-0.45 -16.74 -1.91  64.52 29.53 32.31 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Innocent_FemaleCivilian:form =
    {
     Help = "Female Civilian"
     bbox = '-57.62 -34.71 -54.30  64.10 38.12 79.09 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Innocent_MaleCivilian:form =
    {
     Help = "Male Civilian"
     bbox = '-47.12 -40.11 -52.31  58.85 47.14 85.46 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Innocent_XenoBody:form =
    {
     Help = "Xeno Body"
     bbox = '-35.16 -15.88 -0.81  44.74 16.46 81.38 1'
    }
    Inventory_BlueCard:form =
    {
     Help = "Blue Security Card"
     bbox = '-4.02 -2.68 0.00  4.02 2.68 8.25 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Inventory_ChemBioSuit:form =
    {
     Help = "Chem Bio-Suit"
     bbox = '-0.68 -40.00 0.00  2.32 16.25 68.21 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Inventory_Decoder:form =
    {
     Help = "Computer Decoder"
     bbox = '-8.66 -13.78 0.00  8.63 13.05 15.99 1'
    }
    Inventory_GlowStick:form =
    {
     Help = "Greeeeeeen Glowstick"
     bbox = '-8.55 -1.57 0.00  9.27 1.47 18.44 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Inventory_GreenCard:form =
    {
     Help = "Green Security Card"
     bbox = '-4.02 -2.68 0.00  4.02 2.68 8.25 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Inventory_Hand:form =
    {
     Help = "Hand"
     bbox = '-9.57 -4.33 0.00  8.36 5.13 4.80 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Inventory_IdentCard:form =
    {
     Help = "Identification Card"
     bbox = '-4.02 -2.68 0.00  4.02 2.68 0.07 1'
    }
    Inventory_OrangeCard:form =
    {
     Help = "Orange Security Card"
     bbox = '-4.02 -2.68 0.00  4.02 2.68 8.25 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Inventory_YellowCard:form =
    {
     Help = "Yellow Security Card"
     bbox = '-4.02 -2.68 0.00  4.02 2.68 8.25 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Bachrodai:form =
    {
     Help = "Bachrodai"
     bbox = '-111.67 -80.29 -10.38  122.23 85.25 164.18 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Beecadrone:form =
    {
     Help = "Beecadrone"
     bbox = '-85.69 -19.78 -43.07  32.32 15.32 29.60 1'
    }
    Monster_ConstrucWorker:form =
    {
     Help = "Construction Worker"
     bbox = '-55.49 -46.52 -57.69  62.45 46.10 93.87 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_ConstructForeman:form =
    {
     Help = "Construction Foreman"
     bbox = '-54.17 -48.99 -2.02  49.74 48.53 93.86 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "foreman_base" $0D "foreman_damage"
       values = "foreman_base" $0D "foreman_damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_DarkCaptain:form =
    {
     Help = "Dark Captain"
     bbox = '-72.52 -62.81 -8.32  115.01 91.71 126.86 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Eon:form =
    {
     Help = "Eon"
     bbox = '-12.23 -9.31 -0.85  14.27 10.34 38.35 1'
    }
    Monster_EvilBlade:form =
    {
     Help = "Evil Blade (Our Alter Ego)"
     bbox = '-58.34 -50.39 -51.10  70.83 48.66 125.40 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_GruntCapt_AssaultRifle:form =
    {
     Help = "Grunt Captain with Assault Rifle"
     bbox = '-57.32 -49.23 -56.88  57.20 49.41 98.28 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_GruntCapt_ChainGun:form =
    {
     Help = "Grunt Captain with Chain Gun"
     bbox = '-57.32 -49.23 -56.88  57.20 49.41 98.28 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_GruntCapt_GrenadeLauncher:form =
    {
     Help = "Grunt Captain with Grenade Launcher"
     bbox = '-57.32 -49.23 -56.88  57.20 49.41 98.28 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_GruntCapt_Magnum:form =
    {
     Help = "Grunt Captain with Magnum"
     bbox = '-57.32 -49.23 -56.88  57.20 49.41 98.28 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_GruntCapt_NoWeapon:form =
    {
     Help = "Grunt Captain with No Weapon"
     bbox = '-57.32 -49.23 -56.88  57.20 49.41 98.28 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_GruntCapt_RocketLauncher:form =
    {
     Help = "Grunt Captain with Rocket Launcher"
     bbox = '-57.32 -49.23 -56.88  57.20 49.41 98.28 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_GruntCapt_Shotgun:form =
    {
     Help = "Grunt Captain with Shotgun"
     bbox = '-57.32 -49.23 -56.88  57.20 49.41 98.28 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     attackmode: =
        {Txt = "&" Hint = "no hint yet1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Grunt_AssaultRifle:form =
    {
     Help = "Grunt with Assault Rifle"
     bbox = '-53.74 -46.15 -53.33  53.62 46.32 92.13 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     attackmode: =
        {Txt = "&" Hint = "no hint yet1"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Grunt_ChainGun:form =
    {
     Help = "Grunt with Chain Gun"
     bbox = '-53.74 -46.15 -53.33  53.62 46.32 92.13 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_Grunt_GrenadeLauncher:form =
    {
     Help = "Grunt with Grenade Launcher"
     bbox = '-53.74 -46.15 -53.33  53.62 46.32 92.13 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Grunt_Magnum:form =
    {
     Help = "Grunt with Magnum"
     bbox = '-53.74 -46.15 -53.33  53.62 46.32 92.13 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     attackmode: =
        {Txt = "&" Hint = "no hint yet1"
       }
     painthreshold: =
        {Txt = "&" Hint = "no hint yet1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Grunt_NoWeapon:form =
    {
     Help = "Grunt with No Weapon"
     bbox = '-53.74 -46.15 -53.33  53.62 46.32 92.13 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Grunt_RocketLauncher:form =
    {
     Help = "Grunt with Rocket Launcher"
     bbox = '-53.74 -46.15 -53.33  53.62 46.32 92.13 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     attackmode: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Grunt_Shotgun:form =
    {
     Help = "Grunt with Shotgun"
     bbox = '-53.74 -46.15 -53.33  53.62 46.32 92.13 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     attackmode: =
        {Txt = "&" Hint = "no hint yet1"
       }
     painthreshold: =
        {Txt = "&" Hint = "no hint yet1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Guerilla_AssaultRifle:form =
    {
     Help = "Guerilla Soldier with Assault Rifle"
     bbox = '-55.09 -48.57 -51.69  49.25 48.35 96.89 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Guerilla_ChainGun:form =
    {
     Help = "Guerilla Soldier with a Chain Gun"
     bbox = '-55.09 -48.57 -51.69  49.25 48.35 96.89 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Guerilla_Magnum:form =
    {
     Help = "Guerilla Soldier with Magnum"
     bbox = '-55.09 -48.57 -51.69  49.25 48.35 96.89 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_Guerilla_NoWeapon:form =
    {
     Help = "Guerilla Soldier with No Weapon"
     bbox = '-55.09 -48.57 -51.69  49.25 48.35 96.89 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Guerilla_RocketLauncher:form =
    {
     Help = "Guerilla Soldier with Rocket Launcher"
     bbox = '-55.09 -48.57 -51.69  49.25 48.35 96.89 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Guerilla_Shotgun:form =
    {
     Help = "Guerilla Soldier with Shotgun"
     bbox = '-55.09 -48.57 -51.69  49.25 48.35 96.89 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_Mancini:form =
    {
     Help = "Mancini"
     bbox = '-41.84 -43.05 -118.27  49.33 38.30 101.93 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Manumit:form =
    {
     Help = "Manumit"
     bbox = '-86.51 -73.01 -8.59  99.47 76.60 384.80 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     killthread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_MetalWorker:form =
    {
     Help = "Metal Works Worker"
     bbox = '-55.49 -46.52 -57.69  62.45 46.10 93.87 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "mworker_base" $0D "mworker_damage"
       values = "mworker_base" $0D "mworker_damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Nautic:form =
    {
     Help = "Nautic"
     bbox = '-89.63 -78.54 -62.09  73.77 74.40 126.52 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_OilRigWorker:form =
    {
     Help = "Oil Rig Worker"
     bbox = '-55.49 -46.52 -57.69  62.45 46.10 93.87 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "oworker_base" $0D "oworker_damage"
       values = "oworker_base" $0D "oworker_damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     speed: =
        {Txt = "&" Hint = "speed of movement"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Peon:form =
    {
     Help = "Peon"
     bbox = '-183.76 -192.21 -70.65  226.10 196.75 499.93 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "newpeon" $0D "peon"
       values = "newpeon" $0D "peon"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Pinphat:form =
    {
     Help = "Pinphat"
     bbox = '-83.84 -79.61 -8.33  86.27 67.41 147.00 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Reconah:form =
    {
     Help = "Reconah"
     bbox = '-69.87 -65.30 -61.38  70.93 70.29 108.26 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     attackmode: =
        {Txt = "&" Hint = "no hint yet1"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Seabonite:form =
    {
     Help = "Seabonite"
     bbox = '-80.79 -48.47 -113.90  69.33 46.41 168.37 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_SeaboniteCaptain:form =
    {
     Help = "Seabonite Captain - Red Suit markings"
     bbox = '-80.79 -48.47 -113.90  69.33 46.41 168.37 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_SecurityRover:form =
    {
     Help = "Security Rover"
     bbox = '-16.82 -8.20 -0.00  12.60 8.20 14.46 1'
    }
    Monster_Securton:form =
    {
     Help = "Securton"
     bbox = '-77.71 -116.97 -16.57  88.23 96.54 124.15 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Sergeant:form =
    {
     Help = "Sergeant"
     bbox = '-61.38 -50.56 -4.80  63.03 45.50 94.50 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Sniper:form =
    {
     Help = "sniper"
     bbox = '-52.08 -34.12 -51.71  51.97 36.13 85.60 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Thug_4Cinematic:form =
    {
     Help = "Thug for Cinematic"
     bbox = '-45.61 -35.86 -2.66  47.26 36.94 85.60 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_Thug_AssaultRifle:form =
    {
     Help = "Thug with Assault Rifle"
     bbox = '-58.95 -51.97 -55.30  58.87 51.74 103.67 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     attackmode: =
        {Txt = "&" Hint = "no hint yet1"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Thug_Magnum:form =
    {
     Help = "Thug with Magnum"
     bbox = '-58.95 -51.97 -55.30  58.87 51.74 103.67 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     attackmode: =
        {Txt = "&" Hint = "no hint yet1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Thug_NoWeapon:form =
    {
     Help = "Thug with No Weapon"
     bbox = '-58.95 -51.97 -55.30  58.87 51.74 103.67 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_Thug_PulseRifle:form =
    {
     Help = "Thug with Pulse Rifle"
     bbox = '-58.95 -51.97 -55.30  58.87 51.74 103.67 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_Thug_RocketLauncher:form =
    {
     Help = "Thug with Rocket Launcher"
     bbox = '-58.95 -51.97 -55.30  58.87 51.74 103.67 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
    }
    Monster_Thug_Shotgun:form =
    {
     Help = "Thug with Shotgun"
     bbox = '-58.95 -51.97 -55.30  58.87 51.74 103.67 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_Vultorn:form =
    {
     Help = "Vultorn"
     bbox = '-98.37 -73.77 -7.91  107.27 101.23 191.25 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_VultornSmall:form =
    {
     Help = "Vultorn Small"
     bbox = '-32.95 -29.51 -3.17  49.31 40.49 76.50 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Monster_WarehouseForeman:form =
    {
     Help = "Warehouse Foreman - Civilian Male"
     bbox = '-17.19 -36.50 -0.22  21.50 35.28 63.36 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Neutral_ChemicalWorker:form =
    {
     Help = "Chemical Plant Worker-Suited Up"
     bbox = '-43.89 -28.73 -44.01  45.55 29.33 71.64 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Neutral_LabWorker:form =
    {
     Help = "Lab Worker"
     bbox = '-31.94 -33.93 -4.02  45.06 34.42 76.12 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Neutral_OilRigForeman:form =
    {
     Help = "Oilrig Foreman"
     bbox = '-53.00 -44.52 -3.62  66.32 44.44 84.73 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Neutral_Scientist:form =
    {
     Help = "Scientist Type Guy"
     bbox = '-53.00 -44.52 -51.20  66.32 44.44 84.73 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "sci_base" $0D "sci_damage"
       values = "sci_base" $0D "sci_damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Neutral_Technician_ChemicalWorker:form =
    {
     Help = "No help yet"
     bbox = '-53.61 -32.46 -49.21  49.31 49.27 97.39 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     painthreshold: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Neutral_Technician_Freeport:form =
    {
     Help = "No help yet"
     bbox = '-53.61 -32.46 -49.21  49.31 49.27 97.39 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Neutral_Technician_Marine:form =
    {
     Help = "No help yet"
     bbox = '-53.61 -32.46 -49.21  49.31 49.27 97.39 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Neutral_Technician_SinTEK:form =
    {
     Help = "No help yet"
     bbox = '-53.61 -32.46 -49.21  49.31 49.27 97.39 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Powerup_Adrenaline:form =
    {
     Help = "Adrenaline Boost - Temporary 200 Health"
     bbox = '-1.32 -1.53 -0.00  1.32 1.53 11.80 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Powerup_Cloaking:form =
    {
     Help = "Cloaking Device (PODD) - Invisibility"
     bbox = '-18.31 -9.69 0.00  1.98 9.45 13.41 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Powerup_Oxygen:form =
    {
     Help = "Oxygen"
     bbox = '-1.28 -1.46 0.00  1.28 1.49 12.56 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Powerup_ScubaGear:form =
    {
     Help = "Rebreather Unit"
     bbox = '-5.93 -14.82 0.00  5.95 15.03 14.23 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Powerup_Shield:form =
    {
     Help = "Photonic Shield - Invincibility"
     bbox = '-12.56 -10.42 0.00  12.56 10.42 8.62 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Powerup_U4:form =
    {
     Help = "U4 container"
     bbox = '-11.73 -13.55 0.00  11.73 13.55 36.85 1'
    }
    Powerup_U4Vial:form =
    {
     Help = "U4 Injector - 60 second Mutant powerup"
     bbox = '-5.93 -2.57 -0.01  7.86 2.32 16.70 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    Projectile_Betty:form =
    {
     Help = "Bouncing Betty Projectile."
     bbox = '-7.80 -7.83 -8.46  7.89 7.87 8.48 1'
    }
    Projectile_BettySpike:form =
    {
     Help = "Spike projectile from Bouncing Betty"
     bbox = '0.00 -0.61 -0.25  14.23 0.60 0.26 1'
    }
    Projectile_BulletShell:form =
    {
     Help = "No help yet"
     bbox = '-2.06 -0.83 -0.85  2.00 0.84 0.73 1'
    }
    Projectile_DrunkMissile:form =
    {
     Help = "Rocket"
     bbox = '-0.06 -10.78 -12.36  53.06 10.70 12.36 1'
    }
    Projectile_Grenade:form =
    {
     Help = "Grenade"
     bbox = '-3.66 -4.26 0.00  3.48 4.29 9.33 1'
    }
    Projectile_HVShell:form =
    {
     Help = "HV Chain Gun Shell"
     bbox = '-4.11 -0.96 0.00  3.96 1.16 2.30 1'
    }
    Projectile_Rocket:form =
    {
     Help = "Rocket"
     bbox = '0.00 -6.39 -3.91  30.93 6.21 3.82 1'
    }
    Projectile_ShotgunShell:form =
    {
     Help = "Shotgun Shell - Shotgun Casing"
     bbox = '-2.06 -0.83 -0.85  2.00 0.84 0.73 1'
    }
    Projectile_Skeet:form =
    {
     Help = "No help yet"
     bbox = '-15.33 -15.42 0.00  10.65 14.58 8.75 1'
    }
    Projectile_Spear:form =
    {
     Help = "Spear"
     bbox = '-64.00 -3.03 -1.24  7.14 2.98 1.31 1'
    }
    cinematic_blade:form =
    {
     Help = "Blade used for Cinematics"
     bbox = '-53.93 -44.86 -3.82  70.83 44.60 115.94 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "blade_base" $0D "blade_base_dam"
       values = "blade_base" $0D "blade_base_dam"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    cinematic_elexis:form =
    {
     Help = "Elexis Sinclaire used for Cinematics"
     bbox = '-40.08 -36.58 -0.54  46.52 31.65 79.39 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "elexis_base" $0D "elexis_base2" $0D "elexis_base3" $0D "elexis_base4" $0D "elexis_base5" $0D "elexis_base6" $0D "bikini"
       values = "elexis_base" $0D "elexis_base2" $0D "elexis_base3" $0D "elexis_base4" $0D "elexis_base5" $0D "elexis_base6" $0D "bikini"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    cinematic_jc:form =
    {
     Help = "JC used for Cinematics"
     bbox = '-41.13 -31.22 -0.86  46.49 32.89 84.57 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "jc_base" $0D "jc_base_dam" $0D "jc_base2" $0D "jc_base3" $0D "jc_base4" $0D "jc_base5" $0D "jc_base6" $0D "jc_base7"
       values = "jc_base" $0D "jc_base_dam" $0D "jc_base2" $0D "jc_base3" $0D "jc_base4" $0D "jc_base5" $0D "jc_base6" $0D "jc_base7"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    cinematic_mancini:form =
    {
     Help = "No help yet"
     bbox = '-36.63 -43.05 -118.27  49.33 38.30 101.93 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    cinematic_manumit:form =
    {
     Help = "Cinematic Manumit"
     bbox = '-86.51 -73.01 -8.59  113.97 76.60 191.72 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "normal" $0D "damage"
       values = "normal" $0D "damage"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    cinematic_thug:form =
    {
     Help = "Thug for Cinematic"
     bbox = '-45.61 -47.57 -3.21  43.18 36.94 96.18 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "thug_base" $0D "thug_damage1"
       values = "thug_base" $0D "thug_damage1"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    console:form =
    {
     Help = "No help yet"
     cols: =
        {Txt = "&" Hint = "number of columns for scrolling console."
       }
     consolename: =
        {Txt = "&" Hint = "(required) con<consolename>. All console names must start with con."
       }
     rows: =
        {Txt = "&" Hint = "number of rows for scrolling console."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     fraction: =
        {Txt = "&" Hint = "(0.0 - 1.0) This is the fraction of the console you want the scrolling part to take up on the screen (1 is 100%)."
       }
     menu: =
        {Txt = "&" Hint = "no hint yet1"
       }
     menufile: =
        {Txt = "&" Hint = "name of file that contains the menu layout commands for this console."
       }
     scroll: =
        {Txt = "&" Hint = "no hint yet1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOUSE"
        Hint="Set this if you don't want the user to be able to "$22"use"$22" the console"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="SCROLL"
        Hint="0=off/1=on. Set to on if you want a scrolling console that takes user input (this is redundant with the scroll spawnflag)"}
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="MENU"
        Hint="0=off/1=on. Set to on if you want a user controlled menu (this is redundant with the menu spawnflag)"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="NOPVS"
        Hint="When sending console states over the net, don't use the PVS. (i.e. all state changes for this console alway get sent over). Warning! uses a lot of network bandwidth if you have multiple consoles that do this, it could overflow the network buffer"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     virtualheight: =
        {Txt = "&" Hint = "virtual height of the coordinate system (arbitrary units)."
       }
     virtualwidth: =
        {Txt = "&" Hint = "virtual width of the coordinate system (arbitrary units)."
       }
     In: =
        {Txt = "&" Hint = "?? game consoles."
       }
     key: =
        {Txt = "&" Hint = "item needed to use console (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_beaker:form =
    {
     Help = "Lab Beaker"
     bbox = '-5.11 -5.92 0.00  5.02 5.77 20.70 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_beercan:form =
    {
     Help = "SinTek Beercan"
     bbox = '-1.46 -1.69 0.00  1.46 1.69 6.50 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_blueprints:form =
    {
     Help = "Blueprints"
     bbox = '-22.30 -28.81 0.00  38.22 43.74 3.63 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_book_closed:form =
    {
     Help = "No help yet"
     bbox = '-6.17 -5.67 0.00  6.20 5.21 2.58 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "bookclosed" $0D "bookclosed2" $0D "bookclosed3" $0D "bookclosed4"
       values = "bookclosed" $0D "bookclosed2" $0D "bookclosed3" $0D "bookclosed4"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_book_closed2:form =
    {
     Help = "No help yet"
     bbox = '-6.17 -5.67 0.00  6.20 5.21 2.58 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_book_closed3:form =
    {
     Help = "No help yet"
     bbox = '-6.17 -5.67 0.00  6.20 5.21 2.58 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_book_closed4:form =
    {
     Help = "No help yet"
     bbox = '-6.17 -5.67 0.00  6.20 5.21 2.58 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_book_open:form =
    {
     Help = "No help yet"
     bbox = '-5.85 -8.45 0.00  5.85 8.45 1.41 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_bunsenburner:form =
    {
     Help = "No help yet"
     bbox = '-5.07 -5.85 0.00  5.07 5.85 16.57 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_calendar1:form =
    {
     Help = "Calendar #1"
     bbox = '-4.98 -7.98 -0.00  9.28 12.78 0.00 1'
    }
    deskitems_calendar2:form =
    {
     Help = "Calendar #2"
     bbox = '-3.74 -5.59 -0.00  8.05 10.38 0.00 1'
    }
    deskitems_calendar3:form =
    {
     Help = "Calendar #3"
     bbox = '-6.04 -8.70 -0.00  10.34 13.50 0.00 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_cdrack:form =
    {
     Help = "CD Rack"
     bbox = '0.00 -15.34 -0.00  9.30 15.34 35.01 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_clamp:form =
    {
     Help = "Clamp"
     bbox = '-0.18 -2.88 0.00  0.00 3.00 15.89 1'
    }
    deskitems_coffeemug:form =
    {
     Help = "Coffee Mug with SinTek Logo"
     bbox = '-3.17 -2.71 -0.00  3.16 5.14 6.26 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "coffeemug" $0D "coffeemug2" $0D "coffeemug3" $0D "coffeemug4"
       values = "coffeemug" $0D "coffeemug2" $0D "coffeemug3" $0D "coffeemug4"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_coffeemugs_blue:form =
    {
     Help = "Coffee Mug-Blue"
     bbox = '-3.17 -2.71 -0.00  3.16 5.14 6.26 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_coffeemugs_fcblogo:form =
    {
     Help = "Coffee Mug-FCB Logo"
     bbox = '-3.17 -2.71 -0.00  3.16 5.14 6.26 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_coffeemugs_sinteklogo:form =
    {
     Help = "Coffee Mug-SinTEK Logo"
     bbox = '-3.17 -2.71 -0.00  3.16 5.14 6.26 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_coffeemugs_yellow:form =
    {
     Help = "Coffee Mug-Yellow"
     bbox = '-3.17 -2.71 -0.00  3.16 5.14 6.26 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_cpu_case:form =
    {
     Help = "CPU Case"
     bbox = '-20.53 -8.21 0.00  20.54 7.97 39.24 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_cpu_keyboard:form =
    {
     Help = "CPU Keyboard"
     bbox = '-7.22 -17.60 0.00  7.27 17.69 4.16 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_cpu_keyboarduseable:form =
    {
     Help = "CPU Keyboard - For usable consoles"
     bbox = '-7.22 -17.60 0.00  7.27 17.69 4.16 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_cpu_monitor:form =
    {
     Help = "CPU Monitor"
     bbox = '-19.67 -18.43 0.00  19.93 18.34 37.32 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_cpu_monitor_jc:form =
    {
     Help = "CPU Monitor JC"
     bbox = '-19.67 -18.43 0.00  19.93 18.34 37.32 1'
    }
    deskitems_cpu_monitor_manumit:form =
    {
     Help = "CPU Monitor w/ Manumit schematics"
     bbox = '-19.67 -18.43 0.00  19.93 18.34 37.32 1'
    }
    deskitems_cpu_monitoruseable:form =
    {
     Help = "CPU Monitor - For usable consoles"
     bbox = '-19.67 -18.43 0.00  19.93 18.34 37.32 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_cupandpens:form =
    {
     Help = "Cup and Pens"
     bbox = '-1.59 -0.87 -0.02  1.46 2.93 6.78 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_folder1:form =
    {
     Help = "Desk Folder #1"
     bbox = '-4.27 -5.07 0.00  3.62 5.07 0.53 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_folder2:form =
    {
     Help = "Desk Folder #2"
     bbox = '-7.27 -11.58 0.00  7.09 7.40 1.40 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_icecream:form =
    {
     Help = "Ice Cream container"
     bbox = '-7.29 -8.42 0.00  7.29 8.42 11.83 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_lamp:form =
    {
     Help = "Desk Lamp"
     bbox = '-6.71 -6.00 0.00  9.51 6.00 21.96 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_mouse:form =
    {
     Help = "Mouse for Computer"
     bbox = '-23.91 -2.08 0.00  3.36 2.45 1.88 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_phone1:form =
    {
     Help = "Desk Phone #1"
     bbox = '-4.59 -3.83 0.00  4.59 4.16 2.51 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_phone2:form =
    {
     Help = "Desk Phone #2"
     bbox = '-3.93 -3.59 -0.00  4.15 3.88 4.27 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_playingcards:form =
    {
     Help = "Playing Cards"
     bbox = '-3.31 -2.59 0.00  2.69 7.09 0.75 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_scissors:form =
    {
     Help = "Pair of Scissors"
     bbox = '-0.16 -2.54 0.00  0.00 2.68 13.85 1'
    }
    deskitems_softdrink:form =
    {
     Help = "Soda Can"
     bbox = '-1.47 -1.69 0.00  1.47 1.69 6.51 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_software1:form =
    {
     Help = "Software Item #1"
     bbox = '-0.00 -4.88 0.00  3.24 4.88 11.69 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_software3:form =
    {
     Help = "Software Item #3"
     bbox = '0.00 -2.85 0.00  1.43 2.85 6.84 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_tablelamp:form =
    {
     Help = "Table Lamp"
     bbox = '-15.17 -17.02 0.00  14.42 17.14 57.44 1'
    }
    deskitems_telescope1:form =
    {
     Help = "No help yet"
     bbox = '-17.01 -11.47 -0.05  16.45 11.39 61.08 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_telescope2:form =
    {
     Help = "SPECIAL CASE-Attach extra box around upper portion"
     bbox = '-29.19 -5.14 -0.05  28.11 5.13 48.50 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_testtube:form =
    {
     Help = "Test Tube-For Labs"
     bbox = '-1.37 -1.37 -0.00  1.43 1.43 14.16 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    deskitems_tray:form =
    {
     Help = "Small metal lab tray"
     bbox = '-7.38 -11.13 0.00  7.38 11.13 1.23 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    detail:form =
    {
     Help = "Used to fake details brushes."
    }
    func_areaportal:form =
    {
     Help = "This is a non-visible variable size entity that divides the world into areas that are seperated when this portal is not activated. Must be enclosed in the middle of a door and should extend (height and width wise) into the door's surrounding frame (which must be made strictly from regular world brushes and not entities or detail brushes)."
     style: =
        {Txt = "&" Hint = "no hint yet1"
       }
     targetname: =
        {Txt = "&" Hint = "the door entity's target key points to this."
       }
     sound_move: =
        {Txt = "&" Hint = "no hint yet1"
       }
     target: =
        {Txt = "&" Hint = "each time areaportal is opened or closed, its targets will be triggered."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_beam:form =
    {
     Help = "This creates a beam effect which goes from it" $0D "  origin to the target's origin. Beams can use a" $0D "  info_notnul or a moving object (such as func_scriptobject" $0D "  as an aiming target and will respond to script move" $0D "  and rotate* type commands.  If the model key is not set" $0D "  a straight beam will be created using the color specified" $0D "  The minoffset, maxoffset and overlap keys plus th" $0D "  ANIMATE, FAST, ROLL, RANDSTART, ELECTRIC and RANDALPH" $0D "  spawnflags are not applicable if the model key is not set."
     bbox = '-8 -8 -8 8 8 8 1'
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="START_ON"
        Hint="triggering the beam will do nothing. Beams can be toggled on and off with the 'activate' and 'deactivate' commands"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="ANIMATE"
        Hint="plays animation of the model (model key must be set)"}
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="FAST"
        Hint="plays the model animation at 20 frames/sec (model key must be set)"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="ROLL"
        Hint="rolls the beam (model key must be set)"}
     spawnflags: =
       {Txt="&"
        Typ="X16"
        Cap="RANDSTART"
        Hint="starts each segment of the beam's animation on a different frame (model key must be set)"}
     spawnflags: =
       {Txt="&"
        Typ="X32"
        Cap="ELECTRIC"
        Hint="applies a random electric efffect to the beam (model key must be set)"}
     spawnflags: =
       {Txt="&"
        Typ="X64"
        Cap="RANDALPHA"
        Hint="randomly generate the alpha for the beam (model key must be set)"}
     target: =
        {Txt = "&" Hint = "point this to the targetname of the entity to use as aiming point (info_notnull or moving object). If the beam does not point to a target, it will aim at 0 degrees."
       }
     alpha: =
        {Txt = "&" Hint = "alpha of the beam (default 1.0)."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     color: =
        {Txt = "&" Hint = "RGB color of the beam (default 1 1 1). Has no effect if model is set."
       }
     damage: =
        {Txt = "&" Hint = "amount of damage to inflict when beam hits players, actors, monsters and destructible world models (default 0). When model is set, the beam can also damage a func_box."
       }
     maxoffset: =
        {Txt = "&" Hint = "amount of electrical variation in the middle of beam (default 25)."
       }
     minoffset: =
        {Txt = "&" Hint = "amount of electrical variation at the endpoints of beam (default 5)."
       }
     overlap: =
        {Txt = "&" Hint = "specifies the amount of overlap each beam link should have. Use this to fill in the cracks when using electric on beams or gaps in straight beams when small models are used (default 0)."
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     beamstyle: =
        {Txt = "&" Hint = "?? sets the style for this beam to cycle through.  This applies only to beams without models. Sample styles are:"
      Typ="C"
      Items="121) blood" $0D "120) gunsmoke" $0D "123) orangeglow" $0D "124) blueyellow" $0D "125) debris trail" $0D "128) oil" $0D "129) waterspray" $0D "130) blue-yellow-blue"
      values="121" $0D "120" $0D "123" $0D "124" $0D "125" $0D "128" $0D "129" $0D "130"
       }
     this: =
        {Txt = "&" Hint = "?? beam won't inflict damage even if "$22"damage"$22" is set."
       }
     diameter: =
        {Txt = "&" Hint = "?? diameter of beam in map units (default 4). Has no effect if model is set."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_box:form =
    {
     Help = "Explodable box that falls when boxes below it are destroyed. This can be made to spawn items, weapons, ammo, etc. and trigger its targets when destroyed."
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "orientation of the box when it falls to the floor after another box below this one is destroyed. This also sets the angles of the item that is spawned. Will not work if the box is set to spawn more than one item (default 0 0 0)."
       }
     health: =
        {Txt = "&" Hint = "amount of damage needed to destroy the box (default 60)."
       }
     item: =
        {Txt = "&" Hint = "no hint yet1"
       }
     items: =
        {Txt = "&" Hint = "list of items to spawn when the box is destroyed. Those must referred to by the name of the .def file that contains their entity definition and the names must be separated by spaces (Eg. "$22"adren.def rlaunch.def"$22" for Adrenaline and Rocket Launcher). Default is nothing."
       }
     target: =
        {Txt = "&" Hint = "point to the entities to trigger when box is destroyed."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     tems: =
        {Txt = "&" Hint = "no hint yet1"
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_breakawaywall:form =
    {
     Help = "Special walltype that removes itself when triggered" $0D "  Will also trigger any func_areaportals that it targets."
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0). Warning: don't set this if the wall targets an areaportal."
       }
     target: =
        {Txt = "&" Hint = "point this to the func_areaportal within the wall."
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are" $0D "   ChemBioSuit - use chemsuit instea" $0D "   cookies - works but doesn't generate an ico" $0D "   genericpulsepart - works but doesn't generate an icon"
       }
    }
    func_camera:form =
    {
     Help = "Camera used for cinematic sequences."
     targetname: =
        {Txt = "&" Hint = "name used by script to control the camera. A trigger_camerause can also point to this."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="ORBIT"
        Hint="tells the camera to create a circular path around the object it points to. If the camera points to a path, it will loop when it gets to the end of the path"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="START_ON"
        Hint="causes the camera to be moving as soon as it is spawned"}
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="PAN"
        Hint="camera should pan from right to lef"}
     target: =
        {Txt = "&" Hint = "points to the target to orbit or follow.  If it points to a path, the camera will follow the path."
       }
     yaw: =
        {Txt = "&" Hint = "specifies yaw of camera (default 0)."
       }
     panspeed: =
        {Txt = "&" Hint = "speed at which to pan (default 7 deg/sec)."
       }
     speed: =
        {Txt = "&" Hint = "specifies how fast to move on the path or orbit (default 1)."
       }
     overlay: =
        {Txt = "&" Hint = "overlay file to use while looking through the camera."
       }
     panmax: =
        {Txt = "&" Hint = "maximum angle offset for panning (default 45 deg)."
       }
     thread: =
        {Txt = "&" Hint = "name of thread that will be called when the camera is looked through. This can be in a different script file as well by using the '::' notation."
       }
     nextcamera: =
        {Txt = "&" Hint = "point this to the next camera in a chain of cameras."
       }
     height: =
        {Txt = "&" Hint = "?? specifies height of camera from origin (default 128)."
       }
     distance: =
        {Txt = "&" Hint = "?? the distance to follow or orbit if the target is not a path (default 128)."
       }
     fov: =
        {Txt = "&" Hint = "specifies fov of camera (default 90)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_clipbox:form =
    {
     Help = "Invisible bounding box used like a clip brush" $0D "  This is mainly used for blocking off areas or improvin" $0D "  clipping without having to recompile the map. Because o" $0D "  this, it will most likely only be spawned via script."
     bbox = '-16 -16 -16 16 16 16 1'
     maxs: =
        {Txt = "&" Hint = "?? max point of the clip."
       }
     type: =
        {Txt = "&" Hint = "?? select from the following 3 options:"
      Typ="C"
      Items="0) Monster and Player clip" $0D "1) Monster clip" $0D "2) Player clip"
      values="0" $0D "1" $0D "2"
       }
     mins: =
        {Txt = "&" Hint = "?? min point of the clip."
       }
    }
    func_door:form =
    {
     Help = "Common sliding door.  By default, doors must b" $0D "  used to open. Doors that touch are automatically teame" $0D "  and operate as a single unit. Only doors of the sam" $0D "  type that touch can be teamed.  joinTeam and quitTeam script commands don't work either."
     angle: =
        {Txt = "&" Hint = "determines the opening direction (default 0)."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     dmg: =
        {Txt = "&" Hint = "damage to inflict to player when he blocks the door (0 default)."
       }
     key: =
        {Txt = "&" Hint = "item needed to open this door (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     lip: =
        {Txt = "&" Hint = "lip remaining at end of move (8 default)."
       }
     sound_move: =
        {Txt = "&" Hint = "sound that plays when the door is moving (default global door_moving)."
       }
     sound_stop: =
        {Txt = "&" Hint = "sound that plays when the door stops moving (default global door_stop)."
       }
     soundmove: =
        {Txt = "&" Hint = "no hint yet1"
       }
     soundstop: =
        {Txt = "&" Hint = "no hint yet1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="DOOR_DONT_LINK"
        Hint="is for un-teaming doors that are touching (thus automatically teamed) so you can operate them independently"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="NOT_PLAYERS"
        Hint="players cannot operate the door"}
     spawnflags: =
       {Txt="&"
        Typ="X16"
        Cap="NOT_MONSTERS"
        Hint="monsters cannot operate the door"}
     spawnflags: =
       {Txt="&"
        Typ="X32"
        Cap="TOGGLE"
        Hint="causes the door to wait in both the start and end states for a trigger event"}
     spawnflags: =
       {Txt="&"
        Typ="X64"
        Cap="AUTO_OPEN"
        Hint="proximity mode, door will open when a player is near it instead of waiting for the player to use it"}
     spawnflags: =
       {Txt="&"
        Typ="X128"
        Cap="TARGETED"
        Hint="use mode and proximity mode are disabled and door can only be operated by triggers or script commands ("$22"targetname"$22" must be set)"}
     speed: =
        {Txt = "&" Hint = "move speed (100 default - overrides time)."
       }
     target: =
        {Txt = "&" Hint = "point this to the func_areaportal within the door."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     time: =
        {Txt = "&" Hint = "move time in seconds."
       }
     wait: =
        {Txt = "&" Hint = "wait before returning (3 default, -1 = never return)."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the door is operated."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0). Warning: don't set this if the door targets an areaportal."
       }
     sound_message: =
        {Txt = "&" Hint = "?? sound that plays when the door displays a message."
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     health: =
        {Txt = "&" Hint = "key and START_OPEN spawnflag don't work - joinTeam and quitTeam script commands don't work either."
       }
     this: =
        {Txt = "&" Hint = "?? the door can be operated by an activating trigger or script commands but also retains its default use mode or proximity (if AUTO_OPEN is set) mode of operation."
       }
     sound_locked: =
        {Txt = "&" Hint = "sound that plays when the door is locked."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_earthquake:form =
    {
     Help = "Causes a localized earthquake when triggered."
     bbox = '-8 -8 -8 8 8 8 1'
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     duration: =
        {Txt = "&" Hint = "duration of the earthquake (0.8 seconds default)."
       }
    }
    func_exploder:form =
    {
     Help = "Spawns an sprite based explosion effect when triggered. This can also trigger targets and call threads."
     bbox = '0 0 0 8 8 8 1'
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     dmg: =
        {Txt = "&" Hint = "specifies how much damage to cause (default 120)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="BIG_EXPLOSION"
        Hint="uses a bigger model based effect with smoke and particles instead"}
     volume: =
        {Txt = "&" Hint = "volume at which to play explosion (default 1.0)"
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when explosion occurs."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the explosion is triggered. Also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times explosion can be triggered before removing itself (default: infinite)."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before explosion, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     target: =
        {Txt = "&" Hint = "point to the entities to trigger when explosion occurs."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     scale: =
        {Txt = "&" Hint = "specifies the scale of the explosion to make (default 1.0)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     attenuation: =
        {Txt = "&" Hint = "attenuation for explosions (default normal)"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "delay before explosion (default 0)."
       }
    }
    func_explodingwall:form =
    {
     Help = "Wall that falls down with an explosion effect whe" $0D "  triggered or damaged. Can be made to fall in any positio" $0D "  + angle and shatter after it falls. This can also trigge" $0D "  targets and call threads."
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     anglespeed: =
        {Txt = "&" Hint = "if randomangles is set, default is 600"
       }
     explosions: =
        {Txt = "&" Hint = "number of explosions to spawn (default 1)."
       }
     health: =
        {Txt = "&" Hint = "specifies how much damage to inflict before the wall explodes (default 60)."
       }
     land_angles: =
        {Txt = "&" Hint = "the angles you want this piece to orient to when it lands on the ground (default 0 0 0)."
       }
     land_radius: =
        {Txt = "&" Hint = "the distance from the ground the piece should be when it lands on the ground (default 0)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="RANDOMANGLES"
        Hint="object randomly spins while in the air"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="LANDSHATTER"
        Hint="object shatters when it hits the ground (overrides TWOSTAGE)"}
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="the activating trigger does not respond to players"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="the activating trigger will respond to monsters"}
     spawnflags: =
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="the activating trigger will respond to projectiles (rockets, grenades, etc)"}
     spawnflags: =
       {Txt="&"
        Typ="X32"
        Cap="INVISIBLE"
        Hint="wall is invisible and not solid until triggered"}
     spawnflags: =
       {Txt="&"
        Typ="X64"
        Cap="ACCUMULATIVE"
        Hint="damage is accumulative instead of threshold based"}
     spawnflags: =
       {Txt="&"
        Typ="X128"
        Cap="TWOSTAGE"
        Hint="wall can be shattered after it lands on the ground"}
     target: =
        {Txt = "&" Hint = "point to the entities to trigger when wall explodes."
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when wall explodes."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when wall explodes. Also makes a clicking sound."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     scale: =
        {Txt = "&" Hint = "specifies the scale of the explosion to make (default 1.0)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_glass:form =
    {
     Help = "For glass objects. Shatters when enough damage ha" $0D "  been inflicted or when activated by trigger or script" $0D "  This can also trigger targets and call threads."
     health: =
        {Txt = "&" Hint = "specifies how much damage must occur before the glass shatters (default 20). The default noise is based on this value. If less or equal to 60, a small glass breaking sound is played. If more than 60, a large glass breaking sound is played."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when glass shatters."
       }
     noise: =
        {Txt = "&" Hint = "sound to play when shattered (overrides default based on health)."
       }
     shatter_percentage: =
        {Txt = "&" Hint = "no hint yet1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="activating trigger does not respond to events caused by players"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="NOT_MONSTERS"
        Hint="activating trigger does not respond to events caused by monsters"}
     spawnflags: =
       {Txt="&"
        Typ="X16"
        Cap="NOT_PROJECTILES"
        Hint="activating trigger does not respond to events caused by projectiles"}
     spawnflags: =
       {Txt="&"
        Typ="X64"
        Cap="THRESHOLD"
        Hint="damage is threshold based instead of accumulative"}
     target: =
        {Txt = "&" Hint = "point to the entities to trigger when glass shatters."
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     maxsize: =
        {Txt = "&" Hint = "maximum size of fragments, default based on brush size."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when glass shatters. Also makes a clicking sound."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     thickness: =
        {Txt = "&" Hint = "thickness of fragments, default based on brush size."
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     percentage: =
        {Txt = "&" Hint = "specifies how much of the total volume of the brush to produce fragments from (default 50 percent)."
       }
     minsize: =
        {Txt = "&" Hint = "minimum size of fragments, default based on brush size."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_group:form =
    {
     Help = "Not an entity. Merely an editor convenience used to group brushes together."
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_illusionary:form =
    {
     Help = "Entity's brush will be visible but not solid and lets you walk through it. If "$22"targetname"$22" is set, this can be removed during the game by having a trigger's "$22"killtarget"$22" key point to it or by using the 'remove' script command."
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to remove this."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_launcher:form =
    {
     Help = "Variable size entity that launches projectiles whe" $0D "  triggered. Using "$22"shotrocket"$22" as projectile type wil" $0D "  make this launch guided rockets that veer and seek th" $0D "  player."
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     launchsound: =
        {Txt = "&" Hint = "sets the launching sound. This is independent from the projectile which makes its own sound."
       }
     projectile: =
        {Txt = "&" Hint = "sets the projectile type to launch. Possible types are:"
       }
     target: =
        {Txt = "&" Hint = "point this to an info_notnull entity to use as aiming point."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_multi_exploder:form =
    {
     Help = "Spawns multiple sprite based explosion effects whe" $0D "  triggered and then removes itself. The explosions ar" $0D "  confined to the volume occupied by the brush so th" $0D "  position and size of brush determine where and how clos" $0D "  to one another the explosions occur. This can trigge" $0D "  targets and call threads."
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     attenuation: =
        {Txt = "&" Hint = "attenuation for explosions (default normal)."
       }
     damage: =
        {Txt = "&" Hint = "no hint yet1"
       }
     delay: =
        {Txt = "&" Hint = "delay before beginning of explosions (default 0)."
       }
     dmg: =
        {Txt = "&" Hint = "specifies how much damage to cause from each explosion (default 120)."
       }
     duration: =
        {Txt = "&" Hint = "how long to explode for (default 1)."
       }
     random: =
        {Txt = "&" Hint = "random factor (default 0.25)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="RANDOM_TIME"
        Hint="adjusts the wait between each explosion by the random factor"}
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="RANDOM_SCALE"
        Hint="adjusts the size of each explosion by the random factor"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="BIG_EXPLOSION"
        Hint="uses a bigger model based effect with smoke and particles instead"}
     taretname: =
        {Txt = "&" Hint = "no hint yet1"
       }
     target: =
        {Txt = "&" Hint = "point to the entities to trigger when explosion occurs."
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     volume: =
        {Txt = "&" Hint = "volume at which to play explosions (default 0.5)."
       }
     wait: =
        {Txt = "&" Hint = "time between each explosion (default 0.25)."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when explosions occurs."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when the explosions are triggered. Also makes a clicking sound."
       }
     scale: =
        {Txt = "&" Hint = "specifies the scale of the explosions to make (default 1.0)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_remove:form =
    {
     Help = "Used for area lighting. Brush will remove itsel" $0D "  from the world when map starts, only the light emitte" $0D "  by its faces will remain."
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_respawn:form =
    {
     Help = "This will spawn a model when triggered" $0D "  When the thing that is spawned is killed, the func_respaw" $0D "  will get re-triggered and spawn the model again. It ca" $0D "  spawn any model but it's mainly used for spawning monsters."
     bbox = '-8 -8 -8 8 8 8 1'
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     key: =
        {Txt = "&" Hint = "and "$22"spawntargetname"$22" keys don't work: removed."
       }
     modelname: =
        {Txt = "&" Hint = "name of the .def file you wish to spawn (required)."
       }
     attackmode: =
        {Txt = "&" Hint = "attacking mode of the spawned monster. Possible modes are:"
      Typ="C"
      Items="0) normal mode - will go for player and use duck and cover pathnodes (default)." $0D "1) stand ground - won't move from its spawn spot (except melee monsters)." $0D "2) blitzkrieg - will go for player but won't use duck and cover pathnodes."
      values="0" $0D "1" $0D "2"
       }
     angle: =
        {Txt = "&" Hint = "direction model will be facing when spawned."
       }
    }
    func_rotatingdoor:form =
    {
     Help = "Rotating door. By default, doors must be used to open" $0D "  Doors that touch are automatically teamed and operate a" $0D "  a single unit. Only doors of the same type that touc" $0D "  can be teamed. joinTeam and quitTeam script commands don't work"
     angle: =
        {Txt = "&" Hint = "determines the opening direction. Point toward the middle of the door (away from the hinge)."
       }
     key: =
        {Txt = "&" Hint = "item needed to open this door (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     openangle: =
        {Txt = "&" Hint = "the angle the door will rotate when operated. Positive values make the door open away from the player and negative values make the door open toward the player (default 90 degrees)."
       }
     sound_locked: =
        {Txt = "&" Hint = "sound that plays when the door is locked."
       }
     sound_move: =
        {Txt = "&" Hint = "sound that plays when the door is moving (default global door_moving)."
       }
     sound_stop: =
        {Txt = "&" Hint = "sound that plays when the door stops moving (default global door_stop)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="DOOR_DONT_LINK"
        Hint="is for un-teaming doors that are touching (thus automatically teamed) so you can operate them independently"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="NOT_PLAYERS"
        Hint="players cannot operate the door"}
     spawnflags: =
       {Txt="&"
        Typ="X16"
        Cap="NOT_MONSTERS"
        Hint="monsters cannot operate the door"}
     spawnflags: =
       {Txt="&"
        Typ="X32"
        Cap="TOGGLE"
        Hint="causes the door to wait in both the start and end states for a trigger event"}
     spawnflags: =
       {Txt="&"
        Typ="X64"
        Cap="AUTO_OPEN"
        Hint="proximity mode, door will open when a player is near it instead of waiting for the player to use it"}
     spawnflags: =
       {Txt="&"
        Typ="X128"
        Cap="TARGETED"
        Hint="use mode and proximity mode are disabled and door can only be operated by triggers or script commands ("$22"targetname"$22" must be set)"}
     target: =
        {Txt = "&" Hint = "point this to the func_areaportal within the door."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     time: =
        {Txt = "&" Hint = "move time (0.3 default)."
       }
     wait: =
        {Txt = "&" Hint = "wait before returning (3 default, -1 = never return)."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the door is operated."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0). Warning: don't set this if the door targets an areaportal."
       }
     sound_message: =
        {Txt = "&" Hint = "?? sound that plays when the door displays a message."
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     dmg: =
        {Txt = "&" Hint = "damage to inflict to player when he blocks the door (0 default)."
       }
     this: =
        {Txt = "&" Hint = "?? the door can be operated by an activating trigger or script commands but also retains its normal proximity (AUTO_OPEN) or use (default) mode of operation."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_scriptdoor:form =
    {
     Help = "Script door. Opening and closing movement/rotatio" $0D "  must be done with script threads. By default, doors mus" $0D "  be used to open. Doors that touch are automatically teame" $0D "  and operate as a single unit. Only doors of the same typ" $0D "  that touch can be teamed.  joinTeam and quitTeam scrip" $0D "  commands don't work."
     angle: =
        {Txt = "&" Hint = "determines the opening direction. Point toward the middle of the door (away from the hinge)."
       }
     closethread: =
        {Txt = "&" Hint = "thread to execute when closing the door (required)."
       }
     initthread: =
        {Txt = "&" Hint = "thread to execute to setup the door (optional)."
       }
     openthread: =
        {Txt = "&" Hint = "thread to execute when opening the door (required)."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     _minlight: =
        {Txt = "&" Hint = "inherent glow."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the door is operated."
       }
     sound_move: =
        {Txt = "&" Hint = "sound that plays when the door is moving (default global door_moving)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="DOOR_DONT_LINK"
        Hint="is for un-teaming doors that are touching (thus automatically teamed) so you can operate them independently"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="NOT_PLAYERS"
        Hint="players cannot operate the door"}
     spawnflags: =
       {Txt="&"
        Typ="X16"
        Cap="NOT_MONSTERS"
        Hint="monsters cannot operate the door"}
     spawnflags: =
       {Txt="&"
        Typ="X32"
        Cap="TOGGLE"
        Hint="causes the door to wait in both the start and end states for a trigger event"}
     spawnflags: =
       {Txt="&"
        Typ="X64"
        Cap="AUTO_OPEN"
        Hint="proximity mode, door will open when a player is near it instead of waiting for the player to use it"}
     spawnflags: =
       {Txt="&"
        Typ="X128"
        Cap="TARGETED"
        Hint="use mode and proximity mode are disabled and door can only be operated by triggers or script commands ("$22"targetname"$22" must be set)"}
     wait: =
        {Txt = "&" Hint = "wait before returning (3 default, -1 = never return)."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0). Warning: don't set this if the door targets an areaportal."
       }
     target: =
        {Txt = "&" Hint = "point this to the func_areaportal within the door."
       }
     key: =
        {Txt = "&" Hint = "item needed to open this door (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     sound_message: =
        {Txt = "&" Hint = "?? sound that plays when the door displays a message."
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     sound_stop: =
        {Txt = "&" Hint = "sound that plays when the door stops moving (default global door_stop)."
       }
     time: =
        {Txt = "&" Hint = "move time in seconds."
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     dmg: =
        {Txt = "&" Hint = "damage to inflict to player when he blocks the door (0 default)."
       }
     this: =
        {Txt = "&" Hint = "?? the door can be operated by an activating trigger or script commands but also retains its default use mode or proximity (if AUTO_OPEN is set) mode of operation."
       }
     sound_locked: =
        {Txt = "&" Hint = "sound that plays when the door is locked."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_scriptmodel:form =
    {
     Help = "This will spawn a script slave model completely dependent on script commands for its behavior."
     bbox = '0 0 0 0 0 0 1'
     angle: =
        {Txt = "&" Hint = "orientation of model (default 0)."
       }
     angles: =
        {Txt = "&" Hint = "pitch, yaw and roll orientation of model (overrides angle - default 0 0 0)."
       }
     scale: =
        {Txt = "&" Hint = "scale of model (default set by .def file)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="model will be visible but not solid"}
     speed: =
        {Txt = "&" Hint = "speed of movement"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "name used by script to control model."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     key: =
        {Txt = "&" Hint = "item needed to use model (default nothing). This is useful if you have a script thread in which there is an 'onuse' event monitoring command for this model. This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_scriptobject:form =
    {
     Help = "Script slave brush model completely dependent o" $0D "  script commands for its behavior. Use for any movin" $0D "  mechanism other than doors."
     _minlight: =
        {Txt = "&" Hint = "inherent glow."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     damage: =
        {Txt = "&" Hint = "no hint yet1"
       }
     dmg: =
        {Txt = "&" Hint = "damage it does."
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     key: =
        {Txt = "&" Hint = "item needed to use object (default nothing). This is useful if you have a script thread in which there is an 'onuse' event monitoring command for this object. This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     noise: =
        {Txt = "&" Hint = "no hint yet1"
       }
     setdamage: =
        {Txt = "&" Hint = "no hint yet1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="model will be visible but not solid"}
     speed: =
        {Txt = "&" Hint = "speed of movement"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "name used by script to control model."
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_scriptorigin:form =
    {
     Help = "Used as an alternate origin for objects. Bind th" $0D "  object to the func_scriptorigin in the script in orde" $0D "  to simulate changing that object's origin."
     bbox = '-8 -8 -8 8 8 8 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "name used by script for binding and control."
       }
    }
    func_securitycamera:form =
    {
     Help = "Camera used for security cameras. Has a visible model."
     bbox = '-9.40 -12.35 -14.22  17.18 12.19 0.50 1'
     angles: =
        {Txt = "&" Hint = "pitch, yaw and roll orientation of camera model (overrides angle - default 0 0 0)."
       }
     scale: =
        {Txt = "&" Hint = "scale of camera model (default set by .def file)."
       }
     fov: =
        {Txt = "&" Hint = "specifies fov of camera (default 90)."
       }
     nextcamera: =
        {Txt = "&" Hint = "point this to the next camera in a chain of cameras."
       }
     overlay: =
        {Txt = "&" Hint = "overlay file to use while looking through the camera."
       }
     panmax: =
        {Txt = "&" Hint = "maximum angle offset for panning (default 45 deg)."
       }
     panspeed: =
        {Txt = "&" Hint = "speed at which to pan (default 7 deg/sec)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="ORBIT"
        Hint="tells the camera to create a circular path around the object it points to. If the camera points to a path, it will loop when it gets to the end of the path"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="START_ON"
        Hint="causes the camera to be moving as soon as it is spawned"}
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="PAN"
        Hint="camera should pan from right to lef"}
     targetname: =
        {Txt = "&" Hint = "point a trigger_camerause to this. This can also be used by a script to control the camera."
       }
     thread: =
        {Txt = "&" Hint = "name of thread that will be called when the camera is looked through. This can be in a different script file as well by using the '::' notation."
       }
     yaw: =
        {Txt = "&" Hint = "specifies yaw of camera (default 0)."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the model (default 1.0)."
       }
     target: =
        {Txt = "&" Hint = "points to the target to orbit or follow.  If it points to a path, the camera will follow the path."
       }
     angle: =
        {Txt = "&" Hint = "orientation of camera model (default 0)."
       }
     distance: =
        {Txt = "&" Hint = "?? the distance to follow or orbit if the target is not a path (default 128)."
       }
     speed: =
        {Txt = "&" Hint = "specifies how fast to move on the path or orbit (default 1)."
       }
     height: =
        {Txt = "&" Hint = "?? specifies height of camera from origin (default 128)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_shatter:form =
    {
     Help = "For shattering objects other than glass" $0D "  Shatters when enough damage has been inflicted o" $0D "  when activated by a trigger or script. This ca" $0D "  trigger a targeted func_areaportal when not invisibl" $0D "  and can also trigger regular targets and call threads."
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     health: =
        {Txt = "&" Hint = "specifies how much damage must occur before object shatters (default 20)."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when object shatters."
       }
     maxsize: =
        {Txt = "&" Hint = "maximum size of fragments, default based on brush size."
       }
     minsize: =
        {Txt = "&" Hint = "minimum size of fragments, default based on brush size."
       }
     noise: =
        {Txt = "&" Hint = "sound to play when shattered (default none)."
       }
     percentage: =
        {Txt = "&" Hint = "specifies how much of the total volume of the brush to produce fragments from (default 50 percent)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="activating trigger does not respond to events caused by players"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="NOT_MONSTERS"
        Hint="activating trigger does not respond to events caused by monsters"}
     spawnflags: =
       {Txt="&"
        Typ="X16"
        Cap="NOT_PROJECTILES"
        Hint="activating trigger does not respond to events caused by projectiles"}
     spawnflags: =
       {Txt="&"
        Typ="X64"
        Cap="THRESHOLD"
        Hint="damage is threshold based instead of accumulative"}
     target: =
        {Txt = "&" Hint = "point to the entities to trigger when object shatters."
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     thickness: =
        {Txt = "&" Hint = "thickness of fragments, default based on brush size."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when object shatters. Also makes a clicking sound."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_spawn:form =
    {
     Help = "Spawns a model when triggered. It can spawn an" $0D "  model but it's mainly used for spawning monsters."
     bbox = '-8 -8 -8 8 8 8 1'
     modelname: =
        {Txt = "&" Hint = "name of the .def file you wish to spawn (required)."
       }
     angle: =
        {Txt = "&" Hint = "direction model will be facing when spawned."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     modeltargetname: =
        {Txt = "&" Hint = "no hint yet1"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawntargetname: =
        {Txt = "&" Hint = "this will be the targetname of the spawned model (default is null)."
       }
     targetname: =
        {Txt = "&" Hint = "the activating trigger or script points to this name."
       }
     key: =
        {Txt = "&" Hint = "key doesn't work: removed."
       }
     attackmode: =
        {Txt = "&" Hint = "attacking mode of the spawned monster. Possible modes are:"
      Typ="C"
      Items="0) normal mode - will go for player and use duck and cover pathnodes (default)." $0D "1) stand ground - won't move from its spawn spot (except melee monsters)." $0D "2) blitzkrieg - will go for player but won't use duck and cover pathnodes."
      values="0" $0D "1" $0D "2"
       }
    }
    func_spawnchain:form =
    {
     Help = "This will try to spawn a model when triggered bu" $0D "  will succeed only if there is no direct line of sigh" $0D "  between itself and any players. If it fails, it wil" $0D "  trigger its targets."
     bbox = '-8 -8 -8 8 8 8 1'
     angle: =
        {Txt = "&" Hint = "direction model will be facing when spawned."
       }
     modelname: =
        {Txt = "&" Hint = "name of the .def file you wish to spawn (required)."
       }
     noise: =
        {Txt = "&" Hint = "no hint yet1"
       }
     spawntargetname: =
        {Txt = "&" Hint = "this will be the targetname of the spawned model (default is null)."
       }
     target: =
        {Txt = "&" Hint = "point this to the entity to trigger."
       }
     targetname: =
        {Txt = "&" Hint = "the activating trigger or script points to this name."
       }
     key: =
        {Txt = "&" Hint = "key doesn't work: removed."
       }
    }
    func_spawnoutofsight:form =
    {
     Help = "This will try to spawn a model when triggere" $0D "  but will succeed only if there is no direct lin" $0D "  of sight between itself and any players."
     bbox = '-8 -8 -8 8 8 8 1'
     targetname: =
        {Txt = "&" Hint = "the activating trigger or script points to this name."
       }
     key: =
        {Txt = "&" Hint = "& "$22"target"$22" keys don't work: removed. The description for this was wrong."
       }
     spawntargetname: =
        {Txt = "&" Hint = "this will be the targetname of the spawned model (default is null)."
       }
     modelname: =
        {Txt = "&" Hint = "name of the .def file you wish to spawn (required)."
       }
     angle: =
        {Txt = "&" Hint = "direction model will be facing when spawned."
       }
    }
    func_throwobject:form =
    {
     Help = "This is a model actors can pickup and throw at players or other actors."
     bbox = '0 0 0 0 0 0 1'
     scale: =
        {Txt = "&" Hint = "scale of model (default set by .def file)."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     angle: =
        {Txt = "&" Hint = "orientation of model (default 0)."
       }
     targetname: =
        {Txt = "&" Hint = "the script refers to this name."
       }
     angles: =
        {Txt = "&" Hint = "pitch, yaw and roll orientation of model (default 0 0 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_volumetric:form =
    {
     Help = "Use this to make non-solid volumes for fog effects" $0D "  wide sunbeams and light beams, etc. Set up the brush'" $0D "  surface properties with the "$22"add-blend"$22" flag. Wil" $0D "  respond to bind, move and rotate script commands th" $0D "  same as func_scriptobject's."
     targetname: =
        {Txt = "&" Hint = "the script refers to this name."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    func_wall:form =
    {
     Help = "This is just a solid wall. If "$22"targetname"$22" is set" $0D "  this can be removed during the game by having a trigger'" $0D "  "$22"killtarget"$22" key point to it or by using the 'remove" $0D "  script command."
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to remove this."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    furniture_alter:form =
    {
     Help = "Rituals Sacrificial Stone Alter"
     bbox = '-31.83 -55.25 0.00  31.83 55.25 42.46 1'
    }
    furniture_cabinet:form =
    {
     Help = "Large Metal Storage Cabinet"
     bbox = '-14.64 -22.08 -0.00  14.64 22.08 93.88 1'
    }
    furniture_chair1:form =
    {
     Help = "No help yet"
     bbox = '-16.12 -13.63 -0.05  13.53 14.02 48.43 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "chair_base" $0D "chair_base2"
       values = "chair_base" $0D "chair_base2"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    furniture_chair2:form =
    {
     Help = "No help yet"
     bbox = '-10.79 -12.02 0.00  19.56 12.03 58.71 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    furniture_chair3:form =
    {
     Help = "No help yet"
     bbox = '-15.42 -15.88 0.00  20.80 15.84 55.75 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "chair2" $0D "chair2_2"
       values = "chair2" $0D "chair2_2"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    furniture_chairs_largeblack:form =
    {
     Help = "High back office chair-Black"
     bbox = '-15.42 -15.88 0.00  20.80 15.84 55.75 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    furniture_chairs_largered:form =
    {
     Help = "High back office chair-Red"
     bbox = '-15.42 -15.88 0.00  20.80 15.84 55.75 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    furniture_chairs_smallblue:form =
    {
     Help = "Small desk chair-Blue"
     bbox = '-16.12 -13.63 -0.05  13.53 14.02 48.43 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    furniture_chairs_smallgreen:form =
    {
     Help = "Small desk chair-Green"
     bbox = '-16.12 -13.63 -0.05  13.53 14.02 48.43 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    furniture_coatrack:form =
    {
     Help = "Coat Rack"
     bbox = '-10.23 -10.92 0.00  10.57 10.92 68.36 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    fx_bubbles:form =
    {
     Help = "Bubble generator"
     bbox = '-1.71 -27.90 -10.25  27.99 7.35 27.92 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    fx_explosion:form =
    {
     Help = "Explosion"
     bbox = '-22.61 -22.25 -21.36  22.34 22.69 21.38 1'
    }
    fx_fire:form =
    {
     Help = "This creates a fire sprite, it defaults to 2 sprite" $0D "  in a cross shape. If you want the flame to make " $0D "  flickering effect on the surrounding walls, you can se" $0D "  the style key to the 'group' name of the surfaces t" $0D "  control."
     bbox = '-8 -8 -8 8 8 8 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="SINGLE"
        Hint="only one oriented sprite"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="STAR"
        Hint="4 sprites in a star shape"}
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="PARALLEL"
        Hint="sprite will always face player as he moves around it"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     style: =
        {Txt = "&" Hint = "set this to brush faces 'group' name in surface inspector (default 0)."
       }
     off_style: =
        {Txt = "&" Hint = "?? light style to set to when "$22"off"$22" (default is "$22"a"$22")."
       }
     on_style: =
        {Txt = "&" Hint = "?? light style to set to when "$22"on"$22" (default is a flicker)."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the sprite (default 1.0)."
       }
    }
    fx_firegen:form =
    {
     Help = "Fire Generator"
     bbox = '-1.71 -27.90 -10.25  27.99 7.35 27.92 1'
    }
    fx_laser:form =
    {
     Help = "Laser"
     bbox = '-3.16 -3.44 0.00  10.79 3.43 28.54 1'
    }
    fx_muzzleflash:form =
    {
     Help = "Muzzle Flash"
     bbox = '0.00 -1.67 -1.67  8.75 1.67 1.67 1'
    }
    fx_muzzleflash2:form =
    {
     Help = "Muzzle Flash 2"
     bbox = '-0.34 -1.84 -1.67  8.72 1.75 1.64 1'
    }
    fx_pulsebeam:form =
    {
     Help = "Pulse Beam"
     bbox = '-0.04 -4.08 -4.08  18.99 4.08 4.08 1'
    }
    fx_pulsebeam2:form =
    {
     Help = "Pulse Beam 2"
     bbox = '0.00 -5.78 -5.42  103.98 5.67 6.03 1'
    }
    fx_pulseline:form =
    {
     Help = "Pulse Trailing Beam Line"
     bbox = '-0.03 -10.90 -10.90  49.56 10.90 10.90 1'
    }
    fx_pulsesphere:form =
    {
     Help = "Pulse Sphere Explosion"
     bbox = '-30.58 -79.44 -79.50  30.58 79.44 79.38 1'
    }
    fx_smokegen:form =
    {
     Help = "Smoke Generator"
     bbox = '-1.71 -27.90 -10.25  27.99 7.35 27.92 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    fx_sprite:form =
    {
     Help = "Sprite generator" $0D "   The sprite key is required and must be set to the nam" $0D "   of the sprite you want to generate. All the sprites o" $0D "   the game are in the base/sprites folder."
     bbox = '-1.71 -27.90 -10.25  27.99 7.35 27.92 1'
     scale: =
        {Txt = "&" Hint = "scale of the sprite (default 1)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="AUTOANIM"
        Hint="sprite will automatically be animated when spawned."}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="TRACETOSURF"
        Hint="trace to nearest surface and apply sprite on it like a decal"}
     sprite: =
        {Txt = "&" Hint = "sprite file to use (default none). The path/filename and the file exension are required (eg: sprites/smoke.spr)."
       }
     angle: =
        {Txt = "&" Hint = "orientation of sprite (default 0)."
       }
     color: =
        {Txt = "&" Hint = "color to modulate the sprite to (default none)."
       }
     frame: =
        {Txt = "&" Hint = "frame of the sprite to display (default 0)."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angles: =
        {Txt = "&" Hint = "pitch, yaw and roll orientation of sprite (overrides angle - default 0 0 0)."
       }
     alpha: =
        {Txt = "&" Hint = "translucency of the sprite. Values are from 0 to 1 (default is 1 - 100% opaque)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    fx_steamgen:form =
    {
     Help = "Steam Generator"
     bbox = '-1.71 -27.90 -10.25  27.99 7.35 27.92 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    fx_uwshock:form =
    {
     Help = "Shock effect used in UWPASS"
     bbox = '-1.71 -27.90 -10.25  27.99 7.35 27.92 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_Arm:form =
    {
     Help = "Arm Gib"
     bbox = '-4.66 -4.11 -12.01  12.22 3.50 17.46 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_Concrete1:form =
    {
     Help = "Concrete Gib 1"
     bbox = '-20.16 -19.56 0.00  17.43 15.94 3.75 1'
    }
    gib_Concrete2:form =
    {
     Help = "Concrete Gib 2"
     bbox = '-16.62 -25.31 0.00  12.61 23.31 6.25 1'
    }
    gib_Concrete3:form =
    {
     Help = "Concrete Gib 3"
     bbox = '-15.19 -13.81 0.00  12.26 11.71 3.45 1'
    }
    gib_Concrete4:form =
    {
     Help = "Concrete Gib 4"
     bbox = '-11.17 -21.76 0.00  16.04 19.19 7.20 1'
    }
    gib_Concrete5:form =
    {
     Help = "Concrete Gib 5"
     bbox = '-31.26 -30.85 0.00  31.14 30.06 7.50 1'
    }
    gib_Head:form =
    {
     Help = "Head Gib"
     bbox = '-5.62 -4.33 -6.47  5.59 4.24 6.52 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_Leg:form =
    {
     Help = "Leg Gib"
     bbox = '-8.11 -5.82 -24.05  7.26 6.93 25.26 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_ReconahArm:form =
    {
     Help = "Reconah Arm"
     bbox = '-22.19 -9.89 -0.98  20.53 6.42 11.17 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_ReconahGun:form =
    {
     Help = "Reconah Gun"
     bbox = '-17.05 -8.54 -1.13  21.10 13.16 9.50 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_ReconahLeg:form =
    {
     Help = "Reconah Leg"
     bbox = '-19.33 -4.51 -1.49  18.69 5.37 17.01 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_ReconahTorso:form =
    {
     Help = "Reconah Torso"
     bbox = '-31.60 -12.35 -0.36  25.54 9.28 11.60 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_Rib:form =
    {
     Help = "Rib Gib"
     bbox = '-0.13 -10.97 -1.05  10.30 10.46 19.60 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    gib_feather:form =
    {
     Help = "Feather"
     bbox = '-19.33 -2.79 -9.22  0.00 2.88 9.22 1'
    }
    gib_gib1:form =
    {
     Help = "No help yet"
     bbox = '-5.29 -7.44 -8.65  5.48 7.33 8.50 1'
    }
    gib_gib2:form =
    {
     Help = "No help yet"
     bbox = '-4.64 -4.16 -4.49  4.63 6.67 6.18 1'
    }
    gib_torso:form =
    {
     Help = "Torso Gib"
     bbox = '-6.78 -11.27 -12.90  6.44 11.01 12.18 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    info_grav_pathnode:form =
    {
     Help = "Gravity pathnode: attracts players who walk within its set radius. You can daisy-chain these in a path and the first node in the path must have the HEADNODE spawnflag set. The players can be attracted to any node in the path depending on which is closest to them. Activating or deactivating the head node with script commands (acticate,deactivate) will activate or deactivate all the nodes in the path."
     bbox = '-16 -16 0 16 16 32 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     radius: =
        {Txt = "&" Hint = "radius of the pull effect (default 256)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="HEADNODE"
        Hint="signifies this node is the head of the path"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="FORCE"
        Hint="makes gravity un-fightable (player can't go backwards)"}
     speed: =
        {Txt = "&" Hint = "speed of the pull, use negative value for a repulsion (default 100)."
       }
     target: =
        {Txt = "&" Hint = "points to the next node in the path."
       }
     targetname: =
        {Txt = "&" Hint = "name of this node, the previous node in path points to this."
       }
    }
    info_notnull:form =
    {
     Help = "Used as a positional target for func_beam, func_launcher and trigger_pushany."
     bbox = '-4 -4 -4 4 4 4 1'
     targetname: =
        {Txt = "&" Hint = "proper entity points to this."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
    }
    info_null:form =
    {
     Help = "Used as a positional target for lights (spotlight effect)."
     bbox = '-4 -4 -4 4 4 4 1'
     targetname: =
        {Txt = "&" Hint = "light entity points to this."
       }
    }
    info_pathnode:form =
    {
     Help = "Path location nodes used for actor control in scripts. They are used mainly to make them move around from one place to another and do stuff using script commands."
     bbox = '-24 -24 0 24 24 32 1'
     angle: =
        {Txt = "&" Hint = "direction the actor will look when reaching this node."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     panmax: =
        {Txt = "&" Hint = "no hint yet1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="FLEE"
        Hint="marks the node as a safe place to flee to. Actor will be removed when it reaches a flee node and is not visible to a player"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="DUCK"
        Hint="marks the node as a good place to duck behind during weapon fire"}
     spawnflags: =
       {Txt="&"
        Typ="X4"
        Cap="COVER"
        Hint="marks the node as a good place to hide behind during weapon fire"}
     spawnflags: =
       {Txt="&"
        Typ="X8"
        Cap="DOOR"
        Hint="marks the node as a door node. If an adjacent node has DOOR marked as well, the actor will only use the path if the door in between them is unlocked"}
     spawnflags: =
       {Txt="&"
        Typ="X16"
        Cap="JUMP"
        Hint="marks the node as one to jump from when going to the node specified by target"}
     spawnflags: =
       {Txt="&"
        Typ="X32"
        Cap="LADDER"
        Hint="marks the node as a ladder node"}
     spawnflags: =
       {Txt="&"
        Typ="X64"
        Cap="ACTION"
        Hint="marks the node as an action node"}
     target: =
        {Txt = "&" Hint = "name of next node the actor will walk or run to." $0D "  If JUMP spawnflag is set, the actor will jump to the next node."
       }
     targetname: =
        {Txt = "&" Hint = "the name of the previous node that points to this. Also the name used in a script to refer to this node."
       }
     targtename: =
        {Txt = "&" Hint = "no hint yet1"
       }
    }
    info_player_coop:form =
    {
     Help = "Potential spawning position for coop games."
     bbox = '-16 -16 0 16 16 64 1'
     gravityaxis: =
        {Txt = "&" Hint = "sets the gravity axis in which the player will spawn. Possible values are:"
      Typ="C"
      Items="0) down is towards the negative side of the Z axis (default normal gravity)." $0D "1) down is towards the negative side of the X axis." $0D "2) down is towards the negative side of the Y axis." $0D "3) down is towards the positive side of the Z axis (inverse normal gravity)." $0D "4) down is towards the positive side of the X axis." $0D "5) down is towards the positive side of the Y axis."
      values="0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5"
       }
     angle: =
        {Txt = "&" Hint = "direction in which the player is facing when spawned."
       }
    }
    info_player_deathmatch:form =
    {
     Help = "Potential spawning position for deathmatch games."
     bbox = '-16 -16 0 16 16 64 1'
     angle: =
        {Txt = "&" Hint = "direction in which the player is facing when spawned."
       }
     gravityaxis: =
        {Txt = "&" Hint = "sets the gravity axis in which the player will spawn. Possible values are:"
      Typ="C"
      Items="0) down is towards the negative side of the Z axis (default normal gravity)." $0D "1) down is towards the negative side of the X axis." $0D "2) down is towards the negative side of the Y axis." $0D "3) down is towards the positive side of the Z axis (inverse normal gravity)." $0D "4) down is towards the positive side of the X axis." $0D "5) down is towards the positive side of the Y axis."
      values="0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5"
       }
    }
    info_player_intermission:form =
    {
     Help = "No help yet"
     bbox = '-16 -16 0 16 16 64 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "pitch, yaw, roll orientation of viewpoint (default 0 0 0)."
       }
     Camera: =
        {Txt = "&" Hint = "?? like viewpoint used in between deathmatch levels."
       }
    }
    info_player_start:form =
    {
     Help = "The normal starting point for a level. There i" $0D "  normally one per level in a single player map. I" $0D "  you have more than one, you must assign a targetnam" $0D "  to all of them. You can thus have several startin" $0D "  points at which the player can spawn when comin" $0D "  from a previous map. For more info, se" $0D "  trigger_changelevel."
     bbox = '-16 -16 0 16 16 64 1'
     angle: =
        {Txt = "&" Hint = "direction in which the player is facing when spawned."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     message: =
        {Txt = "&" Hint = "Text of message to be displayed."
       }
     targetname: =
        {Txt = "&" Hint = "must be used if there is more than one of these in a map."
       }
     gravityaxis: =
        {Txt = "&" Hint = "sets the gravity axis in which the player will spawn. Possible values are:"
      Typ="C"
      Items="0) down is towards the negative side of the Z axis (default normal gravity)." $0D "1) down is towards the negative side of the X axis." $0D "2) down is towards the negative side of the Y axis." $0D "3) down is towards the positive side of the Z axis (inverse normal gravity)." $0D "4) down is towards the positive side of the X axis." $0D "5) down is towards the positive side of the Y axis."
      values="0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5"
       }
    }
    info_splinepath:form =
    {
     Help = "Script Object Spline Path Node. These can b" $0D "  "$22"daisy-chained"$22" to one another to create a path tha" $0D "  cameras, scriptobjects and scriptmodels can follo" $0D "  If placed in an irregular pattern in a map and a" $0D "  object is instructed to follow the path in a script" $0D "  the trajectory, speed, angles and acceleration o" $0D "  the object following a path will be interpolated fro" $0D "  one node to the next to create smooth transitions thu" $0D "  the name SPLINEpath."
     bbox = '-1.71 -27.90 -10.25  27.99 7.35 27.92 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "pitch, yaw, roll orientation the camera or script entity will have when it reaches this node (default 0 0 0)."
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     speed: =
        {Txt = "&" Hint = "speed multiplier for this segment, normally each segment will take 1 second to traverse, use 2 for double speed and 0.5 for half speed"
       }
     target: =
        {Txt = "&" Hint = "set this to the targetname of the next node in the path."
       }
     targetname: =
        {Txt = "&" Hint = "the previous node in the path points to this."
       }
     time: =
        {Txt = "&" Hint = "no hint yet1"
       }
     loop: =
        {Txt = "&" Hint = "?? set a loop node. When this is set, a camera instructed to orbit the path will loop back to the node that this points to after it reaches this one."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    inventory_U4Sample:form =
    {
     Help = "U4 Sample"
     bbox = '-1.91 -2.20 0.00  1.91 2.20 17.59 1'
    }
    inventory_blueprints:form =
    {
     Help = "Blueprints"
     bbox = '-2.62 -2.65 -19.55  2.61 2.58 19.38 1'
    }
    inventory_candybar:form =
    {
     Help = "Candy Bar"
     bbox = '-2.02 -5.83 -0.00  1.95 5.83 3.76 1'
    }
    inventory_coin:form =
    {
     Help = "Coin"
     bbox = '-1.12 -1.18 0.00  1.14 1.20 2.25 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    inventory_comlink:form =
    {
     Help = "Remote Communications Device"
     bbox = '-0.63 -1.88 0.00  3.04 8.36 25.12 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    inventory_cookies:form =
    {
     Help = "Cookies"
     bbox = '-11.57 -7.24 0.00  11.57 7.24 5.04 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    inventory_dollar:form =
    {
     Help = "Dollar Money - A thin little dollar"
     bbox = '-4.76 -8.22 0.00  3.20 8.09 8.26 1'
    }
    inventory_envelope:form =
    {
     Help = "Package"
     bbox = '-7.57 -11.08 -7.49  7.57 11.08 7.62 1'
    }
    inventory_evidence:form =
    {
     Help = "Evidence envelope"
     bbox = '-13.07 -8.77 0.00  13.06 8.76 24.16 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    inventory_genericpulsepart:form =
    {
     Help = "Pulse Weapon Part - Place only one per level" $0D "   This will automatically spawn as the next piec" $0D "  that the player needs to complete the weapon dependin" $0D "  of which one(s) he already has. Once the player ha" $0D "  picked up 3 of these, he will get the PulseRifle."
     bbox = '-8 -8 0 8 8 16 1'
     killtarget: =
        {Txt = "&" Hint = "the entities this points to will be removed when item is picked up."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when item is picked up. Also makes a clicking sound."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     target: =
        {Txt = "&" Hint = "the entity this points will be triggered when item is picked up."
       }
     angle: =
        {Txt = "&" Hint = "direction in which the part is facing when spawned."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when item is picked up. This can be in a different script file as well by using the '::' notation."
       }
     key: =
        {Txt = "&" Hint = "item needed to be able to pick this up (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     angles: =
        {Txt = "&" Hint = "alternate pitch, yaw, roll orientation method for part (overrides angle -  default 0 0 0)."
       }
     gravityaxis: =
        {Txt = "&" Hint = "sets the gravity axis in which the item will spawn. Possible values are:"
      Typ="C"
      Items="0) down is towards the negative side of the Z axis (default normal gravity)." $0D "1) down is towards the negative side of the X axis." $0D "2) down is towards the negative side of the Y axis." $0D "3) down is towards the positive side of the Z axis (inverse normal gravity)." $0D "4) down is towards the positive side of the X axis." $0D "5) down is towards the positive side of the Y axis."
      values="0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? don't use this (duh!)"
       }
    }
    inventory_keyring:form =
    {
     Help = "Keys for locked doors"
     bbox = '-4.29 -2.17 0.00  4.34 2.08 8.49 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    inventory_moneybag:form =
    {
     Help = "Money bags from heist that you can pick-up"
     bbox = '-10.07 -10.00 0.00  10.07 10.14 17.81 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     thread: =
        {Txt = "&" Hint = "no hint yet1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    inventory_passcode:form =
    {
     Help = "Password Paper"
     bbox = '-8.05 -5.51 -0.03  7.71 4.75 15.21 1'
    }
    inventory_pulsepart1:form =
    {
     Help = "Pulse Weapon Part #1"
     bbox = '-23.72 -4.87 -0.07  13.13 6.88 20.58 1'
    }
    inventory_pulsepart2:form =
    {
     Help = "Pulse Weapon Part #2"
     bbox = '-7.65 -4.79 0.00  8.54 5.03 12.76 1'
    }
    inventory_pulsepart3:form =
    {
     Help = "Pulse Weapon Part #3"
     bbox = '-17.13 -6.21 -0.05  12.94 6.16 10.98 1'
    }
    inventory_silencer:form =
    {
     Help = "Silencer for Magnum & Assault Rifle"
     bbox = '-1.88 -1.94 -0.01  1.81 1.94 7.82 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_CheesyPoofs:form =
    {
     Help = "Cheesy Poofs - Yummy"
     bbox = '-17.80 -11.14 0.00  17.80 11.14 7.76 1'
    }
    items_alarm:form =
    {
     Help = "alarm"
     bbox = '0.00 -7.88 -0.04  10.42 8.39 30.73 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_axepick:form =
    {
     Help = "Pickaxe"
     bbox = '-3.25 -13.12 -0.00  3.25 13.12 41.97 1'
    }
    items_bag:form =
    {
     Help = "Cement Bag"
     bbox = '-13.35 -8.36 0.00  13.35 8.36 3.45 1'
    }
    items_battery:form =
    {
     Help = "No help yet"
     bbox = '-0.00 0.00 0.00  1.50 8.85 7.20 1'
    }
    items_bellalarm:form =
    {
     Help = "bell_alarm"
     bbox = '0.00 -10.26 0.00  9.75 10.56 33.51 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_belt:form =
    {
     Help = "No help yet"
     bbox = '-30.68 -17.05 0.00  0.63 21.15 4.31 1'
     Belt: =
        {Txt = "&" Hint = "?? Ammo or Backpack?"
       }
    }
    items_briefcase:form =
    {
     Help = "No help yet"
     bbox = '-9.35 -2.34 -14.62  9.76 2.21 2.13 1'
    }
    items_bulb_off:form =
    {
     Help = "Hanging Bulb Off"
     bbox = '-2.73 -3.12 0.00  2.68 3.13 9.81 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_bulb_on:form =
    {
     Help = "Hanging Bulb"
     bbox = '-2.73 -3.12 0.00  2.68 3.13 9.81 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "bulb_base" $0D "bulbred_base"
       values = "bulb_base" $0D "bulbred_base"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     killtarget: =
        {Txt = "&" Hint = "targeted object disappears when fires."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_doorbell:form =
    {
     Help = "Doorbell"
     bbox = '0.00 -2.76 0.00  0.77 2.76 44.82 1'
    }
    items_fireaxe:form =
    {
     Help = "Fireaxe"
     bbox = '-0.79 -6.01 -0.00  0.79 2.18 22.34 1'
    }
    items_glasses:form =
    {
     Help = "Glasses"
     bbox = '-7.73 -3.64 -0.85  0.80 3.60 0.87 1'
    }
    items_hammer1:form =
    {
     Help = "Large Sledgehammer"
     bbox = '-1.87 -5.50 0.00  1.88 5.48 42.77 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_hammer2:form =
    {
     Help = "No help yet"
     bbox = '-1.93 -5.22 -0.00  1.93 7.35 29.24 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_hanglite:form =
    {
     Help = "Hanging light fixture"
     bbox = '-9.72 -9.72 0.00  9.72 9.72 120.00 1'
    }
    items_hanglite1_off:form =
    {
     Help = "Hanging light fixture Off"
     bbox = '-2.73 -3.12 0.00  2.68 3.13 59.63 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     killtarget: =
        {Txt = "&" Hint = "targeted object disappears when fires."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_hanglite1_on:form =
    {
     Help = "Hanging light fixture"
     bbox = '-2.73 -3.12 0.00  2.68 3.13 59.63 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "hanglight1_base" $0D "hanglight1red_base"
       values = "hanglight1_base" $0D "hanglight1red_base"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     killtarget: =
        {Txt = "&" Hint = "targeted object disappears when fires."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_hanglite2_off:form =
    {
     Help = "Hanging light fixture Off"
     bbox = '-19.39 -19.54 0.00  19.34 19.55 65.81 1'
    }
    items_hanglite2_on:form =
    {
     Help = "Hanging light fixture"
     bbox = '-19.39 -19.54 0.00  19.34 19.55 65.81 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     killtarget: =
        {Txt = "&" Hint = "targeted object disappears when fires."
       }
     kiltarget: =
        {Txt = "&" Hint = "no hint yet1"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_hanglite3:form =
    {
     Help = "Hanging light fixture"
     bbox = '-4.97 -4.92 0.00  4.86 4.90 149.13 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_hardhat:form =
    {
     Help = "No help yet"
     bbox = '-9.91 -5.40 -3.75  4.61 4.29 3.84 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_moneybag:form =
    {
     Help = "Money bag from heist"
     bbox = '-10.07 -10.00 0.00  10.07 10.14 17.81 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    items_toolbox:form =
    {
     Help = "Toolbox"
     bbox = '-6.55 -15.62 0.00  6.55 15.62 16.45 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    lensflare:form =
    {
     Help = "Lensflare effect sprite."
     bbox = '-8 -8 -8 8 8 8 1'
     _color: =
        {Txt = "&" Hint = "no hint yet1"
       }
     _color: = { Typ="L" Txt="&" Hint="Click here to pick the light color" }
     color: =
        {Txt = "&" Hint = "RGB color of lensflare, 3 values between 0 and 1 (default 1 1 1)."
       }
     color: = { Typ="L" Txt="&" Hint="Click here to pick the light color" }
     radius: =
        {Txt = "&" Hint = "radius of the dynamic light (default 200)."
       }
     scale: =
        {Txt = "&" Hint = "scale of the lensflare (default 0.5)."
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     light: =
        {Txt = "&" Hint = "If set,make the flare emit a dynamic light. (default is not set)."
       }
     lightstyle: =
        {Txt = "&" Hint = "?? lightstyle of the lensflare (default none)."
       }
     sprite: =
        {Txt = "&" Hint = "sprite model to use for the flare (default sprites/glow.spr)."
       }
    }
    light:form =
    {
     Help = "Y@hi ?or."
     bbox = '-8 -8 -8 8 8 8 1'
     _color: =
        {Txt = "&" Hint = "RGB color of light (default 1 1 1)."
       }
     _color: = { Typ="L" Txt="&" Hint="Click here to pick the light color" }
     _cone: =
        {Txt = "&" Hint = "sets size of light cone for spotlights (default 10)."
       }
     color: =
        {Txt = "&" Hint = "no hint yet1"
       }
     color: = { Typ="L" Txt="&" Hint="Click here to pick the light color" }
     light: =
        {Txt = "&" Hint = "light intensity value (default 300)."
       }
     onstyle: =
        {Txt = "&" Hint = "no hint yet1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="START_OFF"
        Hint="light will spawn in the "$22"off"$22" state"}
     speed: =
        {Txt = "&" Hint = "speed of movement"
       }
     style: =
        {Txt = "&" Hint = "gives the light a preset light style (defined in global/global0.scr). Has no effect on targeted lights (use "$22"on_style"$22" and "$22"off_style"$22" for those). Style choices are:"
      Typ="C"
      Items="0) normal (default)" $0D "1) flicker (first variety)" $0D "2) slow strong pulse" $0D "3) candle (first variety)" $0D "4) fast strobe" $0D "5) gentle pulse 1" $0D "6) flicker (second variety)" $0D "7) candle (second variety)" $0D "8) candle (third variety)" $0D "9) slow strobe (fourth variety)" $0D "10) fluorescent flicker" $0D "11) slow pulse not fade to black"
      values="0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5" $0D "6" $0D "7" $0D "8" $0D "9" $0D "10" $0D "11"
       }
     target: =
        {Txt = "&" Hint = "point this to an info_null entity to make a spotlight effect. The distance between the light and the info_null affect the size and intensity of the light cone. This can also target a triggerable entity which will be used both as an aiming point for the light and be activated when the light is itself triggered."
       }
     targetname: =
        {Txt = "&" Hint = "if targeted, will toggle between on and off when triggered."
       }
     key: =
        {Txt = "&" Hint = "item needed to toggle light when targeted (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     Non: =
        {Txt = "&" Hint = "?? displayed light source."
       }
     off_style: =
        {Txt = "&" Hint = "?? light style to set to when "$22"off"$22" (default is "$22"a"$22")."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     on_style: =
        {Txt = "&" Hint = "?? light style to set to when "$22"on"$22" (default is "$22"m"$22")."
       }
    }
    light_ramp:form =
    {
     Help = "No help yet"
     bbox = '-8 -8 -8 8 8 8 1'
     light: =
        {Txt = "&" Hint = "maximum light intensity value on which level 2.0 is based (default 300)."
       }
     style: =
        {Txt = "&" Hint = "no hint yet1"
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     _color: =
        {Txt = "&" Hint = "RGB color of light (default 1 1 1)."
       }
     endlevel: =
        {Txt = "&" Hint = "value between 0 and 2.0 (default 0)."
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="TOGGLE"
        Hint="light source will alternately ramp up and ramp down each time it's triggered"}
     startlevel: =
        {Txt = "&" Hint = "value between 0 and 2.0 (default 1.0)."
       }
     time: =
        {Txt = "&" Hint = "how many seconds the ramping will take (default 1.0)."
       }
     _cone: =
        {Txt = "&" Hint = "sets size of light cone for spotlights (default 10)."
       }
     target: =
        {Txt = "&" Hint = "point this to an info_null entity to make a spotlight effect. The distance between the light and the info_null affect the size and intensity of the light cone. This can also target a triggerable entity which will be used both as an aiming point for the light and be activated when the light is itself triggered."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     Non: =
        {Txt = "&" Hint = "?? displayed light source that ramps its intensity from one level to another when triggered. By default, it will ramp from "$22"startlevel"$22" to "$22"endlevel"$22" only once and remain at that level even if triggered again (unless TOGGLE is set)."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
    }
    misc_medkit:form =
    {
     Help = "Variable size entity both visible and solid in the game. This heals players to their max health when used."
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
    }
    misc_oxygen:form =
    {
     Help = "Variable size entity. This will reset the drowning time when touched - only responds to players."
     thread: =
        {Txt = "&" Hint = "name of thread to call when this is touched. This can be in a different script file as well by using the '::' notation."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the entity is touched."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the entity is touched. Trigger also makes a clicking sound."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity if VISIBLE is set (default 1.0)."
       }
     target: =
        {Txt = "&" Hint = "the entities this points to will be triggered when entity is touched."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    misc_teleporter:form =
    {
     Help = "Touching this entity will teleport players to the targeted misc_teleporter_destination."
     target: =
        {Txt = "&" Hint = "point this to the misc_teleporter_destination where the players will be teleported."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     gravityaxis: =
        {Txt = "&" Hint = "sets player's axis of gravity when teleported. Possible values are:"
      Typ="C"
      Items="0) down is towards the negative side of the Z axis (default normal gravity)." $0D "1) down is towards the negative side of the X axis." $0D "2) down is towards the negative side of the Y axis." $0D "3) down is towards the positive side of the Z axis (inverse normal gravity)." $0D "4) down is towards the positive side of the X axis." $0D "5) down is towards the positive side of the Y axis."
      values="0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "5"
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity if VISIBLE is set (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    misc_teleporter_dest:form =
    {
     Help = "Teleporter destination location. Point a misc_teleporter at this."
     bbox = '-32 -32 0 32 32 8 1'
     angle: =
        {Txt = "&" Hint = "direction in which the player will be facing when teleported."
       }
     targetname: =
        {Txt = "&" Hint = "the misc_teleporter from where the players are teleported points to this."
       }
    }
    plant_banktree:form =
    {
     Help = "Small Potted Tree"
     bbox = '-28.96 -32.57 -0.93  26.27 26.32 121.59 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_citytree:form =
    {
     Help = "SPECIAL CASE-Attach extra box around upper portion"
     bbox = '-48.28 -31.49 -0.64  43.78 44.97 165.90 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     spawnflags: =
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: =
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_coral:form =
    {
     Help = "Coral Plant-Spindly"
     bbox = '-14.72 -6.07 -5.82  12.91 28.37 44.42 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "corplant_base1" $0D "corplant_base2" $0D "corplant_base3"
       values = "corplant_base1" $0D "corplant_base2" $0D "corplant_base3"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_coraltypes_blue:form =
    {
     Help = "Coral Plant-Spindly-Blue"
     bbox = '-14.72 -6.07 -5.82  12.91 28.37 44.42 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_coraltypes_brown:form =
    {
     Help = "Coral Plant-Spindly-Brown Redish"
     bbox = '-14.72 -6.07 -5.82  12.91 28.37 44.42 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_coraltypes_green:form =
    {
     Help = "Coral Plant-Spindly-Green"
     bbox = '-14.72 -6.07 -5.82  12.91 28.37 44.42 1'
    }
    plant_flower:form =
    {
     Help = "No help yet"
     bbox = '-12.36 -7.94 -0.82  12.89 14.44 39.03 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_palmtree:form =
    {
     Help = "Palmtree"
     bbox = '-58.30 -68.81 -1.58  89.71 62.62 306.05 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_plant:form =
    {
     Help = "No help yet"
     bbox = '-34.81 -34.36 -0.70  32.82 30.22 44.26 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_seaweed:form =
    {
     Help = "No help yet"
     bbox = '-3.48 -4.32 0.00  3.48 4.36 52.19 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_shrub:form =
    {
     Help = "No help yet"
     bbox = '-17.20 -54.98 0.00  17.20 55.41 43.25 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    plant_tree:form =
    {
     Help = "Tree"
     bbox = '-41.29 -44.05 -0.00  38.87 46.37 167.32 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    skeetlauncher:form =
    {
     Help = "Variable size entity. This is the skeetlauncher use" $0D "  in the Hardcorps Training Center. It launches clay pigeon" $0D "  the player can shoot. Completely script controlled" $0D "  The script commands which apply to this entity are" $0D "  launch, setDuration, setGravity, setSpeed, setSpeedVar" $0D "  setXdir, setYdir, setZdir, setXvar, setYvar and setZvar."
     targetname: =
        {Txt = "&" Hint = "name used by script to control entity."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trap_bouncingbetty:form =
    {
     Help = "Bouncing Betty trap" $0D "  In default proximity mode, when the player walks t" $0D "  within around 128 units from it, the iris will ope" $0D "  and eject a Bouncing Betty bomb upward that explode" $0D "  at the height of the player's torso (if trap is place" $0D "  at floor height)."
     bbox = '-21.16 -20.94 -0.00  21.39 21.73 1.50 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "scale of model (default set by .def file)."
       }
     targetname: =
        {Txt = "&" Hint = "if set, trap will only be activated when triggered. This name can also refered to by a script to control trap."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the model (default 1.0)."
       }
     angle: =
        {Txt = "&" Hint = "orientation of model (default 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trap_camgun:form =
    {
     Help = "Rotating security machine gun turret that tracks and fires at players. This is the ceiling 4 barrel model."
     bbox = '-13.24 -10.27 -13.09  56.89 10.30 1.25 1'
     angle: =
        {Txt = "&" Hint = "orientation of turret model (default 0)."
       }
     scale: =
        {Txt = "&" Hint = "scale of turret model (default set by .def file)."
       }
     _minlight: =
        {Txt = "&" Hint = "inherent glow."
       }
     firingdistance: =
        {Txt = "&" Hint = "no hint yet1"
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     lagtime: =
        {Txt = "&" Hint = "amount of time between when the turret spots the player and then starts firing (default 0)."
       }
     patience: =
        {Txt = "&" Hint = "amount of time the turret will continue to fire at a player once they move out of it's sight range (default 1 sec)."
       }
     pitchrange: =
        {Txt = "&" Hint = "maximum vertical traverse angle of the turret to either side of it's initial orientation. Default is 90 degrees either side hence a half turn."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     wakeupdistance: =
        {Txt = "&" Hint = "no hint yet1"
       }
     yawrange: =
        {Txt = "&" Hint = "maximum horizontal traverse angle of the turret to either side of it's initial orientation. Default is 180 degrees either side hence a full turn."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the model (default 1.0)."
       }
     sighttarget: =
        {Txt = "&" Hint = "?? points to the entity to trigger when turret sees a player."
       }
     sightthread: =
        {Txt = "&" Hint = "?? name of thread to call when turret sees a player."
       }
     this: =
        {Txt = "&" Hint = "?? turret will be inactive until triggered. Once activated, it cannot be turned off by triggering it again. This name can be used by a script for turret control."
       }
     angles: =
        {Txt = "&" Hint = "pitch, yaw and roll orientation of turret model (overrides angle - default 0 0 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trap_claymore:form =
    {
     Help = "No help yet"
     bbox = '-4.30 -10.63 -0.00  3.06 10.63 17.92 1'
    }
    trap_dynamite:form =
    {
     Help = "Dynamite Trap"
     bbox = '-5.28 -14.21 0.00  5.43 12.09 8.48 1'
    }
    trap_missilelauncher_base:form =
    {
     Help = "Missile Launcher - Base."
     bbox = '-31.92 -25.55 0.00  35.04 25.53 49.42 1'
    }
    trap_missilelauncher_top:form =
    {
     Help = "Missile Launcher - Top."
     bbox = '-29.75 -35.46 0.00  39.62 35.54 86.41 1'
    }
    trap_oldlauncher:form =
    {
     Help = "Old Launcher Model"
     bbox = '-15.27 -32.07 0.00  15.27 19.88 59.70 1'
    }
    trap_rocketturret:form =
    {
     Help = "Guided rocket turret complete with base" $0D "  When inserted, the top part of a security turret mode" $0D "  will appear in SinEd's camera view but the real mode" $0D "  that will spawn in the game is a rocket turret. Will automatically be activated by default and track the player. It launches one rocket every 8 seconds. Can be activated by a trigger or controlled by script commands."
     bbox = '-16.74 -16.59 -9.21  27.25 16.59 31.66 1'
     angle: =
        {Txt = "&" Hint = "orientation of model (default 0)."
       }
     scale: =
        {Txt = "&" Hint = "scale of model (default set by .def file)."
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "if set, turret will only be activated when triggered. This name can also refered to by a script to control turret."
       }
     wakeupdistance: =
        {Txt = "&" Hint = "distance at which the turret senses players (default 750)."
       }
     firingdistance: =
        {Txt = "&" Hint = "distance at which the turret will fire at a player (Default is 800)."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the model (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trap_rocketturret_base:form =
    {
     Help = "Rocket turret" $0D "  If targeted, Turret will only be activated when triggered"
     bbox = '-19.52 -19.36 -23.63  19.06 19.22 20.14 1'
    }
    trap_securityturret:form =
    {
     Help = "Rotating security machine gun turret that track" $0D "  and fires at players. This is the retractable base" $0D "  2 barrel floor model."
     bbox = '-16.74 -16.59 -9.21  27.25 16.59 31.66 1'
     scale: =
        {Txt = "&" Hint = "scale of turret model (default set by .def file)."
       }
     angle: =
        {Txt = "&" Hint = "orientation of turret model (default 0)."
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     targetname: =
        {Txt = "&" Hint = "if set, turret will only be activated when triggered. This name can also refered to by a script to control turret."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the model (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trap_securityturret_base:form =
    {
     Help = "If targeted, Turret will only be activated when triggered"
     bbox = '-19.52 -19.36 -23.63  19.06 19.22 20.14 1'
    }
    trigger_SetLightStyle:form =
    {
     Help = "Used for controlling surface based light sources" $0D "  The brush faces controlled by this must have the 'light" $0D "  surface flag and a 'radiosity' or 'direct value' set i" $0D "  surf inspector."
     bbox = '-8 -8 -8 8 8 8 1'
     style: =
        {Txt = "&" Hint = "set this to brush faces 'group' name in surface inspector (default 0)."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="START_OFF"
        Hint="light will spawn in the "$22"off"$22" state"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this. Will toggle between on and off states each time it's triggered."
       }
     targtename: =
        {Txt = "&" Hint = "no hint yet1"
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     off_style: =
        {Txt = "&" Hint = "?? light style to set to when "$22"off"$22" (default is "$22"a"$22")."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     on_style: =
        {Txt = "&" Hint = "?? light style to set to when "$22"on"$22" (default is "$22"m"$22")."
       }
    }
    trigger_camerause:form =
    {
     Help = "Variable size trigger. Activates the targeted camera'" $0D "  view when used. Once used, pressing the use key agai" $0D "  will cycle through camera views in round-robin fashion."
     target: =
        {Txt = "&" Hint = "point this to a func_camera or func_securitycamera entity."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="VISIBLE"
        Hint="trigger brush will be both visible and solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity if VISIBLE is set (default 1.0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_changelevel:form =
    {
     Help = "Variable size trigger. When the player touches this" $0D "  he gets sent to the map listed in the "$22"map"$22" key. I" $0D "  deathmatch, the view will go to the info_intermissio" $0D "  spot (if one exists) and display stats."
     map: =
        {Txt = "&" Hint = "name of next .bsp file (no extension) to load. To clear all save game data from previous levels, precede the name of the map with a '*' character. If you want the player to start in a specific location in the next map, follow the map name with the targetname of the info_player_start entity located where you want him to start. For example, if the name of the map is "$22"mymap.bsp"$22" and the targetname of the info_player_start is "$22"spot1"$22", set the "$22"map"$22" key to "$22"*mymap$spot1"$22"."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "this defaults to "$22"LevelComplete"$22" and should point to a thread that is called just before the level ends."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_damagetargets:form =
    {
     Help = "Variable size trigger that will inflict damage t" $0D "  its targets when activated by another trigger and/o" $0D "  shot at if SOLID is set (cannot be touch activated)" $0D "  When transferring damage to the targets by hurtin" $0D "  the trigger, none of the other keys (damage, cnt" $0D "  message, key, thread) are active."
     target: =
        {Txt = "&" Hint = "this points to the entities to inflict damage to."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     damage: =
        {Txt = "&" Hint = "amount of damage to inflict. If no damage is specified, targeted objects are damaged by their current health +1 (IOW destroyed)."
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default: infinite)."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_damagetargetsfixed:form =
    {
     Help = "This is the same as trigger_damagetargets excep" $0D "  it's a fixed size version. Since no brush can be tie" $0D "  to it, it can't transfer damage to its targets becaus" $0D "  it can't be hurt (even if SOLID is set). Must b" $0D "  activated by another trigger."
     bbox = '-8 -8 -8 8 8 8 1'
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not hurt player"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="NOT_MONSTERS"
        Hint="trigger does not hurt monster"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="trigger will hurt projectiles (rockets, grenades, mines)"}
     target: =
        {Txt = "&" Hint = "this points to the entities to inflict damage to."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default: infinite)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     damage: =
        {Txt = "&" Hint = "amount of damage to inflict. If no damage is specified, targeted objects are damaged by their current health +1 (IOW destroyed)."
       }
    }
    trigger_damagethreshold:form =
    {
     Help = "Variable size solid trigger that fires its target" $0D "  only when a threshold of damage inflicted to it i" $0D "  exceeded. If this targets func_breakawaywall entitie" $0D "  for example, it lets you create a set of walls tha" $0D "  can only be destroyed by a weapon that delivers enoug" $0D "  one-shot damage to activate the trigger. Will als" $0D "  trigger any targeted func_areaportals when not invisible."
     damage: =
        {Txt = "&" Hint = "no hint yet1"
       }
     explosions: =
        {Txt = "&" Hint = "no hint yet1"
       }
     health: =
        {Txt = "&" Hint = "minimum amount of one-shot damage to inflict for the trigger to activate its targets (default 60)."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     noise: =
        {Txt = "&" Hint = "no hint yet1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="INVISIBLE"
        Hint="trigger will still be solid but not visible"}
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not respond to damage caused by players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to damage caused by monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="ACCUMULATIVE"
        Hint="damage to inflict is cumulative instead of threshold based"}
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? specifies how many times the trigger can fire before it will remove itself (default 1, -1 is infinite firing)."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity if INVISIBLE is NOT set (default 1.0)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_exit:form =
    {
     Help = "Variable size trigger. When the player touches this" $0D "  an exit icon will be displayed in his hud. This is t" $0D "  inform him that he is near an exit."
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_hurt:form =
    {
     Help = "Variable size trigger thats will inflict damage when touched."
     damage: =
        {Txt = "&" Hint = "amount of damage to cause (default 10)."
       }
     dmg: =
        {Txt = "&" Hint = "damage it does."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     cnt: =
        {Txt = "&" Hint = "?? specifies how many times the trigger can fire before it will remove itself (default: infinite)."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_lightramp:form =
    {
     Help = "Ramps light values on surface based light source" $0D "  from one level to another when triggered. By default" $0D "  it will ramp from "$22"startlevel"$22" to "$22"endlevel"$22" once whe" $0D "  triggered and remain at that level even if triggered again (unless TOGGLE is set). The brush faces controlled by this must have the 'light' surface flag and a 'direct value' set in surf inspector."
     bbox = '-8 -8 -8 8 8 8 1'
     style: =
        {Txt = "&" Hint = "set this to brush faces 'group' name in surface inspector (default 0)."
       }
     startlevel: =
        {Txt = "&" Hint = "value between 0 and 2.0 (default 1.0)."
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     time: =
        {Txt = "&" Hint = "how many seconds the ramping will take (default 1.0)."
       }
     endlevel: =
        {Txt = "&" Hint = "value between 0 and 2.0 (default 0)."
       }
    }
    trigger_multiple:form =
    {
     Help = "Variable size repeatable trigger that fires its target" $0D "  when touched or killed. Can also call a script thread."
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger when activated."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default: infinite)."
       }
     this: =
        {Txt = "&" Hint = "?? trigger must be killed instead of touched to be activated (this also makes trigger solid)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_mutate:form =
    {
     Help = "Variable size trigger that will transform player" $0D "  into a mutant when touched or killed. Common trigge" $0D "  keys also work. Monsters can activate trigger but ar" $0D "  not transformed into mutants."
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default: infinite)."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity if VISIBLE is set (default 1.0)."
       }
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     this: =
        {Txt = "&" Hint = "?? trigger must be killed instead of touched to be activated (this also makes trigger solid)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
    }
    trigger_once:form =
    {
     Help = "Variable size trigger that fires its targets whe" $0D "  touched or killed. Can also call a script thread" $0D "  Triggers once, then removes itself."
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when the trigger is activated. Trigger also makes a clicking sound."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOTOUCH"
        Hint="this makes the trigger non-solid when "$22"health"$22" is set"}
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not respond to players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="trigger will respond to projectiles (rockets, grenades, mines)"}
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     wait: =
        {Txt = "&" Hint = "time before re-triggerable"
       }
     this: =
        {Txt = "&" Hint = "?? trigger must be killed instead of touched to be activated (this also makes trigger solid)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_particles:form =
    {
     Help = "This will spawn particles when triggered."
     bbox = '-8 -8 -8 8 8 8 1'
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "pitch, yaw, roll direction in which to spawn particles (default 0 0 0)."
       }
     count: =
        {Txt = "&" Hint = "number of particles to spawn each time this is triggered (default 10)."
       }
     noise: =
        {Txt = "&" Hint = "sound to play when triggered (defaults to random spark sounds)."
       }
     particlestyle: =
        {Txt = "&" Hint = "style of particles (default 122 - sparks). Sample styles are:"
      Typ="C"
      Items="120) gunsmoke" $0D "121) blood" $0D "123) orangeglow" $0D "124) blueyellow" $0D "125) debris trail" $0D "128) oil" $0D "129) waterspray"
      values="120" $0D "121" $0D "123" $0D "124" $0D "125" $0D "128" $0D "129"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOSOUND"
        Hint="no sound will be played"}
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not respond to players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="trigger will respond to projectiles (rockets, grenades, mines)"}
     spawnflags: = 
       {Txt="&"
        Typ="X32"
        Cap="RANDSTYLE"
        Hint="particles will be set to random colors in the particlestyle"}
     spawnflags: = 
       {Txt="&"
        Typ="X64"
        Cap="BRIGHT"
        Hint="particles will be drawn extra bright"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
    }
    trigger_push:form =
    {
     Help = "Variable size trigger. Pushes players, monsters, actors and projectiles as if they were caught in a heavy wind when touched."
     angle: =
        {Txt = "&" Hint = "direction in which the entities are pushed (-1 is up, -2 is down, default -1)."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not push players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="NOT_MONSTERS"
        Hint="trigger will not push monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="NOT_PROJECTILES"
        Hint="trigger will not push projectiles (rockets, grenades, mines)"}
     speed: =
        {Txt = "&" Hint = "speed at which the entities are pushed (default 1000)."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default: infinite)."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     target: =
        {Txt = "&" Hint = "this will trigger the entity it points to (if triggerable) and use it as an aiming point (overrides "$22"angle"$22"). Setting this also has an effect on the resulting speed and angle of push which is then based on a combination of the value of the "$22"speed"$22" key, the position of the targeted entity (overrides "$22"angle"$22") plus the angle of approach and speed of collision of the player with the trigger: the faster the player walks into the trigger brush, the stronger the push."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_pushany:form =
    {
     Help = "Same thing as a trigger_push but will push entities in any direction set by "$22"angles"$22"."
     angles: =
        {Txt = "&" Hint = "pitch, yaw, roll direction in which to push entities (default 0 0 0)."
       }
     speed: =
        {Txt = "&" Hint = "speed at which the entities are pushed (default 1000)."
       }
     target: =
        {Txt = "&" Hint = "this will trigger the entity it points to (if triggerable) and use it as an aiming point (overrides "$22"angles"$22"). Setting this also has an effect on the resulting speed and angle of push which is then based on a combination of the value of the "$22"speed"$22" key, the position of the targeted entity plus the angle of approach and speed of collision of the player with the trigger: the faster the player walks into the trigger brush, the stronger the push."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default: infinite)."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when activated. This can be in a different script file as well by using the '::' notation."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_randomparticles:form =
    {
     Help = "This will spawn particles at random time intervals when triggered."
     bbox = '-8 -8 -8 8 8 8 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     count: =
        {Txt = "&" Hint = "number of particles to spawn each time this is triggered (default 10)."
       }
     maxdelay: =
        {Txt = "&" Hint = "maximum delay between particle triggers (default 10)."
       }
     mindelay: =
        {Txt = "&" Hint = "minimum delay between particle triggers (default 3)."
       }
     noise: =
        {Txt = "&" Hint = "sound to play when triggered (defaults to random spark sounds)."
       }
     particlestyle: =
        {Txt = "&" Hint = "style of particles (default 122 - sparks). Sample styles are:"
      Typ="C"
      Items="120) gunsmoke" $0D "121) blood" $0D "123) orangeglow" $0D "124) blueyellow" $0D "125) debris trail" $0D "128) oil" $0D "129) waterspray"
      values="120" $0D "121" $0D "123" $0D "124" $0D "125" $0D "128" $0D "129"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="START_ON"
        Hint="particle effect will initially be on and turn off when triggered"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOSOUND"
        Hint="no sound will be played"}
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not respond to players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="trigger will respond to projectiles (rockets, grenades, mines)"}
     spawnflags: = 
       {Txt="&"
        Typ="X32"
        Cap="RANDSTYLE"
        Hint="particles will be set to random colors in the particlestyle"}
     spawnflags: = 
       {Txt="&"
        Typ="X64"
        Cap="BRIGHT"
        Hint="particles will be drawn extra bright"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     angles: =
        {Txt = "&" Hint = "pitch, yaw, roll direction in which to spawn particles (default 0 0 0)."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
    }
    trigger_randomspeaker:form =
    {
     Help = "This will play a sound at random time intervals when triggered. Don't use this with ambient looping sounds."
     bbox = '-8 -8 -8 8 8 8 1'
     noise: =
        {Txt = "&" Hint = "sound (.wav file) to play."
       }
     attenuation: =
        {Txt = "&" Hint = "attenuation factor"
       }
     channel: =
        {Txt = "&" Hint = "channel on which to play sound"
      Typ="C"
      Items="0) auto" $0D "1) weapon" $0D "2) voice (default)" $0D "3) item" $0D "4) body" $0D "8) don't use PHS"
      values="0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "8"
       }
     maxdelay: =
        {Txt = "&" Hint = "maximum delay between sounds (default 10)."
       }
     mindelay: =
        {Txt = "&" Hint = "minimum delay between sounds (default 3)."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="RELIABLE"
        Hint="should only be set for crucial voice-overs or sounds"}
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not respond to players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="trigger will respond to projectiles (rockets, grenades, mines)"}
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     volume: =
        {Txt = "&" Hint = "loudness 0-4 (1 default full volume)."
       }
     0: =
        {Txt = "&" Hint = "?? normal (default)"
      Typ="C"
      Items="1) normal fighting sounds" $0D "2) idle monster sounds" $0D "3) ambient sounds"
      values="1" $0D "2" $0D "3"
       }
     timeofs: =
        {Txt = "&" Hint = "?? start time offset of sound in milli-seconds (default 0, no timeofs)."
       }
     pitch: =
        {Txt = "&" Hint = "?? pitch of the sound (default 1, normal pitch)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     fadetime: =
        {Txt = "&" Hint = "fade the sound over a time period in seconds (default 0, no fade)."
       }
    }
    trigger_relay:form =
    {
     Help = "This fixed size trigger cannot be touched, it can only be activated by other triggers and act as an intermediary to trigger other entities."
     bbox = '-8 -8 -8 8 8 8 1'
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger."
       }
     targetname: =
        {Txt = "&" Hint = "the activating trigger points to this."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when triggered. This can be in a different script file as well by using the '::' notation."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when the trigger is activated. Trigger also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default: infinite)."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
    }
    trigger_secret:form =
    {
     Help = "Variable size secret counter trigger. Automaticall" $0D "  sets and increments the script variables level.total_secret" $0D "  and level.found_secrets.  Triggers once, then removes itself" $0D "  Make one for each secret in your map."
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOTOUCH"
        Hint="this makes the trigger non-solid when "$22"health"$22" is set"}
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not respond to players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="trigger will respond to projectiles (rockets, grenades, mines)"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when triggered. This can be in a different script file as well by using the '::' notation.  (defaults to "$22"global/universal_script.scr::secret"$22")."
       }
     this: =
        {Txt = "&" Hint = "?? trigger must be killed instead of touched to be activated (this also makes trigger solid)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when the trigger is activated. Trigger also makes a clicking sound."
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_speaker:form =
    {
     Help = "Variable size trigger. This will call the script thread when touched or killed. Can also trigger its targets."
     bbox = '-8 -8 -8 8 8 8 1'
     attenuation: =
        {Txt = "&" Hint = "attenuation factor (0 becomes 1 for non-ambients, 2 for ambients)."
       }
     channel: =
        {Txt = "&" Hint = "channel on which to play sound"
      Typ="C"
      Items="0) auto" $0D "1) weapon" $0D "2) voice (default)" $0D "3) item" $0D "4) body" $0D "8) don't use PHS"
      values="0" $0D "1" $0D "2" $0D "3" $0D "4" $0D "8"
       }
     delay: =
        {Txt = "&" Hint = "delay between triggering and action."
       }
     fadetime: =
        {Txt = "&" Hint = "fade the sound over a time period in seconds (default 0, no fade)."
       }
     mindelay: =
        {Txt = "&" Hint = "no hint yet1"
       }
     noise: =
        {Txt = "&" Hint = "sound (.wav file) to play."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="AMBIENT_ON"
        Hint="ambient sounds start on and toggle on/off each time the speaker is triggered"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="RELIABLE"
        Hint="should only be set for crucial voice-overs or sounds"}
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not respond to players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="trigger will respond to projectiles (rockets, grenades, mines)"}
     spawnflags: = 
       {Txt="&"
        Typ="X32"
        Cap="AMBIENT_OFF"
        Hint="ambient sounds start off and toggle on/off each time the speaker is triggered (default)"}
     spawnflags: = 
       {Txt="&"
        Typ="X128"
        Cap="TOGGLE"
        Hint="ambient sounds toggle on/off each time the speaker is triggere"}
     speed: =
        {Txt = "&" Hint = "speed of movement"
       }
     targetname: =
        {Txt = "&" Hint = "name used by trigger or script to activate this."
       }
     volume: =
        {Txt = "&" Hint = "loudness 0-4 (1 default full volume, ambient sounds do not respond to volume)."
       }
     0: =
        {Txt = "&" Hint = "?? default (normal or ambient)"
      Typ="C"
      Items="1) normal fighting sounds" $0D "2) idle monster sounds" $0D "3) ambient sounds"
      values="1" $0D "2" $0D "3"
       }
     timeofs: =
        {Txt = "&" Hint = "?? start time offset of sound in milli-seconds (default 0, no timeofs)."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when triggered. This can be in a different script file as well by using the '::' notation."
       }
     pitch: =
        {Txt = "&" Hint = "?? pitch of the sound (default 1, normal pitch)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
    }
    trigger_thread:form =
    {
     Help = "Variable size trigger. This will call the scrip" $0D "  thread when touched or killed. Can also trigger it" $0D "  targets."
     thread: =
        {Txt = "&" Hint = "name of thread to call. This can be in a different script file as well by using the '::' notation."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="trigger does not respond to players"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     spawnflags: = 
       {Txt="&"
        Typ="X16"
        Cap="PROJECTILES"
        Hint="trigger will respond to projectiles (rockets, grenades, etc)"}
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger when activated."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is activated. Trigger also makes a clicking sound."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default 1)."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to more than 1."
       }
     this: =
        {Txt = "&" Hint = "?? trigger must be killed instead of touched to be activated (this also makes trigger solid)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being activated before firing its targets (default 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_use:form =
    {
     Help = "Variable size trigger that fires its targets when simultanously touched and 'used' by a player."
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen every time the trigger is used. Trigger also makes a clicking sound."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="VISIBLE"
        Hint="trigger brush will be both visible and solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X4"
        Cap="NOT_PLAYERS"
        Hint="doesn't respond to player"}
     spawnflags: = 
       {Txt="&"
        Typ="X8"
        Cap="MONSTERS"
        Hint="trigger will respond to monsters"}
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger when used."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when used. This can be in a different script file as well by using the '::' notation."
       }
     wait: =
        {Txt = "&" Hint = "amount of time before trigger, once activated, responds to activation again (.2 default). This is useful only if "$22"cnt"$22" is set to a value other than 1."
       }
     cnt: =
        {Txt = "&" Hint = "?? how many times trigger can be activated before removing itself (default: infinite)."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity if VISIBLE is set (default 1.0)."
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being used before firing its targets (default 0)."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    trigger_useonce:form =
    {
     Help = "Variable size trigger that fires its targets when simultanously touched and 'used' by a player. Triggers once, then removes itself."
     delay: =
        {Txt = "&" Hint = "amount of time trigger waits after being used before firing its targets (default 0)."
       }
     target: =
        {Txt = "&" Hint = "this points to the entities to trigger when used."
       }
     thread: =
        {Txt = "&" Hint = "name of thread to call when used. This can be in a different script file as well by using the '::' notation."
       }
     killtarget: =
        {Txt = "&" Hint = "any entities this points to will be removed when the trigger is fired."
       }
     message: =
        {Txt = "&" Hint = "text string to print on the screen when the trigger is used. Trigger also makes a clicking sound."
       }
     alpha: =
        {Txt = "&" Hint = "sets the translucency of the entity if VISIBLE is set (default 1.0)."
       }
     key: =
        {Txt = "&" Hint = "item needed to activate this (default nothing). This can be any Inventory_* type entity. Use the last part of the entity name (after "$22"Inventory_"$22"). The only exceptions are:"
       }
     ChemBioSuit: =
        {Txt = "&" Hint = "?? use chemsuit instead"
       }
     cookies: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     genericpulsepart: =
        {Txt = "&" Hint = "?? works but doesn't generate an icon"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_HCBoat:form =
    {
     Help = "Hardcorps Boat"
     bbox = '-170.08 -64.55 -0.03  141.85 64.85 55.26 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_Sub:form =
    {
     Help = "Sub"
     bbox = '-64.24 -53.49 0.00  114.17 54.05 79.61 1'
    }
    vehicles_atv:form =
    {
     Help = "ATV"
     bbox = '-48.02 -20.57 0.00  43.14 21.63 59.45 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_atv_backtire:form =
    {
     Help = "ATV Tire"
     bbox = '-14.31 -5.87 -14.50  14.32 5.87 14.22 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_atv_fronttire:form =
    {
     Help = "ATV Tire"
     bbox = '-14.31 -5.87 -14.50  14.32 5.87 14.22 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_bulldozer:form =
    {
     Help = "Bulldozer"
     bbox = '-112.93 -71.14 0.00  88.90 71.96 130.55 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_car:form =
    {
     Help = "Street Cars - Five skins"
     bbox = '-120.31 -50.64 0.00  118.61 62.14 80.75 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "car_base" $0D "car_base2" $0D "car_base3" $0D "car_base4" $0D "car_base5"
       values = "car_base" $0D "car_base2" $0D "car_base3" $0D "car_base4" $0D "car_base5"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_crane:form =
    {
     Help = "Crane"
     bbox = '-189.53 -132.89 0.00  149.11 72.17 454.45 1'
    }
    vehicles_forklift:form =
    {
     Help = "Forklift"
     bbox = '-72.73 -25.56 0.00  94.41 26.11 117.88 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_humv_backtire:form =
    {
     Help = "HUMV Tire"
     bbox = '-21.60 -11.04 -21.52  21.53 11.24 21.61 1'
    }
    vehicles_humv_fronttire:form =
    {
     Help = "HUMV Tire"
     bbox = '-21.60 -11.04 -21.52  21.53 11.24 21.61 1'
    }
    vehicles_humv_tire:form =
    {
     Help = "HUMV Tire"
     bbox = '-21.60 -11.04 -0.02  21.53 11.24 43.11 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_humvlowpoly:form =
    {
     Help = "No help yet"
     bbox = '-107.88 -65.41 -0.55  113.86 64.44 86.88 1'
    }
    vehicles_lamprey:form =
    {
     Help = "Lamprey Helicopter"
     bbox = '-367.44 -83.93 -0.01  252.38 86.96 205.32 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_lamprey_rotors:form =
    {
     Help = "Lamprey Rotors"
     bbox = '-318.03 -319.58 -0.03  319.96 318.41 28.78 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "lamprey_hcbase" $0D "lamprey_sinbase"
       values = "lamprey_hcbase" $0D "lamprey_sinbase"}
    }
    vehicles_lamprey_sintek:form =
    {
     Help = "Lamprey Sintek Helicopter"
     bbox = '-367.44 -83.93 -0.01  252.38 86.96 205.32 1'
    }
    vehicles_minitruck:form =
    {
     Help = "Mini Truck - Street scenes - Low Poly"
     bbox = '-91.07 -56.69 0.00  101.74 55.74 92.63 1'
    }
    vehicles_truck:form =
    {
     Help = "Troop Transport Truck"
     bbox = '-215.89 -82.56 0.00  187.86 86.34 160.60 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    vehicles_van:form =
    {
     Help = "Cool Grue Van"
     bbox = '-120.18 -61.14 0.00  129.92 57.75 114.65 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    waypoint:form =
    {
     Help = "Used as a positioning device for objects. Refer t" $0D "  this position marker by its targetname when moving object" $0D "  with script commands."
     bbox = '-8 -8 -8 8 8 8 1'
     targetname: =
        {Txt = "&" Hint = "name used by script to refer to this location."
       }
    }
    weapon_assaultrifle:form =
    {
     Help = "Assault Rifle - World Model"
     bbox = '-6.41 -2.36 -8.04  19.58 2.35 6.71 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_heligun:form =
    {
     Help = "No help yet"
     bbox = '-42.27 -3.71 -40.42  66.64 15.84 4.99 1'
    }
    weapon_highvelocitygun:form =
    {
     Help = "HV Chain Gun - World Model"
     bbox = '-16.52 -4.32 -5.23  29.87 30.93 10.73 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_magnum:form =
    {
     Help = "No help yet"
     bbox = '-5.67 -1.59 -5.54  15.60 1.61 4.49 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_pulserifle:form =
    {
     Help = "Pulse Rifle - World Model"
     bbox = '-20.44 -4.71 -1.71  29.07 5.45 14.31 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_quantumd:form =
    {
     Help = "Quantum Destabilizer - World Model"
     bbox = '-11.73 -9.77 -11.81  54.21 9.71 8.28 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_rocketlauncher:form =
    {
     Help = "Rocket Launcher - World Model"
     bbox = '-16.17 -6.25 -6.65  37.39 5.93 13.10 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_shotgun:form =
    {
     Help = "No help yet"
     bbox = '-7.90 -1.67 -6.75  30.08 1.94 5.05 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_sledgehammer:form =
    {
     Help = "Sledge Hammer"
     bbox = '-8.07 -5.01 -11.19  33.06 4.61 4.09 1'
    }
    weapon_sniperrifle:form =
    {
     Help = "Sniper Rifle - World Model"
     bbox = '-15.37 -1.01 -6.61  53.13 4.52 17.30 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     gravityaxis: =
        {Txt = "&" Hint = "no hint yet1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_speargun:form =
    {
     Help = "Speargun"
     bbox = '-7.08 -4.00 -6.16  45.35 5.01 9.01 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    weapon_stun:form =
    {
     Help = "Stun gun - World Model"
     bbox = '-22.14 -15.60 -29.30  82.46 46.26 4.09 1'
    }
    weapon_wrench:form =
    {
     Help = "No help yet"
     bbox = '-7.13 -3.32 -8.37  23.33 -1.48 1.79 1'
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_FireExtinguisher:form =
    {
     Help = "Fire Extinguisher"
     bbox = '-4.77 -5.17 0.00  4.95 5.12 34.02 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_acduct:form =
    {
     Help = "Air Conditioning Duct"
     bbox = '-6.50 -6.50 0.00  6.50 6.50 28.76 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_acvent:form =
    {
     Help = "Air Conditioner Vent"
     bbox = '-15.14 -15.14 0.00  15.14 29.55 32.24 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_barrel:form =
    {
     Help = "Large Metal Trash Container"
     bbox = '-20.16 -19.80 0.00  19.70 20.07 45.83 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_blockade:form =
    {
     Help = "Blockade Saw-Horse"
     bbox = '-17.16 -43.97 0.00  17.16 43.96 44.05 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_boxfan:form =
    {
     Help = "Box Fan"
     bbox = '-0.00 -15.00 0.00  12.50 15.00 30.06 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_bullhorn:form =
    {
     Help = "Bull Horn"
     bbox = '-8.71 -21.56 0.00  12.81 21.54 13.18 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_firebarrel:form =
    {
     Help = "Large Metal Trash Container with fire spewing from it!!!"
     bbox = '-20.16 -19.80 0.00  19.70 20.07 45.83 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     killtarget: =
        {Txt = "&" Hint = "targeted object disappears when fires."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_firelog:form =
    {
     Help = "Logs for the Fire"
     bbox = '-16.11 -30.42 -0.13  10.32 26.15 28.38 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_hydrant:form =
    {
     Help = "Fire Hydrant"
     bbox = '-4.78 -10.47 0.00  8.64 10.47 27.80 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "hydrant" $0D "hydrant2"
       values = "hydrant" $0D "hydrant2"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_mailbox:form =
    {
     Help = "US Mailbox"
     bbox = '-14.48 -19.19 -0.71  18.60 16.90 55.67 1'
    }
    world_meter:form =
    {
     Help = "Parking Meter"
     bbox = '-2.63 -3.55 0.00  2.63 3.55 53.86 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_newsbox:form =
    {
     Help = "Newspaper Dispenser"
     bbox = '0.00 -15.29 -0.00  30.67 15.31 61.63 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_o2tank:form =
    {
     Help = "O2 Tank"
     bbox = '-3.58 -4.10 0.00  3.58 4.17 35.17 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_portolet:form =
    {
     Help = "No help yet"
     bbox = '-22.80 -23.89 0.00  33.22 23.89 106.16 1'
    }
    world_propane:form =
    {
     Help = "Propane Tank"
     bbox = '-3.84 -4.39 0.00  3.83 4.47 45.32 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     damage: =
        {Txt = "&" Hint = "no hint yet1"
       }
     health: =
        {Txt = "&" Hint = "how much damage needed to kill."
       }
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_safelite:form =
    {
     Help = "Emergency Light - Red"
     bbox = '-5.52 -6.38 -5.52  14.58 6.38 14.58 1'
     _minlight: =
        {Txt = "&" Hint = "inherent glow."
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_shipcrate:form =
    {
     Help = "No help yet"
     bbox = '-23.96 -32.16 0.00  23.79 32.16 39.54 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_sign_large:form =
    {
     Help = "Vanity Billboard"
     bbox = '0.00 -151.22 0.00  48.71 151.42 220.01 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_sign_ritual:form =
    {
     Help = "Ritual Billboard"
     bbox = '-15.00 -97.50 -0.00  15.00 97.50 195.00 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_sign_small:form =
    {
     Help = "Your Ad Here Billboard"
     bbox = '-15.00 -120.00 0.00  15.00 120.00 179.72 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_sign_street:form =
    {
     Help = "Street Sign-Lamar and McKinney"
     bbox = '-6.00 -41.09 0.00  41.09 6.00 126.78 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_sink:form =
    {
     Help = "Bathroom Sink"
     bbox = '-0.09 -20.93 -0.13  27.47 21.49 27.36 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_streetlight:form =
    {
     Help = "Streetlight"
     bbox = '-8.42 -8.82 -0.16  104.87 8.83 243.90 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     killtarget: =
        {Txt = "&" Hint = "targeted object disappears when fires."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_toilet:form =
    {
     Help = "Toilet"
     bbox = '-2.51 -20.71 -0.13  48.65 20.54 54.32 1'
     skin: = {Txt = "&" Typ = "C" Hint = "skin displayed by model in game"
       items = "toilet_base" $0D "toiletclean_base"
       values = "toilet_base" $0D "toiletclean_base"}
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     target: =
        {Txt = "&" Hint = "object with matching targetname is triggered."
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_torch:form =
    {
     Help = "Torch for Fire"
     bbox = '-3.16 -3.15 0.00  2.79 3.09 15.70 1'
    }
    world_trashcan1:form =
    {
     Help = "Trash Can-Round and Metal"
     bbox = '-11.41 -12.00 0.00  11.41 12.00 35.40 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_trashcan2:form =
    {
     Help = "Trash Can-Square and Plastic"
     bbox = '-8.12 -12.39 -0.00  8.12 12.39 46.48 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_trashcan3:form =
    {
     Help = "Desk Trash Can-Small and Plastic"
     bbox = '-6.17 -8.99 -0.00  6.20 8.99 18.00 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_urinal:form =
    {
     Help = "Urinal"
     bbox = '-0.46 -14.32 0.00  17.76 14.48 84.58 1'
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_usflag:form =
    {
     Help = "US Flag-Animated"
     bbox = '-9.86 -3.00 0.00  9.86 85.82 225.00 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    world_wirespool:form =
    {
     Help = "Wirespool, found at construction sites"
     bbox = '-10.34 -13.50 -0.00  10.38 13.50 25.68 1'
    }
    world_wreckingball:form =
    {
     Help = "Wrecking Ball."
     bbox = '-16.00 -14.51 0.00  16.00 14.44 30.51 1'
     scale: =
        {Txt = "&" Hint = "alter size, default=1"
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="NOT_SOLID"
        Hint="object is not solid"}
     spawnflags: = 
       {Txt="&"
        Typ="X2"
        Cap="NOT_DAMAGABLE"
        Hint="object cannot be destroyed"}
     targetname: =
        {Txt = "&" Hint = "is triggered if entity with matching target fires, or deleted if entity with matching killtarget fires."
       }
     model: = {Txt="model" Typ="ESR" Hint="Read-only, but needed by the game engine"}
    }
    worldspawn:form =
    {
     Help = "Only used for the world: all the world brushes ar" $0D "  automatically part of this entity. This is automaticall" $0D "  created in a new map and Quark does not let you inser" $0D "  it since only one worldspawn entity per level is allowed. Select any world brush before setting the keys for this."
     surfacefile: =
        {Txt = "&" Hint = "no hint yet1"
       }
     angle: =
        {Txt = "&" Hint = "the direction it starts out pointing" $0D "  use angles Y Z X for a 3D angle"
       }
     angles: =
        {Txt = "&" Hint = "a triple of numbers, rotates 3d orientation of entit" $0D " around axes in order (Y, Z, X)"
       }
     items: =
        {Txt = "&" Hint = "no hint yet1"
       }
     key: =
        {Txt = "&" Hint = "no hint yet1"
       }
     message: =
        {Txt = "&" Hint = "text to print on game console at user logon. This will be the map's title name used in the savegame and loadgame menus (default is the map's filename)."
       }
     noise: =
        {Txt = "&" Hint = "no hint yet1"
       }
     percentage: =
        {Txt = "&" Hint = "no hint yet1"
       }
     sky: =
        {Txt = "&" Hint = "environment map name in the base/env folder. This must be set to the first letters common to the names of all 6 TGA files which make up the environment map (default sky_)."
       }
     soundtrack: =
        {Txt = "&" Hint = "name of .mus music configuration file to use for map. Music files are in the base/music folder and the file extension must be omitted (default none)."
       }
     spawnflags: = 
       {Txt="&"
        Typ="X1"
        Cap="CINEMATIC"
        Hint="sets the map as a cinematic level"}
     wateralpha: =
        {Txt = "&" Hint = "specifies the translucency of the player's view blend while in water. Values are from 0 to 1 - 0 is 100% clear, 1 is 100% opaque (default 0.1)."
       }
     watercolor: =
        {Txt = "&" Hint = "specifies the player's view blend color while in water (default 0 0 1)."
       }
     lavacolor: =
        {Txt = "&" Hint = "?? specifies the player's view blend color while in lava (default 1.0 0.3 0)."
       }
     script: =
        {Txt = "&" Hint = "?? name of script file to use for this map. If set, the file name and extension must be specified. If not set, the map will try to load a script by the same name as the map filename with an .scr extension by default."
       }
     gravity: =
        {Txt = "&" Hint = "?? gravity of the level. Lower values produce lower gravity (default 800 - normal)."
       }
     lightcolor: =
        {Txt = "&" Hint = "?? specifies the player's view blend color while in slime (default 1 1 1)."
       }
     this: =
        {Txt = "&" Hint = "?? make sure at least one of the axes of rotation is set in "$22"skyaxis"$22" otherwise the sky will produce a Hall-Of-Mirrors effect (default 0)."
       }
     lavaalpha: =
        {Txt = "&" Hint = "?? specifies the translucency of the player's view blend while in lava. Values are from 0 to 1 - 0 is 100% clear, 1 is 100% opaque (default 0.6)."
       }
     skyaxis: =
        {Txt = "&" Hint = "?? rotation axis toggle for rotating sky. Set one or several of the 3 possible axes of rotation - X Y Z. For example, if you want the sky to rotate along the X and Z axes, set this to "$22"1 0 1"$22" (default 0 0 0)."
       }
     cdtrack: =
        {Txt = "&" Hint = "?? music CD track number. The Sin CD has no audio tracks but if a music CD is present in your drive while you play the map, the track number will be played (default 0)."
       }
     lightalpha: =
        {Txt = "&" Hint = "?? specifies the translucency of the player's view blend while in slime. Values are from 0 to 1 - 0 is 100% clear, 1 is 100% opaque (default 0.5)."
       }
     skipthread: =
        {Txt = "&" Hint = "?? thread that is called to skip this level if it's defined as a cinematic level (CINEMATIC spawnflag set or 'cinematic' command in script). When the player hits either the use, jump or fire key during the cinematic, the thread will be called."
       }
    }
  } // ENTFRM



}
