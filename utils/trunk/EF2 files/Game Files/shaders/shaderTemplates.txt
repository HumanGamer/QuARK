//////////////////////////////////////////////////////////////
// Creates an almost blank shader.  One global command
// and one stage with a single map command.
//////////////////////////////////////////////////////////////
Blank
{
	cull none
	{
		map path/image.tga
	}
}


//////////////////////////////////////////////////////////////
// Creates a decal effect, for wall decals.
//////////////////////////////////////////////////////////////
Decal
{
	qer_editorimage path/image.tga
	surfaceparm trans    
	{
		map path/image.tga
		blendFunc blend                                 		//standard alpha blend 
		alphaFunc GT0                                   		// use alpha values greater than 0
		depthWrite                                      		// Z sorting
		rgbGen identity
	}
	{
		map $lightmap							// add lightmap
		blendFunc filter              	                  		// = GL_DST_COLOR GL_ZERO
		depthfunc equal                                 		// only render effects where texture is opaque
		rgbGen identity
	}
}



/////////////////////////////////////////////////////////////
// Creates an environment mapped, metal sheen.  First stage 
// is the environment map.  Second stage is alpha with white 
// for shiny spots.  Could be used for mirrors.
/////////////////////////////////////////////////////////////
Metal_Sheen
{
	qer_editorimage path/image.tga
	{
    		map path/image.tga                        		     //add environment map
		tcGen environment
		rgbGen identity   
	}
	{
		map path/image.tga				             //add base texture
    		blendFunc GL_ONE_MINUS_SRC_ALPHA GL_SRC_ALPHA                //specific blendfunc for envmap
		rgbGen identity                                              //needs alpha w/ white where shine FX shows 
	}
	{
		map $lightmap                                                //add lighting
		rgbgen identity
		blendFunc GL_DST_COLOR GL_ZERO
	}
} 


/////////////////////////////////////////////////////////////
// Basic alpha shader for brush geometry.
/////////////////////////////////////////////////////////////
Brush_with_alpha
{
	qer_editorimage textures/details/pladder.tga
	surfaceparm trans
	cull none
 
   	{
      	  	map textures/details/pladder.tga
     	 	blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
 	  	alphaFunc GE128
	 	depthWrite

	}
	{
		map $lightmap
		blendFunc GL_DST_COLOR GL_ZERO
	}
}


/////////////////////////////////////////////////////////////
// First pass is just the plain sign.  Each subsequent pass 
// adds a portion of the sign lit up.  Timed so that the 
// parts light up in sequence.
/////////////////////////////////////////////////////////////
Neon_sign
{
	qer_editorimage textures/gen_amodel/signs/base.tga
	cull none
	{
		map textures/gen_amodel/signs/base.tga
		blendfunc add
	}
	{
		map textures/gen_amodel/signs/titz.tga
		blendfunc add
		rgbGen wave square 0 1 .25 .4 
	}
	{
		map textures/gen_amodel/signs/vodka.tga
		blendfunc add
		rgbGen wave square 0 1 0 .4 
	}
	{
		map textures/gen_amodel/signs/bottle.tga
		blendfunc add
		rgbGen wave square 0 1 .75 .4 
	}
}



//////////////////////////////////////////////////////////////
// Alpha shader with deform vertices used to make the object
// wave, like a flag.  Also good for transparent water, but
// you may need to increase the tess size.
//////////////////////////////////////////////////////////////
Deform_vertices_with_alpha
{
	qer_editorimage textures/misc/mask_rug_pdefrug2.tga
	cull none
        tessSize 64
        deformVertexes wave 194 sin 0 3 0 .4
        deformVertexes normal .5 .1
	{
		map textures/misc/mask_rug_pdefrug2.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		alphaFunc GT0
	  	depthWrite
	}
	{
		map $lightmap
		blendFunc GL_DST_COLOR GL_ZERO
	}
}


//////////////////////////////////////////////////////////////
// Simple flashing light (like a train signal)
//////////////////////////////////////////////////////////////
Blinking_light
{
	surfaceparm trans
	cull none
   	{
      	  	map models/obj/obj_train_signal/train_signala.tga
	}
	{
		map models/obj/obj_train_signal/lighta.tga
		blendfunc add
		rgbGen wave square 0 1 0 .4 
	}
	{
		map $lightmap
		blendFunc GL_DST_COLOR GL_ZERO
	}
}


//////////////////////////////////////////////////////////////
// For use on brushes that emit light, like
// a flourescent light.
//////////////////////////////////////////////////////////////
Brush_with_light
{
	qer_editorimage textures/lights/met_plight1.tga
	surfaceparm nomarks
	{
		map $lightmap
		rgbGen identity
	}
	{
		map textures/lights/met_plight1.tga
		blendFunc GL_DST_COLOR GL_ZERO
		rgbGen identity
	}

	
	{
		map textures/lights/met_plight1b.tga
		blendfunc GL_ONE GL_ONE
		rgbGen wave sin .8 .2 0 1
	}	
}

