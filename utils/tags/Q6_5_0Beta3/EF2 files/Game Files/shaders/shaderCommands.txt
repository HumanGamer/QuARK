Enumerations
{
	cull	
	{
		front	"front culling"
		back	"back culling"
		none	"no culling"
		disable	"no culling"
	}

	farBox	
	{	
		half
		full
	}

	if_conditions
	{
		0	"Never render"
		1	"Always render.  This is the default"
		mtex	"Render if in multitexture mode."
		no_mtex	"Render if not in multitexturing mode."
	}

	sort	
	{
		portal	
		sky	
		opaque	
		decal	
		banner	
		nearest	
		additive	
		seeThrough	
		underwater
	}

	wave
	{
		sin	
		square	
		sawtooth	
		triangle	
		inversesawtooth
	}

	spriteGen
	{
		parallel	
		parallel_oriented	
		parallel_upright	
		oriented
	}

	surface
	{
		alphaShadow
		areaportal
		cameraclip
		detail
		fog
		ladder
		lava
		monsterclip
		nodamage
		nodraw
		nodrop
		noimpact
		nolightmap
		nomarks
		nosteps
		nonsolid
		origin
		playerclip
		ricochet
		sky
		slick
		slime
		structural
		trans
		water
		dirt
		glass
		metal
		stone
		wood
	}

	alphaFunc
	{
		GT0
		LT128
		GE128
	}

	srcBlend
	{
		GL_ONE			"Always 1.0.  Source pixels go unchanged."
		GL_ZERO			"Always 0.0.  Source pixels become black."
		GL_DST_COLOR		"Source pixels tinted by destination color."
		GL_ONE_MINUS_DST_COLOR	"Source pixels tinted by 1-destination color."
		GL_SRC_ALPHA		"Source pixels depend on source alpha channel."
		GL_ONE_MINUS_SRC_ALPHA	"Source pixels depend on 1-source alpha channel."
	}	

	destBlend
	{
		GL_ONE			"Always 1.0.  Destination pixels go unchanged."
		GL_ZERO			"Always 0.0.  Destination pixels become black."
		GL_SRC_COLOR		"Destination pixels are color of source pixels."
		GL_ONE_MINUS_SRC_COLOR	"Destination pixels are color of 1-source pixels."
		GL_SRC_ALPHA		"Destination pixels are color of source alpha."
		GL_ONE_MINUS_SRC_ALPHA	"Destination pixels are 1-source alpha channel."
	}

	depthFunc
	{	
		lequal			"Only write pixels <= current depth (closer)"
		equal			"Only write pixels = current depth."
	}
}



Global
{
	cull
	{
		enum	cull		"help text"
		help	"help text"
	}

	deformVertexes
	{
		autoSprite
		{
			help		"help text"
		}
		
		autoSprite2
		{
			help		"help text"
		}
		
		projectionShadow
		{
			help		"help text"
		}
		
		text0
		{
			help		"help text"	
		}
		
		text1
		{
			help		"help text"
		}

		text2
		{
			help		"help text"
		}

		text3
		{
			help		"help text"
		}

		text4
		{
			help		"help text"
		}

		text5
		{
			help		"help text"
		}

		text6
		{
			help		"help text"
		}

		text7
		{
			help		"help text"
		}

		bulge
		{
	 		float	width	"help text"
			float	height	"help text"
			float	speed	"help text"
			help	 	"help text"
		}
		
		move	
		{
			xyz	vector		"Direction to move"
			enum	wave		"Type of wave form"
			float	base		"Base (start) of wave"
			float	amplitude	"Amplitude of the wave"
			float	phase		"Phase of the wave"	0.0 1.0 0.5 0.05
			float	frequency	"Frequncy of the wave in cycles per second."
			help 			"Deforms the vertices in the
						 specified direction using the
						 specified waveform."
		}
		
		wave
		{
			float	div		"help text"
			enum	wave		"help text"
			float	base		"Base (start) of wave"
			float	amplitude	"Amplitude of the wave"
			float	phase		"Phase of the wave"	0.0 1.0 0.5 0.05
			float	frequency	"Frequncy of the wave in cycles per second."
			help			"Deforms the vertices using the specified
						 waveform."
		}
		
		normal
		{
			float amplitude	"help text"
			float frequency "help text"
			help 		"help text"
		}
		
		help	"help text"
	}

	endif
	{
		help	"Terminates active if statement, resetting subsequent stages to always render."
	}
		
	entityMergable
	{
		help	"help text"
	}

	
	fogonly
	{
		help	"help text"
	}


	fogparms
	{
		rgb 	color		"help text"
		float 	gradient	"help text"
		help 	"help text" 
	}

	if
	{
		string	condition	"Condition under which subsequent stages render."
		help	"Use this command to have one rendering under a machine supporting
			 multitexturing and a different rendering on a machine that doesn't."
	}
	
	light			
	{
		float	flaring		"help text"
	}

	nomipmaps
	{
		help	"help text"
	}

	nopicmip
	{
		help 	"help text"		
	}

	force32bit
	{
		help	"help text"
	}

	polygonOffset
	{
		help	"help text"
	}

	portal
	{
		help	"help text"
	}

	portalsky
	{
		help 	"help text"
	}

	skyParms
	{	
		enum	farBox		"help text"
		int	cloudHeight	"help text"
		string	nearBox		"help text"
	}

	sort
	{
		enum	sort		"help text"
	}

	spriteGen
	{
		enum	spriteGen
	}

	spriteScale
	{
		float	scale		"help text"
		help	"help text"
	}

	subdivisions
	{
		float	rate		"help text"
		help	"help text"
	}

	surfaceAngle
	{
		float	angle		"help text"
		help	"help text"
	}

	surfaceColor
	{
		rgb	color		"help text"
		help	"help text"
	}

	surfaceDensity
	{
		int	density		"help text"
		help	"help text"
	}

	surfaceLight
	{
		float	flaring		"help text"
		help 	"help text"
	}

	surfaceparm
	{
		enum	surface		"help text"
		help	"help text"
	}

	tessSize
	{
		float	size		"help text"
		help	"help text"
	}

	q3map_backshader
	{
		string	shaderName	"help text"
		help	"help text"
	}

	q3map_flare
	{
		string	shaderName	"help text"
		help 	"help text"
	}

	q3map_forcesunlight
	{
		help 	"help text"
	}

	q3map_globaltexture
	{
		help	"help text"
	}

	q3map_lightimage
	{
		file	textureFile	"help text" $TEXTUREDIR
		help	"help text"
	}

	q3map_lightsubdivide
	{
		int	units		"help text"
		help	"help text"
	}

	q3map_notjunc
	{
		help	"Tells the compiler not to draw T Junction fuck ups."
	}

	q3map_novertexshadows
	{
		help	"help text"
	}

	q3map_sun
	{
		rgb	color		"help text"
		int	intensity	"help text"
		int	degrees		"help text"
		int	elevation	"help text"
		help	"help text"
	}

	q3map_surfaceLight
	{
		float	light		"help text"
		help	"help text"
	}

	qer_editorimage
	{
		file	texture		"help text" $TEXTUREDIR true
		help	"help text"
	}

	qer_nocarve		
	{
		help	"help text"
	}

	qer_trans
	{
		float	percentage	"help text"
		help	"help text"
	}
}



Stage
{
	alphaFunc
	{
		enum	alphaFunc	"help text"
		help	"help text"
	}

	alphaGen
	{
		const
		{
			float	alpha	"Normalized alpha" 0.0 1.0 0.5 0.05
			help	"Creates a constant alpha value.  This has two advantages.
                                 is cheap to store (24-bit textures rather than 32-bit), improve
                                 texture quality in some cases (not using bits for alpha) and
                                 easier to test transparency values."
		}

		constant
		{
			float	alpha	"Normalized alpha" 0.0 1.0 0.5 0.05
			help	"Creates a constant alpha value.  This has two advantages.  It
                                 is cheap to store (24-bit textures rather than 32-bit), improve
                                 texture quality in some cases (not using bits for alpha) and
                                 easier to test transparency values."
		}
		
		dot
		{
			|float	min	"Minimum alpha translucency" 0.0 1.0 0.5 0.01
			|float	max	"Maxiumum alpha translucency" 0.0 1.0 0.5 0.01
			help	"Alpha is generated by dot product of view angle to surface angle.  The
				 minimum and maximum values control how transparent the resulting alpha
				 will get.  A value of 0.0 means the the alpha becomes more opaque the
                                 smaller the viewing angle.  A value of 1.0 means the alpha is transparent
                                 when looking straight down on it.  So setting minimum to 0.5 will ensure
                                 the alpha is always somewhat transparent and setting the maximum to 0.75
                                 will ensure the alpha is never completely transparent."
		}

		entity
		{
			help 	"Alpha taken from entity's modulate field.  No I don't know what it means
                                 either."
		}

		fromClient
		{
			help	"Same as vertex.  Takes color from vertex."
		}

		fromEntity
		{
			help	"Same as entity.  Takes color from entity's modulate field."
		}

		global
		{
			help	"Alpha comes from global alpha setting.  ?"
		}

		identity
		{
			help	"Alpha is set to 1.0."
		}

		lightingSpecular
		{
			|xyz	Direction	"Specular light direction"
			help	"Creates specular highlights in the alpha channel along the
				 specified direction.  Typically used with $whiteimage"
		}

		oneMinusDot
		{
			|float	vector1		"WHo knows"
			|float	vector2		"who knows 2"
			help	"Inverse of dot.  Objects with this shader will become more
                                 opaque the more perpendicular the viewing angle is."
		}

		oneMinusViewDot
		{
			float	position	"Who knows"
			float	position	"Who knows"
			help 	"Controls opacity based on view angles to the surface."
		}

		oneMinusEntity
		{
			help	"Inverse of entity.  Alpha will be 1 - entity's modulate field."
		}

		oneMinusVertex
		{
			help	"Inverse of vertex.  Alpha will be 1 - vertex alpha."
		}

		skyalpha
		{
			help	"Alpha taken from global sky alpha parameter controlled by map script."
		}

		oneMinusSkyAlpha
		{
			help	"Guess"
		}

		portal
		{
			help	"When a range is speciied, alpha values are generated based on 
				 the distance from the viewer to the portal surface.  To be used
                                 during the last rendering stage."
		}

		vertex
		{
			help	"Alpha taken from the vertex alpha"
		}

		viewDot
		{
			float	position	"Who knows"
			float	position	"Who knows"
			help 	"Controls opacity based on view angles to the surface."
		}

		wave
		{
			enum  	 wave   	"A waveform function"
			float	 Base		"Base (start) of wave"
			float	 Amplitude	"Amplitude of the wave"
			float	 Phase		"Phase of the wave"	0.0 1.0 0.5 0.05
			float	 Frequency	"Frequncy of the wave in cycles per second." 0.0 10.0 1.0 0.01
			help	 "Modifies the alpha using the specified waveform.  Remember
				  that alpha must be between 0.0 and 1.0, so to create such
				  a wave, use a base of 0.5 and amplitude of 0.5."
		}
		
		help	"Modifies the alpha form for a stage.  Can even create alpha for textures
			 that don't have alpha."
	}

	animMap
	{
		float	Frequency	"Repititions per second of the animation" 0.0 10.0 1.0 0.1
		file	textures	"One or more textures" $TEXTUREDIR true
		
		help	"Animation map. The animation repeats at the specified frequency through
			 the specified textures."
	}
	
	blendFunc
	{
		add
		{
			help	"Additive. Shortcut for Source = GL_ONE, Dest = GL_ONE."
		}
		filter
		{
			help	"Draw only on destination pixels. Shortcut for Source = GL_DST_COLOR, Dest = GL_ZERO."
		}
		blend
		{
			help 	"Alpha blending.  Shortcut for Source = GL_SRC_ALPHA, Dest = GL_ONE_MINUS_SRC_ALPHA."
		}
		enum	srcBlend	"Blending for source pixels"
		enum	destBlend	"Blending for destination pixels"
	}

	clampmap
	{
		file	texture		"Clampmap texture" $TEXTUREDIR
		help	"Defines the clamp map texture"
	}

	depthFunc
	{
		enum	depthFunc	"Depth comparison function"
		help	"Controls the depth comparison function.  Default is lequal meaning only render
			 if the pixel is closer or same distance to camera.  But you can set it to equal
			 in order to add a lightmap to masked fence-like textures or mirrors."
	}

	depthWrite
	{
		help	"Enables z-buffer writing during this stage."
	}

	detail
	{
		help	"Set this on stages to skip if r_detailtextures is set to 0."
	}

	map
	{
		$lightmap
		{
			help	"Use the lightmap for this stage."
		}
		$whitemap
		{
			help	"Use the white map for this stage."
		}
		file	Texture		"Texture filename, $lightmap, or $whitemap" $TEXTUREDIR
		help	"Defines the texture for this stage.  Can use $lightmap or $whitemap in place
                         of a texture name."
	}

	nextbundle
	{
		help 	"Defines the next texture in a multi-texture operation.  Must be followed
			 by a map command."
	}

	nomipmaps
	{
		help	"Turns off mip mapping"
	}

	nopicmip
	{
		help	"Turns off pic mips."
	}

	noDepthTest
	{
		help	"Do not do z-buffer compares when rendering this stage."
	}
	
	rgbGen	
	{
		const
		{
			rgb	Color	"Constant color value"
			help	"Generates a constant color value"
		}

		constant
		{
			rgb	Color	"Constant color value"
			help	"Generates a constant color value"
		}

		default
		{
			help	"Default rgb values"
		}

		entity
		{
			help	"Color comes from the entity"
		}

		exactVertex
		{
			help	"Same as vertex color, but calcs by hand rather then using the computer.  Slow."
		}

		fromClient
		{
			help	"Color comes from the vertex.  Use vertex instead."
		}

		fromEntity
		{
			help	"Color comes from the entity."
		}

		global
		{
			help	"Calculates color based on the entire universe.  Typically black."
		}

		identity
		{
			help	"Generates white (1.0, 1.0, 1.0).  Must be used in textures with a lightmap."
		}

		identityLighting
		{
			help	"No one knows"
		}

		lightingDiffuse
		{
			help	"Light with diffuse lighting using vertex normals.  Collect all 4!"
		}

		oneMinusEntity
		{
			help	"Color is 1.0 - entity's modulate field.  You betcha."
		}

		oneMinusVertex
		{
			help	"Color is 1.0 - vertex colors."
		}

		vertex
		{
			help	"Color is only the vertex color."
		}

		wave
		{
			enum 	wave		"Wave function"
			float	Base		"Base (start) of wave"
			float	Amplitude	"Amplitude of the wave"
			float	Phase		"Phase of the wave"	0.0 1.0 0.5 0.05
			float	Frequency	"Frequncy of the wave in cycles per second." 0.0 10.0 1.0 0.01
			help 			"Generates colors from a wave function."
		}

		colorwave
		{
			rgb	Color		"Wave color"
			enum 	wave		"Wave function"
			float	Base		"Base (start) of wave"
			float	Amplitude	"Amplitude of the wave"
			float	Phase		"Phase of the wave"	0.0 1.0 0.5 0.05
			float	Frequency	"Frequncy of the wave in cycles per second." 0.0 10.0 1.0 0.01
			help			"Modulates the specified color by the specified waveform."
		}

		help	"Generates a color for the source color. This can be used instead of the color
			 coming from a texture."
	}

	tcGen
	{
		base
		{
			help	"From original art."
		}

		lightmap
		{
			help	"From lightmap."
		}

		environment
		{
			help	"Environment-map this object."
		}

		vector
		{
			xyz	S-vector	"s = vector * vertex world-coordinate"
			xyz	T-vector	"t = vector * vertex world-coordinate"
			help			"Coordinates determined by vertex coordinate dot product with specified vectors"
		}
		help	"Generates texture coordinates.  Same as texGen"
	}

	texGen
	{
		angle_based_environment
		{
			help	"Environment-map this object based on view angles."
		}

		base
		{
			help	"From original art."
		}

		lightmap
		{
			help	"From lightmap."
		}

		environment
		{
			help	"Environment-map this object."
		}

		vector
		{
			xyz	S-vector	"s = vector * vertex world-coordinate"
			xyz	T-vector	"t = vector * vertex world-coordinate"
			help			"Coordinates determined by vertex coordinate dot product with specified vectors"
		}
		help	"Generates texture coordinates."
	}

	tcMod
	{
		offset
		{
			float	S-offset	"Offset for s-coordinate."
			float	T-offset	"Offset for t-coordinate."
			help			"Transforms texture coordinates by offsets."	
		}
		
		rotate
		{
			float	Degrees		"Degrees rotated per second." -360.0 360.0 0.0 45.0
			help			"Rotates coordinates at designated rotation speed.  Positive is clockwise."
		}

		scale
		{
			float	S-scale		"S coordinate scale factor"
			float	T-scale		"T coordinate scale factor"
			help			"Scales the texture coordinates."
		}

		scroll
		{
			float	Horizontal	"s coordinate speed"
			float 	Vertical	"t coordinate speed"
			help			"Scrolls coordinates at specified speeds.  Speed is measured in
						 textures per second.  Negative S scrolls to the left, while negative
						 t scrolls the texture down."
		}

		stretch
		{
			enum 	wave		"Wave form function"
			float	Base		"Base (start) of wave"
			float	Amplitude	"Amplitude of the wave"
			float	Phase		"Phase of the wave"	0.0 1.0 0.5 0.05
			float	Frequency	"Frequncy of the wave in cycles per second." 0.0 10.0 1.0 0.01
			help			"Stretches the texture coordinates with the specified function."
		}	

		transform
		{
			float	M[0,0]		"Upper-left element of matrix"
			float	M[0,1]		"Upper-rigth element of matrix"
			float	M[1,0]		"Lower-left element of matrix"
			float	M[1,1]		"Lower-right element of matrix"
			float	S-offset	"S offset"
			float	T-offset	"T offset"
			help	"Transforms the texture coordinates by the specified matrix.  Uses
				 the following equations:
					S' = s * m00 + t * m10 + t0
					T' = t * m01 + s * m11 + t1 
				 Intended for use by programmers"
		}

		turb
		{
			float	Base		"Base (start) of wave"
			float	Amplitude	"Amplitude of the wave"
			float	Phase		"Phase of the wave"	0.0 1.0 0.5 0.05
			float	Frequency	"Frequncy of the wave in cycles per second." 0.0 10.0 1.0 0.01
			help			"Applies turbulence to the texture coordinates."
		}

		parallax
		{
			float	S-rate	"S scroll rate"
			float	T-rate	"T scroll rate"
			help	"Scrolls texture coordinates at specified rates based
				 upon player view angles.  Allows side-scrolling like textures."
		}

		macro
		{
			float	S-scale	"S scale factor"
			float	T-scale	"t scale factor"
			help	"Creates world-aligned texture coordinates for macro texturing.  Go figure."
		}
		help	"Modifies the texture coordinates.  Can stretch, rotate, scroll, etc."
	}
} 