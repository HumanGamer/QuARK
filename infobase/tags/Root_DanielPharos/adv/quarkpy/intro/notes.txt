title: Python Notes
author: Tiglari
format: html

There are introductions to Python available at various
levels:
<UL>
<LI>The tutorial etc. that comes with Python: Quite
 usable if you're a reasonably experienced (intermediate?)
 programmer.
<LI> <strong>Programming Python</strong> (OReilly): All the info is
there, but the presentation is not for beginners.
<LI> <strong>Learning Python</strong> (OReilly): Looks like a good
 introduction for newbie programmers.
<LI> <strong> Learn Python in 24 Hours </strong> (SAMS): This one looks like
 it could be used by absolute newbie programmers, since it
 seems to introduce basic programming concepts from scratch.
 HINT HINT: if some reader of this is an absolute newbie
 programmer, their reactions to this book would be useful
 information.
</UL>
<P>

Since Python is interpreted, it's relatively slow, so that things
that need to be fast are coded in Delphi, and made available
to be called as functions in the Python.
<ref>src/quarkx
&nbsp;is a full reference manual for everything that
Delphi makes available to Python.<P>

Since Python is interpreted, its class system is far more
flexible than C++ or O.P.  Classes defined in compiled code
can also integrate pretty smoothly into Python, having
their own methods etc. that look native.  So if you can't
find a method-name in the Python code, check the delphi.

The document 
<ref> src/quarkx
 is mostly an
account of the delphi-defined classes and methods available
in Python (it's a fine reference manual, but really needs
tutorials & examples to go with it!)

A gotcha:

  if you write something like:

<p><pre>  
    if function():
      blah
      blah
</pre>
      
  expecting blah blah to not execute when function()
  returns None as a value, you'll probably get a bizarre
  run-time error.  Instead right:
   
<p><pre>
    if function() is not None:
      blah
      blah
</pre>
      
  This surely must be a bug, it doesn't have the feel of
  a feature. [Note by Armin: this is because most of the Python objects implemented in Delphi do not explicitely support 'truth' evaluation. I thought the Python core would detect it but it seems it just tries to do the evaluation anyway, thus calling a Nil function. Everything in Python can be true or false, including the Delphi-defined objects -- at least the Python core expects it so, and the Delphi code doesn't do it right :-(  So always explicitely compare with None.]
  
  *Also* don't try to compare Quarkx vectors with equality,
  rather test their difference for being zero.  Armin discusses
  this in the 
<ref> src/quarkx
 document.
