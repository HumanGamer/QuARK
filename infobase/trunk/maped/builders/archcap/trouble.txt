title: Troubleshooting
format: html
author: tigalri

The arch/cap duplicator code is fairly complicated, and
various things can go wrong.  The typical symptom is
that the arch disappears, because something goes wrong with the
code that generates its `images'; (the patches that it's
supposed to produce, in this case).

When this happens, inspect the duplicator
in the tree view and check that the following
things are true:
<UL>
<LI>There is exactly one brush under it (other stuff
can easily find its way in, everything but the first
brush will be ignored and effectively disappeared from
the map).
<LI>That brush has six faces labelled front, back, up, down
left, right.
<LI>These faces are in the expected relationship to each
other (if you're staring at front, `right' is to the right,
etc.).
</UL>
This is all important because the face-names are used
by the code that generates the brushes.

If all this seems OK and it still doesn't work, something
deeper is wrong, post on the quark or quark-python forum.

Two other things that might go wrong are:
<UL>
<LI> texture distortion on the curve, for some (small,
non-rectangular) textures.
<LI> `cracks' between the seams of complex architecture, when
Q3A is run with hi r_subdivisions values.
</UL>
The first is a bug with no real cure, the remedies are to either
use another corner, or check `stretchtex'; and do texture alignments
by hand.

For the second, the problem is that Q3A is tesselating the two
patches to different extends.  Currently, the fix is to dissociate
the images of the duplicators, then use the mesh|double rows/column
RMB commands to increase the number of control points along the
edge, and also Tag Point|Knit edge to tagged to check that
everything is lined up right.  I soon hope to add some more
specifics to the duplicators that will have them generate thicker
meshes, so that dissociation won't be necessary.  Also more options,
so that invisible patches can be excluded from complex
architecture without dissociation.

At present, finding a bad arch could be difficult; there
should eventually be diagnostic functions for these duplicators
and some sort of map-check for them to pick up the bad ones.
