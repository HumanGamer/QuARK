title: What C++ variable-types map onto what Delphi variable-types?
author: DanielPharos

The Delphi help comes to the rescue, but only partially. For instance, find the article called 'Integer Types' (using Delphi 6/7 here, but it should be in every version, with possibly a different name). It gives a list of Delphi integer variable types, with their range, amount of bytes (or bits) and if they are signed or unsigned. For convenience, the results are summarized in the table below.

<table>
<tr><th align=right>C type</th><th></th><th>Delphi type</th></tr>
<tr><td align=right>         int</td><td>==</td><td>Integer</td></tr>
<tr><td align=right>  signed int</td><td>==</td><td>Integer</td></tr>
<tr><td align=right>unsigned int</td><td>==</td><td>Cardinal</td></tr>

<tr><td align=right>         byte</td><td>==</td><td>ShortInt</td></tr>
<tr><td align=right>  signed byte</td><td>==</td><td>ShortInt</td></tr>
<tr><td align=right>unsigned byte</td><td>==</td><td>Byte</td></tr>

<tr><td align=right>         short</td><td>==</td><td>SmallInt</td></tr>
<tr><td align=right>  signed short</td><td>==</td><td>SmallInt</td></tr>
<tr><td align=right>unsigned short</td><td>==</td><td>Word</td></tr>

<tr><td align=right>         long</td><td>==</td><td>LongInt</td></tr>
<tr><td align=right>  signed long</td><td>==</td><td>LongInt</td></tr>
<tr><td align=right>unsigned long</td><td>==</td><td>Longword</td></tr>

<tr><td align=right>         char</td><td>==</td><td>Char</td></tr>
<tr><td align=right>  signed char</td><td>==</td><td>Char</td></tr>
<tr><td align=right>unsigned char</td><td>==</td><td>Byte</td></tr>

<tr><td align=right>?</td><td>==</td><td>int64</td></tr>

<tr><td align=right>void</td><td>==</td><td>? (Byte?)</td></tr>
</table>

Note: Some of these only apply to a Win32 32-bit application: Cardinal might be different in 64-bit Delphi, and the same goes for the C++ Int. However, since QuArK is 32-bit, and most DLL files are too, we don't need to be too concerned, but it is something to keep in mind.

Pointers to variables can simply be translated into a Delphi pointer to a variable of the translated type. For instance, a <b>char*</b> can simply be translated into a <b>PChar</b> (a pointer to a Char). <b>void*</b> is special, and I suggest using <b>PByte</b> for this because it's often a pointer to a buffer of unknown content, so we probably want to read/parse it byte-for-byte. However, Delphi (for historical reasons) uses PChar, so often using that keeps the code cleaner.

Remember that it is important to use the right datatypes, to prevent security issues like integer overflows.
