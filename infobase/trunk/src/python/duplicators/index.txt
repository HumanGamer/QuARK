title: Duplicators

Duplicators are 'abstract' QuArK-only mapobjects that generate ordinary
mapobjects (brushes, entities, patches) from data.  Their original use
was to make copies of things, whence the name; the data consisted of
the brushes and entities to be copied, plus some specifics on the duplicator,
such as how many to make, their offsets, etc.
When did Armin realize that they could do more than make copies?  Probably
from the start, but anyway the patch and brush-curve builders, wall extruder
and even the threepoint plane are duplicators that don't make copies,
but use data of a more abstract nature, such as the box that a curve will
be contained in.

Since the usual purpose of a duplicator is to construct some mapobjects,
its most important method is its buildimages method, which takes some
parameters and produces a list consisting of the mapobjects that will
be produced.  The parameters are 'self', and `singleimage', which is
only relevant when the duplicator is being used to make multiple copies.
It is set to None unless the method is being called to dissociate the images
of the duplicator, in which case the duplicator is called once for each copy
with singleimage set to the series number of the copy, starting with 0.
This can make coding certain kinds of things rather complicated, since
when singleimage is none, buildimages needs to loop, and when it's set to
a number, it doesn't, but the result is that when the images are dissociated,
each copy gets located in its own individual group.  The actual calling
of the buildimages method is done by the Delphi in duplicator.pas, by
methods I don't understand.

The fundamental duplicator classes and methods are defined in
quarkpy.duplicator.py, and are exploited so as to produce most of the
ordinary copying duplicators in plugins.mapdups.py.

