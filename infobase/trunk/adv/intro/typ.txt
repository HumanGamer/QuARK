title: Guide to Typ's
author: Decker

Here is a list of the most common used Typ's in .QRK :form definitions.

<p>Almost all components have some standard specifics you can use:<br>
<u>Hint</u> - displays a help message when the cursor hovers over the item. You
can have spread it on several lines. A valid text can look like this:<br>
<font face="Courier New" size="2">Hint = &quot;Help text&quot;$0D0D&quot;How to
spr&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ead text on several lines.&quot;<br>
</font>The dollar sign is used to enter one ore more special/invisible
characters. In this case two new-line character. It is also valid to cut the
text off and begin a new line if it becomes too long. The above Hint will
display:<br>
<font face="Arial"><font size="1"><br>
</font><font size="2">Help text<br>
<br>
How to spread text on several lines.<br>
</font></font><br>
<u>Txt</u> - defines the lable. Labels are special in QuArK. If you set their
value to &quot;&amp;&quot; they will display the name of the component. So if
you have defined a component like this: <font face="Courier New" size="2">name:
= { Typ=&quot;E&quot; Txt=&quot;&amp;&quot; }</font> you will get 'name' as
caption for this entry field. This is often used for the labels of entity
specifics.<br>
<br>
<u>SelectMe</u> - set this to one and the component will become selected when
its window/dialog is displayed. Should be used on the first component on a
dialog only as it may be confusing to have input directed to a component in the
middle from the beginning.&nbsp;</p>
<p>Note: The first character of Typ works as a flag. If you use a lower-case
character the button/entry field will fill all available space it's caption
(Txt) does not occupy. This<br>
<br>
<u>Entry fields:</u></p>
<table border=1 cellpadding=2 cellspacing=0 width="893">
<tr><th width=119>Typ's</th><th width=165>Description</th><th width=589>Example</th></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>E<br>
E R</b></font>
</td><td valign=top width="165">
<b>Entry field</b>.<br>
This is the default type, if Typ="..." is not given.<br>
Hint: Use &quot;E R&quot; to make it read-only. Use it for simple text entries
or read-only text displays.<br>
<u><i>Specifics:</i><br>
</u>only common specifics (see above)
</td><td width="589">
<pre>
targetname: = { Typ=&quot;E&quot; Txt=&quot;&amp;&quot; }
target: = { Txt=&quot;&amp;&quot; }
readonly: = {
    Typ=&quot;E R&quot;
    Txt=&quot;Output:&quot;
    Hint=&quot;Displays the current memory usage.&quot;
}</pre>
</td></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>EFR<br>
EF[0..0][x]</b></font>
</td><td valign=top width="165">
<b>Entry field containing Float(s)</b>.<br>
Use EFR to display any number and prevent the user from changing it.<br>
EF is special in the way that you can choose how many values you have to enter
and how many digits they should have. To set the number of digits after the
decimal dot add zeros after EF. To make the field accept more than one value add
the number of values at the end.<br>
<u>Important:</u> To have a dialog round values to the desired accuracy you have
to use the LiveEditDlg class. Look at some Python scripts to find out how it
works.<br>
<u><i>Specifics:</i><br>
</u>Min/Max - set minimum or maximum values with this.
</td><td width="589">
<pre>three: = {
    Typ=&quot;EF003&quot; 
    Txt=&quot;The three values:&quot;
    Hint=&quot;You must enter three values here. They have&quot;
         &quot;an accuracy of two digits.&quot;
}
greater_than_zero: = {
    Typ=&quot;EF00&quot; 
    Txt=&quot;Value:&quot;
    Min=&quot;0.01&quot;
    Hint=&quot;Enter positive value here.&quot;
}
</pre>
</td></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>ED[L]<br>
</b></font>
</td><td valign=top width="165">
<b>Entry field containing Directory-path (with browse button)</b>.<br>
The last "L" (at third position) means only the last foldername of the path is to be
used.<br>
<u><i>Specifics:</i><br>
</u>CheckFile - set this and the dialog will only enable the Ok button if it
finds this file in the chosen directory.
</td><td width="589">
<pre>
SourceDir: = {
    Typ=&quot;ED&quot;
    Hint=&quot;Full directory-path&quot;
    CheckFile=&quot;Game.exe&quot;
}
GameMod: = { Typ=&quot;EDL&quot; Hint=&quot;Modification folder&quot; }
</pre>
</td></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>
ET<br>
</b></font>
</td><td valign=top width="165">
<b>Entry field containing Texture-name (with browse button)</b>.<br>
Opens the texture-browser, if the browse button is pressed.<br>
<u><i>Specifics:</i><br>
</u>GameCfg - set one of the short game names here to make QuArK switch to this
game when the browse button is pressed. You can find these names in the
Defaults.qrk
</td><td width="589">
<pre>
Texture: = { Typ=&quot;ET&quot; Hint=&quot;Choose texture&quot; }
QuakeTexture: = {
    Typ=&quot;ET&quot;
    Hint=&quot;Choose a Quake texture&quot;
    GameCfg=&quot;Quake 1&quot;
}
</pre>
</td></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>
EP<br>
</b></font>
</td><td valign=top width="165">
<b>Entry field containing Path and File-name (with browse button)</b>.<br>
Opens a file-dialog, so the user can choose a filename.<br>
<u>
<i>Specifics:<br>
</i>
</u>Txt - In this case it will serve as caption for the file browser.<u>
<i><br>
</i>
</u>DefExt - if you set one or more default extensions here only files of these types
will be shown. Set it to
&quot;*&quot; if file type does not matter.<br>
BasePath - the browser will start at the location you set here. Use $Game as
placeholder for the game directory.<br>
CutPath - This specific has two tasks: Go sure a selected file is in the right
directory and cut off unnessecary parts. Again you can use $Game and also
questionmarks ? for any directory.<br>
DirSep - Many games don't use the Windows directory separator '\'. Instead they
use '/'. Set DirSep to &quot;/&quot; and the returned filename will have all its
&quot;\&quot; replaced by &quot;/&quot;.<br>
AugPath - After processing all the stuff above you might need to add something
infront of the filename.
</td><td width="589">
<pre>QBSP1: = { Typ=&quot;EP&quot; Txt=&quot;Path to QBSP&quot; DefExt=&quot;exe&quot; }
LIGHT1: = { Typ=&quot;EP&quot; Txt=&quot;Path to QRAD3&quot; DefExt=&quot;exe&quot; }
soundfile: = {
    Typ=&quot;EP&quot;
    Txt=&quot;Select a file&quot;
    DefExt=&quot;WAV&quot;
    BasePath=&quot;$Game\basedata\sound&quot;
    CutPath=&quot;$Game\?\sound&quot;
    AugPath=&quot;sound&quot;
}</pre>
</td></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>
EQ<br>
</b></font>
</td><td valign=top width="165">
<b>Entry field with direction button</b>.<br>
Displays entry field for two floating point entries and 
4-way directional button as pressed gives floating point entries.<br>
</td><td width="589">
<pre>

<img align=left>EQ_btn.png



offset: = { Txt = &quot;Offset&quot; Typ=&quot;EQ&quot; Hint=&quot;x, y offsets&quot; }

</pre>
</td></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>
EU<br>
</b></font>
</td><td valign=top width="165">
<b>Entry field with increase/decrease button</b>.<br>
Displays entry field for single digit entry and 
increase/decrease button as pressed gives single digit entry.<br>
</td><td width="589">
<pre>

<img align=left>EU_btn.png



tilt: = { Txt = &quot;Tilt&quot; Typ=&quot;EU&quot; Hint=&quot;`tilt' angle, in degrees.&quot; }

</pre>
</td></tr>

<!--
<tr><td align=center>
</td><td valign=top>
</td><td>
<pre>
</pre>
</td></tr>
-->

<tr><td align=center width="119">
<b>K</b>
</td><td valign=top width="165">
<b>Key entry field<br>
</b>Use this if you want to define keyboard shortcuts or otherwise need info in
form of a key.
</td><td width="589">
<pre>KeyLeft: = {10Typ=&quot;K&quot; Txt=&quot; turn left&quot;}</pre>
</td></tr>

</table>

<p><u>Choices:</u></p>
<table border=1 cellpadding=2 cellspacing=0 width="893">

<tr><td align=center width="119">
<font face="Courier New"><b>
X[value]</b></font>
</td><td valign=top width="346">
<b>Checkbox</b>, which sets the bits according to &lt;value&gt;.<br>
The same specificname may appear, with different &lt;values&gt;, so each bit in the specific can be controlled individually.<br>
Usually used together with a Cap="...", to tell what the bit controls.<br>
<i><u>Specifics:<br>
</u></i>Cap - Like Txt, but to the right of the checkbox. Clicking on the text
will toggle the option.
</td><td width="408">
<pre>
spawnflags: = { Typ=&quot;X1&quot; Cap=&quot;Ambush&quot; Txt=&quot;&amp;&quot; }
spawnflags: = { Typ=&quot;X2&quot; Cap=&quot;On Trigger&quot; Txt=&quot;&amp;&quot; }
spawnflags: = { Typ=&quot;X128&quot; Cap=&quot;X Axis&quot; Txt=&quot;&amp;&quot; }
option: = { Typ=&quot;X&quot; Cap=&quot;on/off&quot; Txt=&quot;An option:&quot; }</pre>
</td></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>
C[L]</b></font>
</td><td valign=top width="346">
<b>Combo box</b>.<br>
A combo box consists of to parts: An entry field for text and a drop-down list.<br>
&quot;C&quot; will create a combo box with the above pattern. You can set <i>items</i>
to give the user some options to choose from rather than typing in his own.<br>
&quot;CL&quot; will create a list only without an entry field. You have to set <i>items</i>
here and you should also use <i>values.</i><br>
<i><u>Specifics:<br>
</u></i>items - The list will be filled with these items. Separate them with a
new line character ($0D).<br>
values - In many cases a program can not work with the displayed items. To have
a more 'computer friendly' version you can set this specific. This list must be
as long as the items list. Most used are numbers or names of variables.
</td><td width="408">
<pre>
mylist: = { Typ=&quot;C&quot; Txt=&quot;&amp;&quot;
  items =
      &quot;Choice 1&quot; $0D
      &quot;Choice 2&quot; $0D
      &quot;Choice 3&quot;
  values =
      &quot;1&quot; $0D
      &quot;2&quot; $0D
      &quot;3&quot;
}
</pre>
</td></tr>

</table>

<p><u>Buttons &amp; misc.:</u></p>
<table border=1 cellpadding=2 cellspacing=0 width="893">
<tr>
  <td align=center width="119">
<font face="Courier New"><b>
B</b></font>
</td><td valign=top width="346">
<b>Pushbutton</b>.<br>
Usually used to activate a second spec/arg view (a :form), which contains other spec/args thats more specialized for some purpose.<i><u><br>
Specifics:
</u></i><br>
Cap - controls the text in the pushbutton.
</td><td width="408">
<pre>
more: = { Typ=&quot;B&quot; Txt=&quot;Specialize&quot;
  Cap = &quot;Push...&quot;
  Form = &quot;specialize_this:form&quot;
}
</pre>
</td>
</tr>
<tr>
  <td align=center width="119">
<font face="Courier New"><b>L[ 4]<br>
LN[4]<br>
LP</b></font>
</td><td valign=top width="346">
<b>Color-picker pushbutton</b>.<br>
A pushbutton which shows the choosen color, and when activated, will bring up a color dialog.<br>
If only Typ="L" is given, the resulting RGB values, will be in range 0 - 255.<br>
If Typ="LN" is given, the RGB values will be normalized to range 0.0 - 1.0.<br>
If Typ=&quot;LP&quot; is given, you will only be able to pick from the game's
palette (i.e. Quake palette)<br>
If the additional 4&nbsp; is given, there will be created a fourth value, which controls the brightness of the light. This however, must be changed using a second spec/arg pair, with Typ="E".
</td><td width="408">
<pre>
_color: = { Typ=&quot;L&quot; Txt=&quot;&amp;&quot; }
_light: = { Typ=&quot;LN&quot; Txt=&quot;&amp;&quot; }
light: = { Typ=&quot;L 4&quot; Txt=&quot;&amp;&quot; }
_lightbright: = { Typ=&quot;LN4&quot; Txt=&quot;&amp;&quot; }

//To view the exact values, create a
//second spec/arg pair
color: = { Txt=&quot;&amp;&quot; Typ=&quot;L&quot; } //Pushbutton
color: = { Txt=&quot;&amp;&quot; } //Entryfield
</pre>
</td>
</tr>
<tr>
  <td align=center width="119">
<b>M</b>
</td><td valign=top width="346">
<b>Message button<br>
</b><u><i>Specifics:</i></u><b><br>
</b>Msg - message to send&nbsp;<br>
Cap - caption of the button/menu<br>
Icon - hex raw-data of an 16*16 pixel 16 colors icon (same as for Typ
&quot;I&quot;)
</td><td width="408">
<pre>extedit:tbbtn = {
  Typ = &quot;M&quot;
  Hint = &quot;call external editor&quot;
  Msg = &quot;EXTE&quot;
  Icon = $6677777777777776600000000000007660FFFFFFFFFFF07660FFFFFFFFFFF07660F7
         $F33FFFFFF07660FFF3333FF7F07660F7F333118FF07660FFFF331118807660FFFF91
         $1111807760FF7FF91111107760FFFFFF9111117660FF877FF911111660FFFFFFFF91
         $111160F777787F79111660FFFFFFFF7F911660FFFFFFFF7069666000000000066666
}</pre>
</td>
</tr>
<tr>
  <td align=center width="119">
<b>P</b>
</td><td valign=top width="346">
<b>Phyton macro button</b><br>
generates a button to fire a python-macro<br>
<u><i>Specifics:</i></u><b><br>
</b>  Cap=button caption<br>
  Macro=macro to be fired
</td><td width="408">
<pre>centering: = {
  Txt= &quot;&amp;&quot;
  Typ=&quot;P&quot;
  Macro=&quot;usercenter&quot;
  Cap=&quot;push&quot;
  Hint=&quot;Push to add a user center&quot;
}</pre>
</td>
</tr>
<tr>
  <td align=center width="119">
<b>PM</b>
</td><td valign=top width="346">
<b>Button array</b><br>
  same as above, for multiple buttons. Each button gets one character out of Cap
as it's caption. While all buttons will fire the same script they will also send
their index so the script can identify the exact button.<br>
<u><i>Specifics:</i></u><b><br>
</b>Macro - macro to be fired<br>
Count - number of buttons<br>
Caps - enter on character for each button here<br>
Hint1 - What button 1 does<br>
Hint2 - What button 2 does etc...
</td><td width="408">
<pre>buttons: = {
  Typ = &quot;PM&quot;
  Num = &quot;2&quot;
  Macro = &quot;fixview&quot;
  Caps = &quot;IF&quot;
  Txt = &quot;Actions:&quot;
  Hint1 = &quot;Inspect the chosen one&quot;
  Hint2 = &quot;Fix the chosen one&quot;
}</pre>
</td>
</tr>
<tr>
  <td align=center width="119">
<b>F</b>
</td><td valign=top width="346">
<b>Font dialog button with preview<br>
</b>
<i><u>Specifics:
</u></i><br>
Cap - button caption (will be displayed with the selected font)
</td><td width="408">
<pre>Font: = { Typ=&quot;F&quot; Txt=&quot;Plain text&quot; Cap=&quot;Plain text sample&quot;}</pre>
</td>
</tr>

<tr><td align=center width="119">
<b>I</b>
</td><td valign=top width="346">
<b>Icon display<br>
</b>Displays an icon.<b><br>
</b>
<i><u>Specifics:
</u></i><br>
Icon - 16x16 pixel icon. As in the example each character represents the hex.
code of a pixel (16 colors). This is raw data, don't include any file header!
</td><td width="408">
<pre>planes: = {
  Txt = &quot;Brush icon&quot;
  Typ = "I"
  Icon = $66000000000000066687777777775506668FFFFFFFFFF506668FF557FFFFF706
         $668FFF55577FF706668FFFF500F77706668FFFFF00FFF706668FF002200FF706
         $668F5990AA00F706668F5F90AA000706668FF55AAA200506668FFF2BAA270006
         $6685FF222227000666855FFFFFF7860066888888888866056666666666666666
}</pre>
</td></tr>

<tr><td align=center width="119">
<font face="Courier New"><b>
S</b></font>
</td><td valign=top width="346">
<b>Seperator</b>.
</td><td width="408">
<pre>
sep: = { Typ=&quot;S&quot; }
</pre>
</td></tr>

</table>
