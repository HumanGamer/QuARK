<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0048)http://tfc.duke.free.fr/coding/md2-specs-en.html -->
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>MD2 file format specifications (Quake 2's models)</TITLE>
<META http-equiv=Content-type content="text/html; charset=UTF-8">
<META http-equiv=Content-style-type content=text/css>
<META http-equiv=Content-language content=en>
<META content="David Henry" name=author>
<META content="OpenGL, MD2, MD2 format, Quake II, Specifications" name=keywords>
<META 
content="MD2 file format specifications (Quake 2's models) -&#10;    reading, rendering and animating" 
name=description>
<STYLE type=text/css>BODY {
	MARGIN-LEFT: 10%; MARGIN-RIGHT: 10%; FONT-FAMILY: sans-serif
}
H1 {
	MARGIN-BOTTOM: 0em; TEXT-ALIGN: center
}
P#headline {
	MARGIN-BOTTOM: 2em; TEXT-ALIGN: center
}
P {
	TEXT-ALIGN: justify
}
LI {
	PADDING-RIGHT: 2em
}
PRE {
	MARGIN-LEFT: 2em; MARGIN-RIGHT: 2em
}
</STYLE>
<!-- Last modifications : thursday, 15th december of 2005 -->
<META content="MSHTML 6.00.2900.2802" name=GENERATOR></HEAD>
<BODY>
<H1>MD2 file format<BR>(Quake 2's models)</H1>
<P id=headline>Written by David Henry, 19<SUP>th</SUP> December of 2004</P>
<H2>Introduction</H2>
<P>The MD2 model file format was introduced by <EM>id Software</EM> when 
releasing Quake 2 in November 1997. It's a file format quite simple to use and 
understand. MD2 models' characteristics are these:</P>
<UL>
  <LI>Model's geometric data (triangles); 
  <LI>Frame-by-frame animations; 
  <LI>Structured data for drawing the model using <CODE>GL_TRIANGLE_FAN</CODE> 
  and <CODE>GL_TRIANGLE_STRIP</CODE> primitives (called “OpenGL commands”). 
</LI></UL>
<P>Model's texture is in a separate file. One MD2 model can have only one 
texture at the same time.</P>
<P>MD2 model file's extension is “md2”. A MD2 file is a binary file divided in 
two part: the header dans the data. The header contains all information needed 
to use and manipulate the data.</P>
<DIV 
style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; PADDING-BOTTOM: 0.5em; MARGIN-LEFT: auto; BORDER-LEFT: black 1px solid; WIDTH: 10em; MARGIN-RIGHT: auto; PADDING-TOP: 0.5em; BORDER-BOTTOM: black 1px solid; TEXT-ALIGN: center">Header 
</DIV>
<DIV 
style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px; PADDING-BOTTOM: 3em; MARGIN-LEFT: auto; BORDER-LEFT: black 1px solid; WIDTH: 10em; MARGIN-RIGHT: auto; PADDING-TOP: 3em; BORDER-BOTTOM: black 1px solid; TEXT-ALIGN: center">Data 
</DIV>
<P>Variable types used in this document have those sizes:</P>
<UL>
  <LI><STRONG>char</STRONG>: 1 byte 
  <LI><STRONG>short</STRONG>: 2 bytes 
  <LI><STRONG>int</STRONG>: 4 bytes 
  <LI><STRONG>float</STRONG>: 4 bytes </LI></UL>
<H2>The header</H2>
<P>The header is a structure which comes at the beginning of the file:</P><PRE>/* md2 header */
typedef struct
{
  int ident;          /* magic number: "IDP2" */
  int version;        /* version: must be 8 */

  int skinwidth;      /* texture width */
  int skinheight;     /* texture height */

  int framesize;      /* size in bytes of a frame */

  int num_skins;      /* number of skins */
  int num_vertices;   /* number of vertices per frame */
  int num_st;         /* number of texture coordinates */
  int num_tris;       /* number of triangles */
  int num_glcmds;     /* number of opengl commands */
  int num_frames;     /* number of frames */

  int offset_skins;   /* offset skin data */
  int offset_st;      /* offset texture coordinate data */
  int offset_tris;    /* offset triangle data */
  int offset_frames;  /* offset frame data */
  int offset_glcmds;  /* offset OpenGL command data */
  int offset_end;     /* offset end of file */

} md2_header_t;</PRE>
<P><CODE>ident</CODE> is the magic number of the file. It is used to identify 
the file type. <CODE>ident</CODE> must be equal to 844121161 or to the string 
“IDP2”. We can obtain this number with the expression <CODE>(('2'&lt;&lt;24) + 
('P'&lt;&lt;16) + ('D'&lt;&lt;8) + 'I')</CODE>.</P>
<P><CODE>version</CODE> is the version number of the file format and must be 
equal to 8.</P>
<P><CODE>skinwidth</CODE> and <CODE>skinheight</CODE> are respectively the 
texture width and the texture height of the model.</P>
<P><CODE>framesize</CODE> is the size in bytes of a frame and all its data.</P>
<P><CODE>num_skins</CODE> is the number of associated textures to the 
model.<BR><CODE>num_vertices</CODE> is the number of vertices for one 
frame.<BR><CODE>num_st</CODE> is the number of texture 
coordinates.<BR><CODE>num_tris</CODE> is the number of 
triangles.<BR><CODE>num_glcmds</CODE> is the number of OpenGL 
commands.<BR><CODE>num_frames</CODE> is the number of frame the model has.</P>
<P><CODE>offset_skins</CODE> indicates the position in bytes from the beginning 
of the file to the texture data.<BR><CODE>offset_st</CODE> indicates the 
position of texture coordinate data.<BR><CODE>offset_tris</CODE> indicates the 
position of triangle data.<BR><CODE>offset_frames</CODE> indicates the position 
of frame data.<BR><CODE>offset_glcmds</CODE> indicates the position of OpenGL 
commands.<BR><CODE>offset_end</CODE> indicates the position of the end of the 
file.</P>
<H2>Data types</H2>
<H3>Vector</H3>
<P>The vector, composed of three floating coordinates (x, y, z):</P><PRE>/* vector */
typedef float vec3_t[3];</PRE>
<H3>Texture information</H3>
<P>Texture informations are the list of texture names associated to the 
model:</P><PRE>/* texture name */
typedef struct
{
  char name[64];   /* texture file name */

} md2_skin_t;</PRE>
<H3>Texture coordinates</H3>
<P>Texture coordinates are stored in a structure as <EM>short</EM> integers. To 
get the true texture coordinates, you have to divide <CODE>s</CODE> by 
<CODE>skinwidth</CODE> and <CODE>t</CODE> by <CODE>skinheight</CODE>:</P><PRE>/* texture coords */
typedef struct
{
  short s;
  short t;

} md2_texCoord_t;</PRE>
<H3>Triangles</H3>
<P>Each triangle has an array of vertex indices and an array of texture 
coordinate indices.</P><PRE>/* triangle data */
typedef struct
{
  unsigned short vertex[3];   /* vertex indices of the triangle */
  unsigned short st[3];       /* tex. coord. indices */

} md2_triangle_t;</PRE>
<H3>Vertices</H3>
<P>Vertices are composed of “compressed” 3D coordinates, which are stored in one 
byte for each coordinate, and of a normal vector index. The normal vector array 
is stored in the <A 
href="http://tfc.duke.free.fr/coding/src/anorms.h">anorms.h</A> file of Quake 2 
and hold 162 vectors in floating point (3 <EM>float</EM>).</P><PRE>/* vertex data */
typedef struct
{
  unsigned char v[3];         /* position */
  unsigned char normalIndex;  /* normal vector index */

} md2_vertex_t;</PRE>
<H3>Frames</H3>
<P>Frames have specific informations for itself and the vertex list of the 
frame. Informations are used to uncompress vertices and obtain the real 
coordinates.</P><PRE>/* frame data */
typedef struct
{
  vec3_t          scale;      /* scale factor */
  vec3_t          translate;  /* translation vector */
  char            name[16];   /* frame name */
  md2_vertex_t    *verts;     /* list of frame's vertices */

} md2_frame_t;</PRE>
<P>To uncompress vertex coordinates, you need to multiply each component by the 
scale factor and then add the respective translation component:</P><PRE>vec3_t v;           /* real vertex coords. */
md2_vertex_t vtx;   /* compressed vertex */
md2_frame_t frame;  /* a model frame */

v[i] = (vtx.v[i] * frame.scale[i]) + frame.translate[i];</PRE>
<H3>OpenGL Commands</H3>
<P>OpenGL commands are stored in an array of integer (<EM>int</EM>). They are 
discussed at the end of this document.</P>
<H2>Reading a MD2 file</H2>
<P>Assuming that <CODE>md2_model_t</CODE> is a structure holding all your 
model's data and <CODE>*mdl</CODE> a pointer on a <CODE>md2_model_t</CODE> 
object, this code show how to load a MD2 model file:</P><PRE>int
ReadMD2Model (const char *filename, md2_model_t *mdl)
{
  FILE *fp;
  int i;

  fp = fopen (filename, "rb");
  if (!fp)
    {
      fprintf (stderr, "error: couldn't open \"%s\"!", filename);
      return 0;
    }

  /* read header */
  fread (&amp;mdl-&gt;header, 1, sizeof (md2_header_t), fp);

  if ((mdl-&gt;header.ident != 844121161) ||
      (mdl-&gt;header.version != 8))
    {
      /* error! */
      fprintf (stderr, "error: bad version!");
      fclose (fp);
      return 0;
    }

  /* memory allocation */
  mdl-&gt;skins = (md2_skin_t *)malloc (sizeof (md2_skin_t) * mdl-&gt;header.num_skins);
  mdl-&gt;texcoords = (md2_texCoord_t *)malloc (sizeof (md2_texCoord_t) * mdl-&gt;header.num_st);
  mdl-&gt;triangles = (md2_triangle_t *)malloc (sizeof (md2_triangle_t) * mdl-&gt;header.num_tris);
  mdl-&gt;frames = (md2_frame_t *)malloc (sizeof(md2_frame_t) * mdl-&gt;header.num_frames);
  mdl-&gt;glcmds = (int *)malloc (sizeof (int) * mdl-&gt;header.num_glcmds);

  /* read model data */
  fseek (fp, mdl-&gt;header.offset_skins, SEEK_SET);
  fread (mdl-&gt;skins, sizeof (md2_skin_t), mdl-&gt;header.num_skins, fp);

  fseek (fp, mdl-&gt;header.offset_st, SEEK_SET);
  fread (mdl-&gt;texcoords, sizeof (md2_texCoord_t), mdl-&gt;header.num_st, fp);

  fseek (fp, mdl-&gt;header.offset_tris, SEEK_SET);
  fread (mdl-&gt;triangles, sizeof (md2_triangle_t), mdl-&gt;header.num_tris, fp);

  fseek (fp, mdl-&gt;header.offset_glcmds, SEEK_SET);
  fread (mdl-&gt;glcmds, sizeof (int), mdl-&gt;header.num_glcmds, fp);

  /* read frames */
  fseek (fp, mdl-&gt;header.offset_frames, SEEK_SET);
  for (i = 0; i &lt; mdl-&gt;header.num_frames; ++i)
    {
      /* memory allocation for vertices of this frame */
      mdl-&gt;frames[i].verts = (md2_vertex_t *)
	malloc (sizeof (md2_vertex_t) * mdl-&gt;header.num_vertices);

      /* read frame data */
      fread (mdl-&gt;frames[i].scale, sizeof (vec3_t), 1, fp);
      fread (mdl-&gt;frames[i].translate, sizeof (vec3_t), 1, fp);
      fread (mdl-&gt;frames[i].name, sizeof (char), 16, fp);
      fread (mdl-&gt;frames[i].verts, sizeof (md2_vertex_t), mdl-&gt;header.num_vertices, fp);
    }

  fclose (fp);
  return 1;
}</PRE>
<H2>Rendering the model</H2>
<P>Here is an exemple of how to draw a frame <CODE>n</CODE> of a model 
<CODE>mdl</CODE>:</P><PRE>void
RenderFrame (int n, md2_model_t *mdl)
{
  int i, j;
  GLfloat s, t;
  vec3_t v;
  md2_frame_t *pframe;
  md2_vertex_t *pvert;

  /* check if n is in a valid range */
  if ((n &lt; 0) || (n &gt; mdl-&gt;header.num_frames - 1))
    return;

  /* enable model's texture */
  glBindTexture (GL_TEXTURE_2D, mdl-&gt;tex_id);

  /* draw the model */
  glBegin (GL_TRIANGLES);
    /* draw each triangle */
    for (i = 0; i &lt; mdl-&gt;header.num_tris; ++i)
      {
        /* draw each vertex */
        for (j = 0; j &lt; 3; ++j)
          {
            pframe = &amp;mdl-&gt;frames[n];
            pvert = &amp;pframe-&gt;verts[mdl-&gt;triangles[i].vertex[j]];

            /* compute texture coordinates */
            s = (GLfloat)mdl-&gt;texcoords[mdl-&gt;triangles[i].st[j]].s / mdl-&gt;header.skinwidth;
            t = (GLfloat)mdl-&gt;texcoords[mdl-&gt;triangles[i].st[j]].t / mdl-&gt;header.skinheight;

            /* pass texture coordinates to OpenGL */
            glTexCoord2f (s, t);

            /* normal vector */
            glNormal3fv (anorms_table[pvert-&gt;normalIndex]);

            /* calculate vertex real position */
            v[0] = (pframe-&gt;scale[0] * pvert-&gt;v[0]) + pframe-&gt;translate[0];
            v[1] = (pframe-&gt;scale[1] * pvert-&gt;v[1]) + pframe-&gt;translate[1];
            v[2] = (pframe-&gt;scale[2] * pvert-&gt;v[2]) + pframe-&gt;translate[2];

            glVertex3fv (v);
          }
      }
  glEnd ();
}</PRE>
<H2>Animation</H2>
<P>MD2 models are frame-by-frame animated. A frame is a screenshot of an 
animation. To avoid jerked and ugly animations, we use linear interpolation 
between vertex coordinates of two consecutive frames (the current frame we are 
drawing and the next frame). We do the same for the normal vector:</P><PRE>md2_frame_t *pframe1, *pframe2;
md2_vertex_t *pvert1, *pvert2;
vec3_t v_curr, v_next, v;

for (/* ... */)
  {
    pframe1 = &amp;mdl-&gt;frames[current];
    pframe2 = &amp;mdl-&gt;frames[current + 1];
    pvert1 = &amp;pframe1-&gt;verts[mdl-&gt;triangles[i].vertex[j]];
    pvert2 = &amp;pframe2-&gt;verts[mdl-&gt;triangles[i].vertex[j]];

    /* ... */

    v_curr[0] = (pframe1-&gt;scale[0] * pvert1-&gt;v[0]) + pframe1-&gt;translate[0];
    v_curr[1] = (pframe1-&gt;scale[1] * pvert1-&gt;v[1]) + pframe1-&gt;translate[1];
    v_curr[2] = (pframe1-&gt;scale[2] * pvert1-&gt;v[2]) + pframe1-&gt;translate[2];

    v_next[0] = (pframe2-&gt;scale[0] * pvert2-&gt;v[0]) + pframe2-&gt;translate[0];
    v_next[1] = (pframe2-&gt;scale[1] * pvert2-&gt;v[1]) + pframe2-&gt;translate[1];
    v_next[2] = (pframe2-&gt;scale[2] * pvert2-&gt;v[2]) + pframe2-&gt;translate[2];

    v[0] = v_curr[0] + interp * (v_next[0] - v_curr[0]);
    v[1] = v_curr[1] + interp * (v_next[1] - v_curr[1]);
    v[2] = v_curr[2] + interp * (v_next[2] - v_curr[2]);

    /* ... */
  }</PRE>
<P><CODE>v</CODE> is the final vertex to draw. <CODE>interp</CODE> is the 
interpolation percent between the two frames. It's a <EM>float</EM> which ranges 
from 0.0 to 1.0. When it is equal to 1.0, <CODE>current</CODE> is incremented by 
1 and <CODE>interp</CODE> is reinitialized at 0.0. It is useless to interpolate 
texture coordinates because they are the same for all the model frames. It is 
preferable that <CODE>interp</CODE> is related to the program's number of 
rendering frame per second (fps).</P><PRE>void
Animate (int start, int end, int *frame, float *interp)
{
  if ((*frame &lt; start) || (*frame &gt; end))
    *frame = start;

  if (*interp &gt;= 1.0f)
    {
      /* move to next frame */
      *interp = 0.0f;
      (*frame)++;

      if (*frame &gt;= end)
	*frame = start;
    }
}</PRE>
<H2>Using OpenGL commands</H2>
<P>OpenGL commands are structured data for drawing the model using only 
<CODE>GL_TRIANGLE_FAN</CODE> and <CODE>GL_TRIANGLE_STRIP</CODE> primitives. It's 
an array of integers (<EM>int</EM>) which can be read in packets:</P>
<UL>
  <LI>The first integer is the number of vertices to draw for a new primitive. 
  If it's a positive value, the primitive is <CODE>GL_TRIANGLE_STRIP</CODE>, 
  otherwise it's a <CODE>GL_TRIANGLE_FAN</CODE>. 
  <LI>The next integers can be taken by packet of 3 for as many vertices as 
  there is to draw. The two first are the texture coordinates in floating point 
  and the third is the vertex index to draw. 
  <LI>When the number of vertices to draw is 0, then we have finished rendering 
  the model. </LI></UL>
<P>We can create a structure for those data packets:</P><PRE>typedef struct
{
  float   s;          /* s texture coord. */
  float   t;          /* t texture coord. */
  int     index;      /* vertex index */

} md2_glcmd_t;</PRE>
<P>Using this rendering algorithm implies a better frame rate than the classical 
method because we don't use <CODE>GL_TRIANGLES</CODE> primitives but 
<CODE>GL_TRIANGLE_FAN</CODE> and <CODE>GL_TRIANGLE_STRIP</CODE> primitives 
(which use less GPU time) and texture coordinates are no longer calculated (no 
need do divide by skinwidth and skinheight). Here is an exemple of how to use 
them:</P><PRE>void
RenderFrameWithGLCmds (int n, md2_model_t *mdl)
{
  int i, *pglcmds;
  vec3_t v;
  md2_frame_t *pframe;
  md2_vertex_t *pvert;
  md2_glcmd_t *packet;

  /* check if n is in a valid range */
  if ((n &lt; 0) || (n &gt; mdl-&gt;header.num_frames - 1))
    return;

  /* enable model's texture */
  glBindTexture (GL_TEXTURE_2D, mdl-&gt;tex_id);

  /* pglcmds points at the start of the command list */
  pglcmds = mdl-&gt;glcmds;

  /* draw the model */
  while ((i = *(pglcmds++)) != 0)
    {
      if (i &lt; 0)
        {
          glBegin (GL_TRIANGLE_FAN);
          i = -i;
        }
      else
        {
          glBegin (GL_TRIANGLE_STRIP);
        }

      /* draw each vertex of this group */
      for (/* nothing */; i &gt; 0; --i, pglcmds += 3)
        {
          packet = (md2_glcmd_t *)pglcmds;
          pframe = &amp;mdl-&gt;frames[n];
          pvert = &amp;pframe-&gt;verts[packet-&gt;index];

          /* pass texture coordinates to OpenGL */
          glTexCoord2f (packet-&gt;s, packet-&gt;t);

          /* normal vector */
          glNormal3fv (anorms_table[pvert-&gt;normalIndex]);

          /* calculate vertex real position */
          v[0] = (pframe-&gt;scale[0] * pvert-&gt;v[0]) + pframe-&gt;translate[0];
          v[1] = (pframe-&gt;scale[1] * pvert-&gt;v[1]) + pframe-&gt;translate[1];
          v[2] = (pframe-&gt;scale[2] * pvert-&gt;v[2]) + pframe-&gt;translate[2];

          glVertex3fv (v);
        }

      glEnd ();
    }
}</PRE>
<H2>Constants</H2>
<P>Here are some constant values defining maximal dimensions:</P>
<UL>
  <LI>Maximum number of triangles: 4096 
  <LI>Maximum number of vertices: 2048 
  <LI>Maximum number of texture coordinates: 2048 
  <LI>Maximum number of frames: 512 
  <LI>Maximum number of skins: 32 
  <LI>Number of precalculated normal vectors: 162 </LI></UL>
<P 
style="BORDER-RIGHT: black 1px solid; PADDING-RIGHT: 0.5em; BORDER-TOP: black 1px solid; PADDING-LEFT: 0.5em; PADDING-BOTTOM: 0.5em; BORDER-LEFT: black 1px solid; PADDING-TOP: 0.5em; BORDER-BOTTOM: black 1px solid; BACKGROUND-COLOR: #dedede"><STRONG>Sample 
code:</STRONG> <A href="http://tfc.duke.free.fr/coding/src/md2.c">md2.c</A> 
(14.3 KB), <A href="http://tfc.duke.free.fr/coding/src/anorms.h">anorms.h</A> 
(6.7 KB). No texture mapping.</P>
<P 
style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; MARGIN-TOP: 2em; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid; TEXT-ALIGN: center">This 
document is available under the terms of the <A 
href="http://www.gnu.org/copyleft/fdl.html">GNU Free Documentation License</A> 
(GFDL)<BR>© David Henry – contact : tfc_duke (AT) club-internet (DOT) 
fr</P></BODY></HTML>
